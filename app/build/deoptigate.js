;(function (f) {
  if (typeof exports === 'object' && typeof module !== 'undefined') {
    module.exports = f()
  } else if (typeof define === 'function' && define.amd) {
    define([], f)
  } else {
    var g
    if (typeof window !== 'undefined') {
      g = window
    } else if (typeof global !== 'undefined') {
      g = global
    } else if (typeof self !== 'undefined') {
      g = self
    } else {
      g = this
    }
    g.deoptigateRender = f()
  }
})(function () {
  var define, module, exports
  return (function () {
    function r(e, n, t) {
      function o(i, f) {
        if (!n[i]) {
          if (!e[i]) {
            var c = 'function' == typeof require && require
            if (!f && c) return c(i, !0)
            if (u) return u(i, !0)
            var a = new Error("Cannot find module '" + i + "'")
            throw ((a.code = 'MODULE_NOT_FOUND'), a)
          }
          var p = (n[i] = { exports: {} })
          e[i][0].call(
            p.exports,
            function (r) {
              var n = e[i][1][r]
              return o(n || r)
            },
            p,
            p.exports,
            r,
            e,
            n,
            t
          )
        }
        return n[i].exports
      }
      for (
        var u = 'function' == typeof require && require, i = 0;
        i < t.length;
        i++
      )
        o(t[i])
      return o
    }
    return r
  })()(
    {
      1: [
        function (require, module, exports) {
          'use strict'

          const React = require('react')
          const { Component } = React
          const ReactDOM = require('react-dom')
          const assert = require('assert')
          const scrollIntoView = require('scroll-into-view-if-needed')
          const { highlight } = require('peacock')

          const Theme = require('../theme.browser')
          const MarkerResolver = require('../../lib/rendering/marker-resolver')

          const markOnly = require('../../lib/rendering/mark-only')

          const MAX_HIGHLIGHT_LEN = 1e5

          class CodeView extends Component {
            constructor(props) {
              super()

              const { onmarkerClicked } = props
              assert.equal(
                typeof onmarkerClicked,
                'function',
                'need to pass onmarkerClicked function'
              )
              this._bind()
            }

            _bind() {
              this._onmarkerClicked = this._onmarkerClicked.bind(this)
            }

            _maybeScrollIntoView() {
              const { selectedLocation } = this.props
              if (selectedLocation == null) {
                return
              }
              const code = document.getElementById(
                `code-location-${selectedLocation}`
              )
              if (code == null) {
                return
              }
              scrollIntoView(code, {
                behavior: 'smooth',
                scrollMode: 'if-needed',
              })
            }

            componentDidMount() {
              const rootEl = ReactDOM.findDOMNode(this)
              rootEl.addEventListener('click', (event) => {
                const tgt = event.target
                const { markerid, markertype } = tgt.dataset
                if (markerid == null) {
                  return
                }
                event.preventDefault()
                event.stopPropagation()
                this._onmarkerClicked(parseInt(markerid), markertype)
              })
              this._maybeScrollIntoView()
            }

            componentDidUpdate() {
              this._maybeScrollIntoView()
            }

            shouldComponentUpdate(nextProps) {
              const props = this.props
              return (
                props.code !== nextProps.code ||
                props.selectedLocation !== nextProps.selectedLocation ||
                props.includeAllSeverities !== nextProps.includeAllSeverities ||
                props.highlightCode !== nextProps.highlightCode
              )
            }

            render() {
              const {
                className = '',
                ics,
                deopts,
                codes,
                icLocations,
                deoptLocations,
                codeLocations,
                selectedLocation,
                includeAllSeverities,
              } = this.props

              const markerResolver = new MarkerResolver({
                deopts,
                deoptLocations,
                ics,
                icLocations,
                codes,
                codeLocations,
                selectedLocation,
                includeAllSeverities,
              })

              const theme = new Theme(markerResolver).theme
              const highlightedCode = this._tryHighlightCode(
                theme,
                markerResolver
              )
              return React.createElement(
                'div',
                { className: className },
                React.createElement('div', {
                  dangerouslySetInnerHTML: { __html: highlightedCode },
                })
              )
            }

            _tryHighlightCode(theme, markerResolver) {
              const { fileName, code, highlightCode } = this.props
              const nohighlight =
                !highlightCode || code.length > MAX_HIGHLIGHT_LEN
              if (nohighlight) {
                return markOnly(code, markerResolver)
              }
              try {
                try {
                  // Highlighting without jsx support allows peacock to only parse out tokens
                  // which is faster than building the AST
                  const jsx = fileName.endsWith('jsx')
                  return highlight(code, { theme, linenos: true, jsx })
                } catch (err) {
                  // Higlighting without jsx option failed, try again
                  return highlight(code, { theme, linenos: true, jsx: true })
                }
              } catch (err) {
                // Highlighting failed alltogether
                try {
                  return markOnly(code, markerResolver)
                } catch (innerErr) {
                  // Even marking only failed, just show the code :(
                  return `
          <p>Deoptigate was unable to highlight/mark the below code</p>
          <pre style='white-space: pre'>${code}</pre>
        `
                }
              }
            }

            _onmarkerClicked(id, type) {
              const { onmarkerClicked } = this.props
              onmarkerClicked(id, type)
            }
          }

          module.exports = {
            CodeView,
          }
        },
        {
          '../../lib/rendering/mark-only': 66,
          '../../lib/rendering/marker-resolver': 67,
          '../theme.browser': 56,
          assert: 8,
          peacock: 16,
          react: 46,
          'react-dom': 26,
          'scroll-into-view-if-needed': 54,
        },
      ],
      2: [
        function (require, module, exports) {
          'use strict'

          const React = require('react')
          const { Component } = React

          const { CodeView } = require('./code')
          const { SummaryView } = require('./summary')

          const assert = require('assert')

          class FileDetailsView extends Component {
            constructor(props) {
              super(props)

              const { onsummaryTabIdxChanged } = props
              assert.equal(
                typeof onsummaryTabIdxChanged,
                'function',
                'need to pass onsummaryTabIdxChanged function'
              )

              this._bind()
            }

            _bind() {
              this._onmarkerClicked = this._onmarkerClicked.bind(this)
              this._onsummaryTabHeaderClicked = this._onsummaryTabHeaderClicked.bind(
                this
              )
            }

            render() {
              const {
                groups,
                selectedFile,
                selectedLocation,
                includeAllSeverities,
                highlightCode,
                className = '',
                selectedSummaryTabIdx,
                onsummaryClicked,
              } = this.props

              const {
                ics,
                icLocations,
                deopts,
                deoptLocations,
                codes,
                codeLocations,
                src,
                relativePath,
              } = groups.get(selectedFile)

              return React.createElement(
                'div',
                { className: className },
                React.createElement(CodeView, {
                  className: 'flex-column vh-85 w-50 code-view',
                  selectedLocation: selectedLocation,
                  fileName: selectedFile,
                  code: src,
                  ics: ics,
                  icLocations: icLocations,
                  deopts: deopts,
                  deoptLocations: deoptLocations,
                  codes: codes,
                  codeLocations: codeLocations,
                  includeAllSeverities: includeAllSeverities,
                  highlightCode: highlightCode,
                  onmarkerClicked: this._onmarkerClicked,
                }),
                React.createElement(SummaryView, {
                  className: 'flex-column vh-85 w-50 summary-view',
                  file: selectedFile,
                  relativePath: relativePath,
                  selectedLocation: selectedLocation,
                  ics: ics,
                  icLocations: icLocations,
                  deopts: deopts,
                  deoptLocations: deoptLocations,
                  codes: codes,
                  codeLocations: codeLocations,
                  includeAllSeverities: includeAllSeverities,
                  selectedTabIdx: selectedSummaryTabIdx,
                  ontabHeaderClicked: this._onsummaryTabHeaderClicked,
                  onsummaryClicked: onsummaryClicked,
                })
              )
            }

            _onmarkerClicked(id, type) {
              const {
                onmarkerClicked,
                onsummaryTabIdxChanged,
                selectedSummaryTabIdx,
              } = this.props
              const markerSummaryTabIdx =
                type === 'code'
                  ? SummaryView.OPT_TAB_IDX
                  : type === 'deopt'
                  ? SummaryView.DEOPT_TAB_IDX
                  : SummaryView.ICS_TAB_IDX
              onmarkerClicked(id)
              if (markerSummaryTabIdx !== selectedSummaryTabIdx) {
                onsummaryTabIdxChanged(markerSummaryTabIdx)
              }
            }

            _onsummaryTabHeaderClicked(idx) {
              const { onsummaryTabIdxChanged } = this.props
              onsummaryTabIdxChanged(idx)
            }
          }

          module.exports = { FileDetailsView }
        },
        { './code': 1, './summary': 4, assert: 8, react: 46 },
      ],
      3: [
        function (require, module, exports) {
          'use strict'

          const React = require('react')
          const { Component } = React
          const summarizeFile = require('../../lib/grouping/summarize-file')
          const assert = require('assert')

          const severityClassNames = ['green i tc', 'blue tc', 'red b tc']

          const underlineTdClass = ' pl2 pr2 underlined '

          function coloredTds(arr) {
            return arr.map((x, idx) => {
              const className =
                x > 0
                  ? severityClassNames[idx] + ' tr' + underlineTdClass
                  : ' pl2 pr2 tc i gray' + underlineTdClass
              return React.createElement(
                'td',
                { key: idx, className: className },
                x
              )
            })
          }

          function bySeverityScoreDesc(ref, ref$1) {
            var s1 = ref.summary
            var s2 = ref$1.summary

            return s1.severityScore < s2.severityScore ? 1 : -1
          }

          class FilesView extends Component {
            constructor(props) {
              super(props)
              const { onfileClicked } = props
              assert.equal(
                typeof onfileClicked,
                'function',
                'need to pass onfileClicked function'
              )
            }

            render() {
              const {
                groups,
                includeAllSeverities,
                className = '',
              } = this.props
              const tableHeader = this._renderTableHeader()
              const rows = []
              const filesSeverities = Array.from(groups)
                .map((ref) => {
                  var file = ref[0]
                  var info = ref[1]

                  const { deopts, ics, codes } = info
                  const summary = summarizeFile({ ics, deopts, codes })
                  return { file, summary }
                })
                .filter((ref) => {
                  var summary = ref.summary

                  return includeAllSeverities || summary.hasCriticalSeverities
                })
                .sort(bySeverityScoreDesc)

              for (const { file, summary } of filesSeverities) {
                const { icSeverities, deoptSeverities, codeStates } = summary
                const { relativePath } = groups.get(file)
                const rendered = this._renderFile({
                  file,
                  relativePath,
                  icSeverities,
                  deoptSeverities,
                  codeStates,
                })
                rows.push(rendered)
              }
              return React.createElement(
                'div',
                { className: className },
                React.createElement(
                  'table',
                  { cellSpacing: '0' },
                  tableHeader,
                  React.createElement('tbody', null, rows)
                )
              )
            }

            _renderTableHeader() {
              const topHeaderClass = 'tc header-row pt2 pb1 '
              const subHeaderClass = 'pa1 pl2 pr2 subhead'
              return React.createElement(
                'thead',
                null,
                React.createElement(
                  'tr',
                  null,
                  React.createElement(
                    'td',
                    { className: topHeaderClass + ' ' },
                    'File'
                  ),
                  React.createElement(
                    'td',
                    { colSpan: '3', className: topHeaderClass },
                    'Optimizations'
                  ),
                  React.createElement(
                    'td',
                    { colSpan: '3', className: topHeaderClass },
                    'Deoptimizations'
                  ),
                  React.createElement(
                    'td',
                    { colSpan: '3', className: topHeaderClass },
                    'Inline Caches'
                  )
                ),
                React.createElement(
                  'tr',
                  null,
                  React.createElement('td', { className: subHeaderClass }),
                  React.createElement(
                    'td',
                    { className: subHeaderClass },
                    'Optimized'
                  ),
                  React.createElement(
                    'td',
                    { className: subHeaderClass },
                    'Optimizable'
                  ),
                  React.createElement(
                    'td',
                    { className: subHeaderClass },
                    'Compiled'
                  ),
                  React.createElement(
                    'td',
                    { className: subHeaderClass },
                    'Severity 1'
                  ),
                  React.createElement(
                    'td',
                    { className: subHeaderClass },
                    'Severity 2'
                  ),
                  React.createElement(
                    'td',
                    { className: subHeaderClass },
                    'Severity 3'
                  ),
                  React.createElement(
                    'td',
                    { className: subHeaderClass },
                    'Severity 1'
                  ),
                  React.createElement(
                    'td',
                    { className: subHeaderClass },
                    'Severity 2'
                  ),
                  React.createElement(
                    'td',
                    { className: subHeaderClass },
                    'Severity 3'
                  )
                )
              )
            }

            _renderFile(ref) {
              var file = ref.file
              var relativePath = ref.relativePath
              var deoptSeverities = ref.deoptSeverities
              var icSeverities = ref.icSeverities
              var codeStates = ref.codeStates

              const { selectedFile } = this.props

              // Optimized = 3, Compile = 0, but we show them in order of serverity, so we reverse
              const codeColumns = coloredTds(codeStates.reverse())
              const deoptColumns = coloredTds(deoptSeverities.slice(1))
              const icColumns = coloredTds(icSeverities.slice(1))

              const onfileClicked = this._onfileClicked.bind(this, file)
              const selectedClass =
                file === selectedFile ? 'bg-light-yellow' : ''
              return React.createElement(
                'tr',
                { key: relativePath, className: 'normalrow ' + selectedClass },
                React.createElement(
                  'td',
                  { class: 'underlined' },
                  React.createElement(
                    'a',
                    {
                      className: 'items pl2 pr2',
                      href: '#',
                      onClick: onfileClicked,
                    },
                    relativePath
                  )
                ),
                codeColumns,
                deoptColumns,
                icColumns
              )
            }

            _onfileClicked(file) {
              const { onfileClicked } = this.props
              onfileClicked(file)
            }
          }

          module.exports = { FilesView }
        },
        { '../../lib/grouping/summarize-file': 60, assert: 8, react: 46 },
      ],
      4: [
        function (require, module, exports) {
          'use strict'

          const React = require('react')
          const { Component } = React
          const scrollIntoView = require('scroll-into-view-if-needed')

          const assert = require('assert')
          const {
            nameIcState,
            severityIcState,
          } = require('../../lib/log-processing/ic-state')
          const {
            nameOptimizationState,
            severityOfOptimizationState,
          } = require('../../lib/log-processing/optimization-state')
          const { MIN_SEVERITY } = require('../../lib/severities')

          const severityClassNames = ['green i', 'blue', 'red b']

          const OPT_TAB_IDX = 0
          const DEOPT_TAB_IDX = 1
          const ICS_TAB_IDX = 2

          class SummaryView extends Component {
            constructor(props) {
              super(props)
              const {
                ics,
                icLocations,
                deopts,
                deoptLocations,
                onsummaryClicked,
                ontabHeaderClicked,
              } = props

              assert(
                ics == null || icLocations != null,
                'need to provide locations for ics'
              )
              assert(
                deopts == null || deoptLocations != null,
                'need to provide locations for deopts'
              )
              assert.equal(
                typeof onsummaryClicked,
                'function',
                'need to pass onsummaryClicked function'
              )
              assert.equal(
                typeof ontabHeaderClicked,
                'function',
                'need to pass ontabHeaderClicked function'
              )

              this._bind()
            }

            _bind() {
              this._renderIc = this._renderIc.bind(this)
              this._renderDeopt = this._renderDeopt.bind(this)
              this._renderCode = this._renderCode.bind(this)
            }

            _maybeScrollIntoView() {
              const { selectedLocation } = this.props
              if (selectedLocation == null) {
                return
              }
              const summary = document.getElementById(
                `summary-location-${selectedLocation}`
              )
              if (summary == null) {
                return
              }
              scrollIntoView(summary, {
                behavior: 'smooth',
                scrollMode: 'if-needed',
              })
            }

            componentDidMount() {
              this._maybeScrollIntoView()
            }

            componentDidUpdate() {
              this._maybeScrollIntoView()
            }

            render() {
              const {
                className = '',
                ics,
                icLocations,
                deopts,
                deoptLocations,
                codes,
                codeLocations,
                selectedTabIdx,
              } = this.props
              const renderedDeopts = this._renderDeopts(
                deopts,
                deoptLocations,
                selectedTabIdx === DEOPT_TAB_IDX
              )
              const renderedIcs = this._renderIcs(
                ics,
                icLocations,
                selectedTabIdx === ICS_TAB_IDX
              )
              const renderedCodes = this._renderCodes(
                codes,
                codeLocations,
                selectedTabIdx === OPT_TAB_IDX
              )
              return React.createElement(
                'div',
                { className: className },
                React.createElement(
                  'div',
                  { className: 'flex flex-row' },
                  this._renderTabHeader('Optimizations', OPT_TAB_IDX),
                  this._renderTabHeader('Deoptimizations', DEOPT_TAB_IDX),
                  this._renderTabHeader('Incline Caches', ICS_TAB_IDX)
                ),
                React.createElement(
                  'div',
                  null,
                  renderedCodes,
                  renderedDeopts,
                  renderedIcs
                )
              )
            }

            /*
             * Tabs
             */

            _renderTabHeader(label, idx) {
              const { selectedTabIdx } = this.props
              const selected = idx === selectedTabIdx
              const baseClass =
                'flex flex-column ttu dib link pa3 bt outline-0 tab-header'
              const selectedClass = 'b--blue blue'
              const unselectedClass = 'white b--white'
              const className = selected
                ? `${baseClass} ${selectedClass}`
                : `${baseClass} ${unselectedClass}`

              return React.createElement(
                'a',
                {
                  className: className,
                  href: '#',
                  onClick: () => this._ontabHeaderClicked(idx),
                },
                label
              )
            }

            _renderDataPoint(data, locations, renderDetails) {
              const {
                selectedLocation,
                includeAllSeverities,
                relativePath,
              } = this.props
              if (locations.length === 0) {
                return React.createElement('h4', { className: 'ml4' }, 'None')
              }
              const rendered = []
              for (const loc of locations) {
                const info = data.get(loc)
                if (!includeAllSeverities && info.severity <= MIN_SEVERITY) {
                  continue
                }

                const highlightedClass =
                  selectedLocation === info.id
                    ? 'bg-light-yellow'
                    : 'bg-light-green'
                const className = `${highlightedClass} ba br2 bw1 ma3 pa2`
                rendered.push(
                  React.createElement(
                    'div',
                    { className: className, key: info.id },
                    this._summary(info, relativePath),
                    renderDetails(info)
                  )
                )
              }
              return rendered
            }

            _renderIcs(ics, icLocations, selected) {
              if (ics == null) {
                return null
              }
              const className = selected ? '' : 'dn'
              const rendered = this._renderDataPoint(
                ics,
                icLocations,
                this._renderIc
              )
              return React.createElement(
                'div',
                { key: 'ics', className: className },
                rendered
              )
            }

            _renderDeopts(deopts, deoptLocations, selected) {
              if (deopts == null) {
                return null
              }
              const className = selected ? '' : 'dn'
              const rendered = this._renderDataPoint(
                deopts,
                deoptLocations,
                this._renderDeopt
              )
              return React.createElement(
                'div',
                { key: 'deopts', className: className },
                rendered
              )
            }

            _renderCodes(codes, codeLocations, selected) {
              if (codes == null) {
                return null
              }
              const className = selected ? '' : 'dn'
              const rendered = this._renderDataPoint(
                codes,
                codeLocations,
                this._renderCode
              )
              return React.createElement(
                'div',
                { key: 'optimizations', className: className },
                rendered
              )
            }

            _summary(info, relativePath) {
              const { id, functionName, line, column } = info
              const locationEl = React.createElement(
                'span',
                { className: 'dark-blue f5 mr2' },
                id
              )
              const onclicked = (e) => {
                e.preventDefault()
                e.stopPropagation()
                this._onsummaryClicked(id)
              }

              const fullLoc = React.createElement(
                'a',
                { href: '#', className: 'i items', onClick: onclicked },
                functionName,
                ' at ',
                relativePath,
                ':',
                line,
                ':',
                column
              )
              return React.createElement(
                'div',
                { id: 'summary-location-' + id },
                locationEl,
                fullLoc
              )
            }

            _renderDeopt(info) {
              const rows = info.updates.map((update, idx) =>
                this._deoptRow(update, idx)
              )
              return React.createElement(
                'table',
                { key: 'deopt:' + info.id },
                React.createElement(
                  'thead',
                  { className: 'f5 b pt2' },
                  React.createElement(
                    'tr',
                    null,
                    React.createElement(
                      'td',
                      { class: 'pt2 pr3 basegreen' },
                      'Timestamp'
                    ),
                    React.createElement(
                      'td',
                      { class: 'pt2 pr3 basegreen' },
                      'Bailout'
                    ),
                    React.createElement(
                      'td',
                      { class: 'pt2 pr3 basegreen' },
                      'Reason'
                    ),
                    React.createElement(
                      'td',
                      { class: 'pt2 pr3 basegreen' },
                      'Inlined'
                    )
                  )
                ),
                React.createElement('tbody', null, rows)
              )
            }

            _deoptRow(info) {
              const {
                inlined,
                bailoutType,
                deoptReason,
                timestamp,
                severity,
              } = info
              const bailoutClassName = severityClassNames[severity - 1]
              const timeStampMs = (timestamp / 1e3).toFixed()
              return React.createElement(
                'tr',
                { key: timestamp },
                React.createElement('td', null, timeStampMs, 'ms'),
                React.createElement(
                  'td',
                  { className: bailoutClassName + ' pr3' },
                  bailoutType
                ),
                React.createElement('td', { className: 'pr3' }, deoptReason),
                React.createElement(
                  'td',
                  { className: 'gray pr3' },
                  inlined ? 'yes' : 'no'
                )
              )
            }

            _renderIc(info) {
              const rows = info.updates.map((update, idx) =>
                this._icRow(update, idx)
              )
              return React.createElement(
                'table',
                { key: 'ic:' + info.id },
                React.createElement(
                  'thead',
                  { className: 'f5 b ' },
                  React.createElement(
                    'tr',
                    null,
                    React.createElement(
                      'td',
                      { class: 'pt2 pr3 basegreen' },
                      'Old State'
                    ),
                    React.createElement(
                      'td',
                      { class: 'pt2 pr3 basegreen' },
                      'New State'
                    ),
                    React.createElement(
                      'td',
                      { class: 'pt2 pr3 basegreen' },
                      'Key'
                    ),
                    React.createElement(
                      'td',
                      { class: 'pt2 pr3 basegreen' },
                      'Map'
                    )
                  )
                ),
                React.createElement('tbody', null, rows)
              )
            }

            _icRow(update, id) {
              const { oldState, newState, key, map } = update
              const oldStateName = nameIcState(oldState)
              const severityOldState = severityIcState(oldState)
              const oldStateClassName = severityClassNames[severityOldState - 1]

              const newStateName = nameIcState(newState)
              const severityNewState = severityIcState(newState)
              const newStateClassName = severityClassNames[severityNewState - 1]

              const mapString = `0x${map}`
              return React.createElement(
                'tr',
                { key: key + id },
                React.createElement(
                  'td',
                  { className: oldStateClassName + ' pr3' },
                  oldStateName
                ),
                React.createElement(
                  'td',
                  { className: newStateClassName + ' pr3' },
                  newStateName
                ),
                React.createElement('td', { className: 'black pr3' }, key),
                React.createElement('td', { className: 'gray pr3' }, mapString)
              )
            }

            _renderCode(info) {
              const rows = info.updates.map((update, idx) =>
                this._codeRow(update, idx)
              )
              return React.createElement(
                'table',
                { key: 'code:' + info.id },
                React.createElement(
                  'thead',
                  { className: 'f5 b ' },
                  React.createElement(
                    'tr',
                    null,
                    React.createElement(
                      'td',
                      { class: 'pt2 pr3 basegreen' },
                      'Timestamp'
                    ),
                    React.createElement(
                      'td',
                      { class: 'pt2 pr3 basegreen' },
                      'Optimization State'
                    )
                  )
                ),
                React.createElement('tbody', null, rows)
              )
            }

            _codeRow(info, id) {
              const { timestamp, state } = info
              const timeStampMs = (timestamp / 1e3).toFixed()
              const codeState = nameOptimizationState(state)
              const severity = severityOfOptimizationState(state)
              const codeStateClassName = severityClassNames[severity - 1]

              return React.createElement(
                'tr',
                { key: timestamp },
                React.createElement('td', null, timeStampMs, 'ms'),
                React.createElement(
                  'td',
                  { className: codeStateClassName + ' pr3' },
                  codeState
                )
              )
            }

            /*
             * Events
             */
            _ontabHeaderClicked(idx) {
              const { ontabHeaderClicked } = this.props
              ontabHeaderClicked(idx)
            }

            _onsummaryClicked(id) {
              const { onsummaryClicked } = this.props
              onsummaryClicked(id)
            }

            static get OPT_TAB_IDX() {
              return OPT_TAB_IDX
            }
            static get DEOPT_TAB_IDX() {
              return DEOPT_TAB_IDX
            }
            static get ICS_TAB_IDX() {
              return ICS_TAB_IDX
            }
          }
          module.exports = {
            SummaryView,
          }
        },
        {
          '../../lib/log-processing/ic-state': 64,
          '../../lib/log-processing/optimization-state': 65,
          '../../lib/severities': 68,
          assert: 8,
          react: 46,
          'scroll-into-view-if-needed': 54,
        },
      ],
      5: [
        function (require, module, exports) {
          'use strict'

          const React = require('react')
          const { Component } = React

          const assert = require('assert')

          class ToolbarView extends Component {
            constructor(props) {
              super(props)
              const {
                onincludeAllSeveritiesChanged,
                onhighlightCodeChanged,
              } = props
              assert.equal(
                typeof onincludeAllSeveritiesChanged,
                'function',
                'need to pass onincludeAllSeveritiesChanged function'
              )
              assert.equal(
                typeof onhighlightCodeChanged,
                'function',
                'need to pass onhighlightCodeChanged function'
              )
              this._bind()
            }

            _bind() {
              this._onincludeAllSeveritiesToggled = this._onincludeAllSeveritiesToggled.bind(
                this
              )
              this._onhighlightCodeToggled = this._onhighlightCodeToggled.bind(
                this
              )
            }

            render() {
              const { className = '' } = this.props
              return React.createElement(
                'div',
                { className: className },
                React.createElement(
                  'span',
                  null,
                  this._renderHighlightCodeOption(),
                  this._renderSeverityOption()
                )
              )
            }

            _renderSeverityOption() {
              const { includeAllSeverities } = this.props
              return React.createElement(
                'span',
                { className: 'white pr2 pl2' },
                'Low Severities ',
                React.createElement('input', {
                  className: 'ml1 pointer',
                  type: 'checkbox',
                  defaultChecked: !!includeAllSeverities,
                  onChange: this._onincludeAllSeveritiesToggled,
                })
              )
            }

            _renderHighlightCodeOption() {
              const { highlightCode } = this.props
              return React.createElement(
                'span',
                { className: 'white pr2 pl2' },
                'Highlight Code ',
                React.createElement('input', {
                  className: 'ml1 pointer',
                  type: 'checkbox',
                  defaultChecked: !!highlightCode,
                  onChange: this._onhighlightCodeToggled,
                })
              )
            }

            _onincludeAllSeveritiesToggled(e) {
              const {
                onincludeAllSeveritiesChanged,
                includeAllSeverities,
              } = this.props
              onincludeAllSeveritiesChanged(!includeAllSeverities)
            }

            _onhighlightCodeToggled(e) {
              const { onhighlightCodeChanged, highlightCode } = this.props
              onhighlightCodeChanged(!highlightCode)
            }
          }

          module.exports = {
            ToolbarView,
          }
        },
        { assert: 8, react: 46 },
      ],
      6: [
        function (require, module, exports) {
          'use strict'

          /* global location */
          const qs = require('qs')

          function parseNum(s) {
            return s === '' ? null : parseInt(s)
          }

          function parseBool(s) {
            return s === 'true'
          }

          function stateFromUrl() {
            if (location.search == null || location.search.length < 2) {
              return null
            }
            const query = location.search.slice(1)
            const queryState = qs.parse(query)
            const state = {
              highlightCode: parseBool(queryState.highlightCode),
              includeAllSeverities: parseBool(queryState.includeAllSeverities),
              selectedFileIdx: parseNum(queryState.selectedFileIdx),
              selectedLocation: parseNum(queryState.selectedLocation),
              selectedTabIdx: parseNum(queryState.selectedTabIdx),
              selectedSummaryTabIdx: parseNum(queryState.selectedSummaryTabIdx),
            }
            return state
          }

          function urlFromState(state) {
            const rootUrl = location.origin
            const path = location.pathname
            const queryString = qs.stringify(state)
            const url = `${rootUrl}${path}?${queryString}`
            return url
          }

          module.exports = {
            stateFromUrl,
            urlFromState,
          }
        },
        { qs: 20 },
      ],
      7: [
        function (require, module, exports) {
          'use strict'

          /* global history */

          const React = require('react')
          const { Component } = React
          const { render } = require('react-dom')
          const { deoptigate } = require('../')
          const { urlFromState, stateFromUrl } = require('./lib/query-state')

          const { ToolbarView } = require('./components/toolbar')
          const { FilesView } = require('./components/files')
          const { SummaryView } = require('./components/summary')
          const { FileDetailsView } = require('./components/file-details')

          const FILES_TAB_IDX = 0
          const DETAILS_TAB_IDX = 1

          function app() {
            // makes React happy
            document.body.innerHTML = ''
            const el = document.createElement('div')
            document.body.appendChild(el)
            return el
          }

          const initialState = {
            selectedFile: null,
            selectedLocation: null,
            selectedSummaryTabIdx: SummaryView.OPT_TAB_IDX,
            includeAllSeverities: false,
            highlightCode: true,
            selectedTabIdx: FILES_TAB_IDX,
          }

          class MainView extends Component {
            constructor(props) {
              super(props)

              const { groups } = props
              this._indexedGroups = Array.from(groups)

              this._initialState = Object.assign(
                initialState,
                this._stateFromUrl()
              )
              this.state = Object.assign({}, this._initialState)

              this._bind()
              window.onpopstate = this._restoreStateFromHistory
            }

            _bind() {
              this._onlocationSelected = this._onlocationSelected.bind(this)
              this._onsummaryTabIdxChanged = this._onsummaryTabIdxChanged.bind(
                this
              )
              this._onincludeAllSeveritiesChanged = this._onincludeAllSeveritiesChanged.bind(
                this
              )
              this._onhighlightCodeChanged = this._onhighlightCodeChanged.bind(
                this
              )
              this._onfileClicked = this._onfileClicked.bind(this)
              this._updateUrl = this._updateUrl.bind(this)
              this._restoreStateFromHistory = this._restoreStateFromHistory.bind(
                this
              )
            }

            render() {
              const { includeAllSeverities, highlightCode } = this.state

              const tabs = this._renderTabs()
              return React.createElement(
                'div',
                { className: 'center pa2' },
                React.createElement(
                  'div',
                  { className: 'flex flex-row' },
                  this._renderTabHeader('Files', FILES_TAB_IDX),
                  this._renderTabHeader('Details', DETAILS_TAB_IDX),
                  React.createElement(ToolbarView, {
                    className:
                      'flex flex-column self-center ml4 pl4 bl bw1 b--silver',
                    includeAllSeverities: includeAllSeverities,
                    highlightCode: highlightCode,
                    onincludeAllSeveritiesChanged: this
                      ._onincludeAllSeveritiesChanged,
                    onhighlightCodeChanged: this._onhighlightCodeChanged,
                  })
                ),
                tabs
              )
            }

            /*
             * Tabs
             */

            _renderTabHeader(label, idx) {
              const { selectedTabIdx } = this.state
              const selected = idx === selectedTabIdx
              const baseClass =
                'flex flex-column ttu dib link pa3 bt outline-0 tab-header'
              const selectedClass = 'b--blue blue'
              const unselectedClass = 'white b--white'
              const className = selected
                ? `${baseClass} ${selectedClass}`
                : `${baseClass} ${unselectedClass}`

              return React.createElement(
                'a',
                {
                  className: className,
                  href: '#',
                  onClick: () => this._ontabHeaderClicked(idx),
                },
                label
              )
            }

            _renderTabs() {
              const { selectedTabIdx } = this.state
              const files = this._renderFiles(selectedTabIdx === FILES_TAB_IDX)
              const details = this._renderFileDetails(
                selectedTabIdx === DETAILS_TAB_IDX
              )
              return React.createElement(
                'div',
                { className: 'flex flex-row vh-100 overflow-scroll' },
                files,
                details
              )
            }

            /*
             * Contents
             */
            _renderFiles(selected) {
              const { groups } = this.props
              const { selectedFile, includeAllSeverities } = this.state
              const display = selected ? 'flex' : 'dn'
              const className = `${display} flex-row overflow-scroll pa2`

              return React.createElement(FilesView, {
                className: className,
                selectedFile: selectedFile,
                groups: groups,
                includeAllSeverities: includeAllSeverities,
                onfileClicked: this._onfileClicked,
              })
            }

            _renderFileDetails(selected) {
              const { groups } = this.props
              const {
                selectedFile,
                selectedLocation,
                selectedSummaryTabIdx,
                includeAllSeverities,
                highlightCode,
              } = this.state
              const display = selected ? 'flex' : 'dn'
              const className = `${display} flex-row w-100 ma2`
              if (selectedFile == null || !groups.has(selectedFile)) {
                return React.createElement(
                  'div',
                  { className: className },
                  'Please select a file in the Files table'
                )
              }

              return React.createElement(FileDetailsView, {
                groups: groups,
                selectedFile: selectedFile,
                selectedLocation: selectedLocation,
                selectedSummaryTabIdx: selectedSummaryTabIdx,
                includeAllSeverities: includeAllSeverities,
                highlightCode: highlightCode,
                className: className,
                onmarkerClicked: this._onlocationSelected,
                onsummaryClicked: this._onlocationSelected,
                onsummaryTabIdxChanged: this._onsummaryTabIdxChanged,
              })
            }

            /*
             * URL State
             */
            _indexFromFile(file) {
              for (var i = 0; i < this._indexedGroups.length; i++) {
                const key = this._indexedGroups[i][0]
                if (key === file) {
                  return i
                }
              }
              return -1
            }

            _fileFromIndex(idx) {
              if (idx < 0) {
                return null
              }
              if (this._indexedGroups[idx] == null) {
                return null
              }
              return this._indexedGroups[idx][0]
            }

            _updateUrl() {
              const {
                selectedFile,
                selectedLocation,
                includeAllSeverities,
                highlightCode,
                selectedTabIdx,
                selectedSummaryTabIdx,
              } = this.state

              const state = {
                selectedFileIdx: this._indexFromFile(selectedFile),
                selectedLocation,
                includeAllSeverities,
                highlightCode,
                selectedTabIdx,
                selectedSummaryTabIdx,
              }
              try {
                history.pushState(state, 'deoptigate', urlFromState(state))
              } catch (e) {
                // some browsers like Safari block this in the name of security
                // if we opened the index file directly, i.e. the page isn't served
              }
            }

            _restoreStateFromHistory(e) {
              if (history.state == null) {
                return null
              }

              let {
                selectedFileIdx,
                selectedLocation,
                includeAllSeverities,
                highlightCode,
                selectedTabIdx,
                selectedSummaryTabIdx,
              } = history.state
              if (selectedLocation === '') {
                selectedLocation = null
              }

              const selectedFile = this._fileFromIndex(selectedFileIdx)
              const override = {
                includeAllSeverities,
                highlightCode,
                selectedFile,
                selectedTabIdx,
                selectedLocation,
                selectedSummaryTabIdx,
              }

              this.setState(Object.assign(this.state, override))
            }

            _stateFromUrl() {
              const state = stateFromUrl()
              if (state == null) {
                return null
              }
              const {
                selectedFileIdx,
                selectedLocation,
                includeAllSeverities,
                highlightCode,
                selectedTabIdx,
                selectedSummaryTabIdx,
              } = state
              const selectedFile = this._fileFromIndex(selectedFileIdx)
              return {
                selectedFile,
                selectedLocation,
                includeAllSeverities,
                highlightCode,
                selectedTabIdx,
                selectedSummaryTabIdx,
              }
            }

            /*
             * Events
             */
            _ontabHeaderClicked(idx) {
              this.setState(
                Object.assign(this.state, { selectedTabIdx: idx }),
                this._updateUrl
              )
            }

            _onlocationSelected(id) {
              this.setState(
                Object.assign(this.state, { selectedLocation: id }),
                this._updateUrl
              )
            }

            _onsummaryTabIdxChanged(idx) {
              this.setState(
                Object.assign(this.state, { selectedSummaryTabIdx: idx }),
                this._updateUrl
              )
            }

            _onincludeAllSeveritiesChanged(includeAllSeverities) {
              this.setState(
                Object.assign(this.state, {
                  includeAllSeverities,
                  selectedLocation: null,
                }),
                this._updateUrl
              )
            }

            _onhighlightCodeChanged(highlightCode) {
              this.setState(
                Object.assign(this.state, { highlightCode }),
                this._updateUrl
              )
            }

            _onfileClicked(file) {
              this.setState(
                Object.assign(this.state, {
                  selectedFile: file,
                  selectedLocation: null,
                  // auto open details view when file is selected
                  selectedTabIdx: DETAILS_TAB_IDX,
                }),
                this._updateUrl
              )
            }
          }

          async function deoptigateRender(groupedByFile) {
            try {
              const groupedByFileAndLocation = deoptigate(groupedByFile)

              render(
                React.createElement(MainView, {
                  groups: groupedByFileAndLocation,
                }),
                app()
              )
            } catch (err) {
              console.error(err)
            }
          }

          module.exports = deoptigateRender
        },
        {
          '../': 57,
          './components/file-details': 2,
          './components/files': 3,
          './components/summary': 4,
          './components/toolbar': 5,
          './lib/query-state': 6,
          react: 46,
          'react-dom': 26,
        },
      ],
      8: [
        function (require, module, exports) {
          ;(function (global) {
            'use strict'

            // compare and isBuffer taken from https://github.com/feross/buffer/blob/680e9e5e488f22aac27599a57dc844a6315928dd/index.js
            // original notice:

            /*!
             * The buffer module from node.js, for the browser.
             *
             * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
             * @license  MIT
             */
            function compare(a, b) {
              if (a === b) {
                return 0
              }

              var x = a.length
              var y = b.length

              for (var i = 0, len = Math.min(x, y); i < len; ++i) {
                if (a[i] !== b[i]) {
                  x = a[i]
                  y = b[i]
                  break
                }
              }

              if (x < y) {
                return -1
              }
              if (y < x) {
                return 1
              }
              return 0
            }
            function isBuffer(b) {
              if (
                global.Buffer &&
                typeof global.Buffer.isBuffer === 'function'
              ) {
                return global.Buffer.isBuffer(b)
              }
              return !!(b != null && b._isBuffer)
            }

            // based on node assert, original notice:

            // http://wiki.commonjs.org/wiki/Unit_Testing/1.0
            //
            // THIS IS NOT TESTED NOR LIKELY TO WORK OUTSIDE V8!
            //
            // Originally from narwhal.js (http://narwhaljs.org)
            // Copyright (c) 2009 Thomas Robinson <280north.com>
            //
            // Permission is hereby granted, free of charge, to any person obtaining a copy
            // of this software and associated documentation files (the 'Software'), to
            // deal in the Software without restriction, including without limitation the
            // rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
            // sell copies of the Software, and to permit persons to whom the Software is
            // furnished to do so, subject to the following conditions:
            //
            // The above copyright notice and this permission notice shall be included in
            // all copies or substantial portions of the Software.
            //
            // THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
            // IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
            // FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
            // AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
            // ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
            // WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

            var util = require('util/')
            var hasOwn = Object.prototype.hasOwnProperty
            var pSlice = Array.prototype.slice
            var functionsHaveNames = (function () {
              return function foo() {}.name === 'foo'
            })()
            function pToString(obj) {
              return Object.prototype.toString.call(obj)
            }
            function isView(arrbuf) {
              if (isBuffer(arrbuf)) {
                return false
              }
              if (typeof global.ArrayBuffer !== 'function') {
                return false
              }
              if (typeof ArrayBuffer.isView === 'function') {
                return ArrayBuffer.isView(arrbuf)
              }
              if (!arrbuf) {
                return false
              }
              if (arrbuf instanceof DataView) {
                return true
              }
              if (arrbuf.buffer && arrbuf.buffer instanceof ArrayBuffer) {
                return true
              }
              return false
            }
            // 1. The assert module provides functions that throw
            // AssertionError's when particular conditions are not met. The
            // assert module must conform to the following interface.

            var assert = (module.exports = ok)

            // 2. The AssertionError is defined in assert.
            // new assert.AssertionError({ message: message,
            //                             actual: actual,
            //                             expected: expected })

            var regex = /\s*function\s+([^\(\s]*)\s*/
            // based on https://github.com/ljharb/function.prototype.name/blob/adeeeec8bfcc6068b187d7d9fb3d5bb1d3a30899/implementation.js
            function getName(func) {
              if (!util.isFunction(func)) {
                return
              }
              if (functionsHaveNames) {
                return func.name
              }
              var str = func.toString()
              var match = str.match(regex)
              return match && match[1]
            }
            assert.AssertionError = function AssertionError(options) {
              this.name = 'AssertionError'
              this.actual = options.actual
              this.expected = options.expected
              this.operator = options.operator
              if (options.message) {
                this.message = options.message
                this.generatedMessage = false
              } else {
                this.message = getMessage(this)
                this.generatedMessage = true
              }
              var stackStartFunction = options.stackStartFunction || fail
              if (Error.captureStackTrace) {
                Error.captureStackTrace(this, stackStartFunction)
              } else {
                // non v8 browsers so we can have a stacktrace
                var err = new Error()
                if (err.stack) {
                  var out = err.stack

                  // try to strip useless frames
                  var fn_name = getName(stackStartFunction)
                  var idx = out.indexOf('\n' + fn_name)
                  if (idx >= 0) {
                    // once we have located the function frame
                    // we need to strip out everything before it (and its line)
                    var next_line = out.indexOf('\n', idx + 1)
                    out = out.substring(next_line + 1)
                  }

                  this.stack = out
                }
              }
            }

            // assert.AssertionError instanceof Error
            util.inherits(assert.AssertionError, Error)

            function truncate(s, n) {
              if (typeof s === 'string') {
                return s.length < n ? s : s.slice(0, n)
              } else {
                return s
              }
            }
            function inspect(something) {
              if (functionsHaveNames || !util.isFunction(something)) {
                return util.inspect(something)
              }
              var rawname = getName(something)
              var name = rawname ? ': ' + rawname : ''
              return '[Function' + name + ']'
            }
            function getMessage(self) {
              return (
                truncate(inspect(self.actual), 128) +
                ' ' +
                self.operator +
                ' ' +
                truncate(inspect(self.expected), 128)
              )
            }

            // At present only the three keys mentioned above are used and
            // understood by the spec. Implementations or sub modules can pass
            // other keys to the AssertionError's constructor - they will be
            // ignored.

            // 3. All of the following functions must throw an AssertionError
            // when a corresponding condition is not met, with a message that
            // may be undefined if not provided.  All assertion methods provide
            // both the actual and expected values to the assertion error for
            // display purposes.

            function fail(
              actual,
              expected,
              message,
              operator,
              stackStartFunction
            ) {
              throw new assert.AssertionError({
                message: message,
                actual: actual,
                expected: expected,
                operator: operator,
                stackStartFunction: stackStartFunction,
              })
            }

            // EXTENSION! allows for well behaved errors defined elsewhere.
            assert.fail = fail

            // 4. Pure assertion tests whether a value is truthy, as determined
            // by !!guard.
            // assert.ok(guard, message_opt);
            // This statement is equivalent to assert.equal(true, !!guard,
            // message_opt);. To test strictly for the value true, use
            // assert.strictEqual(true, guard, message_opt);.

            function ok(value, message) {
              if (!value) fail(value, true, message, '==', assert.ok)
            }
            assert.ok = ok

            // 5. The equality assertion tests shallow, coercive equality with
            // ==.
            // assert.equal(actual, expected, message_opt);

            assert.equal = function equal(actual, expected, message) {
              if (actual != expected)
                fail(actual, expected, message, '==', assert.equal)
            }

            // 6. The non-equality assertion tests for whether two objects are not equal
            // with != assert.notEqual(actual, expected, message_opt);

            assert.notEqual = function notEqual(actual, expected, message) {
              if (actual == expected) {
                fail(actual, expected, message, '!=', assert.notEqual)
              }
            }

            // 7. The equivalence assertion tests a deep equality relation.
            // assert.deepEqual(actual, expected, message_opt);

            assert.deepEqual = function deepEqual(actual, expected, message) {
              if (!_deepEqual(actual, expected, false)) {
                fail(actual, expected, message, 'deepEqual', assert.deepEqual)
              }
            }

            assert.deepStrictEqual = function deepStrictEqual(
              actual,
              expected,
              message
            ) {
              if (!_deepEqual(actual, expected, true)) {
                fail(
                  actual,
                  expected,
                  message,
                  'deepStrictEqual',
                  assert.deepStrictEqual
                )
              }
            }

            function _deepEqual(actual, expected, strict, memos) {
              // 7.1. All identical values are equivalent, as determined by ===.
              if (actual === expected) {
                return true
              } else if (isBuffer(actual) && isBuffer(expected)) {
                return compare(actual, expected) === 0

                // 7.2. If the expected value is a Date object, the actual value is
                // equivalent if it is also a Date object that refers to the same time.
              } else if (util.isDate(actual) && util.isDate(expected)) {
                return actual.getTime() === expected.getTime()

                // 7.3 If the expected value is a RegExp object, the actual value is
                // equivalent if it is also a RegExp object with the same source and
                // properties (`global`, `multiline`, `lastIndex`, `ignoreCase`).
              } else if (util.isRegExp(actual) && util.isRegExp(expected)) {
                return (
                  actual.source === expected.source &&
                  actual.global === expected.global &&
                  actual.multiline === expected.multiline &&
                  actual.lastIndex === expected.lastIndex &&
                  actual.ignoreCase === expected.ignoreCase
                )

                // 7.4. Other pairs that do not both pass typeof value == 'object',
                // equivalence is determined by ==.
              } else if (
                (actual === null || typeof actual !== 'object') &&
                (expected === null || typeof expected !== 'object')
              ) {
                return strict ? actual === expected : actual == expected

                // If both values are instances of typed arrays, wrap their underlying
                // ArrayBuffers in a Buffer each to increase performance
                // This optimization requires the arrays to have the same type as checked by
                // Object.prototype.toString (aka pToString). Never perform binary
                // comparisons for Float*Arrays, though, since e.g. +0 === -0 but their
                // bit patterns are not identical.
              } else if (
                isView(actual) &&
                isView(expected) &&
                pToString(actual) === pToString(expected) &&
                !(
                  actual instanceof Float32Array ||
                  actual instanceof Float64Array
                )
              ) {
                return (
                  compare(
                    new Uint8Array(actual.buffer),
                    new Uint8Array(expected.buffer)
                  ) === 0
                )

                // 7.5 For all other Object pairs, including Array objects, equivalence is
                // determined by having the same number of owned properties (as verified
                // with Object.prototype.hasOwnProperty.call), the same set of keys
                // (although not necessarily the same order), equivalent values for every
                // corresponding key, and an identical 'prototype' property. Note: this
                // accounts for both named and indexed properties on Arrays.
              } else if (isBuffer(actual) !== isBuffer(expected)) {
                return false
              } else {
                memos = memos || { actual: [], expected: [] }

                var actualIndex = memos.actual.indexOf(actual)
                if (actualIndex !== -1) {
                  if (actualIndex === memos.expected.indexOf(expected)) {
                    return true
                  }
                }

                memos.actual.push(actual)
                memos.expected.push(expected)

                return objEquiv(actual, expected, strict, memos)
              }
            }

            function isArguments(object) {
              return (
                Object.prototype.toString.call(object) == '[object Arguments]'
              )
            }

            function objEquiv(a, b, strict, actualVisitedObjects) {
              if (
                a === null ||
                a === undefined ||
                b === null ||
                b === undefined
              )
                return false
              // if one is a primitive, the other must be same
              if (util.isPrimitive(a) || util.isPrimitive(b)) return a === b
              if (
                strict &&
                Object.getPrototypeOf(a) !== Object.getPrototypeOf(b)
              )
                return false
              var aIsArgs = isArguments(a)
              var bIsArgs = isArguments(b)
              if ((aIsArgs && !bIsArgs) || (!aIsArgs && bIsArgs)) return false
              if (aIsArgs) {
                a = pSlice.call(a)
                b = pSlice.call(b)
                return _deepEqual(a, b, strict)
              }
              var ka = objectKeys(a)
              var kb = objectKeys(b)
              var key, i
              // having the same number of owned properties (keys incorporates
              // hasOwnProperty)
              if (ka.length !== kb.length) return false
              //the same set of keys (although not necessarily the same order),
              ka.sort()
              kb.sort()
              //~~~cheap key test
              for (i = ka.length - 1; i >= 0; i--) {
                if (ka[i] !== kb[i]) return false
              }
              //equivalent values for every corresponding key, and
              //~~~possibly expensive deep test
              for (i = ka.length - 1; i >= 0; i--) {
                key = ka[i]
                if (!_deepEqual(a[key], b[key], strict, actualVisitedObjects))
                  return false
              }
              return true
            }

            // 8. The non-equivalence assertion tests for any deep inequality.
            // assert.notDeepEqual(actual, expected, message_opt);

            assert.notDeepEqual = function notDeepEqual(
              actual,
              expected,
              message
            ) {
              if (_deepEqual(actual, expected, false)) {
                fail(
                  actual,
                  expected,
                  message,
                  'notDeepEqual',
                  assert.notDeepEqual
                )
              }
            }

            assert.notDeepStrictEqual = notDeepStrictEqual
            function notDeepStrictEqual(actual, expected, message) {
              if (_deepEqual(actual, expected, true)) {
                fail(
                  actual,
                  expected,
                  message,
                  'notDeepStrictEqual',
                  notDeepStrictEqual
                )
              }
            }

            // 9. The strict equality assertion tests strict equality, as determined by ===.
            // assert.strictEqual(actual, expected, message_opt);

            assert.strictEqual = function strictEqual(
              actual,
              expected,
              message
            ) {
              if (actual !== expected) {
                fail(actual, expected, message, '===', assert.strictEqual)
              }
            }

            // 10. The strict non-equality assertion tests for strict inequality, as
            // determined by !==.  assert.notStrictEqual(actual, expected, message_opt);

            assert.notStrictEqual = function notStrictEqual(
              actual,
              expected,
              message
            ) {
              if (actual === expected) {
                fail(actual, expected, message, '!==', assert.notStrictEqual)
              }
            }

            function expectedException(actual, expected) {
              if (!actual || !expected) {
                return false
              }

              if (
                Object.prototype.toString.call(expected) == '[object RegExp]'
              ) {
                return expected.test(actual)
              }

              try {
                if (actual instanceof expected) {
                  return true
                }
              } catch (e) {
                // Ignore.  The instanceof check doesn't work for arrow functions.
              }

              if (Error.isPrototypeOf(expected)) {
                return false
              }

              return expected.call({}, actual) === true
            }

            function _tryBlock(block) {
              var error
              try {
                block()
              } catch (e) {
                error = e
              }
              return error
            }

            function _throws(shouldThrow, block, expected, message) {
              var actual

              if (typeof block !== 'function') {
                throw new TypeError('"block" argument must be a function')
              }

              if (typeof expected === 'string') {
                message = expected
                expected = null
              }

              actual = _tryBlock(block)

              message =
                (expected && expected.name
                  ? ' (' + expected.name + ').'
                  : '.') + (message ? ' ' + message : '.')

              if (shouldThrow && !actual) {
                fail(actual, expected, 'Missing expected exception' + message)
              }

              var userProvidedMessage = typeof message === 'string'
              var isUnwantedException = !shouldThrow && util.isError(actual)
              var isUnexpectedException = !shouldThrow && actual && !expected

              if (
                (isUnwantedException &&
                  userProvidedMessage &&
                  expectedException(actual, expected)) ||
                isUnexpectedException
              ) {
                fail(actual, expected, 'Got unwanted exception' + message)
              }

              if (
                (shouldThrow &&
                  actual &&
                  expected &&
                  !expectedException(actual, expected)) ||
                (!shouldThrow && actual)
              ) {
                throw actual
              }
            }

            // 11. Expected to throw an error:
            // assert.throws(block, Error_opt, message_opt);

            assert.throws = function (
              block,
              /*optional*/ error,
              /*optional*/ message
            ) {
              _throws(true, block, error, message)
            }

            // EXTENSION! This is annoying to write outside this module.
            assert.doesNotThrow = function (
              block,
              /*optional*/ error,
              /*optional*/ message
            ) {
              _throws(false, block, error, message)
            }

            assert.ifError = function (err) {
              if (err) throw err
            }

            var objectKeys =
              Object.keys ||
              function (obj) {
                var keys = []
                for (var key in obj) {
                  if (hasOwn.call(obj, key)) keys.push(key)
                }
                return keys
              }
          }.call(
            this,
            typeof global !== 'undefined'
              ? global
              : typeof self !== 'undefined'
              ? self
              : typeof window !== 'undefined'
              ? window
              : {}
          ))
        },
        { 'util/': 11 },
      ],
      9: [
        function (require, module, exports) {
          if (typeof Object.create === 'function') {
            // implementation from standard node.js 'util' module
            module.exports = function inherits(ctor, superCtor) {
              ctor.super_ = superCtor
              ctor.prototype = Object.create(superCtor.prototype, {
                constructor: {
                  value: ctor,
                  enumerable: false,
                  writable: true,
                  configurable: true,
                },
              })
            }
          } else {
            // old school shim for old browsers
            module.exports = function inherits(ctor, superCtor) {
              ctor.super_ = superCtor
              var TempCtor = function () {}
              TempCtor.prototype = superCtor.prototype
              ctor.prototype = new TempCtor()
              ctor.prototype.constructor = ctor
            }
          }
        },
        {},
      ],
      10: [
        function (require, module, exports) {
          module.exports = function isBuffer(arg) {
            return (
              arg &&
              typeof arg === 'object' &&
              typeof arg.copy === 'function' &&
              typeof arg.fill === 'function' &&
              typeof arg.readUInt8 === 'function'
            )
          }
        },
        {},
      ],
      11: [
        function (require, module, exports) {
          ;(function (process, global) {
            // Copyright Joyent, Inc. and other Node contributors.
            //
            // Permission is hereby granted, free of charge, to any person obtaining a
            // copy of this software and associated documentation files (the
            // "Software"), to deal in the Software without restriction, including
            // without limitation the rights to use, copy, modify, merge, publish,
            // distribute, sublicense, and/or sell copies of the Software, and to permit
            // persons to whom the Software is furnished to do so, subject to the
            // following conditions:
            //
            // The above copyright notice and this permission notice shall be included
            // in all copies or substantial portions of the Software.
            //
            // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
            // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
            // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
            // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
            // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
            // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
            // USE OR OTHER DEALINGS IN THE SOFTWARE.

            var formatRegExp = /%[sdj%]/g
            exports.format = function (f) {
              if (!isString(f)) {
                var objects = []
                for (var i = 0; i < arguments.length; i++) {
                  objects.push(inspect(arguments[i]))
                }
                return objects.join(' ')
              }

              var i = 1
              var args = arguments
              var len = args.length
              var str = String(f).replace(formatRegExp, function (x) {
                if (x === '%%') return '%'
                if (i >= len) return x
                switch (x) {
                  case '%s':
                    return String(args[i++])
                  case '%d':
                    return Number(args[i++])
                  case '%j':
                    try {
                      return JSON.stringify(args[i++])
                    } catch (_) {
                      return '[Circular]'
                    }
                  default:
                    return x
                }
              })
              for (var x = args[i]; i < len; x = args[++i]) {
                if (isNull(x) || !isObject(x)) {
                  str += ' ' + x
                } else {
                  str += ' ' + inspect(x)
                }
              }
              return str
            }

            // Mark that a method should not be used.
            // Returns a modified function which warns once by default.
            // If --no-deprecation is set, then it is a no-op.
            exports.deprecate = function (fn, msg) {
              // Allow for deprecating things in the process of starting up.
              if (isUndefined(global.process)) {
                return function () {
                  return exports.deprecate(fn, msg).apply(this, arguments)
                }
              }

              if (process.noDeprecation === true) {
                return fn
              }

              var warned = false
              function deprecated() {
                if (!warned) {
                  if (process.throwDeprecation) {
                    throw new Error(msg)
                  } else if (process.traceDeprecation) {
                    console.trace(msg)
                  } else {
                    console.error(msg)
                  }
                  warned = true
                }
                return fn.apply(this, arguments)
              }

              return deprecated
            }

            var debugs = {}
            var debugEnviron
            exports.debuglog = function (set) {
              if (isUndefined(debugEnviron))
                debugEnviron = process.env.NODE_DEBUG || ''
              set = set.toUpperCase()
              if (!debugs[set]) {
                if (new RegExp('\\b' + set + '\\b', 'i').test(debugEnviron)) {
                  var pid = process.pid
                  debugs[set] = function () {
                    var msg = exports.format.apply(exports, arguments)
                    console.error('%s %d: %s', set, pid, msg)
                  }
                } else {
                  debugs[set] = function () {}
                }
              }
              return debugs[set]
            }

            /**
             * Echos the value of a value. Trys to print the value out
             * in the best way possible given the different types.
             *
             * @param {Object} obj The object to print out.
             * @param {Object} opts Optional options object that alters the output.
             */
            /* legacy: obj, showHidden, depth, colors*/
            function inspect(obj, opts) {
              // default options
              var ctx = {
                seen: [],
                stylize: stylizeNoColor,
              }
              // legacy...
              if (arguments.length >= 3) ctx.depth = arguments[2]
              if (arguments.length >= 4) ctx.colors = arguments[3]
              if (isBoolean(opts)) {
                // legacy...
                ctx.showHidden = opts
              } else if (opts) {
                // got an "options" object
                exports._extend(ctx, opts)
              }
              // set default options
              if (isUndefined(ctx.showHidden)) ctx.showHidden = false
              if (isUndefined(ctx.depth)) ctx.depth = 2
              if (isUndefined(ctx.colors)) ctx.colors = false
              if (isUndefined(ctx.customInspect)) ctx.customInspect = true
              if (ctx.colors) ctx.stylize = stylizeWithColor
              return formatValue(ctx, obj, ctx.depth)
            }
            exports.inspect = inspect

            // http://en.wikipedia.org/wiki/ANSI_escape_code#graphics
            inspect.colors = {
              bold: [1, 22],
              italic: [3, 23],
              underline: [4, 24],
              inverse: [7, 27],
              white: [37, 39],
              grey: [90, 39],
              black: [30, 39],
              blue: [34, 39],
              cyan: [36, 39],
              green: [32, 39],
              magenta: [35, 39],
              red: [31, 39],
              yellow: [33, 39],
            }

            // Don't use 'blue' not visible on cmd.exe
            inspect.styles = {
              special: 'cyan',
              number: 'yellow',
              boolean: 'yellow',
              undefined: 'grey',
              null: 'bold',
              string: 'green',
              date: 'magenta',
              // "name": intentionally not styling
              regexp: 'red',
            }

            function stylizeWithColor(str, styleType) {
              var style = inspect.styles[styleType]

              if (style) {
                return (
                  '\u001b[' +
                  inspect.colors[style][0] +
                  'm' +
                  str +
                  '\u001b[' +
                  inspect.colors[style][1] +
                  'm'
                )
              } else {
                return str
              }
            }

            function stylizeNoColor(str, styleType) {
              return str
            }

            function arrayToHash(array) {
              var hash = {}

              array.forEach(function (val, idx) {
                hash[val] = true
              })

              return hash
            }

            function formatValue(ctx, value, recurseTimes) {
              // Provide a hook for user-specified inspect functions.
              // Check that value is an object with an inspect function on it
              if (
                ctx.customInspect &&
                value &&
                isFunction(value.inspect) &&
                // Filter out the util module, it's inspect function is special
                value.inspect !== exports.inspect &&
                // Also filter out any prototype objects using the circular check.
                !(value.constructor && value.constructor.prototype === value)
              ) {
                var ret = value.inspect(recurseTimes, ctx)
                if (!isString(ret)) {
                  ret = formatValue(ctx, ret, recurseTimes)
                }
                return ret
              }

              // Primitive types cannot have properties
              var primitive = formatPrimitive(ctx, value)
              if (primitive) {
                return primitive
              }

              // Look up the keys of the object.
              var keys = Object.keys(value)
              var visibleKeys = arrayToHash(keys)

              if (ctx.showHidden) {
                keys = Object.getOwnPropertyNames(value)
              }

              // IE doesn't make error fields non-enumerable
              // http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx
              if (
                isError(value) &&
                (keys.indexOf('message') >= 0 ||
                  keys.indexOf('description') >= 0)
              ) {
                return formatError(value)
              }

              // Some type of object without properties can be shortcutted.
              if (keys.length === 0) {
                if (isFunction(value)) {
                  var name = value.name ? ': ' + value.name : ''
                  return ctx.stylize('[Function' + name + ']', 'special')
                }
                if (isRegExp(value)) {
                  return ctx.stylize(
                    RegExp.prototype.toString.call(value),
                    'regexp'
                  )
                }
                if (isDate(value)) {
                  return ctx.stylize(
                    Date.prototype.toString.call(value),
                    'date'
                  )
                }
                if (isError(value)) {
                  return formatError(value)
                }
              }

              var base = '',
                array = false,
                braces = ['{', '}']

              // Make Array say that they are Array
              if (isArray(value)) {
                array = true
                braces = ['[', ']']
              }

              // Make functions say that they are functions
              if (isFunction(value)) {
                var n = value.name ? ': ' + value.name : ''
                base = ' [Function' + n + ']'
              }

              // Make RegExps say that they are RegExps
              if (isRegExp(value)) {
                base = ' ' + RegExp.prototype.toString.call(value)
              }

              // Make dates with properties first say the date
              if (isDate(value)) {
                base = ' ' + Date.prototype.toUTCString.call(value)
              }

              // Make error with message first say the error
              if (isError(value)) {
                base = ' ' + formatError(value)
              }

              if (keys.length === 0 && (!array || value.length == 0)) {
                return braces[0] + base + braces[1]
              }

              if (recurseTimes < 0) {
                if (isRegExp(value)) {
                  return ctx.stylize(
                    RegExp.prototype.toString.call(value),
                    'regexp'
                  )
                } else {
                  return ctx.stylize('[Object]', 'special')
                }
              }

              ctx.seen.push(value)

              var output
              if (array) {
                output = formatArray(
                  ctx,
                  value,
                  recurseTimes,
                  visibleKeys,
                  keys
                )
              } else {
                output = keys.map(function (key) {
                  return formatProperty(
                    ctx,
                    value,
                    recurseTimes,
                    visibleKeys,
                    key,
                    array
                  )
                })
              }

              ctx.seen.pop()

              return reduceToSingleString(output, base, braces)
            }

            function formatPrimitive(ctx, value) {
              if (isUndefined(value))
                return ctx.stylize('undefined', 'undefined')
              if (isString(value)) {
                var simple =
                  "'" +
                  JSON.stringify(value)
                    .replace(/^"|"$/g, '')
                    .replace(/'/g, "\\'")
                    .replace(/\\"/g, '"') +
                  "'"
                return ctx.stylize(simple, 'string')
              }
              if (isNumber(value)) return ctx.stylize('' + value, 'number')
              if (isBoolean(value)) return ctx.stylize('' + value, 'boolean')
              // For some reason typeof null is "object", so special case here.
              if (isNull(value)) return ctx.stylize('null', 'null')
            }

            function formatError(value) {
              return '[' + Error.prototype.toString.call(value) + ']'
            }

            function formatArray(ctx, value, recurseTimes, visibleKeys, keys) {
              var output = []
              for (var i = 0, l = value.length; i < l; ++i) {
                if (hasOwnProperty(value, String(i))) {
                  output.push(
                    formatProperty(
                      ctx,
                      value,
                      recurseTimes,
                      visibleKeys,
                      String(i),
                      true
                    )
                  )
                } else {
                  output.push('')
                }
              }
              keys.forEach(function (key) {
                if (!key.match(/^\d+$/)) {
                  output.push(
                    formatProperty(
                      ctx,
                      value,
                      recurseTimes,
                      visibleKeys,
                      key,
                      true
                    )
                  )
                }
              })
              return output
            }

            function formatProperty(
              ctx,
              value,
              recurseTimes,
              visibleKeys,
              key,
              array
            ) {
              var name, str, desc
              desc = Object.getOwnPropertyDescriptor(value, key) || {
                value: value[key],
              }
              if (desc.get) {
                if (desc.set) {
                  str = ctx.stylize('[Getter/Setter]', 'special')
                } else {
                  str = ctx.stylize('[Getter]', 'special')
                }
              } else {
                if (desc.set) {
                  str = ctx.stylize('[Setter]', 'special')
                }
              }
              if (!hasOwnProperty(visibleKeys, key)) {
                name = '[' + key + ']'
              }
              if (!str) {
                if (ctx.seen.indexOf(desc.value) < 0) {
                  if (isNull(recurseTimes)) {
                    str = formatValue(ctx, desc.value, null)
                  } else {
                    str = formatValue(ctx, desc.value, recurseTimes - 1)
                  }
                  if (str.indexOf('\n') > -1) {
                    if (array) {
                      str = str
                        .split('\n')
                        .map(function (line) {
                          return '  ' + line
                        })
                        .join('\n')
                        .substr(2)
                    } else {
                      str =
                        '\n' +
                        str
                          .split('\n')
                          .map(function (line) {
                            return '   ' + line
                          })
                          .join('\n')
                    }
                  }
                } else {
                  str = ctx.stylize('[Circular]', 'special')
                }
              }
              if (isUndefined(name)) {
                if (array && key.match(/^\d+$/)) {
                  return str
                }
                name = JSON.stringify('' + key)
                if (name.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)) {
                  name = name.substr(1, name.length - 2)
                  name = ctx.stylize(name, 'name')
                } else {
                  name = name
                    .replace(/'/g, "\\'")
                    .replace(/\\"/g, '"')
                    .replace(/(^"|"$)/g, "'")
                  name = ctx.stylize(name, 'string')
                }
              }

              return name + ': ' + str
            }

            function reduceToSingleString(output, base, braces) {
              var numLinesEst = 0
              var length = output.reduce(function (prev, cur) {
                numLinesEst++
                if (cur.indexOf('\n') >= 0) numLinesEst++
                return prev + cur.replace(/\u001b\[\d\d?m/g, '').length + 1
              }, 0)

              if (length > 60) {
                return (
                  braces[0] +
                  (base === '' ? '' : base + '\n ') +
                  ' ' +
                  output.join(',\n  ') +
                  ' ' +
                  braces[1]
                )
              }

              return (
                braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1]
              )
            }

            // NOTE: These type checking functions intentionally don't use `instanceof`
            // because it is fragile and can be easily faked with `Object.create()`.
            function isArray(ar) {
              return Array.isArray(ar)
            }
            exports.isArray = isArray

            function isBoolean(arg) {
              return typeof arg === 'boolean'
            }
            exports.isBoolean = isBoolean

            function isNull(arg) {
              return arg === null
            }
            exports.isNull = isNull

            function isNullOrUndefined(arg) {
              return arg == null
            }
            exports.isNullOrUndefined = isNullOrUndefined

            function isNumber(arg) {
              return typeof arg === 'number'
            }
            exports.isNumber = isNumber

            function isString(arg) {
              return typeof arg === 'string'
            }
            exports.isString = isString

            function isSymbol(arg) {
              return typeof arg === 'symbol'
            }
            exports.isSymbol = isSymbol

            function isUndefined(arg) {
              return arg === void 0
            }
            exports.isUndefined = isUndefined

            function isRegExp(re) {
              return isObject(re) && objectToString(re) === '[object RegExp]'
            }
            exports.isRegExp = isRegExp

            function isObject(arg) {
              return typeof arg === 'object' && arg !== null
            }
            exports.isObject = isObject

            function isDate(d) {
              return isObject(d) && objectToString(d) === '[object Date]'
            }
            exports.isDate = isDate

            function isError(e) {
              return (
                isObject(e) &&
                (objectToString(e) === '[object Error]' || e instanceof Error)
              )
            }
            exports.isError = isError

            function isFunction(arg) {
              return typeof arg === 'function'
            }
            exports.isFunction = isFunction

            function isPrimitive(arg) {
              return (
                arg === null ||
                typeof arg === 'boolean' ||
                typeof arg === 'number' ||
                typeof arg === 'string' ||
                typeof arg === 'symbol' || // ES6 symbol
                typeof arg === 'undefined'
              )
            }
            exports.isPrimitive = isPrimitive

            exports.isBuffer = require('./support/isBuffer')

            function objectToString(o) {
              return Object.prototype.toString.call(o)
            }

            function pad(n) {
              return n < 10 ? '0' + n.toString(10) : n.toString(10)
            }

            var months = [
              'Jan',
              'Feb',
              'Mar',
              'Apr',
              'May',
              'Jun',
              'Jul',
              'Aug',
              'Sep',
              'Oct',
              'Nov',
              'Dec',
            ]

            // 26 Feb 16:19:34
            function timestamp() {
              var d = new Date()
              var time = [
                pad(d.getHours()),
                pad(d.getMinutes()),
                pad(d.getSeconds()),
              ].join(':')
              return [d.getDate(), months[d.getMonth()], time].join(' ')
            }

            // log is just a thin wrapper to console.log that prepends a timestamp
            exports.log = function () {
              console.log(
                '%s - %s',
                timestamp(),
                exports.format.apply(exports, arguments)
              )
            }

            /**
             * Inherit the prototype methods from one constructor into another.
             *
             * The Function.prototype.inherits from lang.js rewritten as a standalone
             * function (not on Function.prototype). NOTE: If this file is to be loaded
             * during bootstrapping this function needs to be rewritten using some native
             * functions as prototype setup using normal JavaScript does not work as
             * expected during bootstrapping (see mirror.js in r114903).
             *
             * @param {function} ctor Constructor function which needs to inherit the
             *     prototype.
             * @param {function} superCtor Constructor function to inherit prototype from.
             */
            exports.inherits = require('inherits')

            exports._extend = function (origin, add) {
              // Don't do anything if add isn't an object
              if (!add || !isObject(add)) return origin

              var keys = Object.keys(add)
              var i = keys.length
              while (i--) {
                origin[keys[i]] = add[keys[i]]
              }
              return origin
            }

            function hasOwnProperty(obj, prop) {
              return Object.prototype.hasOwnProperty.call(obj, prop)
            }
          }.call(
            this,
            require('_process'),
            typeof global !== 'undefined'
              ? global
              : typeof self !== 'undefined'
              ? self
              : typeof window !== 'undefined'
              ? window
              : {}
          ))
        },
        { './support/isBuffer': 10, _process: 13, inherits: 9 },
      ],
      12: [
        function (require, module, exports) {
          ;(function (process) {
            // .dirname, .basename, and .extname methods are extracted from Node.js v8.11.1,
            // backported and transplited with Babel, with backwards-compat fixes

            // Copyright Joyent, Inc. and other Node contributors.
            //
            // Permission is hereby granted, free of charge, to any person obtaining a
            // copy of this software and associated documentation files (the
            // "Software"), to deal in the Software without restriction, including
            // without limitation the rights to use, copy, modify, merge, publish,
            // distribute, sublicense, and/or sell copies of the Software, and to permit
            // persons to whom the Software is furnished to do so, subject to the
            // following conditions:
            //
            // The above copyright notice and this permission notice shall be included
            // in all copies or substantial portions of the Software.
            //
            // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
            // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
            // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
            // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
            // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
            // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
            // USE OR OTHER DEALINGS IN THE SOFTWARE.

            // resolves . and .. elements in a path array with directory names there
            // must be no slashes, empty elements, or device names (c:\) in the array
            // (so also no leading and trailing slashes - it does not distinguish
            // relative and absolute paths)
            function normalizeArray(parts, allowAboveRoot) {
              // if the path tries to go above the root, `up` ends up > 0
              var up = 0
              for (var i = parts.length - 1; i >= 0; i--) {
                var last = parts[i]
                if (last === '.') {
                  parts.splice(i, 1)
                } else if (last === '..') {
                  parts.splice(i, 1)
                  up++
                } else if (up) {
                  parts.splice(i, 1)
                  up--
                }
              }

              // if the path is allowed to go above the root, restore leading ..s
              if (allowAboveRoot) {
                for (; up--; up) {
                  parts.unshift('..')
                }
              }

              return parts
            }

            // path.resolve([from ...], to)
            // posix version
            exports.resolve = function () {
              var resolvedPath = '',
                resolvedAbsolute = false

              for (
                var i = arguments.length - 1;
                i >= -1 && !resolvedAbsolute;
                i--
              ) {
                var path = i >= 0 ? arguments[i] : process.cwd()

                // Skip empty and invalid entries
                if (typeof path !== 'string') {
                  throw new TypeError(
                    'Arguments to path.resolve must be strings'
                  )
                } else if (!path) {
                  continue
                }

                resolvedPath = path + '/' + resolvedPath
                resolvedAbsolute = path.charAt(0) === '/'
              }

              // At this point the path should be resolved to a full absolute path, but
              // handle relative paths to be safe (might happen when process.cwd() fails)

              // Normalize the path
              resolvedPath = normalizeArray(
                filter(resolvedPath.split('/'), function (p) {
                  return !!p
                }),
                !resolvedAbsolute
              ).join('/')

              return (resolvedAbsolute ? '/' : '') + resolvedPath || '.'
            }

            // path.normalize(path)
            // posix version
            exports.normalize = function (path) {
              var isAbsolute = exports.isAbsolute(path),
                trailingSlash = substr(path, -1) === '/'

              // Normalize the path
              path = normalizeArray(
                filter(path.split('/'), function (p) {
                  return !!p
                }),
                !isAbsolute
              ).join('/')

              if (!path && !isAbsolute) {
                path = '.'
              }
              if (path && trailingSlash) {
                path += '/'
              }

              return (isAbsolute ? '/' : '') + path
            }

            // posix version
            exports.isAbsolute = function (path) {
              return path.charAt(0) === '/'
            }

            // posix version
            exports.join = function () {
              var paths = Array.prototype.slice.call(arguments, 0)
              return exports.normalize(
                filter(paths, function (p, index) {
                  if (typeof p !== 'string') {
                    throw new TypeError(
                      'Arguments to path.join must be strings'
                    )
                  }
                  return p
                }).join('/')
              )
            }

            // path.relative(from, to)
            // posix version
            exports.relative = function (from, to) {
              from = exports.resolve(from).substr(1)
              to = exports.resolve(to).substr(1)

              function trim(arr) {
                var start = 0
                for (; start < arr.length; start++) {
                  if (arr[start] !== '') break
                }

                var end = arr.length - 1
                for (; end >= 0; end--) {
                  if (arr[end] !== '') break
                }

                if (start > end) return []
                return arr.slice(start, end - start + 1)
              }

              var fromParts = trim(from.split('/'))
              var toParts = trim(to.split('/'))

              var length = Math.min(fromParts.length, toParts.length)
              var samePartsLength = length
              for (var i = 0; i < length; i++) {
                if (fromParts[i] !== toParts[i]) {
                  samePartsLength = i
                  break
                }
              }

              var outputParts = []
              for (var i = samePartsLength; i < fromParts.length; i++) {
                outputParts.push('..')
              }

              outputParts = outputParts.concat(toParts.slice(samePartsLength))

              return outputParts.join('/')
            }

            exports.sep = '/'
            exports.delimiter = ':'

            exports.dirname = function (path) {
              if (typeof path !== 'string') path = path + ''
              if (path.length === 0) return '.'
              var code = path.charCodeAt(0)
              var hasRoot = code === 47 /*/*/
              var end = -1
              var matchedSlash = true
              for (var i = path.length - 1; i >= 1; --i) {
                code = path.charCodeAt(i)
                if (code === 47 /*/*/) {
                  if (!matchedSlash) {
                    end = i
                    break
                  }
                } else {
                  // We saw the first non-path separator
                  matchedSlash = false
                }
              }

              if (end === -1) return hasRoot ? '/' : '.'
              if (hasRoot && end === 1) {
                // return '//';
                // Backwards-compat fix:
                return '/'
              }
              return path.slice(0, end)
            }

            function basename(path) {
              if (typeof path !== 'string') path = path + ''

              var start = 0
              var end = -1
              var matchedSlash = true
              var i

              for (i = path.length - 1; i >= 0; --i) {
                if (path.charCodeAt(i) === 47 /*/*/) {
                  // If we reached a path separator that was not part of a set of path
                  // separators at the end of the string, stop now
                  if (!matchedSlash) {
                    start = i + 1
                    break
                  }
                } else if (end === -1) {
                  // We saw the first non-path separator, mark this as the end of our
                  // path component
                  matchedSlash = false
                  end = i + 1
                }
              }

              if (end === -1) return ''
              return path.slice(start, end)
            }

            // Uses a mixed approach for backwards-compatibility, as ext behavior changed
            // in new Node.js versions, so only basename() above is backported here
            exports.basename = function (path, ext) {
              var f = basename(path)
              if (ext && f.substr(-1 * ext.length) === ext) {
                f = f.substr(0, f.length - ext.length)
              }
              return f
            }

            exports.extname = function (path) {
              if (typeof path !== 'string') path = path + ''
              var startDot = -1
              var startPart = 0
              var end = -1
              var matchedSlash = true
              // Track the state of characters (if any) we see before our first dot and
              // after any path separator we find
              var preDotState = 0
              for (var i = path.length - 1; i >= 0; --i) {
                var code = path.charCodeAt(i)
                if (code === 47 /*/*/) {
                  // If we reached a path separator that was not part of a set of path
                  // separators at the end of the string, stop now
                  if (!matchedSlash) {
                    startPart = i + 1
                    break
                  }
                  continue
                }
                if (end === -1) {
                  // We saw the first non-path separator, mark this as the end of our
                  // extension
                  matchedSlash = false
                  end = i + 1
                }
                if (code === 46 /*.*/) {
                  // If this is our first dot, mark it as the start of our extension
                  if (startDot === -1) startDot = i
                  else if (preDotState !== 1) preDotState = 1
                } else if (startDot !== -1) {
                  // We saw a non-dot and non-path separator before our dot, so we should
                  // have a good chance at having a non-empty extension
                  preDotState = -1
                }
              }

              if (
                startDot === -1 ||
                end === -1 ||
                // We saw a non-dot character immediately before the dot
                preDotState === 0 ||
                // The (right-most) trimmed path component is exactly '..'
                (preDotState === 1 &&
                  startDot === end - 1 &&
                  startDot === startPart + 1)
              ) {
                return ''
              }
              return path.slice(startDot, end)
            }

            function filter(xs, f) {
              if (xs.filter) return xs.filter(f)
              var res = []
              for (var i = 0; i < xs.length; i++) {
                if (f(xs[i], i, xs)) res.push(xs[i])
              }
              return res
            }

            // String.prototype.substr - negative index don't work in IE8
            var substr =
              'ab'.substr(-1) === 'b'
                ? function (str, start, len) {
                    return str.substr(start, len)
                  }
                : function (str, start, len) {
                    if (start < 0) start = str.length + start
                    return str.substr(start, len)
                  }
          }.call(this, require('_process')))
        },
        { _process: 13 },
      ],
      13: [
        function (require, module, exports) {
          // shim for using process in browser
          var process = (module.exports = {})

          // cached from whatever global is present so that test runners that stub it
          // don't break things.  But we need to wrap it in a try catch in case it is
          // wrapped in strict mode code which doesn't define any globals.  It's inside a
          // function because try/catches deoptimize in certain engines.

          var cachedSetTimeout
          var cachedClearTimeout

          function defaultSetTimout() {
            throw new Error('setTimeout has not been defined')
          }
          function defaultClearTimeout() {
            throw new Error('clearTimeout has not been defined')
          }
          ;(function () {
            try {
              if (typeof setTimeout === 'function') {
                cachedSetTimeout = setTimeout
              } else {
                cachedSetTimeout = defaultSetTimout
              }
            } catch (e) {
              cachedSetTimeout = defaultSetTimout
            }
            try {
              if (typeof clearTimeout === 'function') {
                cachedClearTimeout = clearTimeout
              } else {
                cachedClearTimeout = defaultClearTimeout
              }
            } catch (e) {
              cachedClearTimeout = defaultClearTimeout
            }
          })()
          function runTimeout(fun) {
            if (cachedSetTimeout === setTimeout) {
              //normal enviroments in sane situations
              return setTimeout(fun, 0)
            }
            // if setTimeout wasn't available but was latter defined
            if (
              (cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) &&
              setTimeout
            ) {
              cachedSetTimeout = setTimeout
              return setTimeout(fun, 0)
            }
            try {
              // when when somebody has screwed with setTimeout but no I.E. maddness
              return cachedSetTimeout(fun, 0)
            } catch (e) {
              try {
                // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
                return cachedSetTimeout.call(null, fun, 0)
              } catch (e) {
                // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
                return cachedSetTimeout.call(this, fun, 0)
              }
            }
          }
          function runClearTimeout(marker) {
            if (cachedClearTimeout === clearTimeout) {
              //normal enviroments in sane situations
              return clearTimeout(marker)
            }
            // if clearTimeout wasn't available but was latter defined
            if (
              (cachedClearTimeout === defaultClearTimeout ||
                !cachedClearTimeout) &&
              clearTimeout
            ) {
              cachedClearTimeout = clearTimeout
              return clearTimeout(marker)
            }
            try {
              // when when somebody has screwed with setTimeout but no I.E. maddness
              return cachedClearTimeout(marker)
            } catch (e) {
              try {
                // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
                return cachedClearTimeout.call(null, marker)
              } catch (e) {
                // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
                // Some versions of I.E. have different rules for clearTimeout vs setTimeout
                return cachedClearTimeout.call(this, marker)
              }
            }
          }
          var queue = []
          var draining = false
          var currentQueue
          var queueIndex = -1

          function cleanUpNextTick() {
            if (!draining || !currentQueue) {
              return
            }
            draining = false
            if (currentQueue.length) {
              queue = currentQueue.concat(queue)
            } else {
              queueIndex = -1
            }
            if (queue.length) {
              drainQueue()
            }
          }

          function drainQueue() {
            if (draining) {
              return
            }
            var timeout = runTimeout(cleanUpNextTick)
            draining = true

            var len = queue.length
            while (len) {
              currentQueue = queue
              queue = []
              while (++queueIndex < len) {
                if (currentQueue) {
                  currentQueue[queueIndex].run()
                }
              }
              queueIndex = -1
              len = queue.length
            }
            currentQueue = null
            draining = false
            runClearTimeout(timeout)
          }

          process.nextTick = function (fun) {
            var args = new Array(arguments.length - 1)
            if (arguments.length > 1) {
              for (var i = 1; i < arguments.length; i++) {
                args[i - 1] = arguments[i]
              }
            }
            queue.push(new Item(fun, args))
            if (queue.length === 1 && !draining) {
              runTimeout(drainQueue)
            }
          }

          // v8 likes predictible objects
          function Item(fun, array) {
            this.fun = fun
            this.array = array
          }
          Item.prototype.run = function () {
            this.fun.apply(null, this.array)
          }
          process.title = 'browser'
          process.browser = true
          process.env = {}
          process.argv = []
          process.version = '' // empty string to avoid regexp issues
          process.versions = {}

          function noop() {}

          process.on = noop
          process.addListener = noop
          process.once = noop
          process.off = noop
          process.removeListener = noop
          process.removeAllListeners = noop
          process.emit = noop
          process.prependListener = noop
          process.prependOnceListener = noop

          process.listeners = function (name) {
            return []
          }

          process.binding = function (name) {
            throw new Error('process.binding is not supported')
          }

          process.cwd = function () {
            return '/'
          }
          process.chdir = function (dir) {
            throw new Error('process.chdir is not supported')
          }
          process.umask = function () {
            return 0
          }
        },
        {},
      ],
      14: [
        function (require, module, exports) {
          ;(function webpackUniversalModuleDefinition(root, factory) {
            /* istanbul ignore next */
            if (typeof exports === 'object' && typeof module === 'object')
              module.exports = factory()
            else if (typeof define === 'function' && define.amd)
              define([], factory)
            /* istanbul ignore next */ else if (typeof exports === 'object')
              exports['esprima'] = factory()
            else root['esprima'] = factory()
          })(this, function () {
            return /******/ (function (modules) {
              // webpackBootstrap
              /******/ // The module cache
              /******/ var installedModules = {} // The require function

              /******/ /******/ function __webpack_require__(moduleId) {
                /******/ // Check if module is in cache
                /* istanbul ignore if */
                /******/ if (installedModules[moduleId])
                  /******/ return installedModules[moduleId].exports // Create a new module (and put it into the cache)

                /******/ /******/ var module = (installedModules[moduleId] = {
                  /******/ exports: {},
                  /******/ id: moduleId,
                  /******/ loaded: false,
                  /******/
                }) // Execute the module function

                /******/ /******/ modules[moduleId].call(
                  module.exports,
                  module,
                  module.exports,
                  __webpack_require__
                ) // Flag the module as loaded

                /******/ /******/ module.loaded = true // Return the exports of the module

                /******/ /******/ return module.exports
                /******/
              } // expose the modules object (__webpack_modules__)

              /******/ /******/ __webpack_require__.m = modules // expose the module cache

              /******/ /******/ __webpack_require__.c = installedModules // __webpack_public_path__

              /******/ /******/ __webpack_require__.p = '' // Load entry module and return exports

              /******/ /******/ return __webpack_require__(0)
              /******/
            })(
              /************************************************************************/
              /******/ [
                /* 0 */
                /***/ function (module, exports, __webpack_require__) {
                  'use strict'
                  /*
	  Copyright JS Foundation and other contributors, https://js.foundation/

	  Redistribution and use in source and binary forms, with or without
	  modification, are permitted provided that the following conditions are met:

	    * Redistributions of source code must retain the above copyright
	      notice, this list of conditions and the following disclaimer.
	    * Redistributions in binary form must reproduce the above copyright
	      notice, this list of conditions and the following disclaimer in the
	      documentation and/or other materials provided with the distribution.

	  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
	  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
	  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
	  ARE DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY
	  DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
	  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
	  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
	  ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
	  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
	  THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*/
                  Object.defineProperty(exports, '__esModule', { value: true })
                  var comment_handler_1 = __webpack_require__(1)
                  var jsx_parser_1 = __webpack_require__(3)
                  var parser_1 = __webpack_require__(8)
                  var tokenizer_1 = __webpack_require__(15)
                  function parse(code, options, delegate) {
                    var commentHandler = null
                    var proxyDelegate = function (node, metadata) {
                      if (delegate) {
                        delegate(node, metadata)
                      }
                      if (commentHandler) {
                        commentHandler.visit(node, metadata)
                      }
                    }
                    var parserDelegate =
                      typeof delegate === 'function' ? proxyDelegate : null
                    var collectComment = false
                    if (options) {
                      collectComment =
                        typeof options.comment === 'boolean' && options.comment
                      var attachComment =
                        typeof options.attachComment === 'boolean' &&
                        options.attachComment
                      if (collectComment || attachComment) {
                        commentHandler = new comment_handler_1.CommentHandler()
                        commentHandler.attach = attachComment
                        options.comment = true
                        parserDelegate = proxyDelegate
                      }
                    }
                    var isModule = false
                    if (options && typeof options.sourceType === 'string') {
                      isModule = options.sourceType === 'module'
                    }
                    var parser
                    if (
                      options &&
                      typeof options.jsx === 'boolean' &&
                      options.jsx
                    ) {
                      parser = new jsx_parser_1.JSXParser(
                        code,
                        options,
                        parserDelegate
                      )
                    } else {
                      parser = new parser_1.Parser(
                        code,
                        options,
                        parserDelegate
                      )
                    }
                    var program = isModule
                      ? parser.parseModule()
                      : parser.parseScript()
                    var ast = program
                    if (collectComment && commentHandler) {
                      ast.comments = commentHandler.comments
                    }
                    if (parser.config.tokens) {
                      ast.tokens = parser.tokens
                    }
                    if (parser.config.tolerant) {
                      ast.errors = parser.errorHandler.errors
                    }
                    return ast
                  }
                  exports.parse = parse
                  function parseModule(code, options, delegate) {
                    var parsingOptions = options || {}
                    parsingOptions.sourceType = 'module'
                    return parse(code, parsingOptions, delegate)
                  }
                  exports.parseModule = parseModule
                  function parseScript(code, options, delegate) {
                    var parsingOptions = options || {}
                    parsingOptions.sourceType = 'script'
                    return parse(code, parsingOptions, delegate)
                  }
                  exports.parseScript = parseScript
                  function tokenize(code, options, delegate) {
                    var tokenizer = new tokenizer_1.Tokenizer(code, options)
                    var tokens
                    tokens = []
                    try {
                      while (true) {
                        var token = tokenizer.getNextToken()
                        if (!token) {
                          break
                        }
                        if (delegate) {
                          token = delegate(token)
                        }
                        tokens.push(token)
                      }
                    } catch (e) {
                      tokenizer.errorHandler.tolerate(e)
                    }
                    if (tokenizer.errorHandler.tolerant) {
                      tokens.errors = tokenizer.errors()
                    }
                    return tokens
                  }
                  exports.tokenize = tokenize
                  var syntax_1 = __webpack_require__(2)
                  exports.Syntax = syntax_1.Syntax
                  // Sync with *.json manifests.
                  exports.version = '4.0.1'

                  /***/
                },
                /* 1 */
                /***/ function (module, exports, __webpack_require__) {
                  'use strict'
                  Object.defineProperty(exports, '__esModule', { value: true })
                  var syntax_1 = __webpack_require__(2)
                  var CommentHandler = (function () {
                    function CommentHandler() {
                      this.attach = false
                      this.comments = []
                      this.stack = []
                      this.leading = []
                      this.trailing = []
                    }
                    CommentHandler.prototype.insertInnerComments = function (
                      node,
                      metadata
                    ) {
                      //  innnerComments for properties empty block
                      //  `function a() {/** comments **\/}`
                      if (
                        node.type === syntax_1.Syntax.BlockStatement &&
                        node.body.length === 0
                      ) {
                        var innerComments = []
                        for (var i = this.leading.length - 1; i >= 0; --i) {
                          var entry = this.leading[i]
                          if (metadata.end.offset >= entry.start) {
                            innerComments.unshift(entry.comment)
                            this.leading.splice(i, 1)
                            this.trailing.splice(i, 1)
                          }
                        }
                        if (innerComments.length) {
                          node.innerComments = innerComments
                        }
                      }
                    }
                    CommentHandler.prototype.findTrailingComments = function (
                      metadata
                    ) {
                      var trailingComments = []
                      if (this.trailing.length > 0) {
                        for (var i = this.trailing.length - 1; i >= 0; --i) {
                          var entry_1 = this.trailing[i]
                          if (entry_1.start >= metadata.end.offset) {
                            trailingComments.unshift(entry_1.comment)
                          }
                        }
                        this.trailing.length = 0
                        return trailingComments
                      }
                      var entry = this.stack[this.stack.length - 1]
                      if (entry && entry.node.trailingComments) {
                        var firstComment = entry.node.trailingComments[0]
                        if (
                          firstComment &&
                          firstComment.range[0] >= metadata.end.offset
                        ) {
                          trailingComments = entry.node.trailingComments
                          delete entry.node.trailingComments
                        }
                      }
                      return trailingComments
                    }
                    CommentHandler.prototype.findLeadingComments = function (
                      metadata
                    ) {
                      var leadingComments = []
                      var target
                      while (this.stack.length > 0) {
                        var entry = this.stack[this.stack.length - 1]
                        if (entry && entry.start >= metadata.start.offset) {
                          target = entry.node
                          this.stack.pop()
                        } else {
                          break
                        }
                      }
                      if (target) {
                        var count = target.leadingComments
                          ? target.leadingComments.length
                          : 0
                        for (var i = count - 1; i >= 0; --i) {
                          var comment = target.leadingComments[i]
                          if (comment.range[1] <= metadata.start.offset) {
                            leadingComments.unshift(comment)
                            target.leadingComments.splice(i, 1)
                          }
                        }
                        if (
                          target.leadingComments &&
                          target.leadingComments.length === 0
                        ) {
                          delete target.leadingComments
                        }
                        return leadingComments
                      }
                      for (var i = this.leading.length - 1; i >= 0; --i) {
                        var entry = this.leading[i]
                        if (entry.start <= metadata.start.offset) {
                          leadingComments.unshift(entry.comment)
                          this.leading.splice(i, 1)
                        }
                      }
                      return leadingComments
                    }
                    CommentHandler.prototype.visitNode = function (
                      node,
                      metadata
                    ) {
                      if (
                        node.type === syntax_1.Syntax.Program &&
                        node.body.length > 0
                      ) {
                        return
                      }
                      this.insertInnerComments(node, metadata)
                      var trailingComments = this.findTrailingComments(metadata)
                      var leadingComments = this.findLeadingComments(metadata)
                      if (leadingComments.length > 0) {
                        node.leadingComments = leadingComments
                      }
                      if (trailingComments.length > 0) {
                        node.trailingComments = trailingComments
                      }
                      this.stack.push({
                        node: node,
                        start: metadata.start.offset,
                      })
                    }
                    CommentHandler.prototype.visitComment = function (
                      node,
                      metadata
                    ) {
                      var type = node.type[0] === 'L' ? 'Line' : 'Block'
                      var comment = {
                        type: type,
                        value: node.value,
                      }
                      if (node.range) {
                        comment.range = node.range
                      }
                      if (node.loc) {
                        comment.loc = node.loc
                      }
                      this.comments.push(comment)
                      if (this.attach) {
                        var entry = {
                          comment: {
                            type: type,
                            value: node.value,
                            range: [metadata.start.offset, metadata.end.offset],
                          },
                          start: metadata.start.offset,
                        }
                        if (node.loc) {
                          entry.comment.loc = node.loc
                        }
                        node.type = type
                        this.leading.push(entry)
                        this.trailing.push(entry)
                      }
                    }
                    CommentHandler.prototype.visit = function (node, metadata) {
                      if (node.type === 'LineComment') {
                        this.visitComment(node, metadata)
                      } else if (node.type === 'BlockComment') {
                        this.visitComment(node, metadata)
                      } else if (this.attach) {
                        this.visitNode(node, metadata)
                      }
                    }
                    return CommentHandler
                  })()
                  exports.CommentHandler = CommentHandler

                  /***/
                },
                /* 2 */
                /***/ function (module, exports) {
                  'use strict'
                  Object.defineProperty(exports, '__esModule', { value: true })
                  exports.Syntax = {
                    AssignmentExpression: 'AssignmentExpression',
                    AssignmentPattern: 'AssignmentPattern',
                    ArrayExpression: 'ArrayExpression',
                    ArrayPattern: 'ArrayPattern',
                    ArrowFunctionExpression: 'ArrowFunctionExpression',
                    AwaitExpression: 'AwaitExpression',
                    BlockStatement: 'BlockStatement',
                    BinaryExpression: 'BinaryExpression',
                    BreakStatement: 'BreakStatement',
                    CallExpression: 'CallExpression',
                    CatchClause: 'CatchClause',
                    ClassBody: 'ClassBody',
                    ClassDeclaration: 'ClassDeclaration',
                    ClassExpression: 'ClassExpression',
                    ConditionalExpression: 'ConditionalExpression',
                    ContinueStatement: 'ContinueStatement',
                    DoWhileStatement: 'DoWhileStatement',
                    DebuggerStatement: 'DebuggerStatement',
                    EmptyStatement: 'EmptyStatement',
                    ExportAllDeclaration: 'ExportAllDeclaration',
                    ExportDefaultDeclaration: 'ExportDefaultDeclaration',
                    ExportNamedDeclaration: 'ExportNamedDeclaration',
                    ExportSpecifier: 'ExportSpecifier',
                    ExpressionStatement: 'ExpressionStatement',
                    ForStatement: 'ForStatement',
                    ForOfStatement: 'ForOfStatement',
                    ForInStatement: 'ForInStatement',
                    FunctionDeclaration: 'FunctionDeclaration',
                    FunctionExpression: 'FunctionExpression',
                    Identifier: 'Identifier',
                    IfStatement: 'IfStatement',
                    ImportDeclaration: 'ImportDeclaration',
                    ImportDefaultSpecifier: 'ImportDefaultSpecifier',
                    ImportNamespaceSpecifier: 'ImportNamespaceSpecifier',
                    ImportSpecifier: 'ImportSpecifier',
                    Literal: 'Literal',
                    LabeledStatement: 'LabeledStatement',
                    LogicalExpression: 'LogicalExpression',
                    MemberExpression: 'MemberExpression',
                    MetaProperty: 'MetaProperty',
                    MethodDefinition: 'MethodDefinition',
                    NewExpression: 'NewExpression',
                    ObjectExpression: 'ObjectExpression',
                    ObjectPattern: 'ObjectPattern',
                    Program: 'Program',
                    Property: 'Property',
                    RestElement: 'RestElement',
                    ReturnStatement: 'ReturnStatement',
                    SequenceExpression: 'SequenceExpression',
                    SpreadElement: 'SpreadElement',
                    Super: 'Super',
                    SwitchCase: 'SwitchCase',
                    SwitchStatement: 'SwitchStatement',
                    TaggedTemplateExpression: 'TaggedTemplateExpression',
                    TemplateElement: 'TemplateElement',
                    TemplateLiteral: 'TemplateLiteral',
                    ThisExpression: 'ThisExpression',
                    ThrowStatement: 'ThrowStatement',
                    TryStatement: 'TryStatement',
                    UnaryExpression: 'UnaryExpression',
                    UpdateExpression: 'UpdateExpression',
                    VariableDeclaration: 'VariableDeclaration',
                    VariableDeclarator: 'VariableDeclarator',
                    WhileStatement: 'WhileStatement',
                    WithStatement: 'WithStatement',
                    YieldExpression: 'YieldExpression',
                  }

                  /***/
                },
                /* 3 */
                /***/ function (module, exports, __webpack_require__) {
                  'use strict'
                  /* istanbul ignore next */
                  var __extends =
                    (this && this.__extends) ||
                    (function () {
                      var extendStatics =
                        Object.setPrototypeOf ||
                        ({ __proto__: [] } instanceof Array &&
                          function (d, b) {
                            d.__proto__ = b
                          }) ||
                        function (d, b) {
                          for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]
                        }
                      return function (d, b) {
                        extendStatics(d, b)
                        function __() {
                          this.constructor = d
                        }
                        d.prototype =
                          b === null
                            ? Object.create(b)
                            : ((__.prototype = b.prototype), new __())
                      }
                    })()
                  Object.defineProperty(exports, '__esModule', { value: true })
                  var character_1 = __webpack_require__(4)
                  var JSXNode = __webpack_require__(5)
                  var jsx_syntax_1 = __webpack_require__(6)
                  var Node = __webpack_require__(7)
                  var parser_1 = __webpack_require__(8)
                  var token_1 = __webpack_require__(13)
                  var xhtml_entities_1 = __webpack_require__(14)
                  token_1.TokenName[100 /* Identifier */] = 'JSXIdentifier'
                  token_1.TokenName[101 /* Text */] = 'JSXText'
                  // Fully qualified element name, e.g. <svg:path> returns "svg:path"
                  function getQualifiedElementName(elementName) {
                    var qualifiedName
                    switch (elementName.type) {
                      case jsx_syntax_1.JSXSyntax.JSXIdentifier:
                        var id = elementName
                        qualifiedName = id.name
                        break
                      case jsx_syntax_1.JSXSyntax.JSXNamespacedName:
                        var ns = elementName
                        qualifiedName =
                          getQualifiedElementName(ns.namespace) +
                          ':' +
                          getQualifiedElementName(ns.name)
                        break
                      case jsx_syntax_1.JSXSyntax.JSXMemberExpression:
                        var expr = elementName
                        qualifiedName =
                          getQualifiedElementName(expr.object) +
                          '.' +
                          getQualifiedElementName(expr.property)
                        break
                      /* istanbul ignore next */
                      default:
                        break
                    }
                    return qualifiedName
                  }
                  var JSXParser = (function (_super) {
                    __extends(JSXParser, _super)
                    function JSXParser(code, options, delegate) {
                      return _super.call(this, code, options, delegate) || this
                    }
                    JSXParser.prototype.parsePrimaryExpression = function () {
                      return this.match('<')
                        ? this.parseJSXRoot()
                        : _super.prototype.parsePrimaryExpression.call(this)
                    }
                    JSXParser.prototype.startJSX = function () {
                      // Unwind the scanner before the lookahead token.
                      this.scanner.index = this.startMarker.index
                      this.scanner.lineNumber = this.startMarker.line
                      this.scanner.lineStart =
                        this.startMarker.index - this.startMarker.column
                    }
                    JSXParser.prototype.finishJSX = function () {
                      // Prime the next lookahead.
                      this.nextToken()
                    }
                    JSXParser.prototype.reenterJSX = function () {
                      this.startJSX()
                      this.expectJSX('}')
                      // Pop the closing '}' added from the lookahead.
                      if (this.config.tokens) {
                        this.tokens.pop()
                      }
                    }
                    JSXParser.prototype.createJSXNode = function () {
                      this.collectComments()
                      return {
                        index: this.scanner.index,
                        line: this.scanner.lineNumber,
                        column: this.scanner.index - this.scanner.lineStart,
                      }
                    }
                    JSXParser.prototype.createJSXChildNode = function () {
                      return {
                        index: this.scanner.index,
                        line: this.scanner.lineNumber,
                        column: this.scanner.index - this.scanner.lineStart,
                      }
                    }
                    JSXParser.prototype.scanXHTMLEntity = function (quote) {
                      var result = '&'
                      var valid = true
                      var terminated = false
                      var numeric = false
                      var hex = false
                      while (!this.scanner.eof() && valid && !terminated) {
                        var ch = this.scanner.source[this.scanner.index]
                        if (ch === quote) {
                          break
                        }
                        terminated = ch === ';'
                        result += ch
                        ++this.scanner.index
                        if (!terminated) {
                          switch (result.length) {
                            case 2:
                              // e.g. '&#123;'
                              numeric = ch === '#'
                              break
                            case 3:
                              if (numeric) {
                                // e.g. '&#x41;'
                                hex = ch === 'x'
                                valid =
                                  hex ||
                                  character_1.Character.isDecimalDigit(
                                    ch.charCodeAt(0)
                                  )
                                numeric = numeric && !hex
                              }
                              break
                            default:
                              valid =
                                valid &&
                                !(
                                  numeric &&
                                  !character_1.Character.isDecimalDigit(
                                    ch.charCodeAt(0)
                                  )
                                )
                              valid =
                                valid &&
                                !(
                                  hex &&
                                  !character_1.Character.isHexDigit(
                                    ch.charCodeAt(0)
                                  )
                                )
                              break
                          }
                        }
                      }
                      if (valid && terminated && result.length > 2) {
                        // e.g. '&#x41;' becomes just '#x41'
                        var str = result.substr(1, result.length - 2)
                        if (numeric && str.length > 1) {
                          result = String.fromCharCode(
                            parseInt(str.substr(1), 10)
                          )
                        } else if (hex && str.length > 2) {
                          result = String.fromCharCode(
                            parseInt('0' + str.substr(1), 16)
                          )
                        } else if (
                          !numeric &&
                          !hex &&
                          xhtml_entities_1.XHTMLEntities[str]
                        ) {
                          result = xhtml_entities_1.XHTMLEntities[str]
                        }
                      }
                      return result
                    }
                    // Scan the next JSX token. This replaces Scanner#lex when in JSX mode.
                    JSXParser.prototype.lexJSX = function () {
                      var cp = this.scanner.source.charCodeAt(
                        this.scanner.index
                      )
                      // < > / : = { }
                      if (
                        cp === 60 ||
                        cp === 62 ||
                        cp === 47 ||
                        cp === 58 ||
                        cp === 61 ||
                        cp === 123 ||
                        cp === 125
                      ) {
                        var value = this.scanner.source[this.scanner.index++]
                        return {
                          type: 7 /* Punctuator */,
                          value: value,
                          lineNumber: this.scanner.lineNumber,
                          lineStart: this.scanner.lineStart,
                          start: this.scanner.index - 1,
                          end: this.scanner.index,
                        }
                      }
                      // " '
                      if (cp === 34 || cp === 39) {
                        var start = this.scanner.index
                        var quote = this.scanner.source[this.scanner.index++]
                        var str = ''
                        while (!this.scanner.eof()) {
                          var ch = this.scanner.source[this.scanner.index++]
                          if (ch === quote) {
                            break
                          } else if (ch === '&') {
                            str += this.scanXHTMLEntity(quote)
                          } else {
                            str += ch
                          }
                        }
                        return {
                          type: 8 /* StringLiteral */,
                          value: str,
                          lineNumber: this.scanner.lineNumber,
                          lineStart: this.scanner.lineStart,
                          start: start,
                          end: this.scanner.index,
                        }
                      }
                      // ... or .
                      if (cp === 46) {
                        var n1 = this.scanner.source.charCodeAt(
                          this.scanner.index + 1
                        )
                        var n2 = this.scanner.source.charCodeAt(
                          this.scanner.index + 2
                        )
                        var value = n1 === 46 && n2 === 46 ? '...' : '.'
                        var start = this.scanner.index
                        this.scanner.index += value.length
                        return {
                          type: 7 /* Punctuator */,
                          value: value,
                          lineNumber: this.scanner.lineNumber,
                          lineStart: this.scanner.lineStart,
                          start: start,
                          end: this.scanner.index,
                        }
                      }
                      // `
                      if (cp === 96) {
                        // Only placeholder, since it will be rescanned as a real assignment expression.
                        return {
                          type: 10 /* Template */,
                          value: '',
                          lineNumber: this.scanner.lineNumber,
                          lineStart: this.scanner.lineStart,
                          start: this.scanner.index,
                          end: this.scanner.index,
                        }
                      }
                      // Identifer can not contain backslash (char code 92).
                      if (
                        character_1.Character.isIdentifierStart(cp) &&
                        cp !== 92
                      ) {
                        var start = this.scanner.index
                        ++this.scanner.index
                        while (!this.scanner.eof()) {
                          var ch = this.scanner.source.charCodeAt(
                            this.scanner.index
                          )
                          if (
                            character_1.Character.isIdentifierPart(ch) &&
                            ch !== 92
                          ) {
                            ++this.scanner.index
                          } else if (ch === 45) {
                            // Hyphen (char code 45) can be part of an identifier.
                            ++this.scanner.index
                          } else {
                            break
                          }
                        }
                        var id = this.scanner.source.slice(
                          start,
                          this.scanner.index
                        )
                        return {
                          type: 100 /* Identifier */,
                          value: id,
                          lineNumber: this.scanner.lineNumber,
                          lineStart: this.scanner.lineStart,
                          start: start,
                          end: this.scanner.index,
                        }
                      }
                      return this.scanner.lex()
                    }
                    JSXParser.prototype.nextJSXToken = function () {
                      this.collectComments()
                      this.startMarker.index = this.scanner.index
                      this.startMarker.line = this.scanner.lineNumber
                      this.startMarker.column =
                        this.scanner.index - this.scanner.lineStart
                      var token = this.lexJSX()
                      this.lastMarker.index = this.scanner.index
                      this.lastMarker.line = this.scanner.lineNumber
                      this.lastMarker.column =
                        this.scanner.index - this.scanner.lineStart
                      if (this.config.tokens) {
                        this.tokens.push(this.convertToken(token))
                      }
                      return token
                    }
                    JSXParser.prototype.nextJSXText = function () {
                      this.startMarker.index = this.scanner.index
                      this.startMarker.line = this.scanner.lineNumber
                      this.startMarker.column =
                        this.scanner.index - this.scanner.lineStart
                      var start = this.scanner.index
                      var text = ''
                      while (!this.scanner.eof()) {
                        var ch = this.scanner.source[this.scanner.index]
                        if (ch === '{' || ch === '<') {
                          break
                        }
                        ++this.scanner.index
                        text += ch
                        if (
                          character_1.Character.isLineTerminator(
                            ch.charCodeAt(0)
                          )
                        ) {
                          ++this.scanner.lineNumber
                          if (
                            ch === '\r' &&
                            this.scanner.source[this.scanner.index] === '\n'
                          ) {
                            ++this.scanner.index
                          }
                          this.scanner.lineStart = this.scanner.index
                        }
                      }
                      this.lastMarker.index = this.scanner.index
                      this.lastMarker.line = this.scanner.lineNumber
                      this.lastMarker.column =
                        this.scanner.index - this.scanner.lineStart
                      var token = {
                        type: 101 /* Text */,
                        value: text,
                        lineNumber: this.scanner.lineNumber,
                        lineStart: this.scanner.lineStart,
                        start: start,
                        end: this.scanner.index,
                      }
                      if (text.length > 0 && this.config.tokens) {
                        this.tokens.push(this.convertToken(token))
                      }
                      return token
                    }
                    JSXParser.prototype.peekJSXToken = function () {
                      var state = this.scanner.saveState()
                      this.scanner.scanComments()
                      var next = this.lexJSX()
                      this.scanner.restoreState(state)
                      return next
                    }
                    // Expect the next JSX token to match the specified punctuator.
                    // If not, an exception will be thrown.
                    JSXParser.prototype.expectJSX = function (value) {
                      var token = this.nextJSXToken()
                      if (
                        token.type !== 7 /* Punctuator */ ||
                        token.value !== value
                      ) {
                        this.throwUnexpectedToken(token)
                      }
                    }
                    // Return true if the next JSX token matches the specified punctuator.
                    JSXParser.prototype.matchJSX = function (value) {
                      var next = this.peekJSXToken()
                      return (
                        next.type === 7 /* Punctuator */ && next.value === value
                      )
                    }
                    JSXParser.prototype.parseJSXIdentifier = function () {
                      var node = this.createJSXNode()
                      var token = this.nextJSXToken()
                      if (token.type !== 100 /* Identifier */) {
                        this.throwUnexpectedToken(token)
                      }
                      return this.finalize(
                        node,
                        new JSXNode.JSXIdentifier(token.value)
                      )
                    }
                    JSXParser.prototype.parseJSXElementName = function () {
                      var node = this.createJSXNode()
                      var elementName = this.parseJSXIdentifier()
                      if (this.matchJSX(':')) {
                        var namespace = elementName
                        this.expectJSX(':')
                        var name_1 = this.parseJSXIdentifier()
                        elementName = this.finalize(
                          node,
                          new JSXNode.JSXNamespacedName(namespace, name_1)
                        )
                      } else if (this.matchJSX('.')) {
                        while (this.matchJSX('.')) {
                          var object = elementName
                          this.expectJSX('.')
                          var property = this.parseJSXIdentifier()
                          elementName = this.finalize(
                            node,
                            new JSXNode.JSXMemberExpression(object, property)
                          )
                        }
                      }
                      return elementName
                    }
                    JSXParser.prototype.parseJSXAttributeName = function () {
                      var node = this.createJSXNode()
                      var attributeName
                      var identifier = this.parseJSXIdentifier()
                      if (this.matchJSX(':')) {
                        var namespace = identifier
                        this.expectJSX(':')
                        var name_2 = this.parseJSXIdentifier()
                        attributeName = this.finalize(
                          node,
                          new JSXNode.JSXNamespacedName(namespace, name_2)
                        )
                      } else {
                        attributeName = identifier
                      }
                      return attributeName
                    }
                    JSXParser.prototype.parseJSXStringLiteralAttribute = function () {
                      var node = this.createJSXNode()
                      var token = this.nextJSXToken()
                      if (token.type !== 8 /* StringLiteral */) {
                        this.throwUnexpectedToken(token)
                      }
                      var raw = this.getTokenRaw(token)
                      return this.finalize(
                        node,
                        new Node.Literal(token.value, raw)
                      )
                    }
                    JSXParser.prototype.parseJSXExpressionAttribute = function () {
                      var node = this.createJSXNode()
                      this.expectJSX('{')
                      this.finishJSX()
                      if (this.match('}')) {
                        this.tolerateError(
                          'JSX attributes must only be assigned a non-empty expression'
                        )
                      }
                      var expression = this.parseAssignmentExpression()
                      this.reenterJSX()
                      return this.finalize(
                        node,
                        new JSXNode.JSXExpressionContainer(expression)
                      )
                    }
                    JSXParser.prototype.parseJSXAttributeValue = function () {
                      return this.matchJSX('{')
                        ? this.parseJSXExpressionAttribute()
                        : this.matchJSX('<')
                        ? this.parseJSXElement()
                        : this.parseJSXStringLiteralAttribute()
                    }
                    JSXParser.prototype.parseJSXNameValueAttribute = function () {
                      var node = this.createJSXNode()
                      var name = this.parseJSXAttributeName()
                      var value = null
                      if (this.matchJSX('=')) {
                        this.expectJSX('=')
                        value = this.parseJSXAttributeValue()
                      }
                      return this.finalize(
                        node,
                        new JSXNode.JSXAttribute(name, value)
                      )
                    }
                    JSXParser.prototype.parseJSXSpreadAttribute = function () {
                      var node = this.createJSXNode()
                      this.expectJSX('{')
                      this.expectJSX('...')
                      this.finishJSX()
                      var argument = this.parseAssignmentExpression()
                      this.reenterJSX()
                      return this.finalize(
                        node,
                        new JSXNode.JSXSpreadAttribute(argument)
                      )
                    }
                    JSXParser.prototype.parseJSXAttributes = function () {
                      var attributes = []
                      while (!this.matchJSX('/') && !this.matchJSX('>')) {
                        var attribute = this.matchJSX('{')
                          ? this.parseJSXSpreadAttribute()
                          : this.parseJSXNameValueAttribute()
                        attributes.push(attribute)
                      }
                      return attributes
                    }
                    JSXParser.prototype.parseJSXOpeningElement = function () {
                      var node = this.createJSXNode()
                      this.expectJSX('<')
                      var name = this.parseJSXElementName()
                      var attributes = this.parseJSXAttributes()
                      var selfClosing = this.matchJSX('/')
                      if (selfClosing) {
                        this.expectJSX('/')
                      }
                      this.expectJSX('>')
                      return this.finalize(
                        node,
                        new JSXNode.JSXOpeningElement(
                          name,
                          selfClosing,
                          attributes
                        )
                      )
                    }
                    JSXParser.prototype.parseJSXBoundaryElement = function () {
                      var node = this.createJSXNode()
                      this.expectJSX('<')
                      if (this.matchJSX('/')) {
                        this.expectJSX('/')
                        var name_3 = this.parseJSXElementName()
                        this.expectJSX('>')
                        return this.finalize(
                          node,
                          new JSXNode.JSXClosingElement(name_3)
                        )
                      }
                      var name = this.parseJSXElementName()
                      var attributes = this.parseJSXAttributes()
                      var selfClosing = this.matchJSX('/')
                      if (selfClosing) {
                        this.expectJSX('/')
                      }
                      this.expectJSX('>')
                      return this.finalize(
                        node,
                        new JSXNode.JSXOpeningElement(
                          name,
                          selfClosing,
                          attributes
                        )
                      )
                    }
                    JSXParser.prototype.parseJSXEmptyExpression = function () {
                      var node = this.createJSXChildNode()
                      this.collectComments()
                      this.lastMarker.index = this.scanner.index
                      this.lastMarker.line = this.scanner.lineNumber
                      this.lastMarker.column =
                        this.scanner.index - this.scanner.lineStart
                      return this.finalize(
                        node,
                        new JSXNode.JSXEmptyExpression()
                      )
                    }
                    JSXParser.prototype.parseJSXExpressionContainer = function () {
                      var node = this.createJSXNode()
                      this.expectJSX('{')
                      var expression
                      if (this.matchJSX('}')) {
                        expression = this.parseJSXEmptyExpression()
                        this.expectJSX('}')
                      } else {
                        this.finishJSX()
                        expression = this.parseAssignmentExpression()
                        this.reenterJSX()
                      }
                      return this.finalize(
                        node,
                        new JSXNode.JSXExpressionContainer(expression)
                      )
                    }
                    JSXParser.prototype.parseJSXChildren = function () {
                      var children = []
                      while (!this.scanner.eof()) {
                        var node = this.createJSXChildNode()
                        var token = this.nextJSXText()
                        if (token.start < token.end) {
                          var raw = this.getTokenRaw(token)
                          var child = this.finalize(
                            node,
                            new JSXNode.JSXText(token.value, raw)
                          )
                          children.push(child)
                        }
                        if (this.scanner.source[this.scanner.index] === '{') {
                          var container = this.parseJSXExpressionContainer()
                          children.push(container)
                        } else {
                          break
                        }
                      }
                      return children
                    }
                    JSXParser.prototype.parseComplexJSXElement = function (el) {
                      var stack = []
                      while (!this.scanner.eof()) {
                        el.children = el.children.concat(
                          this.parseJSXChildren()
                        )
                        var node = this.createJSXChildNode()
                        var element = this.parseJSXBoundaryElement()
                        if (
                          element.type ===
                          jsx_syntax_1.JSXSyntax.JSXOpeningElement
                        ) {
                          var opening = element
                          if (opening.selfClosing) {
                            var child = this.finalize(
                              node,
                              new JSXNode.JSXElement(opening, [], null)
                            )
                            el.children.push(child)
                          } else {
                            stack.push(el)
                            el = {
                              node: node,
                              opening: opening,
                              closing: null,
                              children: [],
                            }
                          }
                        }
                        if (
                          element.type ===
                          jsx_syntax_1.JSXSyntax.JSXClosingElement
                        ) {
                          el.closing = element
                          var open_1 = getQualifiedElementName(el.opening.name)
                          var close_1 = getQualifiedElementName(el.closing.name)
                          if (open_1 !== close_1) {
                            this.tolerateError(
                              'Expected corresponding JSX closing tag for %0',
                              open_1
                            )
                          }
                          if (stack.length > 0) {
                            var child = this.finalize(
                              el.node,
                              new JSXNode.JSXElement(
                                el.opening,
                                el.children,
                                el.closing
                              )
                            )
                            el = stack[stack.length - 1]
                            el.children.push(child)
                            stack.pop()
                          } else {
                            break
                          }
                        }
                      }
                      return el
                    }
                    JSXParser.prototype.parseJSXElement = function () {
                      var node = this.createJSXNode()
                      var opening = this.parseJSXOpeningElement()
                      var children = []
                      var closing = null
                      if (!opening.selfClosing) {
                        var el = this.parseComplexJSXElement({
                          node: node,
                          opening: opening,
                          closing: closing,
                          children: children,
                        })
                        children = el.children
                        closing = el.closing
                      }
                      return this.finalize(
                        node,
                        new JSXNode.JSXElement(opening, children, closing)
                      )
                    }
                    JSXParser.prototype.parseJSXRoot = function () {
                      // Pop the opening '<' added from the lookahead.
                      if (this.config.tokens) {
                        this.tokens.pop()
                      }
                      this.startJSX()
                      var element = this.parseJSXElement()
                      this.finishJSX()
                      return element
                    }
                    JSXParser.prototype.isStartOfExpression = function () {
                      return (
                        _super.prototype.isStartOfExpression.call(this) ||
                        this.match('<')
                      )
                    }
                    return JSXParser
                  })(parser_1.Parser)
                  exports.JSXParser = JSXParser

                  /***/
                },
                /* 4 */
                /***/ function (module, exports) {
                  'use strict'
                  Object.defineProperty(exports, '__esModule', { value: true })
                  // See also tools/generate-unicode-regex.js.
                  var Regex = {
                    // Unicode v8.0.0 NonAsciiIdentifierStart:
                    NonAsciiIdentifierStart: /[\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0370-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u052F\u0531-\u0556\u0559\u0561-\u0587\u05D0-\u05EA\u05F0-\u05F2\u0620-\u064A\u066E\u066F\u0671-\u06D3\u06D5\u06E5\u06E6\u06EE\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u07F4\u07F5\u07FA\u0800-\u0815\u081A\u0824\u0828\u0840-\u0858\u08A0-\u08B4\u0904-\u0939\u093D\u0950\u0958-\u0961\u0971-\u0980\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF-\u09E1\u09F0\u09F1\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0AF9\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B5C\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D\u0C58-\u0C5A\u0C60\u0C61\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDE\u0CE0\u0CE1\u0CF1\u0CF2\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D5F-\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E46\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EC6\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065\u1066\u106E-\u1070\u1075-\u1081\u108E\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u170C\u170E-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17D7\u17DC\u1820-\u1877\u1880-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191E\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u1A00-\u1A16\u1A20-\u1A54\u1AA7\u1B05-\u1B33\u1B45-\u1B4B\u1B83-\u1BA0\u1BAE\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C7D\u1CE9-\u1CEC\u1CEE-\u1CF1\u1CF5\u1CF6\u1D00-\u1DBF\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2071\u207F\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2118-\u211D\u2124\u2126\u2128\u212A-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u3005-\u3007\u3021-\u3029\u3031-\u3035\u3038-\u303C\u3041-\u3096\u309B-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312D\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FD5\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA61F\uA62A\uA62B\uA640-\uA66E\uA67F-\uA69D\uA6A0-\uA6EF\uA717-\uA71F\uA722-\uA788\uA78B-\uA7AD\uA7B0-\uA7B7\uA7F7-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA8FD\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9CF\uA9E0-\uA9E4\uA9E6-\uA9EF\uA9FA-\uA9FE\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA76\uAA7A\uAA7E-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADD\uAAE0-\uAAEA\uAAF2-\uAAF4\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB65\uAB70-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]|\uD800[\uDC00-\uDC0B\uDC0D-\uDC26\uDC28-\uDC3A\uDC3C\uDC3D\uDC3F-\uDC4D\uDC50-\uDC5D\uDC80-\uDCFA\uDD40-\uDD74\uDE80-\uDE9C\uDEA0-\uDED0\uDF00-\uDF1F\uDF30-\uDF4A\uDF50-\uDF75\uDF80-\uDF9D\uDFA0-\uDFC3\uDFC8-\uDFCF\uDFD1-\uDFD5]|\uD801[\uDC00-\uDC9D\uDD00-\uDD27\uDD30-\uDD63\uDE00-\uDF36\uDF40-\uDF55\uDF60-\uDF67]|\uD802[\uDC00-\uDC05\uDC08\uDC0A-\uDC35\uDC37\uDC38\uDC3C\uDC3F-\uDC55\uDC60-\uDC76\uDC80-\uDC9E\uDCE0-\uDCF2\uDCF4\uDCF5\uDD00-\uDD15\uDD20-\uDD39\uDD80-\uDDB7\uDDBE\uDDBF\uDE00\uDE10-\uDE13\uDE15-\uDE17\uDE19-\uDE33\uDE60-\uDE7C\uDE80-\uDE9C\uDEC0-\uDEC7\uDEC9-\uDEE4\uDF00-\uDF35\uDF40-\uDF55\uDF60-\uDF72\uDF80-\uDF91]|\uD803[\uDC00-\uDC48\uDC80-\uDCB2\uDCC0-\uDCF2]|\uD804[\uDC03-\uDC37\uDC83-\uDCAF\uDCD0-\uDCE8\uDD03-\uDD26\uDD50-\uDD72\uDD76\uDD83-\uDDB2\uDDC1-\uDDC4\uDDDA\uDDDC\uDE00-\uDE11\uDE13-\uDE2B\uDE80-\uDE86\uDE88\uDE8A-\uDE8D\uDE8F-\uDE9D\uDE9F-\uDEA8\uDEB0-\uDEDE\uDF05-\uDF0C\uDF0F\uDF10\uDF13-\uDF28\uDF2A-\uDF30\uDF32\uDF33\uDF35-\uDF39\uDF3D\uDF50\uDF5D-\uDF61]|\uD805[\uDC80-\uDCAF\uDCC4\uDCC5\uDCC7\uDD80-\uDDAE\uDDD8-\uDDDB\uDE00-\uDE2F\uDE44\uDE80-\uDEAA\uDF00-\uDF19]|\uD806[\uDCA0-\uDCDF\uDCFF\uDEC0-\uDEF8]|\uD808[\uDC00-\uDF99]|\uD809[\uDC00-\uDC6E\uDC80-\uDD43]|[\uD80C\uD840-\uD868\uD86A-\uD86C\uD86F-\uD872][\uDC00-\uDFFF]|\uD80D[\uDC00-\uDC2E]|\uD811[\uDC00-\uDE46]|\uD81A[\uDC00-\uDE38\uDE40-\uDE5E\uDED0-\uDEED\uDF00-\uDF2F\uDF40-\uDF43\uDF63-\uDF77\uDF7D-\uDF8F]|\uD81B[\uDF00-\uDF44\uDF50\uDF93-\uDF9F]|\uD82C[\uDC00\uDC01]|\uD82F[\uDC00-\uDC6A\uDC70-\uDC7C\uDC80-\uDC88\uDC90-\uDC99]|\uD835[\uDC00-\uDC54\uDC56-\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD1E-\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD52-\uDEA5\uDEA8-\uDEC0\uDEC2-\uDEDA\uDEDC-\uDEFA\uDEFC-\uDF14\uDF16-\uDF34\uDF36-\uDF4E\uDF50-\uDF6E\uDF70-\uDF88\uDF8A-\uDFA8\uDFAA-\uDFC2\uDFC4-\uDFCB]|\uD83A[\uDC00-\uDCC4]|\uD83B[\uDE00-\uDE03\uDE05-\uDE1F\uDE21\uDE22\uDE24\uDE27\uDE29-\uDE32\uDE34-\uDE37\uDE39\uDE3B\uDE42\uDE47\uDE49\uDE4B\uDE4D-\uDE4F\uDE51\uDE52\uDE54\uDE57\uDE59\uDE5B\uDE5D\uDE5F\uDE61\uDE62\uDE64\uDE67-\uDE6A\uDE6C-\uDE72\uDE74-\uDE77\uDE79-\uDE7C\uDE7E\uDE80-\uDE89\uDE8B-\uDE9B\uDEA1-\uDEA3\uDEA5-\uDEA9\uDEAB-\uDEBB]|\uD869[\uDC00-\uDED6\uDF00-\uDFFF]|\uD86D[\uDC00-\uDF34\uDF40-\uDFFF]|\uD86E[\uDC00-\uDC1D\uDC20-\uDFFF]|\uD873[\uDC00-\uDEA1]|\uD87E[\uDC00-\uDE1D]/,
                    // Unicode v8.0.0 NonAsciiIdentifierPart:
                    NonAsciiIdentifierPart: /[\xAA\xB5\xB7\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0300-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u0483-\u0487\u048A-\u052F\u0531-\u0556\u0559\u0561-\u0587\u0591-\u05BD\u05BF\u05C1\u05C2\u05C4\u05C5\u05C7\u05D0-\u05EA\u05F0-\u05F2\u0610-\u061A\u0620-\u0669\u066E-\u06D3\u06D5-\u06DC\u06DF-\u06E8\u06EA-\u06FC\u06FF\u0710-\u074A\u074D-\u07B1\u07C0-\u07F5\u07FA\u0800-\u082D\u0840-\u085B\u08A0-\u08B4\u08E3-\u0963\u0966-\u096F\u0971-\u0983\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BC-\u09C4\u09C7\u09C8\u09CB-\u09CE\u09D7\u09DC\u09DD\u09DF-\u09E3\u09E6-\u09F1\u0A01-\u0A03\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A3C\u0A3E-\u0A42\u0A47\u0A48\u0A4B-\u0A4D\u0A51\u0A59-\u0A5C\u0A5E\u0A66-\u0A75\u0A81-\u0A83\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABC-\u0AC5\u0AC7-\u0AC9\u0ACB-\u0ACD\u0AD0\u0AE0-\u0AE3\u0AE6-\u0AEF\u0AF9\u0B01-\u0B03\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3C-\u0B44\u0B47\u0B48\u0B4B-\u0B4D\u0B56\u0B57\u0B5C\u0B5D\u0B5F-\u0B63\u0B66-\u0B6F\u0B71\u0B82\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BBE-\u0BC2\u0BC6-\u0BC8\u0BCA-\u0BCD\u0BD0\u0BD7\u0BE6-\u0BEF\u0C00-\u0C03\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D-\u0C44\u0C46-\u0C48\u0C4A-\u0C4D\u0C55\u0C56\u0C58-\u0C5A\u0C60-\u0C63\u0C66-\u0C6F\u0C81-\u0C83\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBC-\u0CC4\u0CC6-\u0CC8\u0CCA-\u0CCD\u0CD5\u0CD6\u0CDE\u0CE0-\u0CE3\u0CE6-\u0CEF\u0CF1\u0CF2\u0D01-\u0D03\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D-\u0D44\u0D46-\u0D48\u0D4A-\u0D4E\u0D57\u0D5F-\u0D63\u0D66-\u0D6F\u0D7A-\u0D7F\u0D82\u0D83\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0DCA\u0DCF-\u0DD4\u0DD6\u0DD8-\u0DDF\u0DE6-\u0DEF\u0DF2\u0DF3\u0E01-\u0E3A\u0E40-\u0E4E\u0E50-\u0E59\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB9\u0EBB-\u0EBD\u0EC0-\u0EC4\u0EC6\u0EC8-\u0ECD\u0ED0-\u0ED9\u0EDC-\u0EDF\u0F00\u0F18\u0F19\u0F20-\u0F29\u0F35\u0F37\u0F39\u0F3E-\u0F47\u0F49-\u0F6C\u0F71-\u0F84\u0F86-\u0F97\u0F99-\u0FBC\u0FC6\u1000-\u1049\u1050-\u109D\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u135D-\u135F\u1369-\u1371\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u170C\u170E-\u1714\u1720-\u1734\u1740-\u1753\u1760-\u176C\u176E-\u1770\u1772\u1773\u1780-\u17D3\u17D7\u17DC\u17DD\u17E0-\u17E9\u180B-\u180D\u1810-\u1819\u1820-\u1877\u1880-\u18AA\u18B0-\u18F5\u1900-\u191E\u1920-\u192B\u1930-\u193B\u1946-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u19D0-\u19DA\u1A00-\u1A1B\u1A20-\u1A5E\u1A60-\u1A7C\u1A7F-\u1A89\u1A90-\u1A99\u1AA7\u1AB0-\u1ABD\u1B00-\u1B4B\u1B50-\u1B59\u1B6B-\u1B73\u1B80-\u1BF3\u1C00-\u1C37\u1C40-\u1C49\u1C4D-\u1C7D\u1CD0-\u1CD2\u1CD4-\u1CF6\u1CF8\u1CF9\u1D00-\u1DF5\u1DFC-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u200C\u200D\u203F\u2040\u2054\u2071\u207F\u2090-\u209C\u20D0-\u20DC\u20E1\u20E5-\u20F0\u2102\u2107\u210A-\u2113\u2115\u2118-\u211D\u2124\u2126\u2128\u212A-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D7F-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2DE0-\u2DFF\u3005-\u3007\u3021-\u302F\u3031-\u3035\u3038-\u303C\u3041-\u3096\u3099-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312D\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FD5\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA62B\uA640-\uA66F\uA674-\uA67D\uA67F-\uA6F1\uA717-\uA71F\uA722-\uA788\uA78B-\uA7AD\uA7B0-\uA7B7\uA7F7-\uA827\uA840-\uA873\uA880-\uA8C4\uA8D0-\uA8D9\uA8E0-\uA8F7\uA8FB\uA8FD\uA900-\uA92D\uA930-\uA953\uA960-\uA97C\uA980-\uA9C0\uA9CF-\uA9D9\uA9E0-\uA9FE\uAA00-\uAA36\uAA40-\uAA4D\uAA50-\uAA59\uAA60-\uAA76\uAA7A-\uAAC2\uAADB-\uAADD\uAAE0-\uAAEF\uAAF2-\uAAF6\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB65\uAB70-\uABEA\uABEC\uABED\uABF0-\uABF9\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE00-\uFE0F\uFE20-\uFE2F\uFE33\uFE34\uFE4D-\uFE4F\uFE70-\uFE74\uFE76-\uFEFC\uFF10-\uFF19\uFF21-\uFF3A\uFF3F\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]|\uD800[\uDC00-\uDC0B\uDC0D-\uDC26\uDC28-\uDC3A\uDC3C\uDC3D\uDC3F-\uDC4D\uDC50-\uDC5D\uDC80-\uDCFA\uDD40-\uDD74\uDDFD\uDE80-\uDE9C\uDEA0-\uDED0\uDEE0\uDF00-\uDF1F\uDF30-\uDF4A\uDF50-\uDF7A\uDF80-\uDF9D\uDFA0-\uDFC3\uDFC8-\uDFCF\uDFD1-\uDFD5]|\uD801[\uDC00-\uDC9D\uDCA0-\uDCA9\uDD00-\uDD27\uDD30-\uDD63\uDE00-\uDF36\uDF40-\uDF55\uDF60-\uDF67]|\uD802[\uDC00-\uDC05\uDC08\uDC0A-\uDC35\uDC37\uDC38\uDC3C\uDC3F-\uDC55\uDC60-\uDC76\uDC80-\uDC9E\uDCE0-\uDCF2\uDCF4\uDCF5\uDD00-\uDD15\uDD20-\uDD39\uDD80-\uDDB7\uDDBE\uDDBF\uDE00-\uDE03\uDE05\uDE06\uDE0C-\uDE13\uDE15-\uDE17\uDE19-\uDE33\uDE38-\uDE3A\uDE3F\uDE60-\uDE7C\uDE80-\uDE9C\uDEC0-\uDEC7\uDEC9-\uDEE6\uDF00-\uDF35\uDF40-\uDF55\uDF60-\uDF72\uDF80-\uDF91]|\uD803[\uDC00-\uDC48\uDC80-\uDCB2\uDCC0-\uDCF2]|\uD804[\uDC00-\uDC46\uDC66-\uDC6F\uDC7F-\uDCBA\uDCD0-\uDCE8\uDCF0-\uDCF9\uDD00-\uDD34\uDD36-\uDD3F\uDD50-\uDD73\uDD76\uDD80-\uDDC4\uDDCA-\uDDCC\uDDD0-\uDDDA\uDDDC\uDE00-\uDE11\uDE13-\uDE37\uDE80-\uDE86\uDE88\uDE8A-\uDE8D\uDE8F-\uDE9D\uDE9F-\uDEA8\uDEB0-\uDEEA\uDEF0-\uDEF9\uDF00-\uDF03\uDF05-\uDF0C\uDF0F\uDF10\uDF13-\uDF28\uDF2A-\uDF30\uDF32\uDF33\uDF35-\uDF39\uDF3C-\uDF44\uDF47\uDF48\uDF4B-\uDF4D\uDF50\uDF57\uDF5D-\uDF63\uDF66-\uDF6C\uDF70-\uDF74]|\uD805[\uDC80-\uDCC5\uDCC7\uDCD0-\uDCD9\uDD80-\uDDB5\uDDB8-\uDDC0\uDDD8-\uDDDD\uDE00-\uDE40\uDE44\uDE50-\uDE59\uDE80-\uDEB7\uDEC0-\uDEC9\uDF00-\uDF19\uDF1D-\uDF2B\uDF30-\uDF39]|\uD806[\uDCA0-\uDCE9\uDCFF\uDEC0-\uDEF8]|\uD808[\uDC00-\uDF99]|\uD809[\uDC00-\uDC6E\uDC80-\uDD43]|[\uD80C\uD840-\uD868\uD86A-\uD86C\uD86F-\uD872][\uDC00-\uDFFF]|\uD80D[\uDC00-\uDC2E]|\uD811[\uDC00-\uDE46]|\uD81A[\uDC00-\uDE38\uDE40-\uDE5E\uDE60-\uDE69\uDED0-\uDEED\uDEF0-\uDEF4\uDF00-\uDF36\uDF40-\uDF43\uDF50-\uDF59\uDF63-\uDF77\uDF7D-\uDF8F]|\uD81B[\uDF00-\uDF44\uDF50-\uDF7E\uDF8F-\uDF9F]|\uD82C[\uDC00\uDC01]|\uD82F[\uDC00-\uDC6A\uDC70-\uDC7C\uDC80-\uDC88\uDC90-\uDC99\uDC9D\uDC9E]|\uD834[\uDD65-\uDD69\uDD6D-\uDD72\uDD7B-\uDD82\uDD85-\uDD8B\uDDAA-\uDDAD\uDE42-\uDE44]|\uD835[\uDC00-\uDC54\uDC56-\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD1E-\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD52-\uDEA5\uDEA8-\uDEC0\uDEC2-\uDEDA\uDEDC-\uDEFA\uDEFC-\uDF14\uDF16-\uDF34\uDF36-\uDF4E\uDF50-\uDF6E\uDF70-\uDF88\uDF8A-\uDFA8\uDFAA-\uDFC2\uDFC4-\uDFCB\uDFCE-\uDFFF]|\uD836[\uDE00-\uDE36\uDE3B-\uDE6C\uDE75\uDE84\uDE9B-\uDE9F\uDEA1-\uDEAF]|\uD83A[\uDC00-\uDCC4\uDCD0-\uDCD6]|\uD83B[\uDE00-\uDE03\uDE05-\uDE1F\uDE21\uDE22\uDE24\uDE27\uDE29-\uDE32\uDE34-\uDE37\uDE39\uDE3B\uDE42\uDE47\uDE49\uDE4B\uDE4D-\uDE4F\uDE51\uDE52\uDE54\uDE57\uDE59\uDE5B\uDE5D\uDE5F\uDE61\uDE62\uDE64\uDE67-\uDE6A\uDE6C-\uDE72\uDE74-\uDE77\uDE79-\uDE7C\uDE7E\uDE80-\uDE89\uDE8B-\uDE9B\uDEA1-\uDEA3\uDEA5-\uDEA9\uDEAB-\uDEBB]|\uD869[\uDC00-\uDED6\uDF00-\uDFFF]|\uD86D[\uDC00-\uDF34\uDF40-\uDFFF]|\uD86E[\uDC00-\uDC1D\uDC20-\uDFFF]|\uD873[\uDC00-\uDEA1]|\uD87E[\uDC00-\uDE1D]|\uDB40[\uDD00-\uDDEF]/,
                  }
                  exports.Character = {
                    /* tslint:disable:no-bitwise */
                    fromCodePoint: function (cp) {
                      return cp < 0x10000
                        ? String.fromCharCode(cp)
                        : String.fromCharCode(0xd800 + ((cp - 0x10000) >> 10)) +
                            String.fromCharCode(
                              0xdc00 + ((cp - 0x10000) & 1023)
                            )
                    },
                    // https://tc39.github.io/ecma262/#sec-white-space
                    isWhiteSpace: function (cp) {
                      return (
                        cp === 0x20 ||
                        cp === 0x09 ||
                        cp === 0x0b ||
                        cp === 0x0c ||
                        cp === 0xa0 ||
                        (cp >= 0x1680 &&
                          [
                            0x1680,
                            0x2000,
                            0x2001,
                            0x2002,
                            0x2003,
                            0x2004,
                            0x2005,
                            0x2006,
                            0x2007,
                            0x2008,
                            0x2009,
                            0x200a,
                            0x202f,
                            0x205f,
                            0x3000,
                            0xfeff,
                          ].indexOf(cp) >= 0)
                      )
                    },
                    // https://tc39.github.io/ecma262/#sec-line-terminators
                    isLineTerminator: function (cp) {
                      return (
                        cp === 0x0a ||
                        cp === 0x0d ||
                        cp === 0x2028 ||
                        cp === 0x2029
                      )
                    },
                    // https://tc39.github.io/ecma262/#sec-names-and-keywords
                    isIdentifierStart: function (cp) {
                      return (
                        cp === 0x24 ||
                        cp === 0x5f ||
                        (cp >= 0x41 && cp <= 0x5a) ||
                        (cp >= 0x61 && cp <= 0x7a) ||
                        cp === 0x5c ||
                        (cp >= 0x80 &&
                          Regex.NonAsciiIdentifierStart.test(
                            exports.Character.fromCodePoint(cp)
                          ))
                      )
                    },
                    isIdentifierPart: function (cp) {
                      return (
                        cp === 0x24 ||
                        cp === 0x5f ||
                        (cp >= 0x41 && cp <= 0x5a) ||
                        (cp >= 0x61 && cp <= 0x7a) ||
                        (cp >= 0x30 && cp <= 0x39) ||
                        cp === 0x5c ||
                        (cp >= 0x80 &&
                          Regex.NonAsciiIdentifierPart.test(
                            exports.Character.fromCodePoint(cp)
                          ))
                      )
                    },
                    // https://tc39.github.io/ecma262/#sec-literals-numeric-literals
                    isDecimalDigit: function (cp) {
                      return cp >= 0x30 && cp <= 0x39 // 0..9
                    },
                    isHexDigit: function (cp) {
                      return (
                        (cp >= 0x30 && cp <= 0x39) ||
                        (cp >= 0x41 && cp <= 0x46) ||
                        (cp >= 0x61 && cp <= 0x66)
                      ) // a..f
                    },
                    isOctalDigit: function (cp) {
                      return cp >= 0x30 && cp <= 0x37 // 0..7
                    },
                  }

                  /***/
                },
                /* 5 */
                /***/ function (module, exports, __webpack_require__) {
                  'use strict'
                  Object.defineProperty(exports, '__esModule', { value: true })
                  var jsx_syntax_1 = __webpack_require__(6)
                  /* tslint:disable:max-classes-per-file */
                  var JSXClosingElement = (function () {
                    function JSXClosingElement(name) {
                      this.type = jsx_syntax_1.JSXSyntax.JSXClosingElement
                      this.name = name
                    }
                    return JSXClosingElement
                  })()
                  exports.JSXClosingElement = JSXClosingElement
                  var JSXElement = (function () {
                    function JSXElement(
                      openingElement,
                      children,
                      closingElement
                    ) {
                      this.type = jsx_syntax_1.JSXSyntax.JSXElement
                      this.openingElement = openingElement
                      this.children = children
                      this.closingElement = closingElement
                    }
                    return JSXElement
                  })()
                  exports.JSXElement = JSXElement
                  var JSXEmptyExpression = (function () {
                    function JSXEmptyExpression() {
                      this.type = jsx_syntax_1.JSXSyntax.JSXEmptyExpression
                    }
                    return JSXEmptyExpression
                  })()
                  exports.JSXEmptyExpression = JSXEmptyExpression
                  var JSXExpressionContainer = (function () {
                    function JSXExpressionContainer(expression) {
                      this.type = jsx_syntax_1.JSXSyntax.JSXExpressionContainer
                      this.expression = expression
                    }
                    return JSXExpressionContainer
                  })()
                  exports.JSXExpressionContainer = JSXExpressionContainer
                  var JSXIdentifier = (function () {
                    function JSXIdentifier(name) {
                      this.type = jsx_syntax_1.JSXSyntax.JSXIdentifier
                      this.name = name
                    }
                    return JSXIdentifier
                  })()
                  exports.JSXIdentifier = JSXIdentifier
                  var JSXMemberExpression = (function () {
                    function JSXMemberExpression(object, property) {
                      this.type = jsx_syntax_1.JSXSyntax.JSXMemberExpression
                      this.object = object
                      this.property = property
                    }
                    return JSXMemberExpression
                  })()
                  exports.JSXMemberExpression = JSXMemberExpression
                  var JSXAttribute = (function () {
                    function JSXAttribute(name, value) {
                      this.type = jsx_syntax_1.JSXSyntax.JSXAttribute
                      this.name = name
                      this.value = value
                    }
                    return JSXAttribute
                  })()
                  exports.JSXAttribute = JSXAttribute
                  var JSXNamespacedName = (function () {
                    function JSXNamespacedName(namespace, name) {
                      this.type = jsx_syntax_1.JSXSyntax.JSXNamespacedName
                      this.namespace = namespace
                      this.name = name
                    }
                    return JSXNamespacedName
                  })()
                  exports.JSXNamespacedName = JSXNamespacedName
                  var JSXOpeningElement = (function () {
                    function JSXOpeningElement(name, selfClosing, attributes) {
                      this.type = jsx_syntax_1.JSXSyntax.JSXOpeningElement
                      this.name = name
                      this.selfClosing = selfClosing
                      this.attributes = attributes
                    }
                    return JSXOpeningElement
                  })()
                  exports.JSXOpeningElement = JSXOpeningElement
                  var JSXSpreadAttribute = (function () {
                    function JSXSpreadAttribute(argument) {
                      this.type = jsx_syntax_1.JSXSyntax.JSXSpreadAttribute
                      this.argument = argument
                    }
                    return JSXSpreadAttribute
                  })()
                  exports.JSXSpreadAttribute = JSXSpreadAttribute
                  var JSXText = (function () {
                    function JSXText(value, raw) {
                      this.type = jsx_syntax_1.JSXSyntax.JSXText
                      this.value = value
                      this.raw = raw
                    }
                    return JSXText
                  })()
                  exports.JSXText = JSXText

                  /***/
                },
                /* 6 */
                /***/ function (module, exports) {
                  'use strict'
                  Object.defineProperty(exports, '__esModule', { value: true })
                  exports.JSXSyntax = {
                    JSXAttribute: 'JSXAttribute',
                    JSXClosingElement: 'JSXClosingElement',
                    JSXElement: 'JSXElement',
                    JSXEmptyExpression: 'JSXEmptyExpression',
                    JSXExpressionContainer: 'JSXExpressionContainer',
                    JSXIdentifier: 'JSXIdentifier',
                    JSXMemberExpression: 'JSXMemberExpression',
                    JSXNamespacedName: 'JSXNamespacedName',
                    JSXOpeningElement: 'JSXOpeningElement',
                    JSXSpreadAttribute: 'JSXSpreadAttribute',
                    JSXText: 'JSXText',
                  }

                  /***/
                },
                /* 7 */
                /***/ function (module, exports, __webpack_require__) {
                  'use strict'
                  Object.defineProperty(exports, '__esModule', { value: true })
                  var syntax_1 = __webpack_require__(2)
                  /* tslint:disable:max-classes-per-file */
                  var ArrayExpression = (function () {
                    function ArrayExpression(elements) {
                      this.type = syntax_1.Syntax.ArrayExpression
                      this.elements = elements
                    }
                    return ArrayExpression
                  })()
                  exports.ArrayExpression = ArrayExpression
                  var ArrayPattern = (function () {
                    function ArrayPattern(elements) {
                      this.type = syntax_1.Syntax.ArrayPattern
                      this.elements = elements
                    }
                    return ArrayPattern
                  })()
                  exports.ArrayPattern = ArrayPattern
                  var ArrowFunctionExpression = (function () {
                    function ArrowFunctionExpression(params, body, expression) {
                      this.type = syntax_1.Syntax.ArrowFunctionExpression
                      this.id = null
                      this.params = params
                      this.body = body
                      this.generator = false
                      this.expression = expression
                      this.async = false
                    }
                    return ArrowFunctionExpression
                  })()
                  exports.ArrowFunctionExpression = ArrowFunctionExpression
                  var AssignmentExpression = (function () {
                    function AssignmentExpression(operator, left, right) {
                      this.type = syntax_1.Syntax.AssignmentExpression
                      this.operator = operator
                      this.left = left
                      this.right = right
                    }
                    return AssignmentExpression
                  })()
                  exports.AssignmentExpression = AssignmentExpression
                  var AssignmentPattern = (function () {
                    function AssignmentPattern(left, right) {
                      this.type = syntax_1.Syntax.AssignmentPattern
                      this.left = left
                      this.right = right
                    }
                    return AssignmentPattern
                  })()
                  exports.AssignmentPattern = AssignmentPattern
                  var AsyncArrowFunctionExpression = (function () {
                    function AsyncArrowFunctionExpression(
                      params,
                      body,
                      expression
                    ) {
                      this.type = syntax_1.Syntax.ArrowFunctionExpression
                      this.id = null
                      this.params = params
                      this.body = body
                      this.generator = false
                      this.expression = expression
                      this.async = true
                    }
                    return AsyncArrowFunctionExpression
                  })()
                  exports.AsyncArrowFunctionExpression = AsyncArrowFunctionExpression
                  var AsyncFunctionDeclaration = (function () {
                    function AsyncFunctionDeclaration(id, params, body) {
                      this.type = syntax_1.Syntax.FunctionDeclaration
                      this.id = id
                      this.params = params
                      this.body = body
                      this.generator = false
                      this.expression = false
                      this.async = true
                    }
                    return AsyncFunctionDeclaration
                  })()
                  exports.AsyncFunctionDeclaration = AsyncFunctionDeclaration
                  var AsyncFunctionExpression = (function () {
                    function AsyncFunctionExpression(id, params, body) {
                      this.type = syntax_1.Syntax.FunctionExpression
                      this.id = id
                      this.params = params
                      this.body = body
                      this.generator = false
                      this.expression = false
                      this.async = true
                    }
                    return AsyncFunctionExpression
                  })()
                  exports.AsyncFunctionExpression = AsyncFunctionExpression
                  var AwaitExpression = (function () {
                    function AwaitExpression(argument) {
                      this.type = syntax_1.Syntax.AwaitExpression
                      this.argument = argument
                    }
                    return AwaitExpression
                  })()
                  exports.AwaitExpression = AwaitExpression
                  var BinaryExpression = (function () {
                    function BinaryExpression(operator, left, right) {
                      var logical = operator === '||' || operator === '&&'
                      this.type = logical
                        ? syntax_1.Syntax.LogicalExpression
                        : syntax_1.Syntax.BinaryExpression
                      this.operator = operator
                      this.left = left
                      this.right = right
                    }
                    return BinaryExpression
                  })()
                  exports.BinaryExpression = BinaryExpression
                  var BlockStatement = (function () {
                    function BlockStatement(body) {
                      this.type = syntax_1.Syntax.BlockStatement
                      this.body = body
                    }
                    return BlockStatement
                  })()
                  exports.BlockStatement = BlockStatement
                  var BreakStatement = (function () {
                    function BreakStatement(label) {
                      this.type = syntax_1.Syntax.BreakStatement
                      this.label = label
                    }
                    return BreakStatement
                  })()
                  exports.BreakStatement = BreakStatement
                  var CallExpression = (function () {
                    function CallExpression(callee, args) {
                      this.type = syntax_1.Syntax.CallExpression
                      this.callee = callee
                      this.arguments = args
                    }
                    return CallExpression
                  })()
                  exports.CallExpression = CallExpression
                  var CatchClause = (function () {
                    function CatchClause(param, body) {
                      this.type = syntax_1.Syntax.CatchClause
                      this.param = param
                      this.body = body
                    }
                    return CatchClause
                  })()
                  exports.CatchClause = CatchClause
                  var ClassBody = (function () {
                    function ClassBody(body) {
                      this.type = syntax_1.Syntax.ClassBody
                      this.body = body
                    }
                    return ClassBody
                  })()
                  exports.ClassBody = ClassBody
                  var ClassDeclaration = (function () {
                    function ClassDeclaration(id, superClass, body) {
                      this.type = syntax_1.Syntax.ClassDeclaration
                      this.id = id
                      this.superClass = superClass
                      this.body = body
                    }
                    return ClassDeclaration
                  })()
                  exports.ClassDeclaration = ClassDeclaration
                  var ClassExpression = (function () {
                    function ClassExpression(id, superClass, body) {
                      this.type = syntax_1.Syntax.ClassExpression
                      this.id = id
                      this.superClass = superClass
                      this.body = body
                    }
                    return ClassExpression
                  })()
                  exports.ClassExpression = ClassExpression
                  var ComputedMemberExpression = (function () {
                    function ComputedMemberExpression(object, property) {
                      this.type = syntax_1.Syntax.MemberExpression
                      this.computed = true
                      this.object = object
                      this.property = property
                    }
                    return ComputedMemberExpression
                  })()
                  exports.ComputedMemberExpression = ComputedMemberExpression
                  var ConditionalExpression = (function () {
                    function ConditionalExpression(
                      test,
                      consequent,
                      alternate
                    ) {
                      this.type = syntax_1.Syntax.ConditionalExpression
                      this.test = test
                      this.consequent = consequent
                      this.alternate = alternate
                    }
                    return ConditionalExpression
                  })()
                  exports.ConditionalExpression = ConditionalExpression
                  var ContinueStatement = (function () {
                    function ContinueStatement(label) {
                      this.type = syntax_1.Syntax.ContinueStatement
                      this.label = label
                    }
                    return ContinueStatement
                  })()
                  exports.ContinueStatement = ContinueStatement
                  var DebuggerStatement = (function () {
                    function DebuggerStatement() {
                      this.type = syntax_1.Syntax.DebuggerStatement
                    }
                    return DebuggerStatement
                  })()
                  exports.DebuggerStatement = DebuggerStatement
                  var Directive = (function () {
                    function Directive(expression, directive) {
                      this.type = syntax_1.Syntax.ExpressionStatement
                      this.expression = expression
                      this.directive = directive
                    }
                    return Directive
                  })()
                  exports.Directive = Directive
                  var DoWhileStatement = (function () {
                    function DoWhileStatement(body, test) {
                      this.type = syntax_1.Syntax.DoWhileStatement
                      this.body = body
                      this.test = test
                    }
                    return DoWhileStatement
                  })()
                  exports.DoWhileStatement = DoWhileStatement
                  var EmptyStatement = (function () {
                    function EmptyStatement() {
                      this.type = syntax_1.Syntax.EmptyStatement
                    }
                    return EmptyStatement
                  })()
                  exports.EmptyStatement = EmptyStatement
                  var ExportAllDeclaration = (function () {
                    function ExportAllDeclaration(source) {
                      this.type = syntax_1.Syntax.ExportAllDeclaration
                      this.source = source
                    }
                    return ExportAllDeclaration
                  })()
                  exports.ExportAllDeclaration = ExportAllDeclaration
                  var ExportDefaultDeclaration = (function () {
                    function ExportDefaultDeclaration(declaration) {
                      this.type = syntax_1.Syntax.ExportDefaultDeclaration
                      this.declaration = declaration
                    }
                    return ExportDefaultDeclaration
                  })()
                  exports.ExportDefaultDeclaration = ExportDefaultDeclaration
                  var ExportNamedDeclaration = (function () {
                    function ExportNamedDeclaration(
                      declaration,
                      specifiers,
                      source
                    ) {
                      this.type = syntax_1.Syntax.ExportNamedDeclaration
                      this.declaration = declaration
                      this.specifiers = specifiers
                      this.source = source
                    }
                    return ExportNamedDeclaration
                  })()
                  exports.ExportNamedDeclaration = ExportNamedDeclaration
                  var ExportSpecifier = (function () {
                    function ExportSpecifier(local, exported) {
                      this.type = syntax_1.Syntax.ExportSpecifier
                      this.exported = exported
                      this.local = local
                    }
                    return ExportSpecifier
                  })()
                  exports.ExportSpecifier = ExportSpecifier
                  var ExpressionStatement = (function () {
                    function ExpressionStatement(expression) {
                      this.type = syntax_1.Syntax.ExpressionStatement
                      this.expression = expression
                    }
                    return ExpressionStatement
                  })()
                  exports.ExpressionStatement = ExpressionStatement
                  var ForInStatement = (function () {
                    function ForInStatement(left, right, body) {
                      this.type = syntax_1.Syntax.ForInStatement
                      this.left = left
                      this.right = right
                      this.body = body
                      this.each = false
                    }
                    return ForInStatement
                  })()
                  exports.ForInStatement = ForInStatement
                  var ForOfStatement = (function () {
                    function ForOfStatement(left, right, body) {
                      this.type = syntax_1.Syntax.ForOfStatement
                      this.left = left
                      this.right = right
                      this.body = body
                    }
                    return ForOfStatement
                  })()
                  exports.ForOfStatement = ForOfStatement
                  var ForStatement = (function () {
                    function ForStatement(init, test, update, body) {
                      this.type = syntax_1.Syntax.ForStatement
                      this.init = init
                      this.test = test
                      this.update = update
                      this.body = body
                    }
                    return ForStatement
                  })()
                  exports.ForStatement = ForStatement
                  var FunctionDeclaration = (function () {
                    function FunctionDeclaration(id, params, body, generator) {
                      this.type = syntax_1.Syntax.FunctionDeclaration
                      this.id = id
                      this.params = params
                      this.body = body
                      this.generator = generator
                      this.expression = false
                      this.async = false
                    }
                    return FunctionDeclaration
                  })()
                  exports.FunctionDeclaration = FunctionDeclaration
                  var FunctionExpression = (function () {
                    function FunctionExpression(id, params, body, generator) {
                      this.type = syntax_1.Syntax.FunctionExpression
                      this.id = id
                      this.params = params
                      this.body = body
                      this.generator = generator
                      this.expression = false
                      this.async = false
                    }
                    return FunctionExpression
                  })()
                  exports.FunctionExpression = FunctionExpression
                  var Identifier = (function () {
                    function Identifier(name) {
                      this.type = syntax_1.Syntax.Identifier
                      this.name = name
                    }
                    return Identifier
                  })()
                  exports.Identifier = Identifier
                  var IfStatement = (function () {
                    function IfStatement(test, consequent, alternate) {
                      this.type = syntax_1.Syntax.IfStatement
                      this.test = test
                      this.consequent = consequent
                      this.alternate = alternate
                    }
                    return IfStatement
                  })()
                  exports.IfStatement = IfStatement
                  var ImportDeclaration = (function () {
                    function ImportDeclaration(specifiers, source) {
                      this.type = syntax_1.Syntax.ImportDeclaration
                      this.specifiers = specifiers
                      this.source = source
                    }
                    return ImportDeclaration
                  })()
                  exports.ImportDeclaration = ImportDeclaration
                  var ImportDefaultSpecifier = (function () {
                    function ImportDefaultSpecifier(local) {
                      this.type = syntax_1.Syntax.ImportDefaultSpecifier
                      this.local = local
                    }
                    return ImportDefaultSpecifier
                  })()
                  exports.ImportDefaultSpecifier = ImportDefaultSpecifier
                  var ImportNamespaceSpecifier = (function () {
                    function ImportNamespaceSpecifier(local) {
                      this.type = syntax_1.Syntax.ImportNamespaceSpecifier
                      this.local = local
                    }
                    return ImportNamespaceSpecifier
                  })()
                  exports.ImportNamespaceSpecifier = ImportNamespaceSpecifier
                  var ImportSpecifier = (function () {
                    function ImportSpecifier(local, imported) {
                      this.type = syntax_1.Syntax.ImportSpecifier
                      this.local = local
                      this.imported = imported
                    }
                    return ImportSpecifier
                  })()
                  exports.ImportSpecifier = ImportSpecifier
                  var LabeledStatement = (function () {
                    function LabeledStatement(label, body) {
                      this.type = syntax_1.Syntax.LabeledStatement
                      this.label = label
                      this.body = body
                    }
                    return LabeledStatement
                  })()
                  exports.LabeledStatement = LabeledStatement
                  var Literal = (function () {
                    function Literal(value, raw) {
                      this.type = syntax_1.Syntax.Literal
                      this.value = value
                      this.raw = raw
                    }
                    return Literal
                  })()
                  exports.Literal = Literal
                  var MetaProperty = (function () {
                    function MetaProperty(meta, property) {
                      this.type = syntax_1.Syntax.MetaProperty
                      this.meta = meta
                      this.property = property
                    }
                    return MetaProperty
                  })()
                  exports.MetaProperty = MetaProperty
                  var MethodDefinition = (function () {
                    function MethodDefinition(
                      key,
                      computed,
                      value,
                      kind,
                      isStatic
                    ) {
                      this.type = syntax_1.Syntax.MethodDefinition
                      this.key = key
                      this.computed = computed
                      this.value = value
                      this.kind = kind
                      this.static = isStatic
                    }
                    return MethodDefinition
                  })()
                  exports.MethodDefinition = MethodDefinition
                  var Module = (function () {
                    function Module(body) {
                      this.type = syntax_1.Syntax.Program
                      this.body = body
                      this.sourceType = 'module'
                    }
                    return Module
                  })()
                  exports.Module = Module
                  var NewExpression = (function () {
                    function NewExpression(callee, args) {
                      this.type = syntax_1.Syntax.NewExpression
                      this.callee = callee
                      this.arguments = args
                    }
                    return NewExpression
                  })()
                  exports.NewExpression = NewExpression
                  var ObjectExpression = (function () {
                    function ObjectExpression(properties) {
                      this.type = syntax_1.Syntax.ObjectExpression
                      this.properties = properties
                    }
                    return ObjectExpression
                  })()
                  exports.ObjectExpression = ObjectExpression
                  var ObjectPattern = (function () {
                    function ObjectPattern(properties) {
                      this.type = syntax_1.Syntax.ObjectPattern
                      this.properties = properties
                    }
                    return ObjectPattern
                  })()
                  exports.ObjectPattern = ObjectPattern
                  var Property = (function () {
                    function Property(
                      kind,
                      key,
                      computed,
                      value,
                      method,
                      shorthand
                    ) {
                      this.type = syntax_1.Syntax.Property
                      this.key = key
                      this.computed = computed
                      this.value = value
                      this.kind = kind
                      this.method = method
                      this.shorthand = shorthand
                    }
                    return Property
                  })()
                  exports.Property = Property
                  var RegexLiteral = (function () {
                    function RegexLiteral(value, raw, pattern, flags) {
                      this.type = syntax_1.Syntax.Literal
                      this.value = value
                      this.raw = raw
                      this.regex = { pattern: pattern, flags: flags }
                    }
                    return RegexLiteral
                  })()
                  exports.RegexLiteral = RegexLiteral
                  var RestElement = (function () {
                    function RestElement(argument) {
                      this.type = syntax_1.Syntax.RestElement
                      this.argument = argument
                    }
                    return RestElement
                  })()
                  exports.RestElement = RestElement
                  var ReturnStatement = (function () {
                    function ReturnStatement(argument) {
                      this.type = syntax_1.Syntax.ReturnStatement
                      this.argument = argument
                    }
                    return ReturnStatement
                  })()
                  exports.ReturnStatement = ReturnStatement
                  var Script = (function () {
                    function Script(body) {
                      this.type = syntax_1.Syntax.Program
                      this.body = body
                      this.sourceType = 'script'
                    }
                    return Script
                  })()
                  exports.Script = Script
                  var SequenceExpression = (function () {
                    function SequenceExpression(expressions) {
                      this.type = syntax_1.Syntax.SequenceExpression
                      this.expressions = expressions
                    }
                    return SequenceExpression
                  })()
                  exports.SequenceExpression = SequenceExpression
                  var SpreadElement = (function () {
                    function SpreadElement(argument) {
                      this.type = syntax_1.Syntax.SpreadElement
                      this.argument = argument
                    }
                    return SpreadElement
                  })()
                  exports.SpreadElement = SpreadElement
                  var StaticMemberExpression = (function () {
                    function StaticMemberExpression(object, property) {
                      this.type = syntax_1.Syntax.MemberExpression
                      this.computed = false
                      this.object = object
                      this.property = property
                    }
                    return StaticMemberExpression
                  })()
                  exports.StaticMemberExpression = StaticMemberExpression
                  var Super = (function () {
                    function Super() {
                      this.type = syntax_1.Syntax.Super
                    }
                    return Super
                  })()
                  exports.Super = Super
                  var SwitchCase = (function () {
                    function SwitchCase(test, consequent) {
                      this.type = syntax_1.Syntax.SwitchCase
                      this.test = test
                      this.consequent = consequent
                    }
                    return SwitchCase
                  })()
                  exports.SwitchCase = SwitchCase
                  var SwitchStatement = (function () {
                    function SwitchStatement(discriminant, cases) {
                      this.type = syntax_1.Syntax.SwitchStatement
                      this.discriminant = discriminant
                      this.cases = cases
                    }
                    return SwitchStatement
                  })()
                  exports.SwitchStatement = SwitchStatement
                  var TaggedTemplateExpression = (function () {
                    function TaggedTemplateExpression(tag, quasi) {
                      this.type = syntax_1.Syntax.TaggedTemplateExpression
                      this.tag = tag
                      this.quasi = quasi
                    }
                    return TaggedTemplateExpression
                  })()
                  exports.TaggedTemplateExpression = TaggedTemplateExpression
                  var TemplateElement = (function () {
                    function TemplateElement(value, tail) {
                      this.type = syntax_1.Syntax.TemplateElement
                      this.value = value
                      this.tail = tail
                    }
                    return TemplateElement
                  })()
                  exports.TemplateElement = TemplateElement
                  var TemplateLiteral = (function () {
                    function TemplateLiteral(quasis, expressions) {
                      this.type = syntax_1.Syntax.TemplateLiteral
                      this.quasis = quasis
                      this.expressions = expressions
                    }
                    return TemplateLiteral
                  })()
                  exports.TemplateLiteral = TemplateLiteral
                  var ThisExpression = (function () {
                    function ThisExpression() {
                      this.type = syntax_1.Syntax.ThisExpression
                    }
                    return ThisExpression
                  })()
                  exports.ThisExpression = ThisExpression
                  var ThrowStatement = (function () {
                    function ThrowStatement(argument) {
                      this.type = syntax_1.Syntax.ThrowStatement
                      this.argument = argument
                    }
                    return ThrowStatement
                  })()
                  exports.ThrowStatement = ThrowStatement
                  var TryStatement = (function () {
                    function TryStatement(block, handler, finalizer) {
                      this.type = syntax_1.Syntax.TryStatement
                      this.block = block
                      this.handler = handler
                      this.finalizer = finalizer
                    }
                    return TryStatement
                  })()
                  exports.TryStatement = TryStatement
                  var UnaryExpression = (function () {
                    function UnaryExpression(operator, argument) {
                      this.type = syntax_1.Syntax.UnaryExpression
                      this.operator = operator
                      this.argument = argument
                      this.prefix = true
                    }
                    return UnaryExpression
                  })()
                  exports.UnaryExpression = UnaryExpression
                  var UpdateExpression = (function () {
                    function UpdateExpression(operator, argument, prefix) {
                      this.type = syntax_1.Syntax.UpdateExpression
                      this.operator = operator
                      this.argument = argument
                      this.prefix = prefix
                    }
                    return UpdateExpression
                  })()
                  exports.UpdateExpression = UpdateExpression
                  var VariableDeclaration = (function () {
                    function VariableDeclaration(declarations, kind) {
                      this.type = syntax_1.Syntax.VariableDeclaration
                      this.declarations = declarations
                      this.kind = kind
                    }
                    return VariableDeclaration
                  })()
                  exports.VariableDeclaration = VariableDeclaration
                  var VariableDeclarator = (function () {
                    function VariableDeclarator(id, init) {
                      this.type = syntax_1.Syntax.VariableDeclarator
                      this.id = id
                      this.init = init
                    }
                    return VariableDeclarator
                  })()
                  exports.VariableDeclarator = VariableDeclarator
                  var WhileStatement = (function () {
                    function WhileStatement(test, body) {
                      this.type = syntax_1.Syntax.WhileStatement
                      this.test = test
                      this.body = body
                    }
                    return WhileStatement
                  })()
                  exports.WhileStatement = WhileStatement
                  var WithStatement = (function () {
                    function WithStatement(object, body) {
                      this.type = syntax_1.Syntax.WithStatement
                      this.object = object
                      this.body = body
                    }
                    return WithStatement
                  })()
                  exports.WithStatement = WithStatement
                  var YieldExpression = (function () {
                    function YieldExpression(argument, delegate) {
                      this.type = syntax_1.Syntax.YieldExpression
                      this.argument = argument
                      this.delegate = delegate
                    }
                    return YieldExpression
                  })()
                  exports.YieldExpression = YieldExpression

                  /***/
                },
                /* 8 */
                /***/ function (module, exports, __webpack_require__) {
                  'use strict'
                  Object.defineProperty(exports, '__esModule', { value: true })
                  var assert_1 = __webpack_require__(9)
                  var error_handler_1 = __webpack_require__(10)
                  var messages_1 = __webpack_require__(11)
                  var Node = __webpack_require__(7)
                  var scanner_1 = __webpack_require__(12)
                  var syntax_1 = __webpack_require__(2)
                  var token_1 = __webpack_require__(13)
                  var ArrowParameterPlaceHolder = 'ArrowParameterPlaceHolder'
                  var Parser = (function () {
                    function Parser(code, options, delegate) {
                      if (options === void 0) {
                        options = {}
                      }
                      this.config = {
                        range:
                          typeof options.range === 'boolean' && options.range,
                        loc: typeof options.loc === 'boolean' && options.loc,
                        source: null,
                        tokens:
                          typeof options.tokens === 'boolean' && options.tokens,
                        comment:
                          typeof options.comment === 'boolean' &&
                          options.comment,
                        tolerant:
                          typeof options.tolerant === 'boolean' &&
                          options.tolerant,
                      }
                      if (
                        this.config.loc &&
                        options.source &&
                        options.source !== null
                      ) {
                        this.config.source = String(options.source)
                      }
                      this.delegate = delegate
                      this.errorHandler = new error_handler_1.ErrorHandler()
                      this.errorHandler.tolerant = this.config.tolerant
                      this.scanner = new scanner_1.Scanner(
                        code,
                        this.errorHandler
                      )
                      this.scanner.trackComment = this.config.comment
                      this.operatorPrecedence = {
                        ')': 0,
                        ';': 0,
                        ',': 0,
                        '=': 0,
                        ']': 0,
                        '||': 1,
                        '&&': 2,
                        '|': 3,
                        '^': 4,
                        '&': 5,
                        '==': 6,
                        '!=': 6,
                        '===': 6,
                        '!==': 6,
                        '<': 7,
                        '>': 7,
                        '<=': 7,
                        '>=': 7,
                        '<<': 8,
                        '>>': 8,
                        '>>>': 8,
                        '+': 9,
                        '-': 9,
                        '*': 11,
                        '/': 11,
                        '%': 11,
                      }
                      this.lookahead = {
                        type: 2 /* EOF */,
                        value: '',
                        lineNumber: this.scanner.lineNumber,
                        lineStart: 0,
                        start: 0,
                        end: 0,
                      }
                      this.hasLineTerminator = false
                      this.context = {
                        isModule: false,
                        await: false,
                        allowIn: true,
                        allowStrictDirective: true,
                        allowYield: true,
                        firstCoverInitializedNameError: null,
                        isAssignmentTarget: false,
                        isBindingElement: false,
                        inFunctionBody: false,
                        inIteration: false,
                        inSwitch: false,
                        labelSet: {},
                        strict: false,
                      }
                      this.tokens = []
                      this.startMarker = {
                        index: 0,
                        line: this.scanner.lineNumber,
                        column: 0,
                      }
                      this.lastMarker = {
                        index: 0,
                        line: this.scanner.lineNumber,
                        column: 0,
                      }
                      this.nextToken()
                      this.lastMarker = {
                        index: this.scanner.index,
                        line: this.scanner.lineNumber,
                        column: this.scanner.index - this.scanner.lineStart,
                      }
                    }
                    Parser.prototype.throwError = function (messageFormat) {
                      var values = []
                      for (var _i = 1; _i < arguments.length; _i++) {
                        values[_i - 1] = arguments[_i]
                      }
                      var args = Array.prototype.slice.call(arguments, 1)
                      var msg = messageFormat.replace(/%(\d)/g, function (
                        whole,
                        idx
                      ) {
                        assert_1.assert(
                          idx < args.length,
                          'Message reference must be in range'
                        )
                        return args[idx]
                      })
                      var index = this.lastMarker.index
                      var line = this.lastMarker.line
                      var column = this.lastMarker.column + 1
                      throw this.errorHandler.createError(
                        index,
                        line,
                        column,
                        msg
                      )
                    }
                    Parser.prototype.tolerateError = function (messageFormat) {
                      var values = []
                      for (var _i = 1; _i < arguments.length; _i++) {
                        values[_i - 1] = arguments[_i]
                      }
                      var args = Array.prototype.slice.call(arguments, 1)
                      var msg = messageFormat.replace(/%(\d)/g, function (
                        whole,
                        idx
                      ) {
                        assert_1.assert(
                          idx < args.length,
                          'Message reference must be in range'
                        )
                        return args[idx]
                      })
                      var index = this.lastMarker.index
                      var line = this.scanner.lineNumber
                      var column = this.lastMarker.column + 1
                      this.errorHandler.tolerateError(index, line, column, msg)
                    }
                    // Throw an exception because of the token.
                    Parser.prototype.unexpectedTokenError = function (
                      token,
                      message
                    ) {
                      var msg = message || messages_1.Messages.UnexpectedToken
                      var value
                      if (token) {
                        if (!message) {
                          msg =
                            token.type === 2 /* EOF */
                              ? messages_1.Messages.UnexpectedEOS
                              : token.type === 3 /* Identifier */
                              ? messages_1.Messages.UnexpectedIdentifier
                              : token.type === 6 /* NumericLiteral */
                              ? messages_1.Messages.UnexpectedNumber
                              : token.type === 8 /* StringLiteral */
                              ? messages_1.Messages.UnexpectedString
                              : token.type === 10 /* Template */
                              ? messages_1.Messages.UnexpectedTemplate
                              : messages_1.Messages.UnexpectedToken
                          if (token.type === 4 /* Keyword */) {
                            if (
                              this.scanner.isFutureReservedWord(token.value)
                            ) {
                              msg = messages_1.Messages.UnexpectedReserved
                            } else if (
                              this.context.strict &&
                              this.scanner.isStrictModeReservedWord(token.value)
                            ) {
                              msg = messages_1.Messages.StrictReservedWord
                            }
                          }
                        }
                        value = token.value
                      } else {
                        value = 'ILLEGAL'
                      }
                      msg = msg.replace('%0', value)
                      if (token && typeof token.lineNumber === 'number') {
                        var index = token.start
                        var line = token.lineNumber
                        var lastMarkerLineStart =
                          this.lastMarker.index - this.lastMarker.column
                        var column = token.start - lastMarkerLineStart + 1
                        return this.errorHandler.createError(
                          index,
                          line,
                          column,
                          msg
                        )
                      } else {
                        var index = this.lastMarker.index
                        var line = this.lastMarker.line
                        var column = this.lastMarker.column + 1
                        return this.errorHandler.createError(
                          index,
                          line,
                          column,
                          msg
                        )
                      }
                    }
                    Parser.prototype.throwUnexpectedToken = function (
                      token,
                      message
                    ) {
                      throw this.unexpectedTokenError(token, message)
                    }
                    Parser.prototype.tolerateUnexpectedToken = function (
                      token,
                      message
                    ) {
                      this.errorHandler.tolerate(
                        this.unexpectedTokenError(token, message)
                      )
                    }
                    Parser.prototype.collectComments = function () {
                      if (!this.config.comment) {
                        this.scanner.scanComments()
                      } else {
                        var comments = this.scanner.scanComments()
                        if (comments.length > 0 && this.delegate) {
                          for (var i = 0; i < comments.length; ++i) {
                            var e = comments[i]
                            var node = void 0
                            node = {
                              type: e.multiLine
                                ? 'BlockComment'
                                : 'LineComment',
                              value: this.scanner.source.slice(
                                e.slice[0],
                                e.slice[1]
                              ),
                            }
                            if (this.config.range) {
                              node.range = e.range
                            }
                            if (this.config.loc) {
                              node.loc = e.loc
                            }
                            var metadata = {
                              start: {
                                line: e.loc.start.line,
                                column: e.loc.start.column,
                                offset: e.range[0],
                              },
                              end: {
                                line: e.loc.end.line,
                                column: e.loc.end.column,
                                offset: e.range[1],
                              },
                            }
                            this.delegate(node, metadata)
                          }
                        }
                      }
                    }
                    // From internal representation to an external structure
                    Parser.prototype.getTokenRaw = function (token) {
                      return this.scanner.source.slice(token.start, token.end)
                    }
                    Parser.prototype.convertToken = function (token) {
                      var t = {
                        type: token_1.TokenName[token.type],
                        value: this.getTokenRaw(token),
                      }
                      if (this.config.range) {
                        t.range = [token.start, token.end]
                      }
                      if (this.config.loc) {
                        t.loc = {
                          start: {
                            line: this.startMarker.line,
                            column: this.startMarker.column,
                          },
                          end: {
                            line: this.scanner.lineNumber,
                            column: this.scanner.index - this.scanner.lineStart,
                          },
                        }
                      }
                      if (token.type === 9 /* RegularExpression */) {
                        var pattern = token.pattern
                        var flags = token.flags
                        t.regex = { pattern: pattern, flags: flags }
                      }
                      return t
                    }
                    Parser.prototype.nextToken = function () {
                      var token = this.lookahead
                      this.lastMarker.index = this.scanner.index
                      this.lastMarker.line = this.scanner.lineNumber
                      this.lastMarker.column =
                        this.scanner.index - this.scanner.lineStart
                      this.collectComments()
                      if (this.scanner.index !== this.startMarker.index) {
                        this.startMarker.index = this.scanner.index
                        this.startMarker.line = this.scanner.lineNumber
                        this.startMarker.column =
                          this.scanner.index - this.scanner.lineStart
                      }
                      var next = this.scanner.lex()
                      this.hasLineTerminator =
                        token.lineNumber !== next.lineNumber
                      if (
                        next &&
                        this.context.strict &&
                        next.type === 3 /* Identifier */
                      ) {
                        if (this.scanner.isStrictModeReservedWord(next.value)) {
                          next.type = 4 /* Keyword */
                        }
                      }
                      this.lookahead = next
                      if (this.config.tokens && next.type !== 2 /* EOF */) {
                        this.tokens.push(this.convertToken(next))
                      }
                      return token
                    }
                    Parser.prototype.nextRegexToken = function () {
                      this.collectComments()
                      var token = this.scanner.scanRegExp()
                      if (this.config.tokens) {
                        // Pop the previous token, '/' or '/='
                        // This is added from the lookahead token.
                        this.tokens.pop()
                        this.tokens.push(this.convertToken(token))
                      }
                      // Prime the next lookahead.
                      this.lookahead = token
                      this.nextToken()
                      return token
                    }
                    Parser.prototype.createNode = function () {
                      return {
                        index: this.startMarker.index,
                        line: this.startMarker.line,
                        column: this.startMarker.column,
                      }
                    }
                    Parser.prototype.startNode = function (
                      token,
                      lastLineStart
                    ) {
                      if (lastLineStart === void 0) {
                        lastLineStart = 0
                      }
                      var column = token.start - token.lineStart
                      var line = token.lineNumber
                      if (column < 0) {
                        column += lastLineStart
                        line--
                      }
                      return {
                        index: token.start,
                        line: line,
                        column: column,
                      }
                    }
                    Parser.prototype.finalize = function (marker, node) {
                      if (this.config.range) {
                        node.range = [marker.index, this.lastMarker.index]
                      }
                      if (this.config.loc) {
                        node.loc = {
                          start: {
                            line: marker.line,
                            column: marker.column,
                          },
                          end: {
                            line: this.lastMarker.line,
                            column: this.lastMarker.column,
                          },
                        }
                        if (this.config.source) {
                          node.loc.source = this.config.source
                        }
                      }
                      if (this.delegate) {
                        var metadata = {
                          start: {
                            line: marker.line,
                            column: marker.column,
                            offset: marker.index,
                          },
                          end: {
                            line: this.lastMarker.line,
                            column: this.lastMarker.column,
                            offset: this.lastMarker.index,
                          },
                        }
                        this.delegate(node, metadata)
                      }
                      return node
                    }
                    // Expect the next token to match the specified punctuator.
                    // If not, an exception will be thrown.
                    Parser.prototype.expect = function (value) {
                      var token = this.nextToken()
                      if (
                        token.type !== 7 /* Punctuator */ ||
                        token.value !== value
                      ) {
                        this.throwUnexpectedToken(token)
                      }
                    }
                    // Quietly expect a comma when in tolerant mode, otherwise delegates to expect().
                    Parser.prototype.expectCommaSeparator = function () {
                      if (this.config.tolerant) {
                        var token = this.lookahead
                        if (
                          token.type === 7 /* Punctuator */ &&
                          token.value === ','
                        ) {
                          this.nextToken()
                        } else if (
                          token.type === 7 /* Punctuator */ &&
                          token.value === ';'
                        ) {
                          this.nextToken()
                          this.tolerateUnexpectedToken(token)
                        } else {
                          this.tolerateUnexpectedToken(
                            token,
                            messages_1.Messages.UnexpectedToken
                          )
                        }
                      } else {
                        this.expect(',')
                      }
                    }
                    // Expect the next token to match the specified keyword.
                    // If not, an exception will be thrown.
                    Parser.prototype.expectKeyword = function (keyword) {
                      var token = this.nextToken()
                      if (
                        token.type !== 4 /* Keyword */ ||
                        token.value !== keyword
                      ) {
                        this.throwUnexpectedToken(token)
                      }
                    }
                    // Return true if the next token matches the specified punctuator.
                    Parser.prototype.match = function (value) {
                      return (
                        this.lookahead.type === 7 /* Punctuator */ &&
                        this.lookahead.value === value
                      )
                    }
                    // Return true if the next token matches the specified keyword
                    Parser.prototype.matchKeyword = function (keyword) {
                      return (
                        this.lookahead.type === 4 /* Keyword */ &&
                        this.lookahead.value === keyword
                      )
                    }
                    // Return true if the next token matches the specified contextual keyword
                    // (where an identifier is sometimes a keyword depending on the context)
                    Parser.prototype.matchContextualKeyword = function (
                      keyword
                    ) {
                      return (
                        this.lookahead.type === 3 /* Identifier */ &&
                        this.lookahead.value === keyword
                      )
                    }
                    // Return true if the next token is an assignment operator
                    Parser.prototype.matchAssign = function () {
                      if (this.lookahead.type !== 7 /* Punctuator */) {
                        return false
                      }
                      var op = this.lookahead.value
                      return (
                        op === '=' ||
                        op === '*=' ||
                        op === '**=' ||
                        op === '/=' ||
                        op === '%=' ||
                        op === '+=' ||
                        op === '-=' ||
                        op === '<<=' ||
                        op === '>>=' ||
                        op === '>>>=' ||
                        op === '&=' ||
                        op === '^=' ||
                        op === '|='
                      )
                    }
                    // Cover grammar support.
                    //
                    // When an assignment expression position starts with an left parenthesis, the determination of the type
                    // of the syntax is to be deferred arbitrarily long until the end of the parentheses pair (plus a lookahead)
                    // or the first comma. This situation also defers the determination of all the expressions nested in the pair.
                    //
                    // There are three productions that can be parsed in a parentheses pair that needs to be determined
                    // after the outermost pair is closed. They are:
                    //
                    //   1. AssignmentExpression
                    //   2. BindingElements
                    //   3. AssignmentTargets
                    //
                    // In order to avoid exponential backtracking, we use two flags to denote if the production can be
                    // binding element or assignment target.
                    //
                    // The three productions have the relationship:
                    //
                    //   BindingElements ⊆ AssignmentTargets ⊆ AssignmentExpression
                    //
                    // with a single exception that CoverInitializedName when used directly in an Expression, generates
                    // an early error. Therefore, we need the third state, firstCoverInitializedNameError, to track the
                    // first usage of CoverInitializedName and report it when we reached the end of the parentheses pair.
                    //
                    // isolateCoverGrammar function runs the given parser function with a new cover grammar context, and it does not
                    // effect the current flags. This means the production the parser parses is only used as an expression. Therefore
                    // the CoverInitializedName check is conducted.
                    //
                    // inheritCoverGrammar function runs the given parse function with a new cover grammar context, and it propagates
                    // the flags outside of the parser. This means the production the parser parses is used as a part of a potential
                    // pattern. The CoverInitializedName check is deferred.
                    Parser.prototype.isolateCoverGrammar = function (
                      parseFunction
                    ) {
                      var previousIsBindingElement = this.context
                        .isBindingElement
                      var previousIsAssignmentTarget = this.context
                        .isAssignmentTarget
                      var previousFirstCoverInitializedNameError = this.context
                        .firstCoverInitializedNameError
                      this.context.isBindingElement = true
                      this.context.isAssignmentTarget = true
                      this.context.firstCoverInitializedNameError = null
                      var result = parseFunction.call(this)
                      if (
                        this.context.firstCoverInitializedNameError !== null
                      ) {
                        this.throwUnexpectedToken(
                          this.context.firstCoverInitializedNameError
                        )
                      }
                      this.context.isBindingElement = previousIsBindingElement
                      this.context.isAssignmentTarget = previousIsAssignmentTarget
                      this.context.firstCoverInitializedNameError = previousFirstCoverInitializedNameError
                      return result
                    }
                    Parser.prototype.inheritCoverGrammar = function (
                      parseFunction
                    ) {
                      var previousIsBindingElement = this.context
                        .isBindingElement
                      var previousIsAssignmentTarget = this.context
                        .isAssignmentTarget
                      var previousFirstCoverInitializedNameError = this.context
                        .firstCoverInitializedNameError
                      this.context.isBindingElement = true
                      this.context.isAssignmentTarget = true
                      this.context.firstCoverInitializedNameError = null
                      var result = parseFunction.call(this)
                      this.context.isBindingElement =
                        this.context.isBindingElement &&
                        previousIsBindingElement
                      this.context.isAssignmentTarget =
                        this.context.isAssignmentTarget &&
                        previousIsAssignmentTarget
                      this.context.firstCoverInitializedNameError =
                        previousFirstCoverInitializedNameError ||
                        this.context.firstCoverInitializedNameError
                      return result
                    }
                    Parser.prototype.consumeSemicolon = function () {
                      if (this.match(';')) {
                        this.nextToken()
                      } else if (!this.hasLineTerminator) {
                        if (
                          this.lookahead.type !== 2 /* EOF */ &&
                          !this.match('}')
                        ) {
                          this.throwUnexpectedToken(this.lookahead)
                        }
                        this.lastMarker.index = this.startMarker.index
                        this.lastMarker.line = this.startMarker.line
                        this.lastMarker.column = this.startMarker.column
                      }
                    }
                    // https://tc39.github.io/ecma262/#sec-primary-expression
                    Parser.prototype.parsePrimaryExpression = function () {
                      var node = this.createNode()
                      var expr
                      var token, raw
                      switch (this.lookahead.type) {
                        case 3 /* Identifier */:
                          if (
                            (this.context.isModule || this.context.await) &&
                            this.lookahead.value === 'await'
                          ) {
                            this.tolerateUnexpectedToken(this.lookahead)
                          }
                          expr = this.matchAsyncFunction()
                            ? this.parseFunctionExpression()
                            : this.finalize(
                                node,
                                new Node.Identifier(this.nextToken().value)
                              )
                          break
                        case 6 /* NumericLiteral */:
                        case 8 /* StringLiteral */:
                          if (this.context.strict && this.lookahead.octal) {
                            this.tolerateUnexpectedToken(
                              this.lookahead,
                              messages_1.Messages.StrictOctalLiteral
                            )
                          }
                          this.context.isAssignmentTarget = false
                          this.context.isBindingElement = false
                          token = this.nextToken()
                          raw = this.getTokenRaw(token)
                          expr = this.finalize(
                            node,
                            new Node.Literal(token.value, raw)
                          )
                          break
                        case 1 /* BooleanLiteral */:
                          this.context.isAssignmentTarget = false
                          this.context.isBindingElement = false
                          token = this.nextToken()
                          raw = this.getTokenRaw(token)
                          expr = this.finalize(
                            node,
                            new Node.Literal(token.value === 'true', raw)
                          )
                          break
                        case 5 /* NullLiteral */:
                          this.context.isAssignmentTarget = false
                          this.context.isBindingElement = false
                          token = this.nextToken()
                          raw = this.getTokenRaw(token)
                          expr = this.finalize(
                            node,
                            new Node.Literal(null, raw)
                          )
                          break
                        case 10 /* Template */:
                          expr = this.parseTemplateLiteral()
                          break
                        case 7 /* Punctuator */:
                          switch (this.lookahead.value) {
                            case '(':
                              this.context.isBindingElement = false
                              expr = this.inheritCoverGrammar(
                                this.parseGroupExpression
                              )
                              break
                            case '[':
                              expr = this.inheritCoverGrammar(
                                this.parseArrayInitializer
                              )
                              break
                            case '{':
                              expr = this.inheritCoverGrammar(
                                this.parseObjectInitializer
                              )
                              break
                            case '/':
                            case '/=':
                              this.context.isAssignmentTarget = false
                              this.context.isBindingElement = false
                              this.scanner.index = this.startMarker.index
                              token = this.nextRegexToken()
                              raw = this.getTokenRaw(token)
                              expr = this.finalize(
                                node,
                                new Node.RegexLiteral(
                                  token.regex,
                                  raw,
                                  token.pattern,
                                  token.flags
                                )
                              )
                              break
                            default:
                              expr = this.throwUnexpectedToken(this.nextToken())
                          }
                          break
                        case 4 /* Keyword */:
                          if (
                            !this.context.strict &&
                            this.context.allowYield &&
                            this.matchKeyword('yield')
                          ) {
                            expr = this.parseIdentifierName()
                          } else if (
                            !this.context.strict &&
                            this.matchKeyword('let')
                          ) {
                            expr = this.finalize(
                              node,
                              new Node.Identifier(this.nextToken().value)
                            )
                          } else {
                            this.context.isAssignmentTarget = false
                            this.context.isBindingElement = false
                            if (this.matchKeyword('function')) {
                              expr = this.parseFunctionExpression()
                            } else if (this.matchKeyword('this')) {
                              this.nextToken()
                              expr = this.finalize(
                                node,
                                new Node.ThisExpression()
                              )
                            } else if (this.matchKeyword('class')) {
                              expr = this.parseClassExpression()
                            } else {
                              expr = this.throwUnexpectedToken(this.nextToken())
                            }
                          }
                          break
                        default:
                          expr = this.throwUnexpectedToken(this.nextToken())
                      }
                      return expr
                    }
                    // https://tc39.github.io/ecma262/#sec-array-initializer
                    Parser.prototype.parseSpreadElement = function () {
                      var node = this.createNode()
                      this.expect('...')
                      var arg = this.inheritCoverGrammar(
                        this.parseAssignmentExpression
                      )
                      return this.finalize(node, new Node.SpreadElement(arg))
                    }
                    Parser.prototype.parseArrayInitializer = function () {
                      var node = this.createNode()
                      var elements = []
                      this.expect('[')
                      while (!this.match(']')) {
                        if (this.match(',')) {
                          this.nextToken()
                          elements.push(null)
                        } else if (this.match('...')) {
                          var element = this.parseSpreadElement()
                          if (!this.match(']')) {
                            this.context.isAssignmentTarget = false
                            this.context.isBindingElement = false
                            this.expect(',')
                          }
                          elements.push(element)
                        } else {
                          elements.push(
                            this.inheritCoverGrammar(
                              this.parseAssignmentExpression
                            )
                          )
                          if (!this.match(']')) {
                            this.expect(',')
                          }
                        }
                      }
                      this.expect(']')
                      return this.finalize(
                        node,
                        new Node.ArrayExpression(elements)
                      )
                    }
                    // https://tc39.github.io/ecma262/#sec-object-initializer
                    Parser.prototype.parsePropertyMethod = function (params) {
                      this.context.isAssignmentTarget = false
                      this.context.isBindingElement = false
                      var previousStrict = this.context.strict
                      var previousAllowStrictDirective = this.context
                        .allowStrictDirective
                      this.context.allowStrictDirective = params.simple
                      var body = this.isolateCoverGrammar(
                        this.parseFunctionSourceElements
                      )
                      if (this.context.strict && params.firstRestricted) {
                        this.tolerateUnexpectedToken(
                          params.firstRestricted,
                          params.message
                        )
                      }
                      if (this.context.strict && params.stricted) {
                        this.tolerateUnexpectedToken(
                          params.stricted,
                          params.message
                        )
                      }
                      this.context.strict = previousStrict
                      this.context.allowStrictDirective = previousAllowStrictDirective
                      return body
                    }
                    Parser.prototype.parsePropertyMethodFunction = function () {
                      var isGenerator = false
                      var node = this.createNode()
                      var previousAllowYield = this.context.allowYield
                      this.context.allowYield = true
                      var params = this.parseFormalParameters()
                      var method = this.parsePropertyMethod(params)
                      this.context.allowYield = previousAllowYield
                      return this.finalize(
                        node,
                        new Node.FunctionExpression(
                          null,
                          params.params,
                          method,
                          isGenerator
                        )
                      )
                    }
                    Parser.prototype.parsePropertyMethodAsyncFunction = function () {
                      var node = this.createNode()
                      var previousAllowYield = this.context.allowYield
                      var previousAwait = this.context.await
                      this.context.allowYield = false
                      this.context.await = true
                      var params = this.parseFormalParameters()
                      var method = this.parsePropertyMethod(params)
                      this.context.allowYield = previousAllowYield
                      this.context.await = previousAwait
                      return this.finalize(
                        node,
                        new Node.AsyncFunctionExpression(
                          null,
                          params.params,
                          method
                        )
                      )
                    }
                    Parser.prototype.parseObjectPropertyKey = function () {
                      var node = this.createNode()
                      var token = this.nextToken()
                      var key
                      switch (token.type) {
                        case 8 /* StringLiteral */:
                        case 6 /* NumericLiteral */:
                          if (this.context.strict && token.octal) {
                            this.tolerateUnexpectedToken(
                              token,
                              messages_1.Messages.StrictOctalLiteral
                            )
                          }
                          var raw = this.getTokenRaw(token)
                          key = this.finalize(
                            node,
                            new Node.Literal(token.value, raw)
                          )
                          break
                        case 3 /* Identifier */:
                        case 1 /* BooleanLiteral */:
                        case 5 /* NullLiteral */:
                        case 4 /* Keyword */:
                          key = this.finalize(
                            node,
                            new Node.Identifier(token.value)
                          )
                          break
                        case 7 /* Punctuator */:
                          if (token.value === '[') {
                            key = this.isolateCoverGrammar(
                              this.parseAssignmentExpression
                            )
                            this.expect(']')
                          } else {
                            key = this.throwUnexpectedToken(token)
                          }
                          break
                        default:
                          key = this.throwUnexpectedToken(token)
                      }
                      return key
                    }
                    Parser.prototype.isPropertyKey = function (key, value) {
                      return (
                        (key.type === syntax_1.Syntax.Identifier &&
                          key.name === value) ||
                        (key.type === syntax_1.Syntax.Literal &&
                          key.value === value)
                      )
                    }
                    Parser.prototype.parseObjectProperty = function (hasProto) {
                      var node = this.createNode()
                      var token = this.lookahead
                      var kind
                      var key = null
                      var value = null
                      var computed = false
                      var method = false
                      var shorthand = false
                      var isAsync = false
                      if (token.type === 3 /* Identifier */) {
                        var id = token.value
                        this.nextToken()
                        computed = this.match('[')
                        isAsync =
                          !this.hasLineTerminator &&
                          id === 'async' &&
                          !this.match(':') &&
                          !this.match('(') &&
                          !this.match('*') &&
                          !this.match(',')
                        key = isAsync
                          ? this.parseObjectPropertyKey()
                          : this.finalize(node, new Node.Identifier(id))
                      } else if (this.match('*')) {
                        this.nextToken()
                      } else {
                        computed = this.match('[')
                        key = this.parseObjectPropertyKey()
                      }
                      var lookaheadPropertyKey = this.qualifiedPropertyName(
                        this.lookahead
                      )
                      if (
                        token.type === 3 /* Identifier */ &&
                        !isAsync &&
                        token.value === 'get' &&
                        lookaheadPropertyKey
                      ) {
                        kind = 'get'
                        computed = this.match('[')
                        key = this.parseObjectPropertyKey()
                        this.context.allowYield = false
                        value = this.parseGetterMethod()
                      } else if (
                        token.type === 3 /* Identifier */ &&
                        !isAsync &&
                        token.value === 'set' &&
                        lookaheadPropertyKey
                      ) {
                        kind = 'set'
                        computed = this.match('[')
                        key = this.parseObjectPropertyKey()
                        value = this.parseSetterMethod()
                      } else if (
                        token.type === 7 /* Punctuator */ &&
                        token.value === '*' &&
                        lookaheadPropertyKey
                      ) {
                        kind = 'init'
                        computed = this.match('[')
                        key = this.parseObjectPropertyKey()
                        value = this.parseGeneratorMethod()
                        method = true
                      } else {
                        if (!key) {
                          this.throwUnexpectedToken(this.lookahead)
                        }
                        kind = 'init'
                        if (this.match(':') && !isAsync) {
                          if (
                            !computed &&
                            this.isPropertyKey(key, '__proto__')
                          ) {
                            if (hasProto.value) {
                              this.tolerateError(
                                messages_1.Messages.DuplicateProtoProperty
                              )
                            }
                            hasProto.value = true
                          }
                          this.nextToken()
                          value = this.inheritCoverGrammar(
                            this.parseAssignmentExpression
                          )
                        } else if (this.match('(')) {
                          value = isAsync
                            ? this.parsePropertyMethodAsyncFunction()
                            : this.parsePropertyMethodFunction()
                          method = true
                        } else if (token.type === 3 /* Identifier */) {
                          var id = this.finalize(
                            node,
                            new Node.Identifier(token.value)
                          )
                          if (this.match('=')) {
                            this.context.firstCoverInitializedNameError = this.lookahead
                            this.nextToken()
                            shorthand = true
                            var init = this.isolateCoverGrammar(
                              this.parseAssignmentExpression
                            )
                            value = this.finalize(
                              node,
                              new Node.AssignmentPattern(id, init)
                            )
                          } else {
                            shorthand = true
                            value = id
                          }
                        } else {
                          this.throwUnexpectedToken(this.nextToken())
                        }
                      }
                      return this.finalize(
                        node,
                        new Node.Property(
                          kind,
                          key,
                          computed,
                          value,
                          method,
                          shorthand
                        )
                      )
                    }
                    Parser.prototype.parseObjectInitializer = function () {
                      var node = this.createNode()
                      this.expect('{')
                      var properties = []
                      var hasProto = { value: false }
                      while (!this.match('}')) {
                        properties.push(this.parseObjectProperty(hasProto))
                        if (!this.match('}')) {
                          this.expectCommaSeparator()
                        }
                      }
                      this.expect('}')
                      return this.finalize(
                        node,
                        new Node.ObjectExpression(properties)
                      )
                    }
                    // https://tc39.github.io/ecma262/#sec-template-literals
                    Parser.prototype.parseTemplateHead = function () {
                      assert_1.assert(
                        this.lookahead.head,
                        'Template literal must start with a template head'
                      )
                      var node = this.createNode()
                      var token = this.nextToken()
                      var raw = token.value
                      var cooked = token.cooked
                      return this.finalize(
                        node,
                        new Node.TemplateElement(
                          { raw: raw, cooked: cooked },
                          token.tail
                        )
                      )
                    }
                    Parser.prototype.parseTemplateElement = function () {
                      if (this.lookahead.type !== 10 /* Template */) {
                        this.throwUnexpectedToken()
                      }
                      var node = this.createNode()
                      var token = this.nextToken()
                      var raw = token.value
                      var cooked = token.cooked
                      return this.finalize(
                        node,
                        new Node.TemplateElement(
                          { raw: raw, cooked: cooked },
                          token.tail
                        )
                      )
                    }
                    Parser.prototype.parseTemplateLiteral = function () {
                      var node = this.createNode()
                      var expressions = []
                      var quasis = []
                      var quasi = this.parseTemplateHead()
                      quasis.push(quasi)
                      while (!quasi.tail) {
                        expressions.push(this.parseExpression())
                        quasi = this.parseTemplateElement()
                        quasis.push(quasi)
                      }
                      return this.finalize(
                        node,
                        new Node.TemplateLiteral(quasis, expressions)
                      )
                    }
                    // https://tc39.github.io/ecma262/#sec-grouping-operator
                    Parser.prototype.reinterpretExpressionAsPattern = function (
                      expr
                    ) {
                      switch (expr.type) {
                        case syntax_1.Syntax.Identifier:
                        case syntax_1.Syntax.MemberExpression:
                        case syntax_1.Syntax.RestElement:
                        case syntax_1.Syntax.AssignmentPattern:
                          break
                        case syntax_1.Syntax.SpreadElement:
                          expr.type = syntax_1.Syntax.RestElement
                          this.reinterpretExpressionAsPattern(expr.argument)
                          break
                        case syntax_1.Syntax.ArrayExpression:
                          expr.type = syntax_1.Syntax.ArrayPattern
                          for (var i = 0; i < expr.elements.length; i++) {
                            if (expr.elements[i] !== null) {
                              this.reinterpretExpressionAsPattern(
                                expr.elements[i]
                              )
                            }
                          }
                          break
                        case syntax_1.Syntax.ObjectExpression:
                          expr.type = syntax_1.Syntax.ObjectPattern
                          for (var i = 0; i < expr.properties.length; i++) {
                            this.reinterpretExpressionAsPattern(
                              expr.properties[i].value
                            )
                          }
                          break
                        case syntax_1.Syntax.AssignmentExpression:
                          expr.type = syntax_1.Syntax.AssignmentPattern
                          delete expr.operator
                          this.reinterpretExpressionAsPattern(expr.left)
                          break
                        default:
                          // Allow other node type for tolerant parsing.
                          break
                      }
                    }
                    Parser.prototype.parseGroupExpression = function () {
                      var expr
                      this.expect('(')
                      if (this.match(')')) {
                        this.nextToken()
                        if (!this.match('=>')) {
                          this.expect('=>')
                        }
                        expr = {
                          type: ArrowParameterPlaceHolder,
                          params: [],
                          async: false,
                        }
                      } else {
                        var startToken = this.lookahead
                        var params = []
                        if (this.match('...')) {
                          expr = this.parseRestElement(params)
                          this.expect(')')
                          if (!this.match('=>')) {
                            this.expect('=>')
                          }
                          expr = {
                            type: ArrowParameterPlaceHolder,
                            params: [expr],
                            async: false,
                          }
                        } else {
                          var arrow = false
                          this.context.isBindingElement = true
                          expr = this.inheritCoverGrammar(
                            this.parseAssignmentExpression
                          )
                          if (this.match(',')) {
                            var expressions = []
                            this.context.isAssignmentTarget = false
                            expressions.push(expr)
                            while (this.lookahead.type !== 2 /* EOF */) {
                              if (!this.match(',')) {
                                break
                              }
                              this.nextToken()
                              if (this.match(')')) {
                                this.nextToken()
                                for (var i = 0; i < expressions.length; i++) {
                                  this.reinterpretExpressionAsPattern(
                                    expressions[i]
                                  )
                                }
                                arrow = true
                                expr = {
                                  type: ArrowParameterPlaceHolder,
                                  params: expressions,
                                  async: false,
                                }
                              } else if (this.match('...')) {
                                if (!this.context.isBindingElement) {
                                  this.throwUnexpectedToken(this.lookahead)
                                }
                                expressions.push(this.parseRestElement(params))
                                this.expect(')')
                                if (!this.match('=>')) {
                                  this.expect('=>')
                                }
                                this.context.isBindingElement = false
                                for (var i = 0; i < expressions.length; i++) {
                                  this.reinterpretExpressionAsPattern(
                                    expressions[i]
                                  )
                                }
                                arrow = true
                                expr = {
                                  type: ArrowParameterPlaceHolder,
                                  params: expressions,
                                  async: false,
                                }
                              } else {
                                expressions.push(
                                  this.inheritCoverGrammar(
                                    this.parseAssignmentExpression
                                  )
                                )
                              }
                              if (arrow) {
                                break
                              }
                            }
                            if (!arrow) {
                              expr = this.finalize(
                                this.startNode(startToken),
                                new Node.SequenceExpression(expressions)
                              )
                            }
                          }
                          if (!arrow) {
                            this.expect(')')
                            if (this.match('=>')) {
                              if (
                                expr.type === syntax_1.Syntax.Identifier &&
                                expr.name === 'yield'
                              ) {
                                arrow = true
                                expr = {
                                  type: ArrowParameterPlaceHolder,
                                  params: [expr],
                                  async: false,
                                }
                              }
                              if (!arrow) {
                                if (!this.context.isBindingElement) {
                                  this.throwUnexpectedToken(this.lookahead)
                                }
                                if (
                                  expr.type ===
                                  syntax_1.Syntax.SequenceExpression
                                ) {
                                  for (
                                    var i = 0;
                                    i < expr.expressions.length;
                                    i++
                                  ) {
                                    this.reinterpretExpressionAsPattern(
                                      expr.expressions[i]
                                    )
                                  }
                                } else {
                                  this.reinterpretExpressionAsPattern(expr)
                                }
                                var parameters =
                                  expr.type ===
                                  syntax_1.Syntax.SequenceExpression
                                    ? expr.expressions
                                    : [expr]
                                expr = {
                                  type: ArrowParameterPlaceHolder,
                                  params: parameters,
                                  async: false,
                                }
                              }
                            }
                            this.context.isBindingElement = false
                          }
                        }
                      }
                      return expr
                    }
                    // https://tc39.github.io/ecma262/#sec-left-hand-side-expressions
                    Parser.prototype.parseArguments = function () {
                      this.expect('(')
                      var args = []
                      if (!this.match(')')) {
                        while (true) {
                          var expr = this.match('...')
                            ? this.parseSpreadElement()
                            : this.isolateCoverGrammar(
                                this.parseAssignmentExpression
                              )
                          args.push(expr)
                          if (this.match(')')) {
                            break
                          }
                          this.expectCommaSeparator()
                          if (this.match(')')) {
                            break
                          }
                        }
                      }
                      this.expect(')')
                      return args
                    }
                    Parser.prototype.isIdentifierName = function (token) {
                      return (
                        token.type === 3 /* Identifier */ ||
                        token.type === 4 /* Keyword */ ||
                        token.type === 1 /* BooleanLiteral */ ||
                        token.type === 5 /* NullLiteral */
                      )
                    }
                    Parser.prototype.parseIdentifierName = function () {
                      var node = this.createNode()
                      var token = this.nextToken()
                      if (!this.isIdentifierName(token)) {
                        this.throwUnexpectedToken(token)
                      }
                      return this.finalize(
                        node,
                        new Node.Identifier(token.value)
                      )
                    }
                    Parser.prototype.parseNewExpression = function () {
                      var node = this.createNode()
                      var id = this.parseIdentifierName()
                      assert_1.assert(
                        id.name === 'new',
                        'New expression must start with `new`'
                      )
                      var expr
                      if (this.match('.')) {
                        this.nextToken()
                        if (
                          this.lookahead.type === 3 /* Identifier */ &&
                          this.context.inFunctionBody &&
                          this.lookahead.value === 'target'
                        ) {
                          var property = this.parseIdentifierName()
                          expr = new Node.MetaProperty(id, property)
                        } else {
                          this.throwUnexpectedToken(this.lookahead)
                        }
                      } else {
                        var callee = this.isolateCoverGrammar(
                          this.parseLeftHandSideExpression
                        )
                        var args = this.match('(') ? this.parseArguments() : []
                        expr = new Node.NewExpression(callee, args)
                        this.context.isAssignmentTarget = false
                        this.context.isBindingElement = false
                      }
                      return this.finalize(node, expr)
                    }
                    Parser.prototype.parseAsyncArgument = function () {
                      var arg = this.parseAssignmentExpression()
                      this.context.firstCoverInitializedNameError = null
                      return arg
                    }
                    Parser.prototype.parseAsyncArguments = function () {
                      this.expect('(')
                      var args = []
                      if (!this.match(')')) {
                        while (true) {
                          var expr = this.match('...')
                            ? this.parseSpreadElement()
                            : this.isolateCoverGrammar(this.parseAsyncArgument)
                          args.push(expr)
                          if (this.match(')')) {
                            break
                          }
                          this.expectCommaSeparator()
                          if (this.match(')')) {
                            break
                          }
                        }
                      }
                      this.expect(')')
                      return args
                    }
                    Parser.prototype.parseLeftHandSideExpressionAllowCall = function () {
                      var startToken = this.lookahead
                      var maybeAsync = this.matchContextualKeyword('async')
                      var previousAllowIn = this.context.allowIn
                      this.context.allowIn = true
                      var expr
                      if (
                        this.matchKeyword('super') &&
                        this.context.inFunctionBody
                      ) {
                        expr = this.createNode()
                        this.nextToken()
                        expr = this.finalize(expr, new Node.Super())
                        if (
                          !this.match('(') &&
                          !this.match('.') &&
                          !this.match('[')
                        ) {
                          this.throwUnexpectedToken(this.lookahead)
                        }
                      } else {
                        expr = this.inheritCoverGrammar(
                          this.matchKeyword('new')
                            ? this.parseNewExpression
                            : this.parsePrimaryExpression
                        )
                      }
                      while (true) {
                        if (this.match('.')) {
                          this.context.isBindingElement = false
                          this.context.isAssignmentTarget = true
                          this.expect('.')
                          var property = this.parseIdentifierName()
                          expr = this.finalize(
                            this.startNode(startToken),
                            new Node.StaticMemberExpression(expr, property)
                          )
                        } else if (this.match('(')) {
                          var asyncArrow =
                            maybeAsync &&
                            startToken.lineNumber === this.lookahead.lineNumber
                          this.context.isBindingElement = false
                          this.context.isAssignmentTarget = false
                          var args = asyncArrow
                            ? this.parseAsyncArguments()
                            : this.parseArguments()
                          expr = this.finalize(
                            this.startNode(startToken),
                            new Node.CallExpression(expr, args)
                          )
                          if (asyncArrow && this.match('=>')) {
                            for (var i = 0; i < args.length; ++i) {
                              this.reinterpretExpressionAsPattern(args[i])
                            }
                            expr = {
                              type: ArrowParameterPlaceHolder,
                              params: args,
                              async: true,
                            }
                          }
                        } else if (this.match('[')) {
                          this.context.isBindingElement = false
                          this.context.isAssignmentTarget = true
                          this.expect('[')
                          var property = this.isolateCoverGrammar(
                            this.parseExpression
                          )
                          this.expect(']')
                          expr = this.finalize(
                            this.startNode(startToken),
                            new Node.ComputedMemberExpression(expr, property)
                          )
                        } else if (
                          this.lookahead.type === 10 /* Template */ &&
                          this.lookahead.head
                        ) {
                          var quasi = this.parseTemplateLiteral()
                          expr = this.finalize(
                            this.startNode(startToken),
                            new Node.TaggedTemplateExpression(expr, quasi)
                          )
                        } else {
                          break
                        }
                      }
                      this.context.allowIn = previousAllowIn
                      return expr
                    }
                    Parser.prototype.parseSuper = function () {
                      var node = this.createNode()
                      this.expectKeyword('super')
                      if (!this.match('[') && !this.match('.')) {
                        this.throwUnexpectedToken(this.lookahead)
                      }
                      return this.finalize(node, new Node.Super())
                    }
                    Parser.prototype.parseLeftHandSideExpression = function () {
                      assert_1.assert(
                        this.context.allowIn,
                        'callee of new expression always allow in keyword.'
                      )
                      var node = this.startNode(this.lookahead)
                      var expr =
                        this.matchKeyword('super') &&
                        this.context.inFunctionBody
                          ? this.parseSuper()
                          : this.inheritCoverGrammar(
                              this.matchKeyword('new')
                                ? this.parseNewExpression
                                : this.parsePrimaryExpression
                            )
                      while (true) {
                        if (this.match('[')) {
                          this.context.isBindingElement = false
                          this.context.isAssignmentTarget = true
                          this.expect('[')
                          var property = this.isolateCoverGrammar(
                            this.parseExpression
                          )
                          this.expect(']')
                          expr = this.finalize(
                            node,
                            new Node.ComputedMemberExpression(expr, property)
                          )
                        } else if (this.match('.')) {
                          this.context.isBindingElement = false
                          this.context.isAssignmentTarget = true
                          this.expect('.')
                          var property = this.parseIdentifierName()
                          expr = this.finalize(
                            node,
                            new Node.StaticMemberExpression(expr, property)
                          )
                        } else if (
                          this.lookahead.type === 10 /* Template */ &&
                          this.lookahead.head
                        ) {
                          var quasi = this.parseTemplateLiteral()
                          expr = this.finalize(
                            node,
                            new Node.TaggedTemplateExpression(expr, quasi)
                          )
                        } else {
                          break
                        }
                      }
                      return expr
                    }
                    // https://tc39.github.io/ecma262/#sec-update-expressions
                    Parser.prototype.parseUpdateExpression = function () {
                      var expr
                      var startToken = this.lookahead
                      if (this.match('++') || this.match('--')) {
                        var node = this.startNode(startToken)
                        var token = this.nextToken()
                        expr = this.inheritCoverGrammar(
                          this.parseUnaryExpression
                        )
                        if (
                          this.context.strict &&
                          expr.type === syntax_1.Syntax.Identifier &&
                          this.scanner.isRestrictedWord(expr.name)
                        ) {
                          this.tolerateError(
                            messages_1.Messages.StrictLHSPrefix
                          )
                        }
                        if (!this.context.isAssignmentTarget) {
                          this.tolerateError(
                            messages_1.Messages.InvalidLHSInAssignment
                          )
                        }
                        var prefix = true
                        expr = this.finalize(
                          node,
                          new Node.UpdateExpression(token.value, expr, prefix)
                        )
                        this.context.isAssignmentTarget = false
                        this.context.isBindingElement = false
                      } else {
                        expr = this.inheritCoverGrammar(
                          this.parseLeftHandSideExpressionAllowCall
                        )
                        if (
                          !this.hasLineTerminator &&
                          this.lookahead.type === 7 /* Punctuator */
                        ) {
                          if (this.match('++') || this.match('--')) {
                            if (
                              this.context.strict &&
                              expr.type === syntax_1.Syntax.Identifier &&
                              this.scanner.isRestrictedWord(expr.name)
                            ) {
                              this.tolerateError(
                                messages_1.Messages.StrictLHSPostfix
                              )
                            }
                            if (!this.context.isAssignmentTarget) {
                              this.tolerateError(
                                messages_1.Messages.InvalidLHSInAssignment
                              )
                            }
                            this.context.isAssignmentTarget = false
                            this.context.isBindingElement = false
                            var operator = this.nextToken().value
                            var prefix = false
                            expr = this.finalize(
                              this.startNode(startToken),
                              new Node.UpdateExpression(operator, expr, prefix)
                            )
                          }
                        }
                      }
                      return expr
                    }
                    // https://tc39.github.io/ecma262/#sec-unary-operators
                    Parser.prototype.parseAwaitExpression = function () {
                      var node = this.createNode()
                      this.nextToken()
                      var argument = this.parseUnaryExpression()
                      return this.finalize(
                        node,
                        new Node.AwaitExpression(argument)
                      )
                    }
                    Parser.prototype.parseUnaryExpression = function () {
                      var expr
                      if (
                        this.match('+') ||
                        this.match('-') ||
                        this.match('~') ||
                        this.match('!') ||
                        this.matchKeyword('delete') ||
                        this.matchKeyword('void') ||
                        this.matchKeyword('typeof')
                      ) {
                        var node = this.startNode(this.lookahead)
                        var token = this.nextToken()
                        expr = this.inheritCoverGrammar(
                          this.parseUnaryExpression
                        )
                        expr = this.finalize(
                          node,
                          new Node.UnaryExpression(token.value, expr)
                        )
                        if (
                          this.context.strict &&
                          expr.operator === 'delete' &&
                          expr.argument.type === syntax_1.Syntax.Identifier
                        ) {
                          this.tolerateError(messages_1.Messages.StrictDelete)
                        }
                        this.context.isAssignmentTarget = false
                        this.context.isBindingElement = false
                      } else if (
                        this.context.await &&
                        this.matchContextualKeyword('await')
                      ) {
                        expr = this.parseAwaitExpression()
                      } else {
                        expr = this.parseUpdateExpression()
                      }
                      return expr
                    }
                    Parser.prototype.parseExponentiationExpression = function () {
                      var startToken = this.lookahead
                      var expr = this.inheritCoverGrammar(
                        this.parseUnaryExpression
                      )
                      if (
                        expr.type !== syntax_1.Syntax.UnaryExpression &&
                        this.match('**')
                      ) {
                        this.nextToken()
                        this.context.isAssignmentTarget = false
                        this.context.isBindingElement = false
                        var left = expr
                        var right = this.isolateCoverGrammar(
                          this.parseExponentiationExpression
                        )
                        expr = this.finalize(
                          this.startNode(startToken),
                          new Node.BinaryExpression('**', left, right)
                        )
                      }
                      return expr
                    }
                    // https://tc39.github.io/ecma262/#sec-exp-operator
                    // https://tc39.github.io/ecma262/#sec-multiplicative-operators
                    // https://tc39.github.io/ecma262/#sec-additive-operators
                    // https://tc39.github.io/ecma262/#sec-bitwise-shift-operators
                    // https://tc39.github.io/ecma262/#sec-relational-operators
                    // https://tc39.github.io/ecma262/#sec-equality-operators
                    // https://tc39.github.io/ecma262/#sec-binary-bitwise-operators
                    // https://tc39.github.io/ecma262/#sec-binary-logical-operators
                    Parser.prototype.binaryPrecedence = function (token) {
                      var op = token.value
                      var precedence
                      if (token.type === 7 /* Punctuator */) {
                        precedence = this.operatorPrecedence[op] || 0
                      } else if (token.type === 4 /* Keyword */) {
                        precedence =
                          op === 'instanceof' ||
                          (this.context.allowIn && op === 'in')
                            ? 7
                            : 0
                      } else {
                        precedence = 0
                      }
                      return precedence
                    }
                    Parser.prototype.parseBinaryExpression = function () {
                      var startToken = this.lookahead
                      var expr = this.inheritCoverGrammar(
                        this.parseExponentiationExpression
                      )
                      var token = this.lookahead
                      var prec = this.binaryPrecedence(token)
                      if (prec > 0) {
                        this.nextToken()
                        this.context.isAssignmentTarget = false
                        this.context.isBindingElement = false
                        var markers = [startToken, this.lookahead]
                        var left = expr
                        var right = this.isolateCoverGrammar(
                          this.parseExponentiationExpression
                        )
                        var stack = [left, token.value, right]
                        var precedences = [prec]
                        while (true) {
                          prec = this.binaryPrecedence(this.lookahead)
                          if (prec <= 0) {
                            break
                          }
                          // Reduce: make a binary expression from the three topmost entries.
                          while (
                            stack.length > 2 &&
                            prec <= precedences[precedences.length - 1]
                          ) {
                            right = stack.pop()
                            var operator = stack.pop()
                            precedences.pop()
                            left = stack.pop()
                            markers.pop()
                            var node = this.startNode(
                              markers[markers.length - 1]
                            )
                            stack.push(
                              this.finalize(
                                node,
                                new Node.BinaryExpression(operator, left, right)
                              )
                            )
                          }
                          // Shift.
                          stack.push(this.nextToken().value)
                          precedences.push(prec)
                          markers.push(this.lookahead)
                          stack.push(
                            this.isolateCoverGrammar(
                              this.parseExponentiationExpression
                            )
                          )
                        }
                        // Final reduce to clean-up the stack.
                        var i = stack.length - 1
                        expr = stack[i]
                        var lastMarker = markers.pop()
                        while (i > 1) {
                          var marker = markers.pop()
                          var lastLineStart = lastMarker && lastMarker.lineStart
                          var node = this.startNode(marker, lastLineStart)
                          var operator = stack[i - 1]
                          expr = this.finalize(
                            node,
                            new Node.BinaryExpression(
                              operator,
                              stack[i - 2],
                              expr
                            )
                          )
                          i -= 2
                          lastMarker = marker
                        }
                      }
                      return expr
                    }
                    // https://tc39.github.io/ecma262/#sec-conditional-operator
                    Parser.prototype.parseConditionalExpression = function () {
                      var startToken = this.lookahead
                      var expr = this.inheritCoverGrammar(
                        this.parseBinaryExpression
                      )
                      if (this.match('?')) {
                        this.nextToken()
                        var previousAllowIn = this.context.allowIn
                        this.context.allowIn = true
                        var consequent = this.isolateCoverGrammar(
                          this.parseAssignmentExpression
                        )
                        this.context.allowIn = previousAllowIn
                        this.expect(':')
                        var alternate = this.isolateCoverGrammar(
                          this.parseAssignmentExpression
                        )
                        expr = this.finalize(
                          this.startNode(startToken),
                          new Node.ConditionalExpression(
                            expr,
                            consequent,
                            alternate
                          )
                        )
                        this.context.isAssignmentTarget = false
                        this.context.isBindingElement = false
                      }
                      return expr
                    }
                    // https://tc39.github.io/ecma262/#sec-assignment-operators
                    Parser.prototype.checkPatternParam = function (
                      options,
                      param
                    ) {
                      switch (param.type) {
                        case syntax_1.Syntax.Identifier:
                          this.validateParam(options, param, param.name)
                          break
                        case syntax_1.Syntax.RestElement:
                          this.checkPatternParam(options, param.argument)
                          break
                        case syntax_1.Syntax.AssignmentPattern:
                          this.checkPatternParam(options, param.left)
                          break
                        case syntax_1.Syntax.ArrayPattern:
                          for (var i = 0; i < param.elements.length; i++) {
                            if (param.elements[i] !== null) {
                              this.checkPatternParam(options, param.elements[i])
                            }
                          }
                          break
                        case syntax_1.Syntax.ObjectPattern:
                          for (var i = 0; i < param.properties.length; i++) {
                            this.checkPatternParam(
                              options,
                              param.properties[i].value
                            )
                          }
                          break
                        default:
                          break
                      }
                      options.simple =
                        options.simple && param instanceof Node.Identifier
                    }
                    Parser.prototype.reinterpretAsCoverFormalsList = function (
                      expr
                    ) {
                      var params = [expr]
                      var options
                      var asyncArrow = false
                      switch (expr.type) {
                        case syntax_1.Syntax.Identifier:
                          break
                        case ArrowParameterPlaceHolder:
                          params = expr.params
                          asyncArrow = expr.async
                          break
                        default:
                          return null
                      }
                      options = {
                        simple: true,
                        paramSet: {},
                      }
                      for (var i = 0; i < params.length; ++i) {
                        var param = params[i]
                        if (param.type === syntax_1.Syntax.AssignmentPattern) {
                          if (
                            param.right.type === syntax_1.Syntax.YieldExpression
                          ) {
                            if (param.right.argument) {
                              this.throwUnexpectedToken(this.lookahead)
                            }
                            param.right.type = syntax_1.Syntax.Identifier
                            param.right.name = 'yield'
                            delete param.right.argument
                            delete param.right.delegate
                          }
                        } else if (
                          asyncArrow &&
                          param.type === syntax_1.Syntax.Identifier &&
                          param.name === 'await'
                        ) {
                          this.throwUnexpectedToken(this.lookahead)
                        }
                        this.checkPatternParam(options, param)
                        params[i] = param
                      }
                      if (this.context.strict || !this.context.allowYield) {
                        for (var i = 0; i < params.length; ++i) {
                          var param = params[i]
                          if (param.type === syntax_1.Syntax.YieldExpression) {
                            this.throwUnexpectedToken(this.lookahead)
                          }
                        }
                      }
                      if (
                        options.message === messages_1.Messages.StrictParamDupe
                      ) {
                        var token = this.context.strict
                          ? options.stricted
                          : options.firstRestricted
                        this.throwUnexpectedToken(token, options.message)
                      }
                      return {
                        simple: options.simple,
                        params: params,
                        stricted: options.stricted,
                        firstRestricted: options.firstRestricted,
                        message: options.message,
                      }
                    }
                    Parser.prototype.parseAssignmentExpression = function () {
                      var expr
                      if (
                        !this.context.allowYield &&
                        this.matchKeyword('yield')
                      ) {
                        expr = this.parseYieldExpression()
                      } else {
                        var startToken = this.lookahead
                        var token = startToken
                        expr = this.parseConditionalExpression()
                        if (
                          token.type === 3 /* Identifier */ &&
                          token.lineNumber === this.lookahead.lineNumber &&
                          token.value === 'async'
                        ) {
                          if (
                            this.lookahead.type === 3 /* Identifier */ ||
                            this.matchKeyword('yield')
                          ) {
                            var arg = this.parsePrimaryExpression()
                            this.reinterpretExpressionAsPattern(arg)
                            expr = {
                              type: ArrowParameterPlaceHolder,
                              params: [arg],
                              async: true,
                            }
                          }
                        }
                        if (
                          expr.type === ArrowParameterPlaceHolder ||
                          this.match('=>')
                        ) {
                          // https://tc39.github.io/ecma262/#sec-arrow-function-definitions
                          this.context.isAssignmentTarget = false
                          this.context.isBindingElement = false
                          var isAsync = expr.async
                          var list = this.reinterpretAsCoverFormalsList(expr)
                          if (list) {
                            if (this.hasLineTerminator) {
                              this.tolerateUnexpectedToken(this.lookahead)
                            }
                            this.context.firstCoverInitializedNameError = null
                            var previousStrict = this.context.strict
                            var previousAllowStrictDirective = this.context
                              .allowStrictDirective
                            this.context.allowStrictDirective = list.simple
                            var previousAllowYield = this.context.allowYield
                            var previousAwait = this.context.await
                            this.context.allowYield = true
                            this.context.await = isAsync
                            var node = this.startNode(startToken)
                            this.expect('=>')
                            var body = void 0
                            if (this.match('{')) {
                              var previousAllowIn = this.context.allowIn
                              this.context.allowIn = true
                              body = this.parseFunctionSourceElements()
                              this.context.allowIn = previousAllowIn
                            } else {
                              body = this.isolateCoverGrammar(
                                this.parseAssignmentExpression
                              )
                            }
                            var expression =
                              body.type !== syntax_1.Syntax.BlockStatement
                            if (this.context.strict && list.firstRestricted) {
                              this.throwUnexpectedToken(
                                list.firstRestricted,
                                list.message
                              )
                            }
                            if (this.context.strict && list.stricted) {
                              this.tolerateUnexpectedToken(
                                list.stricted,
                                list.message
                              )
                            }
                            expr = isAsync
                              ? this.finalize(
                                  node,
                                  new Node.AsyncArrowFunctionExpression(
                                    list.params,
                                    body,
                                    expression
                                  )
                                )
                              : this.finalize(
                                  node,
                                  new Node.ArrowFunctionExpression(
                                    list.params,
                                    body,
                                    expression
                                  )
                                )
                            this.context.strict = previousStrict
                            this.context.allowStrictDirective = previousAllowStrictDirective
                            this.context.allowYield = previousAllowYield
                            this.context.await = previousAwait
                          }
                        } else {
                          if (this.matchAssign()) {
                            if (!this.context.isAssignmentTarget) {
                              this.tolerateError(
                                messages_1.Messages.InvalidLHSInAssignment
                              )
                            }
                            if (
                              this.context.strict &&
                              expr.type === syntax_1.Syntax.Identifier
                            ) {
                              var id = expr
                              if (this.scanner.isRestrictedWord(id.name)) {
                                this.tolerateUnexpectedToken(
                                  token,
                                  messages_1.Messages.StrictLHSAssignment
                                )
                              }
                              if (
                                this.scanner.isStrictModeReservedWord(id.name)
                              ) {
                                this.tolerateUnexpectedToken(
                                  token,
                                  messages_1.Messages.StrictReservedWord
                                )
                              }
                            }
                            if (!this.match('=')) {
                              this.context.isAssignmentTarget = false
                              this.context.isBindingElement = false
                            } else {
                              this.reinterpretExpressionAsPattern(expr)
                            }
                            token = this.nextToken()
                            var operator = token.value
                            var right = this.isolateCoverGrammar(
                              this.parseAssignmentExpression
                            )
                            expr = this.finalize(
                              this.startNode(startToken),
                              new Node.AssignmentExpression(
                                operator,
                                expr,
                                right
                              )
                            )
                            this.context.firstCoverInitializedNameError = null
                          }
                        }
                      }
                      return expr
                    }
                    // https://tc39.github.io/ecma262/#sec-comma-operator
                    Parser.prototype.parseExpression = function () {
                      var startToken = this.lookahead
                      var expr = this.isolateCoverGrammar(
                        this.parseAssignmentExpression
                      )
                      if (this.match(',')) {
                        var expressions = []
                        expressions.push(expr)
                        while (this.lookahead.type !== 2 /* EOF */) {
                          if (!this.match(',')) {
                            break
                          }
                          this.nextToken()
                          expressions.push(
                            this.isolateCoverGrammar(
                              this.parseAssignmentExpression
                            )
                          )
                        }
                        expr = this.finalize(
                          this.startNode(startToken),
                          new Node.SequenceExpression(expressions)
                        )
                      }
                      return expr
                    }
                    // https://tc39.github.io/ecma262/#sec-block
                    Parser.prototype.parseStatementListItem = function () {
                      var statement
                      this.context.isAssignmentTarget = true
                      this.context.isBindingElement = true
                      if (this.lookahead.type === 4 /* Keyword */) {
                        switch (this.lookahead.value) {
                          case 'export':
                            if (!this.context.isModule) {
                              this.tolerateUnexpectedToken(
                                this.lookahead,
                                messages_1.Messages.IllegalExportDeclaration
                              )
                            }
                            statement = this.parseExportDeclaration()
                            break
                          case 'import':
                            if (!this.context.isModule) {
                              this.tolerateUnexpectedToken(
                                this.lookahead,
                                messages_1.Messages.IllegalImportDeclaration
                              )
                            }
                            statement = this.parseImportDeclaration()
                            break
                          case 'const':
                            statement = this.parseLexicalDeclaration({
                              inFor: false,
                            })
                            break
                          case 'function':
                            statement = this.parseFunctionDeclaration()
                            break
                          case 'class':
                            statement = this.parseClassDeclaration()
                            break
                          case 'let':
                            statement = this.isLexicalDeclaration()
                              ? this.parseLexicalDeclaration({ inFor: false })
                              : this.parseStatement()
                            break
                          default:
                            statement = this.parseStatement()
                            break
                        }
                      } else {
                        statement = this.parseStatement()
                      }
                      return statement
                    }
                    Parser.prototype.parseBlock = function () {
                      var node = this.createNode()
                      this.expect('{')
                      var block = []
                      while (true) {
                        if (this.match('}')) {
                          break
                        }
                        block.push(this.parseStatementListItem())
                      }
                      this.expect('}')
                      return this.finalize(node, new Node.BlockStatement(block))
                    }
                    // https://tc39.github.io/ecma262/#sec-let-and-const-declarations
                    Parser.prototype.parseLexicalBinding = function (
                      kind,
                      options
                    ) {
                      var node = this.createNode()
                      var params = []
                      var id = this.parsePattern(params, kind)
                      if (
                        this.context.strict &&
                        id.type === syntax_1.Syntax.Identifier
                      ) {
                        if (this.scanner.isRestrictedWord(id.name)) {
                          this.tolerateError(messages_1.Messages.StrictVarName)
                        }
                      }
                      var init = null
                      if (kind === 'const') {
                        if (
                          !this.matchKeyword('in') &&
                          !this.matchContextualKeyword('of')
                        ) {
                          if (this.match('=')) {
                            this.nextToken()
                            init = this.isolateCoverGrammar(
                              this.parseAssignmentExpression
                            )
                          } else {
                            this.throwError(
                              messages_1.Messages.DeclarationMissingInitializer,
                              'const'
                            )
                          }
                        }
                      } else if (
                        (!options.inFor &&
                          id.type !== syntax_1.Syntax.Identifier) ||
                        this.match('=')
                      ) {
                        this.expect('=')
                        init = this.isolateCoverGrammar(
                          this.parseAssignmentExpression
                        )
                      }
                      return this.finalize(
                        node,
                        new Node.VariableDeclarator(id, init)
                      )
                    }
                    Parser.prototype.parseBindingList = function (
                      kind,
                      options
                    ) {
                      var list = [this.parseLexicalBinding(kind, options)]
                      while (this.match(',')) {
                        this.nextToken()
                        list.push(this.parseLexicalBinding(kind, options))
                      }
                      return list
                    }
                    Parser.prototype.isLexicalDeclaration = function () {
                      var state = this.scanner.saveState()
                      this.scanner.scanComments()
                      var next = this.scanner.lex()
                      this.scanner.restoreState(state)
                      return (
                        next.type === 3 /* Identifier */ ||
                        (next.type === 7 /* Punctuator */ &&
                          next.value === '[') ||
                        (next.type === 7 /* Punctuator */ &&
                          next.value === '{') ||
                        (next.type === 4 /* Keyword */ &&
                          next.value === 'let') ||
                        (next.type === 4 /* Keyword */ &&
                          next.value === 'yield')
                      )
                    }
                    Parser.prototype.parseLexicalDeclaration = function (
                      options
                    ) {
                      var node = this.createNode()
                      var kind = this.nextToken().value
                      assert_1.assert(
                        kind === 'let' || kind === 'const',
                        'Lexical declaration must be either let or const'
                      )
                      var declarations = this.parseBindingList(kind, options)
                      this.consumeSemicolon()
                      return this.finalize(
                        node,
                        new Node.VariableDeclaration(declarations, kind)
                      )
                    }
                    // https://tc39.github.io/ecma262/#sec-destructuring-binding-patterns
                    Parser.prototype.parseBindingRestElement = function (
                      params,
                      kind
                    ) {
                      var node = this.createNode()
                      this.expect('...')
                      var arg = this.parsePattern(params, kind)
                      return this.finalize(node, new Node.RestElement(arg))
                    }
                    Parser.prototype.parseArrayPattern = function (
                      params,
                      kind
                    ) {
                      var node = this.createNode()
                      this.expect('[')
                      var elements = []
                      while (!this.match(']')) {
                        if (this.match(',')) {
                          this.nextToken()
                          elements.push(null)
                        } else {
                          if (this.match('...')) {
                            elements.push(
                              this.parseBindingRestElement(params, kind)
                            )
                            break
                          } else {
                            elements.push(
                              this.parsePatternWithDefault(params, kind)
                            )
                          }
                          if (!this.match(']')) {
                            this.expect(',')
                          }
                        }
                      }
                      this.expect(']')
                      return this.finalize(
                        node,
                        new Node.ArrayPattern(elements)
                      )
                    }
                    Parser.prototype.parsePropertyPattern = function (
                      params,
                      kind
                    ) {
                      var node = this.createNode()
                      var computed = false
                      var shorthand = false
                      var method = false
                      var key
                      var value
                      if (this.lookahead.type === 3 /* Identifier */) {
                        var keyToken = this.lookahead
                        key = this.parseVariableIdentifier()
                        var init = this.finalize(
                          node,
                          new Node.Identifier(keyToken.value)
                        )
                        if (this.match('=')) {
                          params.push(keyToken)
                          shorthand = true
                          this.nextToken()
                          var expr = this.parseAssignmentExpression()
                          value = this.finalize(
                            this.startNode(keyToken),
                            new Node.AssignmentPattern(init, expr)
                          )
                        } else if (!this.match(':')) {
                          params.push(keyToken)
                          shorthand = true
                          value = init
                        } else {
                          this.expect(':')
                          value = this.parsePatternWithDefault(params, kind)
                        }
                      } else {
                        computed = this.match('[')
                        key = this.parseObjectPropertyKey()
                        this.expect(':')
                        value = this.parsePatternWithDefault(params, kind)
                      }
                      return this.finalize(
                        node,
                        new Node.Property(
                          'init',
                          key,
                          computed,
                          value,
                          method,
                          shorthand
                        )
                      )
                    }
                    Parser.prototype.parseObjectPattern = function (
                      params,
                      kind
                    ) {
                      var node = this.createNode()
                      var properties = []
                      this.expect('{')
                      while (!this.match('}')) {
                        properties.push(this.parsePropertyPattern(params, kind))
                        if (!this.match('}')) {
                          this.expect(',')
                        }
                      }
                      this.expect('}')
                      return this.finalize(
                        node,
                        new Node.ObjectPattern(properties)
                      )
                    }
                    Parser.prototype.parsePattern = function (params, kind) {
                      var pattern
                      if (this.match('[')) {
                        pattern = this.parseArrayPattern(params, kind)
                      } else if (this.match('{')) {
                        pattern = this.parseObjectPattern(params, kind)
                      } else {
                        if (
                          this.matchKeyword('let') &&
                          (kind === 'const' || kind === 'let')
                        ) {
                          this.tolerateUnexpectedToken(
                            this.lookahead,
                            messages_1.Messages.LetInLexicalBinding
                          )
                        }
                        params.push(this.lookahead)
                        pattern = this.parseVariableIdentifier(kind)
                      }
                      return pattern
                    }
                    Parser.prototype.parsePatternWithDefault = function (
                      params,
                      kind
                    ) {
                      var startToken = this.lookahead
                      var pattern = this.parsePattern(params, kind)
                      if (this.match('=')) {
                        this.nextToken()
                        var previousAllowYield = this.context.allowYield
                        this.context.allowYield = true
                        var right = this.isolateCoverGrammar(
                          this.parseAssignmentExpression
                        )
                        this.context.allowYield = previousAllowYield
                        pattern = this.finalize(
                          this.startNode(startToken),
                          new Node.AssignmentPattern(pattern, right)
                        )
                      }
                      return pattern
                    }
                    // https://tc39.github.io/ecma262/#sec-variable-statement
                    Parser.prototype.parseVariableIdentifier = function (kind) {
                      var node = this.createNode()
                      var token = this.nextToken()
                      if (
                        token.type === 4 /* Keyword */ &&
                        token.value === 'yield'
                      ) {
                        if (this.context.strict) {
                          this.tolerateUnexpectedToken(
                            token,
                            messages_1.Messages.StrictReservedWord
                          )
                        } else if (!this.context.allowYield) {
                          this.throwUnexpectedToken(token)
                        }
                      } else if (token.type !== 3 /* Identifier */) {
                        if (
                          this.context.strict &&
                          token.type === 4 /* Keyword */ &&
                          this.scanner.isStrictModeReservedWord(token.value)
                        ) {
                          this.tolerateUnexpectedToken(
                            token,
                            messages_1.Messages.StrictReservedWord
                          )
                        } else {
                          if (
                            this.context.strict ||
                            token.value !== 'let' ||
                            kind !== 'var'
                          ) {
                            this.throwUnexpectedToken(token)
                          }
                        }
                      } else if (
                        (this.context.isModule || this.context.await) &&
                        token.type === 3 /* Identifier */ &&
                        token.value === 'await'
                      ) {
                        this.tolerateUnexpectedToken(token)
                      }
                      return this.finalize(
                        node,
                        new Node.Identifier(token.value)
                      )
                    }
                    Parser.prototype.parseVariableDeclaration = function (
                      options
                    ) {
                      var node = this.createNode()
                      var params = []
                      var id = this.parsePattern(params, 'var')
                      if (
                        this.context.strict &&
                        id.type === syntax_1.Syntax.Identifier
                      ) {
                        if (this.scanner.isRestrictedWord(id.name)) {
                          this.tolerateError(messages_1.Messages.StrictVarName)
                        }
                      }
                      var init = null
                      if (this.match('=')) {
                        this.nextToken()
                        init = this.isolateCoverGrammar(
                          this.parseAssignmentExpression
                        )
                      } else if (
                        id.type !== syntax_1.Syntax.Identifier &&
                        !options.inFor
                      ) {
                        this.expect('=')
                      }
                      return this.finalize(
                        node,
                        new Node.VariableDeclarator(id, init)
                      )
                    }
                    Parser.prototype.parseVariableDeclarationList = function (
                      options
                    ) {
                      var opt = { inFor: options.inFor }
                      var list = []
                      list.push(this.parseVariableDeclaration(opt))
                      while (this.match(',')) {
                        this.nextToken()
                        list.push(this.parseVariableDeclaration(opt))
                      }
                      return list
                    }
                    Parser.prototype.parseVariableStatement = function () {
                      var node = this.createNode()
                      this.expectKeyword('var')
                      var declarations = this.parseVariableDeclarationList({
                        inFor: false,
                      })
                      this.consumeSemicolon()
                      return this.finalize(
                        node,
                        new Node.VariableDeclaration(declarations, 'var')
                      )
                    }
                    // https://tc39.github.io/ecma262/#sec-empty-statement
                    Parser.prototype.parseEmptyStatement = function () {
                      var node = this.createNode()
                      this.expect(';')
                      return this.finalize(node, new Node.EmptyStatement())
                    }
                    // https://tc39.github.io/ecma262/#sec-expression-statement
                    Parser.prototype.parseExpressionStatement = function () {
                      var node = this.createNode()
                      var expr = this.parseExpression()
                      this.consumeSemicolon()
                      return this.finalize(
                        node,
                        new Node.ExpressionStatement(expr)
                      )
                    }
                    // https://tc39.github.io/ecma262/#sec-if-statement
                    Parser.prototype.parseIfClause = function () {
                      if (
                        this.context.strict &&
                        this.matchKeyword('function')
                      ) {
                        this.tolerateError(messages_1.Messages.StrictFunction)
                      }
                      return this.parseStatement()
                    }
                    Parser.prototype.parseIfStatement = function () {
                      var node = this.createNode()
                      var consequent
                      var alternate = null
                      this.expectKeyword('if')
                      this.expect('(')
                      var test = this.parseExpression()
                      if (!this.match(')') && this.config.tolerant) {
                        this.tolerateUnexpectedToken(this.nextToken())
                        consequent = this.finalize(
                          this.createNode(),
                          new Node.EmptyStatement()
                        )
                      } else {
                        this.expect(')')
                        consequent = this.parseIfClause()
                        if (this.matchKeyword('else')) {
                          this.nextToken()
                          alternate = this.parseIfClause()
                        }
                      }
                      return this.finalize(
                        node,
                        new Node.IfStatement(test, consequent, alternate)
                      )
                    }
                    // https://tc39.github.io/ecma262/#sec-do-while-statement
                    Parser.prototype.parseDoWhileStatement = function () {
                      var node = this.createNode()
                      this.expectKeyword('do')
                      var previousInIteration = this.context.inIteration
                      this.context.inIteration = true
                      var body = this.parseStatement()
                      this.context.inIteration = previousInIteration
                      this.expectKeyword('while')
                      this.expect('(')
                      var test = this.parseExpression()
                      if (!this.match(')') && this.config.tolerant) {
                        this.tolerateUnexpectedToken(this.nextToken())
                      } else {
                        this.expect(')')
                        if (this.match(';')) {
                          this.nextToken()
                        }
                      }
                      return this.finalize(
                        node,
                        new Node.DoWhileStatement(body, test)
                      )
                    }
                    // https://tc39.github.io/ecma262/#sec-while-statement
                    Parser.prototype.parseWhileStatement = function () {
                      var node = this.createNode()
                      var body
                      this.expectKeyword('while')
                      this.expect('(')
                      var test = this.parseExpression()
                      if (!this.match(')') && this.config.tolerant) {
                        this.tolerateUnexpectedToken(this.nextToken())
                        body = this.finalize(
                          this.createNode(),
                          new Node.EmptyStatement()
                        )
                      } else {
                        this.expect(')')
                        var previousInIteration = this.context.inIteration
                        this.context.inIteration = true
                        body = this.parseStatement()
                        this.context.inIteration = previousInIteration
                      }
                      return this.finalize(
                        node,
                        new Node.WhileStatement(test, body)
                      )
                    }
                    // https://tc39.github.io/ecma262/#sec-for-statement
                    // https://tc39.github.io/ecma262/#sec-for-in-and-for-of-statements
                    Parser.prototype.parseForStatement = function () {
                      var init = null
                      var test = null
                      var update = null
                      var forIn = true
                      var left, right
                      var node = this.createNode()
                      this.expectKeyword('for')
                      this.expect('(')
                      if (this.match(';')) {
                        this.nextToken()
                      } else {
                        if (this.matchKeyword('var')) {
                          init = this.createNode()
                          this.nextToken()
                          var previousAllowIn = this.context.allowIn
                          this.context.allowIn = false
                          var declarations = this.parseVariableDeclarationList({
                            inFor: true,
                          })
                          this.context.allowIn = previousAllowIn
                          if (
                            declarations.length === 1 &&
                            this.matchKeyword('in')
                          ) {
                            var decl = declarations[0]
                            if (
                              decl.init &&
                              (decl.id.type === syntax_1.Syntax.ArrayPattern ||
                                decl.id.type ===
                                  syntax_1.Syntax.ObjectPattern ||
                                this.context.strict)
                            ) {
                              this.tolerateError(
                                messages_1.Messages.ForInOfLoopInitializer,
                                'for-in'
                              )
                            }
                            init = this.finalize(
                              init,
                              new Node.VariableDeclaration(declarations, 'var')
                            )
                            this.nextToken()
                            left = init
                            right = this.parseExpression()
                            init = null
                          } else if (
                            declarations.length === 1 &&
                            declarations[0].init === null &&
                            this.matchContextualKeyword('of')
                          ) {
                            init = this.finalize(
                              init,
                              new Node.VariableDeclaration(declarations, 'var')
                            )
                            this.nextToken()
                            left = init
                            right = this.parseAssignmentExpression()
                            init = null
                            forIn = false
                          } else {
                            init = this.finalize(
                              init,
                              new Node.VariableDeclaration(declarations, 'var')
                            )
                            this.expect(';')
                          }
                        } else if (
                          this.matchKeyword('const') ||
                          this.matchKeyword('let')
                        ) {
                          init = this.createNode()
                          var kind = this.nextToken().value
                          if (
                            !this.context.strict &&
                            this.lookahead.value === 'in'
                          ) {
                            init = this.finalize(
                              init,
                              new Node.Identifier(kind)
                            )
                            this.nextToken()
                            left = init
                            right = this.parseExpression()
                            init = null
                          } else {
                            var previousAllowIn = this.context.allowIn
                            this.context.allowIn = false
                            var declarations = this.parseBindingList(kind, {
                              inFor: true,
                            })
                            this.context.allowIn = previousAllowIn
                            if (
                              declarations.length === 1 &&
                              declarations[0].init === null &&
                              this.matchKeyword('in')
                            ) {
                              init = this.finalize(
                                init,
                                new Node.VariableDeclaration(declarations, kind)
                              )
                              this.nextToken()
                              left = init
                              right = this.parseExpression()
                              init = null
                            } else if (
                              declarations.length === 1 &&
                              declarations[0].init === null &&
                              this.matchContextualKeyword('of')
                            ) {
                              init = this.finalize(
                                init,
                                new Node.VariableDeclaration(declarations, kind)
                              )
                              this.nextToken()
                              left = init
                              right = this.parseAssignmentExpression()
                              init = null
                              forIn = false
                            } else {
                              this.consumeSemicolon()
                              init = this.finalize(
                                init,
                                new Node.VariableDeclaration(declarations, kind)
                              )
                            }
                          }
                        } else {
                          var initStartToken = this.lookahead
                          var previousAllowIn = this.context.allowIn
                          this.context.allowIn = false
                          init = this.inheritCoverGrammar(
                            this.parseAssignmentExpression
                          )
                          this.context.allowIn = previousAllowIn
                          if (this.matchKeyword('in')) {
                            if (
                              !this.context.isAssignmentTarget ||
                              init.type === syntax_1.Syntax.AssignmentExpression
                            ) {
                              this.tolerateError(
                                messages_1.Messages.InvalidLHSInForIn
                              )
                            }
                            this.nextToken()
                            this.reinterpretExpressionAsPattern(init)
                            left = init
                            right = this.parseExpression()
                            init = null
                          } else if (this.matchContextualKeyword('of')) {
                            if (
                              !this.context.isAssignmentTarget ||
                              init.type === syntax_1.Syntax.AssignmentExpression
                            ) {
                              this.tolerateError(
                                messages_1.Messages.InvalidLHSInForLoop
                              )
                            }
                            this.nextToken()
                            this.reinterpretExpressionAsPattern(init)
                            left = init
                            right = this.parseAssignmentExpression()
                            init = null
                            forIn = false
                          } else {
                            if (this.match(',')) {
                              var initSeq = [init]
                              while (this.match(',')) {
                                this.nextToken()
                                initSeq.push(
                                  this.isolateCoverGrammar(
                                    this.parseAssignmentExpression
                                  )
                                )
                              }
                              init = this.finalize(
                                this.startNode(initStartToken),
                                new Node.SequenceExpression(initSeq)
                              )
                            }
                            this.expect(';')
                          }
                        }
                      }
                      if (typeof left === 'undefined') {
                        if (!this.match(';')) {
                          test = this.parseExpression()
                        }
                        this.expect(';')
                        if (!this.match(')')) {
                          update = this.parseExpression()
                        }
                      }
                      var body
                      if (!this.match(')') && this.config.tolerant) {
                        this.tolerateUnexpectedToken(this.nextToken())
                        body = this.finalize(
                          this.createNode(),
                          new Node.EmptyStatement()
                        )
                      } else {
                        this.expect(')')
                        var previousInIteration = this.context.inIteration
                        this.context.inIteration = true
                        body = this.isolateCoverGrammar(this.parseStatement)
                        this.context.inIteration = previousInIteration
                      }
                      return typeof left === 'undefined'
                        ? this.finalize(
                            node,
                            new Node.ForStatement(init, test, update, body)
                          )
                        : forIn
                        ? this.finalize(
                            node,
                            new Node.ForInStatement(left, right, body)
                          )
                        : this.finalize(
                            node,
                            new Node.ForOfStatement(left, right, body)
                          )
                    }
                    // https://tc39.github.io/ecma262/#sec-continue-statement
                    Parser.prototype.parseContinueStatement = function () {
                      var node = this.createNode()
                      this.expectKeyword('continue')
                      var label = null
                      if (
                        this.lookahead.type === 3 /* Identifier */ &&
                        !this.hasLineTerminator
                      ) {
                        var id = this.parseVariableIdentifier()
                        label = id
                        var key = '$' + id.name
                        if (
                          !Object.prototype.hasOwnProperty.call(
                            this.context.labelSet,
                            key
                          )
                        ) {
                          this.throwError(
                            messages_1.Messages.UnknownLabel,
                            id.name
                          )
                        }
                      }
                      this.consumeSemicolon()
                      if (label === null && !this.context.inIteration) {
                        this.throwError(messages_1.Messages.IllegalContinue)
                      }
                      return this.finalize(
                        node,
                        new Node.ContinueStatement(label)
                      )
                    }
                    // https://tc39.github.io/ecma262/#sec-break-statement
                    Parser.prototype.parseBreakStatement = function () {
                      var node = this.createNode()
                      this.expectKeyword('break')
                      var label = null
                      if (
                        this.lookahead.type === 3 /* Identifier */ &&
                        !this.hasLineTerminator
                      ) {
                        var id = this.parseVariableIdentifier()
                        var key = '$' + id.name
                        if (
                          !Object.prototype.hasOwnProperty.call(
                            this.context.labelSet,
                            key
                          )
                        ) {
                          this.throwError(
                            messages_1.Messages.UnknownLabel,
                            id.name
                          )
                        }
                        label = id
                      }
                      this.consumeSemicolon()
                      if (
                        label === null &&
                        !this.context.inIteration &&
                        !this.context.inSwitch
                      ) {
                        this.throwError(messages_1.Messages.IllegalBreak)
                      }
                      return this.finalize(node, new Node.BreakStatement(label))
                    }
                    // https://tc39.github.io/ecma262/#sec-return-statement
                    Parser.prototype.parseReturnStatement = function () {
                      if (!this.context.inFunctionBody) {
                        this.tolerateError(messages_1.Messages.IllegalReturn)
                      }
                      var node = this.createNode()
                      this.expectKeyword('return')
                      var hasArgument =
                        (!this.match(';') &&
                          !this.match('}') &&
                          !this.hasLineTerminator &&
                          this.lookahead.type !== 2) /* EOF */ ||
                        this.lookahead.type === 8 /* StringLiteral */ ||
                        this.lookahead.type === 10 /* Template */
                      var argument = hasArgument ? this.parseExpression() : null
                      this.consumeSemicolon()
                      return this.finalize(
                        node,
                        new Node.ReturnStatement(argument)
                      )
                    }
                    // https://tc39.github.io/ecma262/#sec-with-statement
                    Parser.prototype.parseWithStatement = function () {
                      if (this.context.strict) {
                        this.tolerateError(messages_1.Messages.StrictModeWith)
                      }
                      var node = this.createNode()
                      var body
                      this.expectKeyword('with')
                      this.expect('(')
                      var object = this.parseExpression()
                      if (!this.match(')') && this.config.tolerant) {
                        this.tolerateUnexpectedToken(this.nextToken())
                        body = this.finalize(
                          this.createNode(),
                          new Node.EmptyStatement()
                        )
                      } else {
                        this.expect(')')
                        body = this.parseStatement()
                      }
                      return this.finalize(
                        node,
                        new Node.WithStatement(object, body)
                      )
                    }
                    // https://tc39.github.io/ecma262/#sec-switch-statement
                    Parser.prototype.parseSwitchCase = function () {
                      var node = this.createNode()
                      var test
                      if (this.matchKeyword('default')) {
                        this.nextToken()
                        test = null
                      } else {
                        this.expectKeyword('case')
                        test = this.parseExpression()
                      }
                      this.expect(':')
                      var consequent = []
                      while (true) {
                        if (
                          this.match('}') ||
                          this.matchKeyword('default') ||
                          this.matchKeyword('case')
                        ) {
                          break
                        }
                        consequent.push(this.parseStatementListItem())
                      }
                      return this.finalize(
                        node,
                        new Node.SwitchCase(test, consequent)
                      )
                    }
                    Parser.prototype.parseSwitchStatement = function () {
                      var node = this.createNode()
                      this.expectKeyword('switch')
                      this.expect('(')
                      var discriminant = this.parseExpression()
                      this.expect(')')
                      var previousInSwitch = this.context.inSwitch
                      this.context.inSwitch = true
                      var cases = []
                      var defaultFound = false
                      this.expect('{')
                      while (true) {
                        if (this.match('}')) {
                          break
                        }
                        var clause = this.parseSwitchCase()
                        if (clause.test === null) {
                          if (defaultFound) {
                            this.throwError(
                              messages_1.Messages.MultipleDefaultsInSwitch
                            )
                          }
                          defaultFound = true
                        }
                        cases.push(clause)
                      }
                      this.expect('}')
                      this.context.inSwitch = previousInSwitch
                      return this.finalize(
                        node,
                        new Node.SwitchStatement(discriminant, cases)
                      )
                    }
                    // https://tc39.github.io/ecma262/#sec-labelled-statements
                    Parser.prototype.parseLabelledStatement = function () {
                      var node = this.createNode()
                      var expr = this.parseExpression()
                      var statement
                      if (
                        expr.type === syntax_1.Syntax.Identifier &&
                        this.match(':')
                      ) {
                        this.nextToken()
                        var id = expr
                        var key = '$' + id.name
                        if (
                          Object.prototype.hasOwnProperty.call(
                            this.context.labelSet,
                            key
                          )
                        ) {
                          this.throwError(
                            messages_1.Messages.Redeclaration,
                            'Label',
                            id.name
                          )
                        }
                        this.context.labelSet[key] = true
                        var body = void 0
                        if (this.matchKeyword('class')) {
                          this.tolerateUnexpectedToken(this.lookahead)
                          body = this.parseClassDeclaration()
                        } else if (this.matchKeyword('function')) {
                          var token = this.lookahead
                          var declaration = this.parseFunctionDeclaration()
                          if (this.context.strict) {
                            this.tolerateUnexpectedToken(
                              token,
                              messages_1.Messages.StrictFunction
                            )
                          } else if (declaration.generator) {
                            this.tolerateUnexpectedToken(
                              token,
                              messages_1.Messages.GeneratorInLegacyContext
                            )
                          }
                          body = declaration
                        } else {
                          body = this.parseStatement()
                        }
                        delete this.context.labelSet[key]
                        statement = new Node.LabeledStatement(id, body)
                      } else {
                        this.consumeSemicolon()
                        statement = new Node.ExpressionStatement(expr)
                      }
                      return this.finalize(node, statement)
                    }
                    // https://tc39.github.io/ecma262/#sec-throw-statement
                    Parser.prototype.parseThrowStatement = function () {
                      var node = this.createNode()
                      this.expectKeyword('throw')
                      if (this.hasLineTerminator) {
                        this.throwError(messages_1.Messages.NewlineAfterThrow)
                      }
                      var argument = this.parseExpression()
                      this.consumeSemicolon()
                      return this.finalize(
                        node,
                        new Node.ThrowStatement(argument)
                      )
                    }
                    // https://tc39.github.io/ecma262/#sec-try-statement
                    Parser.prototype.parseCatchClause = function () {
                      var node = this.createNode()
                      this.expectKeyword('catch')
                      this.expect('(')
                      if (this.match(')')) {
                        this.throwUnexpectedToken(this.lookahead)
                      }
                      var params = []
                      var param = this.parsePattern(params)
                      var paramMap = {}
                      for (var i = 0; i < params.length; i++) {
                        var key = '$' + params[i].value
                        if (
                          Object.prototype.hasOwnProperty.call(paramMap, key)
                        ) {
                          this.tolerateError(
                            messages_1.Messages.DuplicateBinding,
                            params[i].value
                          )
                        }
                        paramMap[key] = true
                      }
                      if (
                        this.context.strict &&
                        param.type === syntax_1.Syntax.Identifier
                      ) {
                        if (this.scanner.isRestrictedWord(param.name)) {
                          this.tolerateError(
                            messages_1.Messages.StrictCatchVariable
                          )
                        }
                      }
                      this.expect(')')
                      var body = this.parseBlock()
                      return this.finalize(
                        node,
                        new Node.CatchClause(param, body)
                      )
                    }
                    Parser.prototype.parseFinallyClause = function () {
                      this.expectKeyword('finally')
                      return this.parseBlock()
                    }
                    Parser.prototype.parseTryStatement = function () {
                      var node = this.createNode()
                      this.expectKeyword('try')
                      var block = this.parseBlock()
                      var handler = this.matchKeyword('catch')
                        ? this.parseCatchClause()
                        : null
                      var finalizer = this.matchKeyword('finally')
                        ? this.parseFinallyClause()
                        : null
                      if (!handler && !finalizer) {
                        this.throwError(messages_1.Messages.NoCatchOrFinally)
                      }
                      return this.finalize(
                        node,
                        new Node.TryStatement(block, handler, finalizer)
                      )
                    }
                    // https://tc39.github.io/ecma262/#sec-debugger-statement
                    Parser.prototype.parseDebuggerStatement = function () {
                      var node = this.createNode()
                      this.expectKeyword('debugger')
                      this.consumeSemicolon()
                      return this.finalize(node, new Node.DebuggerStatement())
                    }
                    // https://tc39.github.io/ecma262/#sec-ecmascript-language-statements-and-declarations
                    Parser.prototype.parseStatement = function () {
                      var statement
                      switch (this.lookahead.type) {
                        case 1 /* BooleanLiteral */:
                        case 5 /* NullLiteral */:
                        case 6 /* NumericLiteral */:
                        case 8 /* StringLiteral */:
                        case 10 /* Template */:
                        case 9 /* RegularExpression */:
                          statement = this.parseExpressionStatement()
                          break
                        case 7 /* Punctuator */:
                          var value = this.lookahead.value
                          if (value === '{') {
                            statement = this.parseBlock()
                          } else if (value === '(') {
                            statement = this.parseExpressionStatement()
                          } else if (value === ';') {
                            statement = this.parseEmptyStatement()
                          } else {
                            statement = this.parseExpressionStatement()
                          }
                          break
                        case 3 /* Identifier */:
                          statement = this.matchAsyncFunction()
                            ? this.parseFunctionDeclaration()
                            : this.parseLabelledStatement()
                          break
                        case 4 /* Keyword */:
                          switch (this.lookahead.value) {
                            case 'break':
                              statement = this.parseBreakStatement()
                              break
                            case 'continue':
                              statement = this.parseContinueStatement()
                              break
                            case 'debugger':
                              statement = this.parseDebuggerStatement()
                              break
                            case 'do':
                              statement = this.parseDoWhileStatement()
                              break
                            case 'for':
                              statement = this.parseForStatement()
                              break
                            case 'function':
                              statement = this.parseFunctionDeclaration()
                              break
                            case 'if':
                              statement = this.parseIfStatement()
                              break
                            case 'return':
                              statement = this.parseReturnStatement()
                              break
                            case 'switch':
                              statement = this.parseSwitchStatement()
                              break
                            case 'throw':
                              statement = this.parseThrowStatement()
                              break
                            case 'try':
                              statement = this.parseTryStatement()
                              break
                            case 'var':
                              statement = this.parseVariableStatement()
                              break
                            case 'while':
                              statement = this.parseWhileStatement()
                              break
                            case 'with':
                              statement = this.parseWithStatement()
                              break
                            default:
                              statement = this.parseExpressionStatement()
                              break
                          }
                          break
                        default:
                          statement = this.throwUnexpectedToken(this.lookahead)
                      }
                      return statement
                    }
                    // https://tc39.github.io/ecma262/#sec-function-definitions
                    Parser.prototype.parseFunctionSourceElements = function () {
                      var node = this.createNode()
                      this.expect('{')
                      var body = this.parseDirectivePrologues()
                      var previousLabelSet = this.context.labelSet
                      var previousInIteration = this.context.inIteration
                      var previousInSwitch = this.context.inSwitch
                      var previousInFunctionBody = this.context.inFunctionBody
                      this.context.labelSet = {}
                      this.context.inIteration = false
                      this.context.inSwitch = false
                      this.context.inFunctionBody = true
                      while (this.lookahead.type !== 2 /* EOF */) {
                        if (this.match('}')) {
                          break
                        }
                        body.push(this.parseStatementListItem())
                      }
                      this.expect('}')
                      this.context.labelSet = previousLabelSet
                      this.context.inIteration = previousInIteration
                      this.context.inSwitch = previousInSwitch
                      this.context.inFunctionBody = previousInFunctionBody
                      return this.finalize(node, new Node.BlockStatement(body))
                    }
                    Parser.prototype.validateParam = function (
                      options,
                      param,
                      name
                    ) {
                      var key = '$' + name
                      if (this.context.strict) {
                        if (this.scanner.isRestrictedWord(name)) {
                          options.stricted = param
                          options.message = messages_1.Messages.StrictParamName
                        }
                        if (
                          Object.prototype.hasOwnProperty.call(
                            options.paramSet,
                            key
                          )
                        ) {
                          options.stricted = param
                          options.message = messages_1.Messages.StrictParamDupe
                        }
                      } else if (!options.firstRestricted) {
                        if (this.scanner.isRestrictedWord(name)) {
                          options.firstRestricted = param
                          options.message = messages_1.Messages.StrictParamName
                        } else if (
                          this.scanner.isStrictModeReservedWord(name)
                        ) {
                          options.firstRestricted = param
                          options.message =
                            messages_1.Messages.StrictReservedWord
                        } else if (
                          Object.prototype.hasOwnProperty.call(
                            options.paramSet,
                            key
                          )
                        ) {
                          options.stricted = param
                          options.message = messages_1.Messages.StrictParamDupe
                        }
                      }
                      /* istanbul ignore next */
                      if (typeof Object.defineProperty === 'function') {
                        Object.defineProperty(options.paramSet, key, {
                          value: true,
                          enumerable: true,
                          writable: true,
                          configurable: true,
                        })
                      } else {
                        options.paramSet[key] = true
                      }
                    }
                    Parser.prototype.parseRestElement = function (params) {
                      var node = this.createNode()
                      this.expect('...')
                      var arg = this.parsePattern(params)
                      if (this.match('=')) {
                        this.throwError(
                          messages_1.Messages.DefaultRestParameter
                        )
                      }
                      if (!this.match(')')) {
                        this.throwError(
                          messages_1.Messages.ParameterAfterRestParameter
                        )
                      }
                      return this.finalize(node, new Node.RestElement(arg))
                    }
                    Parser.prototype.parseFormalParameter = function (options) {
                      var params = []
                      var param = this.match('...')
                        ? this.parseRestElement(params)
                        : this.parsePatternWithDefault(params)
                      for (var i = 0; i < params.length; i++) {
                        this.validateParam(options, params[i], params[i].value)
                      }
                      options.simple =
                        options.simple && param instanceof Node.Identifier
                      options.params.push(param)
                    }
                    Parser.prototype.parseFormalParameters = function (
                      firstRestricted
                    ) {
                      var options
                      options = {
                        simple: true,
                        params: [],
                        firstRestricted: firstRestricted,
                      }
                      this.expect('(')
                      if (!this.match(')')) {
                        options.paramSet = {}
                        while (this.lookahead.type !== 2 /* EOF */) {
                          this.parseFormalParameter(options)
                          if (this.match(')')) {
                            break
                          }
                          this.expect(',')
                          if (this.match(')')) {
                            break
                          }
                        }
                      }
                      this.expect(')')
                      return {
                        simple: options.simple,
                        params: options.params,
                        stricted: options.stricted,
                        firstRestricted: options.firstRestricted,
                        message: options.message,
                      }
                    }
                    Parser.prototype.matchAsyncFunction = function () {
                      var match = this.matchContextualKeyword('async')
                      if (match) {
                        var state = this.scanner.saveState()
                        this.scanner.scanComments()
                        var next = this.scanner.lex()
                        this.scanner.restoreState(state)
                        match =
                          state.lineNumber === next.lineNumber &&
                          next.type === 4 /* Keyword */ &&
                          next.value === 'function'
                      }
                      return match
                    }
                    Parser.prototype.parseFunctionDeclaration = function (
                      identifierIsOptional
                    ) {
                      var node = this.createNode()
                      var isAsync = this.matchContextualKeyword('async')
                      if (isAsync) {
                        this.nextToken()
                      }
                      this.expectKeyword('function')
                      var isGenerator = isAsync ? false : this.match('*')
                      if (isGenerator) {
                        this.nextToken()
                      }
                      var message
                      var id = null
                      var firstRestricted = null
                      if (!identifierIsOptional || !this.match('(')) {
                        var token = this.lookahead
                        id = this.parseVariableIdentifier()
                        if (this.context.strict) {
                          if (this.scanner.isRestrictedWord(token.value)) {
                            this.tolerateUnexpectedToken(
                              token,
                              messages_1.Messages.StrictFunctionName
                            )
                          }
                        } else {
                          if (this.scanner.isRestrictedWord(token.value)) {
                            firstRestricted = token
                            message = messages_1.Messages.StrictFunctionName
                          } else if (
                            this.scanner.isStrictModeReservedWord(token.value)
                          ) {
                            firstRestricted = token
                            message = messages_1.Messages.StrictReservedWord
                          }
                        }
                      }
                      var previousAllowAwait = this.context.await
                      var previousAllowYield = this.context.allowYield
                      this.context.await = isAsync
                      this.context.allowYield = !isGenerator
                      var formalParameters = this.parseFormalParameters(
                        firstRestricted
                      )
                      var params = formalParameters.params
                      var stricted = formalParameters.stricted
                      firstRestricted = formalParameters.firstRestricted
                      if (formalParameters.message) {
                        message = formalParameters.message
                      }
                      var previousStrict = this.context.strict
                      var previousAllowStrictDirective = this.context
                        .allowStrictDirective
                      this.context.allowStrictDirective =
                        formalParameters.simple
                      var body = this.parseFunctionSourceElements()
                      if (this.context.strict && firstRestricted) {
                        this.throwUnexpectedToken(firstRestricted, message)
                      }
                      if (this.context.strict && stricted) {
                        this.tolerateUnexpectedToken(stricted, message)
                      }
                      this.context.strict = previousStrict
                      this.context.allowStrictDirective = previousAllowStrictDirective
                      this.context.await = previousAllowAwait
                      this.context.allowYield = previousAllowYield
                      return isAsync
                        ? this.finalize(
                            node,
                            new Node.AsyncFunctionDeclaration(id, params, body)
                          )
                        : this.finalize(
                            node,
                            new Node.FunctionDeclaration(
                              id,
                              params,
                              body,
                              isGenerator
                            )
                          )
                    }
                    Parser.prototype.parseFunctionExpression = function () {
                      var node = this.createNode()
                      var isAsync = this.matchContextualKeyword('async')
                      if (isAsync) {
                        this.nextToken()
                      }
                      this.expectKeyword('function')
                      var isGenerator = isAsync ? false : this.match('*')
                      if (isGenerator) {
                        this.nextToken()
                      }
                      var message
                      var id = null
                      var firstRestricted
                      var previousAllowAwait = this.context.await
                      var previousAllowYield = this.context.allowYield
                      this.context.await = isAsync
                      this.context.allowYield = !isGenerator
                      if (!this.match('(')) {
                        var token = this.lookahead
                        id =
                          !this.context.strict &&
                          !isGenerator &&
                          this.matchKeyword('yield')
                            ? this.parseIdentifierName()
                            : this.parseVariableIdentifier()
                        if (this.context.strict) {
                          if (this.scanner.isRestrictedWord(token.value)) {
                            this.tolerateUnexpectedToken(
                              token,
                              messages_1.Messages.StrictFunctionName
                            )
                          }
                        } else {
                          if (this.scanner.isRestrictedWord(token.value)) {
                            firstRestricted = token
                            message = messages_1.Messages.StrictFunctionName
                          } else if (
                            this.scanner.isStrictModeReservedWord(token.value)
                          ) {
                            firstRestricted = token
                            message = messages_1.Messages.StrictReservedWord
                          }
                        }
                      }
                      var formalParameters = this.parseFormalParameters(
                        firstRestricted
                      )
                      var params = formalParameters.params
                      var stricted = formalParameters.stricted
                      firstRestricted = formalParameters.firstRestricted
                      if (formalParameters.message) {
                        message = formalParameters.message
                      }
                      var previousStrict = this.context.strict
                      var previousAllowStrictDirective = this.context
                        .allowStrictDirective
                      this.context.allowStrictDirective =
                        formalParameters.simple
                      var body = this.parseFunctionSourceElements()
                      if (this.context.strict && firstRestricted) {
                        this.throwUnexpectedToken(firstRestricted, message)
                      }
                      if (this.context.strict && stricted) {
                        this.tolerateUnexpectedToken(stricted, message)
                      }
                      this.context.strict = previousStrict
                      this.context.allowStrictDirective = previousAllowStrictDirective
                      this.context.await = previousAllowAwait
                      this.context.allowYield = previousAllowYield
                      return isAsync
                        ? this.finalize(
                            node,
                            new Node.AsyncFunctionExpression(id, params, body)
                          )
                        : this.finalize(
                            node,
                            new Node.FunctionExpression(
                              id,
                              params,
                              body,
                              isGenerator
                            )
                          )
                    }
                    // https://tc39.github.io/ecma262/#sec-directive-prologues-and-the-use-strict-directive
                    Parser.prototype.parseDirective = function () {
                      var token = this.lookahead
                      var node = this.createNode()
                      var expr = this.parseExpression()
                      var directive =
                        expr.type === syntax_1.Syntax.Literal
                          ? this.getTokenRaw(token).slice(1, -1)
                          : null
                      this.consumeSemicolon()
                      return this.finalize(
                        node,
                        directive
                          ? new Node.Directive(expr, directive)
                          : new Node.ExpressionStatement(expr)
                      )
                    }
                    Parser.prototype.parseDirectivePrologues = function () {
                      var firstRestricted = null
                      var body = []
                      while (true) {
                        var token = this.lookahead
                        if (token.type !== 8 /* StringLiteral */) {
                          break
                        }
                        var statement = this.parseDirective()
                        body.push(statement)
                        var directive = statement.directive
                        if (typeof directive !== 'string') {
                          break
                        }
                        if (directive === 'use strict') {
                          this.context.strict = true
                          if (firstRestricted) {
                            this.tolerateUnexpectedToken(
                              firstRestricted,
                              messages_1.Messages.StrictOctalLiteral
                            )
                          }
                          if (!this.context.allowStrictDirective) {
                            this.tolerateUnexpectedToken(
                              token,
                              messages_1.Messages.IllegalLanguageModeDirective
                            )
                          }
                        } else {
                          if (!firstRestricted && token.octal) {
                            firstRestricted = token
                          }
                        }
                      }
                      return body
                    }
                    // https://tc39.github.io/ecma262/#sec-method-definitions
                    Parser.prototype.qualifiedPropertyName = function (token) {
                      switch (token.type) {
                        case 3 /* Identifier */:
                        case 8 /* StringLiteral */:
                        case 1 /* BooleanLiteral */:
                        case 5 /* NullLiteral */:
                        case 6 /* NumericLiteral */:
                        case 4 /* Keyword */:
                          return true
                        case 7 /* Punctuator */:
                          return token.value === '['
                        default:
                          break
                      }
                      return false
                    }
                    Parser.prototype.parseGetterMethod = function () {
                      var node = this.createNode()
                      var isGenerator = false
                      var previousAllowYield = this.context.allowYield
                      this.context.allowYield = !isGenerator
                      var formalParameters = this.parseFormalParameters()
                      if (formalParameters.params.length > 0) {
                        this.tolerateError(messages_1.Messages.BadGetterArity)
                      }
                      var method = this.parsePropertyMethod(formalParameters)
                      this.context.allowYield = previousAllowYield
                      return this.finalize(
                        node,
                        new Node.FunctionExpression(
                          null,
                          formalParameters.params,
                          method,
                          isGenerator
                        )
                      )
                    }
                    Parser.prototype.parseSetterMethod = function () {
                      var node = this.createNode()
                      var isGenerator = false
                      var previousAllowYield = this.context.allowYield
                      this.context.allowYield = !isGenerator
                      var formalParameters = this.parseFormalParameters()
                      if (formalParameters.params.length !== 1) {
                        this.tolerateError(messages_1.Messages.BadSetterArity)
                      } else if (
                        formalParameters.params[0] instanceof Node.RestElement
                      ) {
                        this.tolerateError(
                          messages_1.Messages.BadSetterRestParameter
                        )
                      }
                      var method = this.parsePropertyMethod(formalParameters)
                      this.context.allowYield = previousAllowYield
                      return this.finalize(
                        node,
                        new Node.FunctionExpression(
                          null,
                          formalParameters.params,
                          method,
                          isGenerator
                        )
                      )
                    }
                    Parser.prototype.parseGeneratorMethod = function () {
                      var node = this.createNode()
                      var isGenerator = true
                      var previousAllowYield = this.context.allowYield
                      this.context.allowYield = true
                      var params = this.parseFormalParameters()
                      this.context.allowYield = false
                      var method = this.parsePropertyMethod(params)
                      this.context.allowYield = previousAllowYield
                      return this.finalize(
                        node,
                        new Node.FunctionExpression(
                          null,
                          params.params,
                          method,
                          isGenerator
                        )
                      )
                    }
                    // https://tc39.github.io/ecma262/#sec-generator-function-definitions
                    Parser.prototype.isStartOfExpression = function () {
                      var start = true
                      var value = this.lookahead.value
                      switch (this.lookahead.type) {
                        case 7 /* Punctuator */:
                          start =
                            value === '[' ||
                            value === '(' ||
                            value === '{' ||
                            value === '+' ||
                            value === '-' ||
                            value === '!' ||
                            value === '~' ||
                            value === '++' ||
                            value === '--' ||
                            value === '/' ||
                            value === '/=' // regular expression literal
                          break
                        case 4 /* Keyword */:
                          start =
                            value === 'class' ||
                            value === 'delete' ||
                            value === 'function' ||
                            value === 'let' ||
                            value === 'new' ||
                            value === 'super' ||
                            value === 'this' ||
                            value === 'typeof' ||
                            value === 'void' ||
                            value === 'yield'
                          break
                        default:
                          break
                      }
                      return start
                    }
                    Parser.prototype.parseYieldExpression = function () {
                      var node = this.createNode()
                      this.expectKeyword('yield')
                      var argument = null
                      var delegate = false
                      if (!this.hasLineTerminator) {
                        var previousAllowYield = this.context.allowYield
                        this.context.allowYield = false
                        delegate = this.match('*')
                        if (delegate) {
                          this.nextToken()
                          argument = this.parseAssignmentExpression()
                        } else if (this.isStartOfExpression()) {
                          argument = this.parseAssignmentExpression()
                        }
                        this.context.allowYield = previousAllowYield
                      }
                      return this.finalize(
                        node,
                        new Node.YieldExpression(argument, delegate)
                      )
                    }
                    // https://tc39.github.io/ecma262/#sec-class-definitions
                    Parser.prototype.parseClassElement = function (
                      hasConstructor
                    ) {
                      var token = this.lookahead
                      var node = this.createNode()
                      var kind = ''
                      var key = null
                      var value = null
                      var computed = false
                      var method = false
                      var isStatic = false
                      var isAsync = false
                      if (this.match('*')) {
                        this.nextToken()
                      } else {
                        computed = this.match('[')
                        key = this.parseObjectPropertyKey()
                        var id = key
                        if (
                          id.name === 'static' &&
                          (this.qualifiedPropertyName(this.lookahead) ||
                            this.match('*'))
                        ) {
                          token = this.lookahead
                          isStatic = true
                          computed = this.match('[')
                          if (this.match('*')) {
                            this.nextToken()
                          } else {
                            key = this.parseObjectPropertyKey()
                          }
                        }
                        if (
                          token.type === 3 /* Identifier */ &&
                          !this.hasLineTerminator &&
                          token.value === 'async'
                        ) {
                          var punctuator = this.lookahead.value
                          if (
                            punctuator !== ':' &&
                            punctuator !== '(' &&
                            punctuator !== '*'
                          ) {
                            isAsync = true
                            token = this.lookahead
                            key = this.parseObjectPropertyKey()
                            if (
                              token.type === 3 /* Identifier */ &&
                              token.value === 'constructor'
                            ) {
                              this.tolerateUnexpectedToken(
                                token,
                                messages_1.Messages.ConstructorIsAsync
                              )
                            }
                          }
                        }
                      }
                      var lookaheadPropertyKey = this.qualifiedPropertyName(
                        this.lookahead
                      )
                      if (token.type === 3 /* Identifier */) {
                        if (token.value === 'get' && lookaheadPropertyKey) {
                          kind = 'get'
                          computed = this.match('[')
                          key = this.parseObjectPropertyKey()
                          this.context.allowYield = false
                          value = this.parseGetterMethod()
                        } else if (
                          token.value === 'set' &&
                          lookaheadPropertyKey
                        ) {
                          kind = 'set'
                          computed = this.match('[')
                          key = this.parseObjectPropertyKey()
                          value = this.parseSetterMethod()
                        }
                      } else if (
                        token.type === 7 /* Punctuator */ &&
                        token.value === '*' &&
                        lookaheadPropertyKey
                      ) {
                        kind = 'init'
                        computed = this.match('[')
                        key = this.parseObjectPropertyKey()
                        value = this.parseGeneratorMethod()
                        method = true
                      }
                      if (!kind && key && this.match('(')) {
                        kind = 'init'
                        value = isAsync
                          ? this.parsePropertyMethodAsyncFunction()
                          : this.parsePropertyMethodFunction()
                        method = true
                      }
                      if (!kind) {
                        this.throwUnexpectedToken(this.lookahead)
                      }
                      if (kind === 'init') {
                        kind = 'method'
                      }
                      if (!computed) {
                        if (isStatic && this.isPropertyKey(key, 'prototype')) {
                          this.throwUnexpectedToken(
                            token,
                            messages_1.Messages.StaticPrototype
                          )
                        }
                        if (
                          !isStatic &&
                          this.isPropertyKey(key, 'constructor')
                        ) {
                          if (
                            kind !== 'method' ||
                            !method ||
                            (value && value.generator)
                          ) {
                            this.throwUnexpectedToken(
                              token,
                              messages_1.Messages.ConstructorSpecialMethod
                            )
                          }
                          if (hasConstructor.value) {
                            this.throwUnexpectedToken(
                              token,
                              messages_1.Messages.DuplicateConstructor
                            )
                          } else {
                            hasConstructor.value = true
                          }
                          kind = 'constructor'
                        }
                      }
                      return this.finalize(
                        node,
                        new Node.MethodDefinition(
                          key,
                          computed,
                          value,
                          kind,
                          isStatic
                        )
                      )
                    }
                    Parser.prototype.parseClassElementList = function () {
                      var body = []
                      var hasConstructor = { value: false }
                      this.expect('{')
                      while (!this.match('}')) {
                        if (this.match(';')) {
                          this.nextToken()
                        } else {
                          body.push(this.parseClassElement(hasConstructor))
                        }
                      }
                      this.expect('}')
                      return body
                    }
                    Parser.prototype.parseClassBody = function () {
                      var node = this.createNode()
                      var elementList = this.parseClassElementList()
                      return this.finalize(
                        node,
                        new Node.ClassBody(elementList)
                      )
                    }
                    Parser.prototype.parseClassDeclaration = function (
                      identifierIsOptional
                    ) {
                      var node = this.createNode()
                      var previousStrict = this.context.strict
                      this.context.strict = true
                      this.expectKeyword('class')
                      var id =
                        identifierIsOptional &&
                        this.lookahead.type !== 3 /* Identifier */
                          ? null
                          : this.parseVariableIdentifier()
                      var superClass = null
                      if (this.matchKeyword('extends')) {
                        this.nextToken()
                        superClass = this.isolateCoverGrammar(
                          this.parseLeftHandSideExpressionAllowCall
                        )
                      }
                      var classBody = this.parseClassBody()
                      this.context.strict = previousStrict
                      return this.finalize(
                        node,
                        new Node.ClassDeclaration(id, superClass, classBody)
                      )
                    }
                    Parser.prototype.parseClassExpression = function () {
                      var node = this.createNode()
                      var previousStrict = this.context.strict
                      this.context.strict = true
                      this.expectKeyword('class')
                      var id =
                        this.lookahead.type === 3 /* Identifier */
                          ? this.parseVariableIdentifier()
                          : null
                      var superClass = null
                      if (this.matchKeyword('extends')) {
                        this.nextToken()
                        superClass = this.isolateCoverGrammar(
                          this.parseLeftHandSideExpressionAllowCall
                        )
                      }
                      var classBody = this.parseClassBody()
                      this.context.strict = previousStrict
                      return this.finalize(
                        node,
                        new Node.ClassExpression(id, superClass, classBody)
                      )
                    }
                    // https://tc39.github.io/ecma262/#sec-scripts
                    // https://tc39.github.io/ecma262/#sec-modules
                    Parser.prototype.parseModule = function () {
                      this.context.strict = true
                      this.context.isModule = true
                      this.scanner.isModule = true
                      var node = this.createNode()
                      var body = this.parseDirectivePrologues()
                      while (this.lookahead.type !== 2 /* EOF */) {
                        body.push(this.parseStatementListItem())
                      }
                      return this.finalize(node, new Node.Module(body))
                    }
                    Parser.prototype.parseScript = function () {
                      var node = this.createNode()
                      var body = this.parseDirectivePrologues()
                      while (this.lookahead.type !== 2 /* EOF */) {
                        body.push(this.parseStatementListItem())
                      }
                      return this.finalize(node, new Node.Script(body))
                    }
                    // https://tc39.github.io/ecma262/#sec-imports
                    Parser.prototype.parseModuleSpecifier = function () {
                      var node = this.createNode()
                      if (this.lookahead.type !== 8 /* StringLiteral */) {
                        this.throwError(
                          messages_1.Messages.InvalidModuleSpecifier
                        )
                      }
                      var token = this.nextToken()
                      var raw = this.getTokenRaw(token)
                      return this.finalize(
                        node,
                        new Node.Literal(token.value, raw)
                      )
                    }
                    // import {<foo as bar>} ...;
                    Parser.prototype.parseImportSpecifier = function () {
                      var node = this.createNode()
                      var imported
                      var local
                      if (this.lookahead.type === 3 /* Identifier */) {
                        imported = this.parseVariableIdentifier()
                        local = imported
                        if (this.matchContextualKeyword('as')) {
                          this.nextToken()
                          local = this.parseVariableIdentifier()
                        }
                      } else {
                        imported = this.parseIdentifierName()
                        local = imported
                        if (this.matchContextualKeyword('as')) {
                          this.nextToken()
                          local = this.parseVariableIdentifier()
                        } else {
                          this.throwUnexpectedToken(this.nextToken())
                        }
                      }
                      return this.finalize(
                        node,
                        new Node.ImportSpecifier(local, imported)
                      )
                    }
                    // {foo, bar as bas}
                    Parser.prototype.parseNamedImports = function () {
                      this.expect('{')
                      var specifiers = []
                      while (!this.match('}')) {
                        specifiers.push(this.parseImportSpecifier())
                        if (!this.match('}')) {
                          this.expect(',')
                        }
                      }
                      this.expect('}')
                      return specifiers
                    }
                    // import <foo> ...;
                    Parser.prototype.parseImportDefaultSpecifier = function () {
                      var node = this.createNode()
                      var local = this.parseIdentifierName()
                      return this.finalize(
                        node,
                        new Node.ImportDefaultSpecifier(local)
                      )
                    }
                    // import <* as foo> ...;
                    Parser.prototype.parseImportNamespaceSpecifier = function () {
                      var node = this.createNode()
                      this.expect('*')
                      if (!this.matchContextualKeyword('as')) {
                        this.throwError(
                          messages_1.Messages.NoAsAfterImportNamespace
                        )
                      }
                      this.nextToken()
                      var local = this.parseIdentifierName()
                      return this.finalize(
                        node,
                        new Node.ImportNamespaceSpecifier(local)
                      )
                    }
                    Parser.prototype.parseImportDeclaration = function () {
                      if (this.context.inFunctionBody) {
                        this.throwError(
                          messages_1.Messages.IllegalImportDeclaration
                        )
                      }
                      var node = this.createNode()
                      this.expectKeyword('import')
                      var src
                      var specifiers = []
                      if (this.lookahead.type === 8 /* StringLiteral */) {
                        // import 'foo';
                        src = this.parseModuleSpecifier()
                      } else {
                        if (this.match('{')) {
                          // import {bar}
                          specifiers = specifiers.concat(
                            this.parseNamedImports()
                          )
                        } else if (this.match('*')) {
                          // import * as foo
                          specifiers.push(this.parseImportNamespaceSpecifier())
                        } else if (
                          this.isIdentifierName(this.lookahead) &&
                          !this.matchKeyword('default')
                        ) {
                          // import foo
                          specifiers.push(this.parseImportDefaultSpecifier())
                          if (this.match(',')) {
                            this.nextToken()
                            if (this.match('*')) {
                              // import foo, * as foo
                              specifiers.push(
                                this.parseImportNamespaceSpecifier()
                              )
                            } else if (this.match('{')) {
                              // import foo, {bar}
                              specifiers = specifiers.concat(
                                this.parseNamedImports()
                              )
                            } else {
                              this.throwUnexpectedToken(this.lookahead)
                            }
                          }
                        } else {
                          this.throwUnexpectedToken(this.nextToken())
                        }
                        if (!this.matchContextualKeyword('from')) {
                          var message = this.lookahead.value
                            ? messages_1.Messages.UnexpectedToken
                            : messages_1.Messages.MissingFromClause
                          this.throwError(message, this.lookahead.value)
                        }
                        this.nextToken()
                        src = this.parseModuleSpecifier()
                      }
                      this.consumeSemicolon()
                      return this.finalize(
                        node,
                        new Node.ImportDeclaration(specifiers, src)
                      )
                    }
                    // https://tc39.github.io/ecma262/#sec-exports
                    Parser.prototype.parseExportSpecifier = function () {
                      var node = this.createNode()
                      var local = this.parseIdentifierName()
                      var exported = local
                      if (this.matchContextualKeyword('as')) {
                        this.nextToken()
                        exported = this.parseIdentifierName()
                      }
                      return this.finalize(
                        node,
                        new Node.ExportSpecifier(local, exported)
                      )
                    }
                    Parser.prototype.parseExportDeclaration = function () {
                      if (this.context.inFunctionBody) {
                        this.throwError(
                          messages_1.Messages.IllegalExportDeclaration
                        )
                      }
                      var node = this.createNode()
                      this.expectKeyword('export')
                      var exportDeclaration
                      if (this.matchKeyword('default')) {
                        // export default ...
                        this.nextToken()
                        if (this.matchKeyword('function')) {
                          // export default function foo () {}
                          // export default function () {}
                          var declaration = this.parseFunctionDeclaration(true)
                          exportDeclaration = this.finalize(
                            node,
                            new Node.ExportDefaultDeclaration(declaration)
                          )
                        } else if (this.matchKeyword('class')) {
                          // export default class foo {}
                          var declaration = this.parseClassDeclaration(true)
                          exportDeclaration = this.finalize(
                            node,
                            new Node.ExportDefaultDeclaration(declaration)
                          )
                        } else if (this.matchContextualKeyword('async')) {
                          // export default async function f () {}
                          // export default async function () {}
                          // export default async x => x
                          var declaration = this.matchAsyncFunction()
                            ? this.parseFunctionDeclaration(true)
                            : this.parseAssignmentExpression()
                          exportDeclaration = this.finalize(
                            node,
                            new Node.ExportDefaultDeclaration(declaration)
                          )
                        } else {
                          if (this.matchContextualKeyword('from')) {
                            this.throwError(
                              messages_1.Messages.UnexpectedToken,
                              this.lookahead.value
                            )
                          }
                          // export default {};
                          // export default [];
                          // export default (1 + 2);
                          var declaration = this.match('{')
                            ? this.parseObjectInitializer()
                            : this.match('[')
                            ? this.parseArrayInitializer()
                            : this.parseAssignmentExpression()
                          this.consumeSemicolon()
                          exportDeclaration = this.finalize(
                            node,
                            new Node.ExportDefaultDeclaration(declaration)
                          )
                        }
                      } else if (this.match('*')) {
                        // export * from 'foo';
                        this.nextToken()
                        if (!this.matchContextualKeyword('from')) {
                          var message = this.lookahead.value
                            ? messages_1.Messages.UnexpectedToken
                            : messages_1.Messages.MissingFromClause
                          this.throwError(message, this.lookahead.value)
                        }
                        this.nextToken()
                        var src = this.parseModuleSpecifier()
                        this.consumeSemicolon()
                        exportDeclaration = this.finalize(
                          node,
                          new Node.ExportAllDeclaration(src)
                        )
                      } else if (this.lookahead.type === 4 /* Keyword */) {
                        // export var f = 1;
                        var declaration = void 0
                        switch (this.lookahead.value) {
                          case 'let':
                          case 'const':
                            declaration = this.parseLexicalDeclaration({
                              inFor: false,
                            })
                            break
                          case 'var':
                          case 'class':
                          case 'function':
                            declaration = this.parseStatementListItem()
                            break
                          default:
                            this.throwUnexpectedToken(this.lookahead)
                        }
                        exportDeclaration = this.finalize(
                          node,
                          new Node.ExportNamedDeclaration(declaration, [], null)
                        )
                      } else if (this.matchAsyncFunction()) {
                        var declaration = this.parseFunctionDeclaration()
                        exportDeclaration = this.finalize(
                          node,
                          new Node.ExportNamedDeclaration(declaration, [], null)
                        )
                      } else {
                        var specifiers = []
                        var source = null
                        var isExportFromIdentifier = false
                        this.expect('{')
                        while (!this.match('}')) {
                          isExportFromIdentifier =
                            isExportFromIdentifier ||
                            this.matchKeyword('default')
                          specifiers.push(this.parseExportSpecifier())
                          if (!this.match('}')) {
                            this.expect(',')
                          }
                        }
                        this.expect('}')
                        if (this.matchContextualKeyword('from')) {
                          // export {default} from 'foo';
                          // export {foo} from 'foo';
                          this.nextToken()
                          source = this.parseModuleSpecifier()
                          this.consumeSemicolon()
                        } else if (isExportFromIdentifier) {
                          // export {default}; // missing fromClause
                          var message = this.lookahead.value
                            ? messages_1.Messages.UnexpectedToken
                            : messages_1.Messages.MissingFromClause
                          this.throwError(message, this.lookahead.value)
                        } else {
                          // export {foo};
                          this.consumeSemicolon()
                        }
                        exportDeclaration = this.finalize(
                          node,
                          new Node.ExportNamedDeclaration(
                            null,
                            specifiers,
                            source
                          )
                        )
                      }
                      return exportDeclaration
                    }
                    return Parser
                  })()
                  exports.Parser = Parser

                  /***/
                },
                /* 9 */
                /***/ function (module, exports) {
                  'use strict'
                  // Ensure the condition is true, otherwise throw an error.
                  // This is only to have a better contract semantic, i.e. another safety net
                  // to catch a logic error. The condition shall be fulfilled in normal case.
                  // Do NOT use this to enforce a certain condition on any user input.
                  Object.defineProperty(exports, '__esModule', { value: true })
                  function assert(condition, message) {
                    /* istanbul ignore if */
                    if (!condition) {
                      throw new Error('ASSERT: ' + message)
                    }
                  }
                  exports.assert = assert

                  /***/
                },
                /* 10 */
                /***/ function (module, exports) {
                  'use strict'
                  /* tslint:disable:max-classes-per-file */
                  Object.defineProperty(exports, '__esModule', { value: true })
                  var ErrorHandler = (function () {
                    function ErrorHandler() {
                      this.errors = []
                      this.tolerant = false
                    }
                    ErrorHandler.prototype.recordError = function (error) {
                      this.errors.push(error)
                    }
                    ErrorHandler.prototype.tolerate = function (error) {
                      if (this.tolerant) {
                        this.recordError(error)
                      } else {
                        throw error
                      }
                    }
                    ErrorHandler.prototype.constructError = function (
                      msg,
                      column
                    ) {
                      var error = new Error(msg)
                      try {
                        throw error
                      } catch (base) {
                        /* istanbul ignore else */
                        if (Object.create && Object.defineProperty) {
                          error = Object.create(base)
                          Object.defineProperty(error, 'column', {
                            value: column,
                          })
                        }
                      }
                      /* istanbul ignore next */
                      return error
                    }
                    ErrorHandler.prototype.createError = function (
                      index,
                      line,
                      col,
                      description
                    ) {
                      var msg = 'Line ' + line + ': ' + description
                      var error = this.constructError(msg, col)
                      error.index = index
                      error.lineNumber = line
                      error.description = description
                      return error
                    }
                    ErrorHandler.prototype.throwError = function (
                      index,
                      line,
                      col,
                      description
                    ) {
                      throw this.createError(index, line, col, description)
                    }
                    ErrorHandler.prototype.tolerateError = function (
                      index,
                      line,
                      col,
                      description
                    ) {
                      var error = this.createError(
                        index,
                        line,
                        col,
                        description
                      )
                      if (this.tolerant) {
                        this.recordError(error)
                      } else {
                        throw error
                      }
                    }
                    return ErrorHandler
                  })()
                  exports.ErrorHandler = ErrorHandler

                  /***/
                },
                /* 11 */
                /***/ function (module, exports) {
                  'use strict'
                  Object.defineProperty(exports, '__esModule', { value: true })
                  // Error messages should be identical to V8.
                  exports.Messages = {
                    BadGetterArity:
                      'Getter must not have any formal parameters',
                    BadSetterArity:
                      'Setter must have exactly one formal parameter',
                    BadSetterRestParameter:
                      'Setter function argument must not be a rest parameter',
                    ConstructorIsAsync:
                      'Class constructor may not be an async method',
                    ConstructorSpecialMethod:
                      'Class constructor may not be an accessor',
                    DeclarationMissingInitializer:
                      'Missing initializer in %0 declaration',
                    DefaultRestParameter: 'Unexpected token =',
                    DuplicateBinding: 'Duplicate binding %0',
                    DuplicateConstructor:
                      'A class may only have one constructor',
                    DuplicateProtoProperty:
                      'Duplicate __proto__ fields are not allowed in object literals',
                    ForInOfLoopInitializer:
                      '%0 loop variable declaration may not have an initializer',
                    GeneratorInLegacyContext:
                      'Generator declarations are not allowed in legacy contexts',
                    IllegalBreak: 'Illegal break statement',
                    IllegalContinue: 'Illegal continue statement',
                    IllegalExportDeclaration: 'Unexpected token',
                    IllegalImportDeclaration: 'Unexpected token',
                    IllegalLanguageModeDirective:
                      "Illegal 'use strict' directive in function with non-simple parameter list",
                    IllegalReturn: 'Illegal return statement',
                    InvalidEscapedReservedWord:
                      'Keyword must not contain escaped characters',
                    InvalidHexEscapeSequence:
                      'Invalid hexadecimal escape sequence',
                    InvalidLHSInAssignment:
                      'Invalid left-hand side in assignment',
                    InvalidLHSInForIn: 'Invalid left-hand side in for-in',
                    InvalidLHSInForLoop: 'Invalid left-hand side in for-loop',
                    InvalidModuleSpecifier: 'Unexpected token',
                    InvalidRegExp: 'Invalid regular expression',
                    LetInLexicalBinding:
                      'let is disallowed as a lexically bound name',
                    MissingFromClause: 'Unexpected token',
                    MultipleDefaultsInSwitch:
                      'More than one default clause in switch statement',
                    NewlineAfterThrow: 'Illegal newline after throw',
                    NoAsAfterImportNamespace: 'Unexpected token',
                    NoCatchOrFinally: 'Missing catch or finally after try',
                    ParameterAfterRestParameter:
                      'Rest parameter must be last formal parameter',
                    Redeclaration: "%0 '%1' has already been declared",
                    StaticPrototype:
                      'Classes may not have static property named prototype',
                    StrictCatchVariable:
                      'Catch variable may not be eval or arguments in strict mode',
                    StrictDelete:
                      'Delete of an unqualified identifier in strict mode.',
                    StrictFunction:
                      'In strict mode code, functions can only be declared at top level or inside a block',
                    StrictFunctionName:
                      'Function name may not be eval or arguments in strict mode',
                    StrictLHSAssignment:
                      'Assignment to eval or arguments is not allowed in strict mode',
                    StrictLHSPostfix:
                      'Postfix increment/decrement may not have eval or arguments operand in strict mode',
                    StrictLHSPrefix:
                      'Prefix increment/decrement may not have eval or arguments operand in strict mode',
                    StrictModeWith:
                      'Strict mode code may not include a with statement',
                    StrictOctalLiteral:
                      'Octal literals are not allowed in strict mode.',
                    StrictParamDupe:
                      'Strict mode function may not have duplicate parameter names',
                    StrictParamName:
                      'Parameter name eval or arguments is not allowed in strict mode',
                    StrictReservedWord:
                      'Use of future reserved word in strict mode',
                    StrictVarName:
                      'Variable name may not be eval or arguments in strict mode',
                    TemplateOctalLiteral:
                      'Octal literals are not allowed in template strings.',
                    UnexpectedEOS: 'Unexpected end of input',
                    UnexpectedIdentifier: 'Unexpected identifier',
                    UnexpectedNumber: 'Unexpected number',
                    UnexpectedReserved: 'Unexpected reserved word',
                    UnexpectedString: 'Unexpected string',
                    UnexpectedTemplate: 'Unexpected quasi %0',
                    UnexpectedToken: 'Unexpected token %0',
                    UnexpectedTokenIllegal: 'Unexpected token ILLEGAL',
                    UnknownLabel: "Undefined label '%0'",
                    UnterminatedRegExp: 'Invalid regular expression: missing /',
                  }

                  /***/
                },
                /* 12 */
                /***/ function (module, exports, __webpack_require__) {
                  'use strict'
                  Object.defineProperty(exports, '__esModule', { value: true })
                  var assert_1 = __webpack_require__(9)
                  var character_1 = __webpack_require__(4)
                  var messages_1 = __webpack_require__(11)
                  function hexValue(ch) {
                    return '0123456789abcdef'.indexOf(ch.toLowerCase())
                  }
                  function octalValue(ch) {
                    return '01234567'.indexOf(ch)
                  }
                  var Scanner = (function () {
                    function Scanner(code, handler) {
                      this.source = code
                      this.errorHandler = handler
                      this.trackComment = false
                      this.isModule = false
                      this.length = code.length
                      this.index = 0
                      this.lineNumber = code.length > 0 ? 1 : 0
                      this.lineStart = 0
                      this.curlyStack = []
                    }
                    Scanner.prototype.saveState = function () {
                      return {
                        index: this.index,
                        lineNumber: this.lineNumber,
                        lineStart: this.lineStart,
                      }
                    }
                    Scanner.prototype.restoreState = function (state) {
                      this.index = state.index
                      this.lineNumber = state.lineNumber
                      this.lineStart = state.lineStart
                    }
                    Scanner.prototype.eof = function () {
                      return this.index >= this.length
                    }
                    Scanner.prototype.throwUnexpectedToken = function (
                      message
                    ) {
                      if (message === void 0) {
                        message = messages_1.Messages.UnexpectedTokenIllegal
                      }
                      return this.errorHandler.throwError(
                        this.index,
                        this.lineNumber,
                        this.index - this.lineStart + 1,
                        message
                      )
                    }
                    Scanner.prototype.tolerateUnexpectedToken = function (
                      message
                    ) {
                      if (message === void 0) {
                        message = messages_1.Messages.UnexpectedTokenIllegal
                      }
                      this.errorHandler.tolerateError(
                        this.index,
                        this.lineNumber,
                        this.index - this.lineStart + 1,
                        message
                      )
                    }
                    // https://tc39.github.io/ecma262/#sec-comments
                    Scanner.prototype.skipSingleLineComment = function (
                      offset
                    ) {
                      var comments = []
                      var start, loc
                      if (this.trackComment) {
                        comments = []
                        start = this.index - offset
                        loc = {
                          start: {
                            line: this.lineNumber,
                            column: this.index - this.lineStart - offset,
                          },
                          end: {},
                        }
                      }
                      while (!this.eof()) {
                        var ch = this.source.charCodeAt(this.index)
                        ++this.index
                        if (character_1.Character.isLineTerminator(ch)) {
                          if (this.trackComment) {
                            loc.end = {
                              line: this.lineNumber,
                              column: this.index - this.lineStart - 1,
                            }
                            var entry = {
                              multiLine: false,
                              slice: [start + offset, this.index - 1],
                              range: [start, this.index - 1],
                              loc: loc,
                            }
                            comments.push(entry)
                          }
                          if (
                            ch === 13 &&
                            this.source.charCodeAt(this.index) === 10
                          ) {
                            ++this.index
                          }
                          ++this.lineNumber
                          this.lineStart = this.index
                          return comments
                        }
                      }
                      if (this.trackComment) {
                        loc.end = {
                          line: this.lineNumber,
                          column: this.index - this.lineStart,
                        }
                        var entry = {
                          multiLine: false,
                          slice: [start + offset, this.index],
                          range: [start, this.index],
                          loc: loc,
                        }
                        comments.push(entry)
                      }
                      return comments
                    }
                    Scanner.prototype.skipMultiLineComment = function () {
                      var comments = []
                      var start, loc
                      if (this.trackComment) {
                        comments = []
                        start = this.index - 2
                        loc = {
                          start: {
                            line: this.lineNumber,
                            column: this.index - this.lineStart - 2,
                          },
                          end: {},
                        }
                      }
                      while (!this.eof()) {
                        var ch = this.source.charCodeAt(this.index)
                        if (character_1.Character.isLineTerminator(ch)) {
                          if (
                            ch === 0x0d &&
                            this.source.charCodeAt(this.index + 1) === 0x0a
                          ) {
                            ++this.index
                          }
                          ++this.lineNumber
                          ++this.index
                          this.lineStart = this.index
                        } else if (ch === 0x2a) {
                          // Block comment ends with '*/'.
                          if (this.source.charCodeAt(this.index + 1) === 0x2f) {
                            this.index += 2
                            if (this.trackComment) {
                              loc.end = {
                                line: this.lineNumber,
                                column: this.index - this.lineStart,
                              }
                              var entry = {
                                multiLine: true,
                                slice: [start + 2, this.index - 2],
                                range: [start, this.index],
                                loc: loc,
                              }
                              comments.push(entry)
                            }
                            return comments
                          }
                          ++this.index
                        } else {
                          ++this.index
                        }
                      }
                      // Ran off the end of the file - the whole thing is a comment
                      if (this.trackComment) {
                        loc.end = {
                          line: this.lineNumber,
                          column: this.index - this.lineStart,
                        }
                        var entry = {
                          multiLine: true,
                          slice: [start + 2, this.index],
                          range: [start, this.index],
                          loc: loc,
                        }
                        comments.push(entry)
                      }
                      this.tolerateUnexpectedToken()
                      return comments
                    }
                    Scanner.prototype.scanComments = function () {
                      var comments
                      if (this.trackComment) {
                        comments = []
                      }
                      var start = this.index === 0
                      while (!this.eof()) {
                        var ch = this.source.charCodeAt(this.index)
                        if (character_1.Character.isWhiteSpace(ch)) {
                          ++this.index
                        } else if (character_1.Character.isLineTerminator(ch)) {
                          ++this.index
                          if (
                            ch === 0x0d &&
                            this.source.charCodeAt(this.index) === 0x0a
                          ) {
                            ++this.index
                          }
                          ++this.lineNumber
                          this.lineStart = this.index
                          start = true
                        } else if (ch === 0x2f) {
                          ch = this.source.charCodeAt(this.index + 1)
                          if (ch === 0x2f) {
                            this.index += 2
                            var comment = this.skipSingleLineComment(2)
                            if (this.trackComment) {
                              comments = comments.concat(comment)
                            }
                            start = true
                          } else if (ch === 0x2a) {
                            this.index += 2
                            var comment = this.skipMultiLineComment()
                            if (this.trackComment) {
                              comments = comments.concat(comment)
                            }
                          } else {
                            break
                          }
                        } else if (start && ch === 0x2d) {
                          // U+003E is '>'
                          if (
                            this.source.charCodeAt(this.index + 1) === 0x2d &&
                            this.source.charCodeAt(this.index + 2) === 0x3e
                          ) {
                            // '-->' is a single-line comment
                            this.index += 3
                            var comment = this.skipSingleLineComment(3)
                            if (this.trackComment) {
                              comments = comments.concat(comment)
                            }
                          } else {
                            break
                          }
                        } else if (ch === 0x3c && !this.isModule) {
                          if (
                            this.source.slice(
                              this.index + 1,
                              this.index + 4
                            ) === '!--'
                          ) {
                            this.index += 4 // `<!--`
                            var comment = this.skipSingleLineComment(4)
                            if (this.trackComment) {
                              comments = comments.concat(comment)
                            }
                          } else {
                            break
                          }
                        } else {
                          break
                        }
                      }
                      return comments
                    }
                    // https://tc39.github.io/ecma262/#sec-future-reserved-words
                    Scanner.prototype.isFutureReservedWord = function (id) {
                      switch (id) {
                        case 'enum':
                        case 'export':
                        case 'import':
                        case 'super':
                          return true
                        default:
                          return false
                      }
                    }
                    Scanner.prototype.isStrictModeReservedWord = function (id) {
                      switch (id) {
                        case 'implements':
                        case 'interface':
                        case 'package':
                        case 'private':
                        case 'protected':
                        case 'public':
                        case 'static':
                        case 'yield':
                        case 'let':
                          return true
                        default:
                          return false
                      }
                    }
                    Scanner.prototype.isRestrictedWord = function (id) {
                      return id === 'eval' || id === 'arguments'
                    }
                    // https://tc39.github.io/ecma262/#sec-keywords
                    Scanner.prototype.isKeyword = function (id) {
                      switch (id.length) {
                        case 2:
                          return id === 'if' || id === 'in' || id === 'do'
                        case 3:
                          return (
                            id === 'var' ||
                            id === 'for' ||
                            id === 'new' ||
                            id === 'try' ||
                            id === 'let'
                          )
                        case 4:
                          return (
                            id === 'this' ||
                            id === 'else' ||
                            id === 'case' ||
                            id === 'void' ||
                            id === 'with' ||
                            id === 'enum'
                          )
                        case 5:
                          return (
                            id === 'while' ||
                            id === 'break' ||
                            id === 'catch' ||
                            id === 'throw' ||
                            id === 'const' ||
                            id === 'yield' ||
                            id === 'class' ||
                            id === 'super'
                          )
                        case 6:
                          return (
                            id === 'return' ||
                            id === 'typeof' ||
                            id === 'delete' ||
                            id === 'switch' ||
                            id === 'export' ||
                            id === 'import'
                          )
                        case 7:
                          return (
                            id === 'default' ||
                            id === 'finally' ||
                            id === 'extends'
                          )
                        case 8:
                          return (
                            id === 'function' ||
                            id === 'continue' ||
                            id === 'debugger'
                          )
                        case 10:
                          return id === 'instanceof'
                        default:
                          return false
                      }
                    }
                    Scanner.prototype.codePointAt = function (i) {
                      var cp = this.source.charCodeAt(i)
                      if (cp >= 0xd800 && cp <= 0xdbff) {
                        var second = this.source.charCodeAt(i + 1)
                        if (second >= 0xdc00 && second <= 0xdfff) {
                          var first = cp
                          cp =
                            (first - 0xd800) * 0x400 + second - 0xdc00 + 0x10000
                        }
                      }
                      return cp
                    }
                    Scanner.prototype.scanHexEscape = function (prefix) {
                      var len = prefix === 'u' ? 4 : 2
                      var code = 0
                      for (var i = 0; i < len; ++i) {
                        if (
                          !this.eof() &&
                          character_1.Character.isHexDigit(
                            this.source.charCodeAt(this.index)
                          )
                        ) {
                          code = code * 16 + hexValue(this.source[this.index++])
                        } else {
                          return null
                        }
                      }
                      return String.fromCharCode(code)
                    }
                    Scanner.prototype.scanUnicodeCodePointEscape = function () {
                      var ch = this.source[this.index]
                      var code = 0
                      // At least, one hex digit is required.
                      if (ch === '}') {
                        this.throwUnexpectedToken()
                      }
                      while (!this.eof()) {
                        ch = this.source[this.index++]
                        if (
                          !character_1.Character.isHexDigit(ch.charCodeAt(0))
                        ) {
                          break
                        }
                        code = code * 16 + hexValue(ch)
                      }
                      if (code > 0x10ffff || ch !== '}') {
                        this.throwUnexpectedToken()
                      }
                      return character_1.Character.fromCodePoint(code)
                    }
                    Scanner.prototype.getIdentifier = function () {
                      var start = this.index++
                      while (!this.eof()) {
                        var ch = this.source.charCodeAt(this.index)
                        if (ch === 0x5c) {
                          // Blackslash (U+005C) marks Unicode escape sequence.
                          this.index = start
                          return this.getComplexIdentifier()
                        } else if (ch >= 0xd800 && ch < 0xdfff) {
                          // Need to handle surrogate pairs.
                          this.index = start
                          return this.getComplexIdentifier()
                        }
                        if (character_1.Character.isIdentifierPart(ch)) {
                          ++this.index
                        } else {
                          break
                        }
                      }
                      return this.source.slice(start, this.index)
                    }
                    Scanner.prototype.getComplexIdentifier = function () {
                      var cp = this.codePointAt(this.index)
                      var id = character_1.Character.fromCodePoint(cp)
                      this.index += id.length
                      // '\u' (U+005C, U+0075) denotes an escaped character.
                      var ch
                      if (cp === 0x5c) {
                        if (this.source.charCodeAt(this.index) !== 0x75) {
                          this.throwUnexpectedToken()
                        }
                        ++this.index
                        if (this.source[this.index] === '{') {
                          ++this.index
                          ch = this.scanUnicodeCodePointEscape()
                        } else {
                          ch = this.scanHexEscape('u')
                          if (
                            ch === null ||
                            ch === '\\' ||
                            !character_1.Character.isIdentifierStart(
                              ch.charCodeAt(0)
                            )
                          ) {
                            this.throwUnexpectedToken()
                          }
                        }
                        id = ch
                      }
                      while (!this.eof()) {
                        cp = this.codePointAt(this.index)
                        if (!character_1.Character.isIdentifierPart(cp)) {
                          break
                        }
                        ch = character_1.Character.fromCodePoint(cp)
                        id += ch
                        this.index += ch.length
                        // '\u' (U+005C, U+0075) denotes an escaped character.
                        if (cp === 0x5c) {
                          id = id.substr(0, id.length - 1)
                          if (this.source.charCodeAt(this.index) !== 0x75) {
                            this.throwUnexpectedToken()
                          }
                          ++this.index
                          if (this.source[this.index] === '{') {
                            ++this.index
                            ch = this.scanUnicodeCodePointEscape()
                          } else {
                            ch = this.scanHexEscape('u')
                            if (
                              ch === null ||
                              ch === '\\' ||
                              !character_1.Character.isIdentifierPart(
                                ch.charCodeAt(0)
                              )
                            ) {
                              this.throwUnexpectedToken()
                            }
                          }
                          id += ch
                        }
                      }
                      return id
                    }
                    Scanner.prototype.octalToDecimal = function (ch) {
                      // \0 is not octal escape sequence
                      var octal = ch !== '0'
                      var code = octalValue(ch)
                      if (
                        !this.eof() &&
                        character_1.Character.isOctalDigit(
                          this.source.charCodeAt(this.index)
                        )
                      ) {
                        octal = true
                        code = code * 8 + octalValue(this.source[this.index++])
                        // 3 digits are only allowed when string starts
                        // with 0, 1, 2, 3
                        if (
                          '0123'.indexOf(ch) >= 0 &&
                          !this.eof() &&
                          character_1.Character.isOctalDigit(
                            this.source.charCodeAt(this.index)
                          )
                        ) {
                          code =
                            code * 8 + octalValue(this.source[this.index++])
                        }
                      }
                      return {
                        code: code,
                        octal: octal,
                      }
                    }
                    // https://tc39.github.io/ecma262/#sec-names-and-keywords
                    Scanner.prototype.scanIdentifier = function () {
                      var type
                      var start = this.index
                      // Backslash (U+005C) starts an escaped character.
                      var id =
                        this.source.charCodeAt(start) === 0x5c
                          ? this.getComplexIdentifier()
                          : this.getIdentifier()
                      // There is no keyword or literal with only one character.
                      // Thus, it must be an identifier.
                      if (id.length === 1) {
                        type = 3 /* Identifier */
                      } else if (this.isKeyword(id)) {
                        type = 4 /* Keyword */
                      } else if (id === 'null') {
                        type = 5 /* NullLiteral */
                      } else if (id === 'true' || id === 'false') {
                        type = 1 /* BooleanLiteral */
                      } else {
                        type = 3 /* Identifier */
                      }
                      if (
                        type !== 3 /* Identifier */ &&
                        start + id.length !== this.index
                      ) {
                        var restore = this.index
                        this.index = start
                        this.tolerateUnexpectedToken(
                          messages_1.Messages.InvalidEscapedReservedWord
                        )
                        this.index = restore
                      }
                      return {
                        type: type,
                        value: id,
                        lineNumber: this.lineNumber,
                        lineStart: this.lineStart,
                        start: start,
                        end: this.index,
                      }
                    }
                    // https://tc39.github.io/ecma262/#sec-punctuators
                    Scanner.prototype.scanPunctuator = function () {
                      var start = this.index
                      // Check for most common single-character punctuators.
                      var str = this.source[this.index]
                      switch (str) {
                        case '(':
                        case '{':
                          if (str === '{') {
                            this.curlyStack.push('{')
                          }
                          ++this.index
                          break
                        case '.':
                          ++this.index
                          if (
                            this.source[this.index] === '.' &&
                            this.source[this.index + 1] === '.'
                          ) {
                            // Spread operator: ...
                            this.index += 2
                            str = '...'
                          }
                          break
                        case '}':
                          ++this.index
                          this.curlyStack.pop()
                          break
                        case ')':
                        case ';':
                        case ',':
                        case '[':
                        case ']':
                        case ':':
                        case '?':
                        case '~':
                          ++this.index
                          break
                        default:
                          // 4-character punctuator.
                          str = this.source.substr(this.index, 4)
                          if (str === '>>>=') {
                            this.index += 4
                          } else {
                            // 3-character punctuators.
                            str = str.substr(0, 3)
                            if (
                              str === '===' ||
                              str === '!==' ||
                              str === '>>>' ||
                              str === '<<=' ||
                              str === '>>=' ||
                              str === '**='
                            ) {
                              this.index += 3
                            } else {
                              // 2-character punctuators.
                              str = str.substr(0, 2)
                              if (
                                str === '&&' ||
                                str === '||' ||
                                str === '==' ||
                                str === '!=' ||
                                str === '+=' ||
                                str === '-=' ||
                                str === '*=' ||
                                str === '/=' ||
                                str === '++' ||
                                str === '--' ||
                                str === '<<' ||
                                str === '>>' ||
                                str === '&=' ||
                                str === '|=' ||
                                str === '^=' ||
                                str === '%=' ||
                                str === '<=' ||
                                str === '>=' ||
                                str === '=>' ||
                                str === '**'
                              ) {
                                this.index += 2
                              } else {
                                // 1-character punctuators.
                                str = this.source[this.index]
                                if ('<>=!+-*%&|^/'.indexOf(str) >= 0) {
                                  ++this.index
                                }
                              }
                            }
                          }
                      }
                      if (this.index === start) {
                        this.throwUnexpectedToken()
                      }
                      return {
                        type: 7 /* Punctuator */,
                        value: str,
                        lineNumber: this.lineNumber,
                        lineStart: this.lineStart,
                        start: start,
                        end: this.index,
                      }
                    }
                    // https://tc39.github.io/ecma262/#sec-literals-numeric-literals
                    Scanner.prototype.scanHexLiteral = function (start) {
                      var num = ''
                      while (!this.eof()) {
                        if (
                          !character_1.Character.isHexDigit(
                            this.source.charCodeAt(this.index)
                          )
                        ) {
                          break
                        }
                        num += this.source[this.index++]
                      }
                      if (num.length === 0) {
                        this.throwUnexpectedToken()
                      }
                      if (
                        character_1.Character.isIdentifierStart(
                          this.source.charCodeAt(this.index)
                        )
                      ) {
                        this.throwUnexpectedToken()
                      }
                      return {
                        type: 6 /* NumericLiteral */,
                        value: parseInt('0x' + num, 16),
                        lineNumber: this.lineNumber,
                        lineStart: this.lineStart,
                        start: start,
                        end: this.index,
                      }
                    }
                    Scanner.prototype.scanBinaryLiteral = function (start) {
                      var num = ''
                      var ch
                      while (!this.eof()) {
                        ch = this.source[this.index]
                        if (ch !== '0' && ch !== '1') {
                          break
                        }
                        num += this.source[this.index++]
                      }
                      if (num.length === 0) {
                        // only 0b or 0B
                        this.throwUnexpectedToken()
                      }
                      if (!this.eof()) {
                        ch = this.source.charCodeAt(this.index)
                        /* istanbul ignore else */
                        if (
                          character_1.Character.isIdentifierStart(ch) ||
                          character_1.Character.isDecimalDigit(ch)
                        ) {
                          this.throwUnexpectedToken()
                        }
                      }
                      return {
                        type: 6 /* NumericLiteral */,
                        value: parseInt(num, 2),
                        lineNumber: this.lineNumber,
                        lineStart: this.lineStart,
                        start: start,
                        end: this.index,
                      }
                    }
                    Scanner.prototype.scanOctalLiteral = function (
                      prefix,
                      start
                    ) {
                      var num = ''
                      var octal = false
                      if (
                        character_1.Character.isOctalDigit(prefix.charCodeAt(0))
                      ) {
                        octal = true
                        num = '0' + this.source[this.index++]
                      } else {
                        ++this.index
                      }
                      while (!this.eof()) {
                        if (
                          !character_1.Character.isOctalDigit(
                            this.source.charCodeAt(this.index)
                          )
                        ) {
                          break
                        }
                        num += this.source[this.index++]
                      }
                      if (!octal && num.length === 0) {
                        // only 0o or 0O
                        this.throwUnexpectedToken()
                      }
                      if (
                        character_1.Character.isIdentifierStart(
                          this.source.charCodeAt(this.index)
                        ) ||
                        character_1.Character.isDecimalDigit(
                          this.source.charCodeAt(this.index)
                        )
                      ) {
                        this.throwUnexpectedToken()
                      }
                      return {
                        type: 6 /* NumericLiteral */,
                        value: parseInt(num, 8),
                        octal: octal,
                        lineNumber: this.lineNumber,
                        lineStart: this.lineStart,
                        start: start,
                        end: this.index,
                      }
                    }
                    Scanner.prototype.isImplicitOctalLiteral = function () {
                      // Implicit octal, unless there is a non-octal digit.
                      // (Annex B.1.1 on Numeric Literals)
                      for (var i = this.index + 1; i < this.length; ++i) {
                        var ch = this.source[i]
                        if (ch === '8' || ch === '9') {
                          return false
                        }
                        if (
                          !character_1.Character.isOctalDigit(ch.charCodeAt(0))
                        ) {
                          return true
                        }
                      }
                      return true
                    }
                    Scanner.prototype.scanNumericLiteral = function () {
                      var start = this.index
                      var ch = this.source[start]
                      assert_1.assert(
                        character_1.Character.isDecimalDigit(
                          ch.charCodeAt(0)
                        ) || ch === '.',
                        'Numeric literal must start with a decimal digit or a decimal point'
                      )
                      var num = ''
                      if (ch !== '.') {
                        num = this.source[this.index++]
                        ch = this.source[this.index]
                        // Hex number starts with '0x'.
                        // Octal number starts with '0'.
                        // Octal number in ES6 starts with '0o'.
                        // Binary number in ES6 starts with '0b'.
                        if (num === '0') {
                          if (ch === 'x' || ch === 'X') {
                            ++this.index
                            return this.scanHexLiteral(start)
                          }
                          if (ch === 'b' || ch === 'B') {
                            ++this.index
                            return this.scanBinaryLiteral(start)
                          }
                          if (ch === 'o' || ch === 'O') {
                            return this.scanOctalLiteral(ch, start)
                          }
                          if (
                            ch &&
                            character_1.Character.isOctalDigit(ch.charCodeAt(0))
                          ) {
                            if (this.isImplicitOctalLiteral()) {
                              return this.scanOctalLiteral(ch, start)
                            }
                          }
                        }
                        while (
                          character_1.Character.isDecimalDigit(
                            this.source.charCodeAt(this.index)
                          )
                        ) {
                          num += this.source[this.index++]
                        }
                        ch = this.source[this.index]
                      }
                      if (ch === '.') {
                        num += this.source[this.index++]
                        while (
                          character_1.Character.isDecimalDigit(
                            this.source.charCodeAt(this.index)
                          )
                        ) {
                          num += this.source[this.index++]
                        }
                        ch = this.source[this.index]
                      }
                      if (ch === 'e' || ch === 'E') {
                        num += this.source[this.index++]
                        ch = this.source[this.index]
                        if (ch === '+' || ch === '-') {
                          num += this.source[this.index++]
                        }
                        if (
                          character_1.Character.isDecimalDigit(
                            this.source.charCodeAt(this.index)
                          )
                        ) {
                          while (
                            character_1.Character.isDecimalDigit(
                              this.source.charCodeAt(this.index)
                            )
                          ) {
                            num += this.source[this.index++]
                          }
                        } else {
                          this.throwUnexpectedToken()
                        }
                      }
                      if (
                        character_1.Character.isIdentifierStart(
                          this.source.charCodeAt(this.index)
                        )
                      ) {
                        this.throwUnexpectedToken()
                      }
                      return {
                        type: 6 /* NumericLiteral */,
                        value: parseFloat(num),
                        lineNumber: this.lineNumber,
                        lineStart: this.lineStart,
                        start: start,
                        end: this.index,
                      }
                    }
                    // https://tc39.github.io/ecma262/#sec-literals-string-literals
                    Scanner.prototype.scanStringLiteral = function () {
                      var start = this.index
                      var quote = this.source[start]
                      assert_1.assert(
                        quote === "'" || quote === '"',
                        'String literal must starts with a quote'
                      )
                      ++this.index
                      var octal = false
                      var str = ''
                      while (!this.eof()) {
                        var ch = this.source[this.index++]
                        if (ch === quote) {
                          quote = ''
                          break
                        } else if (ch === '\\') {
                          ch = this.source[this.index++]
                          if (
                            !ch ||
                            !character_1.Character.isLineTerminator(
                              ch.charCodeAt(0)
                            )
                          ) {
                            switch (ch) {
                              case 'u':
                                if (this.source[this.index] === '{') {
                                  ++this.index
                                  str += this.scanUnicodeCodePointEscape()
                                } else {
                                  var unescaped_1 = this.scanHexEscape(ch)
                                  if (unescaped_1 === null) {
                                    this.throwUnexpectedToken()
                                  }
                                  str += unescaped_1
                                }
                                break
                              case 'x':
                                var unescaped = this.scanHexEscape(ch)
                                if (unescaped === null) {
                                  this.throwUnexpectedToken(
                                    messages_1.Messages.InvalidHexEscapeSequence
                                  )
                                }
                                str += unescaped
                                break
                              case 'n':
                                str += '\n'
                                break
                              case 'r':
                                str += '\r'
                                break
                              case 't':
                                str += '\t'
                                break
                              case 'b':
                                str += '\b'
                                break
                              case 'f':
                                str += '\f'
                                break
                              case 'v':
                                str += '\x0B'
                                break
                              case '8':
                              case '9':
                                str += ch
                                this.tolerateUnexpectedToken()
                                break
                              default:
                                if (
                                  ch &&
                                  character_1.Character.isOctalDigit(
                                    ch.charCodeAt(0)
                                  )
                                ) {
                                  var octToDec = this.octalToDecimal(ch)
                                  octal = octToDec.octal || octal
                                  str += String.fromCharCode(octToDec.code)
                                } else {
                                  str += ch
                                }
                                break
                            }
                          } else {
                            ++this.lineNumber
                            if (
                              ch === '\r' &&
                              this.source[this.index] === '\n'
                            ) {
                              ++this.index
                            }
                            this.lineStart = this.index
                          }
                        } else if (
                          character_1.Character.isLineTerminator(
                            ch.charCodeAt(0)
                          )
                        ) {
                          break
                        } else {
                          str += ch
                        }
                      }
                      if (quote !== '') {
                        this.index = start
                        this.throwUnexpectedToken()
                      }
                      return {
                        type: 8 /* StringLiteral */,
                        value: str,
                        octal: octal,
                        lineNumber: this.lineNumber,
                        lineStart: this.lineStart,
                        start: start,
                        end: this.index,
                      }
                    }
                    // https://tc39.github.io/ecma262/#sec-template-literal-lexical-components
                    Scanner.prototype.scanTemplate = function () {
                      var cooked = ''
                      var terminated = false
                      var start = this.index
                      var head = this.source[start] === '`'
                      var tail = false
                      var rawOffset = 2
                      ++this.index
                      while (!this.eof()) {
                        var ch = this.source[this.index++]
                        if (ch === '`') {
                          rawOffset = 1
                          tail = true
                          terminated = true
                          break
                        } else if (ch === '$') {
                          if (this.source[this.index] === '{') {
                            this.curlyStack.push('${')
                            ++this.index
                            terminated = true
                            break
                          }
                          cooked += ch
                        } else if (ch === '\\') {
                          ch = this.source[this.index++]
                          if (
                            !character_1.Character.isLineTerminator(
                              ch.charCodeAt(0)
                            )
                          ) {
                            switch (ch) {
                              case 'n':
                                cooked += '\n'
                                break
                              case 'r':
                                cooked += '\r'
                                break
                              case 't':
                                cooked += '\t'
                                break
                              case 'u':
                                if (this.source[this.index] === '{') {
                                  ++this.index
                                  cooked += this.scanUnicodeCodePointEscape()
                                } else {
                                  var restore = this.index
                                  var unescaped_2 = this.scanHexEscape(ch)
                                  if (unescaped_2 !== null) {
                                    cooked += unescaped_2
                                  } else {
                                    this.index = restore
                                    cooked += ch
                                  }
                                }
                                break
                              case 'x':
                                var unescaped = this.scanHexEscape(ch)
                                if (unescaped === null) {
                                  this.throwUnexpectedToken(
                                    messages_1.Messages.InvalidHexEscapeSequence
                                  )
                                }
                                cooked += unescaped
                                break
                              case 'b':
                                cooked += '\b'
                                break
                              case 'f':
                                cooked += '\f'
                                break
                              case 'v':
                                cooked += '\v'
                                break
                              default:
                                if (ch === '0') {
                                  if (
                                    character_1.Character.isDecimalDigit(
                                      this.source.charCodeAt(this.index)
                                    )
                                  ) {
                                    // Illegal: \01 \02 and so on
                                    this.throwUnexpectedToken(
                                      messages_1.Messages.TemplateOctalLiteral
                                    )
                                  }
                                  cooked += '\0'
                                } else if (
                                  character_1.Character.isOctalDigit(
                                    ch.charCodeAt(0)
                                  )
                                ) {
                                  // Illegal: \1 \2
                                  this.throwUnexpectedToken(
                                    messages_1.Messages.TemplateOctalLiteral
                                  )
                                } else {
                                  cooked += ch
                                }
                                break
                            }
                          } else {
                            ++this.lineNumber
                            if (
                              ch === '\r' &&
                              this.source[this.index] === '\n'
                            ) {
                              ++this.index
                            }
                            this.lineStart = this.index
                          }
                        } else if (
                          character_1.Character.isLineTerminator(
                            ch.charCodeAt(0)
                          )
                        ) {
                          ++this.lineNumber
                          if (ch === '\r' && this.source[this.index] === '\n') {
                            ++this.index
                          }
                          this.lineStart = this.index
                          cooked += '\n'
                        } else {
                          cooked += ch
                        }
                      }
                      if (!terminated) {
                        this.throwUnexpectedToken()
                      }
                      if (!head) {
                        this.curlyStack.pop()
                      }
                      return {
                        type: 10 /* Template */,
                        value: this.source.slice(
                          start + 1,
                          this.index - rawOffset
                        ),
                        cooked: cooked,
                        head: head,
                        tail: tail,
                        lineNumber: this.lineNumber,
                        lineStart: this.lineStart,
                        start: start,
                        end: this.index,
                      }
                    }
                    // https://tc39.github.io/ecma262/#sec-literals-regular-expression-literals
                    Scanner.prototype.testRegExp = function (pattern, flags) {
                      // The BMP character to use as a replacement for astral symbols when
                      // translating an ES6 "u"-flagged pattern to an ES5-compatible
                      // approximation.
                      // Note: replacing with '\uFFFF' enables false positives in unlikely
                      // scenarios. For example, `[\u{1044f}-\u{10440}]` is an invalid
                      // pattern that would not be detected by this substitution.
                      var astralSubstitute = '\uFFFF'
                      var tmp = pattern
                      var self = this
                      if (flags.indexOf('u') >= 0) {
                        tmp = tmp
                          .replace(
                            /\\u\{([0-9a-fA-F]+)\}|\\u([a-fA-F0-9]{4})/g,
                            function ($0, $1, $2) {
                              var codePoint = parseInt($1 || $2, 16)
                              if (codePoint > 0x10ffff) {
                                self.throwUnexpectedToken(
                                  messages_1.Messages.InvalidRegExp
                                )
                              }
                              if (codePoint <= 0xffff) {
                                return String.fromCharCode(codePoint)
                              }
                              return astralSubstitute
                            }
                          )
                          .replace(
                            /[\uD800-\uDBFF][\uDC00-\uDFFF]/g,
                            astralSubstitute
                          )
                      }
                      // First, detect invalid regular expressions.
                      try {
                        RegExp(tmp)
                      } catch (e) {
                        this.throwUnexpectedToken(
                          messages_1.Messages.InvalidRegExp
                        )
                      }
                      // Return a regular expression object for this pattern-flag pair, or
                      // `null` in case the current environment doesn't support the flags it
                      // uses.
                      try {
                        return new RegExp(pattern, flags)
                      } catch (exception) {
                        /* istanbul ignore next */
                        return null
                      }
                    }
                    Scanner.prototype.scanRegExpBody = function () {
                      var ch = this.source[this.index]
                      assert_1.assert(
                        ch === '/',
                        'Regular expression literal must start with a slash'
                      )
                      var str = this.source[this.index++]
                      var classMarker = false
                      var terminated = false
                      while (!this.eof()) {
                        ch = this.source[this.index++]
                        str += ch
                        if (ch === '\\') {
                          ch = this.source[this.index++]
                          // https://tc39.github.io/ecma262/#sec-literals-regular-expression-literals
                          if (
                            character_1.Character.isLineTerminator(
                              ch.charCodeAt(0)
                            )
                          ) {
                            this.throwUnexpectedToken(
                              messages_1.Messages.UnterminatedRegExp
                            )
                          }
                          str += ch
                        } else if (
                          character_1.Character.isLineTerminator(
                            ch.charCodeAt(0)
                          )
                        ) {
                          this.throwUnexpectedToken(
                            messages_1.Messages.UnterminatedRegExp
                          )
                        } else if (classMarker) {
                          if (ch === ']') {
                            classMarker = false
                          }
                        } else {
                          if (ch === '/') {
                            terminated = true
                            break
                          } else if (ch === '[') {
                            classMarker = true
                          }
                        }
                      }
                      if (!terminated) {
                        this.throwUnexpectedToken(
                          messages_1.Messages.UnterminatedRegExp
                        )
                      }
                      // Exclude leading and trailing slash.
                      return str.substr(1, str.length - 2)
                    }
                    Scanner.prototype.scanRegExpFlags = function () {
                      var str = ''
                      var flags = ''
                      while (!this.eof()) {
                        var ch = this.source[this.index]
                        if (
                          !character_1.Character.isIdentifierPart(
                            ch.charCodeAt(0)
                          )
                        ) {
                          break
                        }
                        ++this.index
                        if (ch === '\\' && !this.eof()) {
                          ch = this.source[this.index]
                          if (ch === 'u') {
                            ++this.index
                            var restore = this.index
                            var char = this.scanHexEscape('u')
                            if (char !== null) {
                              flags += char
                              for (
                                str += '\\u';
                                restore < this.index;
                                ++restore
                              ) {
                                str += this.source[restore]
                              }
                            } else {
                              this.index = restore
                              flags += 'u'
                              str += '\\u'
                            }
                            this.tolerateUnexpectedToken()
                          } else {
                            str += '\\'
                            this.tolerateUnexpectedToken()
                          }
                        } else {
                          flags += ch
                          str += ch
                        }
                      }
                      return flags
                    }
                    Scanner.prototype.scanRegExp = function () {
                      var start = this.index
                      var pattern = this.scanRegExpBody()
                      var flags = this.scanRegExpFlags()
                      var value = this.testRegExp(pattern, flags)
                      return {
                        type: 9 /* RegularExpression */,
                        value: '',
                        pattern: pattern,
                        flags: flags,
                        regex: value,
                        lineNumber: this.lineNumber,
                        lineStart: this.lineStart,
                        start: start,
                        end: this.index,
                      }
                    }
                    Scanner.prototype.lex = function () {
                      if (this.eof()) {
                        return {
                          type: 2 /* EOF */,
                          value: '',
                          lineNumber: this.lineNumber,
                          lineStart: this.lineStart,
                          start: this.index,
                          end: this.index,
                        }
                      }
                      var cp = this.source.charCodeAt(this.index)
                      if (character_1.Character.isIdentifierStart(cp)) {
                        return this.scanIdentifier()
                      }
                      // Very common: ( and ) and ;
                      if (cp === 0x28 || cp === 0x29 || cp === 0x3b) {
                        return this.scanPunctuator()
                      }
                      // String literal starts with single quote (U+0027) or double quote (U+0022).
                      if (cp === 0x27 || cp === 0x22) {
                        return this.scanStringLiteral()
                      }
                      // Dot (.) U+002E can also start a floating-point number, hence the need
                      // to check the next character.
                      if (cp === 0x2e) {
                        if (
                          character_1.Character.isDecimalDigit(
                            this.source.charCodeAt(this.index + 1)
                          )
                        ) {
                          return this.scanNumericLiteral()
                        }
                        return this.scanPunctuator()
                      }
                      if (character_1.Character.isDecimalDigit(cp)) {
                        return this.scanNumericLiteral()
                      }
                      // Template literals start with ` (U+0060) for template head
                      // or } (U+007D) for template middle or template tail.
                      if (
                        cp === 0x60 ||
                        (cp === 0x7d &&
                          this.curlyStack[this.curlyStack.length - 1] === '${')
                      ) {
                        return this.scanTemplate()
                      }
                      // Possible identifier start in a surrogate pair.
                      if (cp >= 0xd800 && cp < 0xdfff) {
                        if (
                          character_1.Character.isIdentifierStart(
                            this.codePointAt(this.index)
                          )
                        ) {
                          return this.scanIdentifier()
                        }
                      }
                      return this.scanPunctuator()
                    }
                    return Scanner
                  })()
                  exports.Scanner = Scanner

                  /***/
                },
                /* 13 */
                /***/ function (module, exports) {
                  'use strict'
                  Object.defineProperty(exports, '__esModule', { value: true })
                  exports.TokenName = {}
                  exports.TokenName[1 /* BooleanLiteral */] = 'Boolean'
                  exports.TokenName[2 /* EOF */] = '<end>'
                  exports.TokenName[3 /* Identifier */] = 'Identifier'
                  exports.TokenName[4 /* Keyword */] = 'Keyword'
                  exports.TokenName[5 /* NullLiteral */] = 'Null'
                  exports.TokenName[6 /* NumericLiteral */] = 'Numeric'
                  exports.TokenName[7 /* Punctuator */] = 'Punctuator'
                  exports.TokenName[8 /* StringLiteral */] = 'String'
                  exports.TokenName[9 /* RegularExpression */] =
                    'RegularExpression'
                  exports.TokenName[10 /* Template */] = 'Template'

                  /***/
                },
                /* 14 */
                /***/ function (module, exports) {
                  'use strict'
                  // Generated by generate-xhtml-entities.js. DO NOT MODIFY!
                  Object.defineProperty(exports, '__esModule', { value: true })
                  exports.XHTMLEntities = {
                    quot: '\u0022',
                    amp: '\u0026',
                    apos: '\u0027',
                    gt: '\u003E',
                    nbsp: '\u00A0',
                    iexcl: '\u00A1',
                    cent: '\u00A2',
                    pound: '\u00A3',
                    curren: '\u00A4',
                    yen: '\u00A5',
                    brvbar: '\u00A6',
                    sect: '\u00A7',
                    uml: '\u00A8',
                    copy: '\u00A9',
                    ordf: '\u00AA',
                    laquo: '\u00AB',
                    not: '\u00AC',
                    shy: '\u00AD',
                    reg: '\u00AE',
                    macr: '\u00AF',
                    deg: '\u00B0',
                    plusmn: '\u00B1',
                    sup2: '\u00B2',
                    sup3: '\u00B3',
                    acute: '\u00B4',
                    micro: '\u00B5',
                    para: '\u00B6',
                    middot: '\u00B7',
                    cedil: '\u00B8',
                    sup1: '\u00B9',
                    ordm: '\u00BA',
                    raquo: '\u00BB',
                    frac14: '\u00BC',
                    frac12: '\u00BD',
                    frac34: '\u00BE',
                    iquest: '\u00BF',
                    Agrave: '\u00C0',
                    Aacute: '\u00C1',
                    Acirc: '\u00C2',
                    Atilde: '\u00C3',
                    Auml: '\u00C4',
                    Aring: '\u00C5',
                    AElig: '\u00C6',
                    Ccedil: '\u00C7',
                    Egrave: '\u00C8',
                    Eacute: '\u00C9',
                    Ecirc: '\u00CA',
                    Euml: '\u00CB',
                    Igrave: '\u00CC',
                    Iacute: '\u00CD',
                    Icirc: '\u00CE',
                    Iuml: '\u00CF',
                    ETH: '\u00D0',
                    Ntilde: '\u00D1',
                    Ograve: '\u00D2',
                    Oacute: '\u00D3',
                    Ocirc: '\u00D4',
                    Otilde: '\u00D5',
                    Ouml: '\u00D6',
                    times: '\u00D7',
                    Oslash: '\u00D8',
                    Ugrave: '\u00D9',
                    Uacute: '\u00DA',
                    Ucirc: '\u00DB',
                    Uuml: '\u00DC',
                    Yacute: '\u00DD',
                    THORN: '\u00DE',
                    szlig: '\u00DF',
                    agrave: '\u00E0',
                    aacute: '\u00E1',
                    acirc: '\u00E2',
                    atilde: '\u00E3',
                    auml: '\u00E4',
                    aring: '\u00E5',
                    aelig: '\u00E6',
                    ccedil: '\u00E7',
                    egrave: '\u00E8',
                    eacute: '\u00E9',
                    ecirc: '\u00EA',
                    euml: '\u00EB',
                    igrave: '\u00EC',
                    iacute: '\u00ED',
                    icirc: '\u00EE',
                    iuml: '\u00EF',
                    eth: '\u00F0',
                    ntilde: '\u00F1',
                    ograve: '\u00F2',
                    oacute: '\u00F3',
                    ocirc: '\u00F4',
                    otilde: '\u00F5',
                    ouml: '\u00F6',
                    divide: '\u00F7',
                    oslash: '\u00F8',
                    ugrave: '\u00F9',
                    uacute: '\u00FA',
                    ucirc: '\u00FB',
                    uuml: '\u00FC',
                    yacute: '\u00FD',
                    thorn: '\u00FE',
                    yuml: '\u00FF',
                    OElig: '\u0152',
                    oelig: '\u0153',
                    Scaron: '\u0160',
                    scaron: '\u0161',
                    Yuml: '\u0178',
                    fnof: '\u0192',
                    circ: '\u02C6',
                    tilde: '\u02DC',
                    Alpha: '\u0391',
                    Beta: '\u0392',
                    Gamma: '\u0393',
                    Delta: '\u0394',
                    Epsilon: '\u0395',
                    Zeta: '\u0396',
                    Eta: '\u0397',
                    Theta: '\u0398',
                    Iota: '\u0399',
                    Kappa: '\u039A',
                    Lambda: '\u039B',
                    Mu: '\u039C',
                    Nu: '\u039D',
                    Xi: '\u039E',
                    Omicron: '\u039F',
                    Pi: '\u03A0',
                    Rho: '\u03A1',
                    Sigma: '\u03A3',
                    Tau: '\u03A4',
                    Upsilon: '\u03A5',
                    Phi: '\u03A6',
                    Chi: '\u03A7',
                    Psi: '\u03A8',
                    Omega: '\u03A9',
                    alpha: '\u03B1',
                    beta: '\u03B2',
                    gamma: '\u03B3',
                    delta: '\u03B4',
                    epsilon: '\u03B5',
                    zeta: '\u03B6',
                    eta: '\u03B7',
                    theta: '\u03B8',
                    iota: '\u03B9',
                    kappa: '\u03BA',
                    lambda: '\u03BB',
                    mu: '\u03BC',
                    nu: '\u03BD',
                    xi: '\u03BE',
                    omicron: '\u03BF',
                    pi: '\u03C0',
                    rho: '\u03C1',
                    sigmaf: '\u03C2',
                    sigma: '\u03C3',
                    tau: '\u03C4',
                    upsilon: '\u03C5',
                    phi: '\u03C6',
                    chi: '\u03C7',
                    psi: '\u03C8',
                    omega: '\u03C9',
                    thetasym: '\u03D1',
                    upsih: '\u03D2',
                    piv: '\u03D6',
                    ensp: '\u2002',
                    emsp: '\u2003',
                    thinsp: '\u2009',
                    zwnj: '\u200C',
                    zwj: '\u200D',
                    lrm: '\u200E',
                    rlm: '\u200F',
                    ndash: '\u2013',
                    mdash: '\u2014',
                    lsquo: '\u2018',
                    rsquo: '\u2019',
                    sbquo: '\u201A',
                    ldquo: '\u201C',
                    rdquo: '\u201D',
                    bdquo: '\u201E',
                    dagger: '\u2020',
                    Dagger: '\u2021',
                    bull: '\u2022',
                    hellip: '\u2026',
                    permil: '\u2030',
                    prime: '\u2032',
                    Prime: '\u2033',
                    lsaquo: '\u2039',
                    rsaquo: '\u203A',
                    oline: '\u203E',
                    frasl: '\u2044',
                    euro: '\u20AC',
                    image: '\u2111',
                    weierp: '\u2118',
                    real: '\u211C',
                    trade: '\u2122',
                    alefsym: '\u2135',
                    larr: '\u2190',
                    uarr: '\u2191',
                    rarr: '\u2192',
                    darr: '\u2193',
                    harr: '\u2194',
                    crarr: '\u21B5',
                    lArr: '\u21D0',
                    uArr: '\u21D1',
                    rArr: '\u21D2',
                    dArr: '\u21D3',
                    hArr: '\u21D4',
                    forall: '\u2200',
                    part: '\u2202',
                    exist: '\u2203',
                    empty: '\u2205',
                    nabla: '\u2207',
                    isin: '\u2208',
                    notin: '\u2209',
                    ni: '\u220B',
                    prod: '\u220F',
                    sum: '\u2211',
                    minus: '\u2212',
                    lowast: '\u2217',
                    radic: '\u221A',
                    prop: '\u221D',
                    infin: '\u221E',
                    ang: '\u2220',
                    and: '\u2227',
                    or: '\u2228',
                    cap: '\u2229',
                    cup: '\u222A',
                    int: '\u222B',
                    there4: '\u2234',
                    sim: '\u223C',
                    cong: '\u2245',
                    asymp: '\u2248',
                    ne: '\u2260',
                    equiv: '\u2261',
                    le: '\u2264',
                    ge: '\u2265',
                    sub: '\u2282',
                    sup: '\u2283',
                    nsub: '\u2284',
                    sube: '\u2286',
                    supe: '\u2287',
                    oplus: '\u2295',
                    otimes: '\u2297',
                    perp: '\u22A5',
                    sdot: '\u22C5',
                    lceil: '\u2308',
                    rceil: '\u2309',
                    lfloor: '\u230A',
                    rfloor: '\u230B',
                    loz: '\u25CA',
                    spades: '\u2660',
                    clubs: '\u2663',
                    hearts: '\u2665',
                    diams: '\u2666',
                    lang: '\u27E8',
                    rang: '\u27E9',
                  }

                  /***/
                },
                /* 15 */
                /***/ function (module, exports, __webpack_require__) {
                  'use strict'
                  Object.defineProperty(exports, '__esModule', { value: true })
                  var error_handler_1 = __webpack_require__(10)
                  var scanner_1 = __webpack_require__(12)
                  var token_1 = __webpack_require__(13)
                  var Reader = (function () {
                    function Reader() {
                      this.values = []
                      this.curly = this.paren = -1
                    }
                    // A function following one of those tokens is an expression.
                    Reader.prototype.beforeFunctionExpression = function (t) {
                      return (
                        [
                          '(',
                          '{',
                          '[',
                          'in',
                          'typeof',
                          'instanceof',
                          'new',
                          'return',
                          'case',
                          'delete',
                          'throw',
                          'void',
                          // assignment operators
                          '=',
                          '+=',
                          '-=',
                          '*=',
                          '**=',
                          '/=',
                          '%=',
                          '<<=',
                          '>>=',
                          '>>>=',
                          '&=',
                          '|=',
                          '^=',
                          ',',
                          // binary/unary operators
                          '+',
                          '-',
                          '*',
                          '**',
                          '/',
                          '%',
                          '++',
                          '--',
                          '<<',
                          '>>',
                          '>>>',
                          '&',
                          '|',
                          '^',
                          '!',
                          '~',
                          '&&',
                          '||',
                          '?',
                          ':',
                          '===',
                          '==',
                          '>=',
                          '<=',
                          '<',
                          '>',
                          '!=',
                          '!==',
                        ].indexOf(t) >= 0
                      )
                    }
                    // Determine if forward slash (/) is an operator or part of a regular expression
                    // https://github.com/mozilla/sweet.js/wiki/design
                    Reader.prototype.isRegexStart = function () {
                      var previous = this.values[this.values.length - 1]
                      var regex = previous !== null
                      switch (previous) {
                        case 'this':
                        case ']':
                          regex = false
                          break
                        case ')':
                          var keyword = this.values[this.paren - 1]
                          regex =
                            keyword === 'if' ||
                            keyword === 'while' ||
                            keyword === 'for' ||
                            keyword === 'with'
                          break
                        case '}':
                          // Dividing a function by anything makes little sense,
                          // but we have to check for that.
                          regex = false
                          if (this.values[this.curly - 3] === 'function') {
                            // Anonymous function, e.g. function(){} /42
                            var check = this.values[this.curly - 4]
                            regex = check
                              ? !this.beforeFunctionExpression(check)
                              : false
                          } else if (
                            this.values[this.curly - 4] === 'function'
                          ) {
                            // Named function, e.g. function f(){} /42/
                            var check = this.values[this.curly - 5]
                            regex = check
                              ? !this.beforeFunctionExpression(check)
                              : true
                          }
                          break
                        default:
                          break
                      }
                      return regex
                    }
                    Reader.prototype.push = function (token) {
                      if (
                        token.type === 7 /* Punctuator */ ||
                        token.type === 4 /* Keyword */
                      ) {
                        if (token.value === '{') {
                          this.curly = this.values.length
                        } else if (token.value === '(') {
                          this.paren = this.values.length
                        }
                        this.values.push(token.value)
                      } else {
                        this.values.push(null)
                      }
                    }
                    return Reader
                  })()
                  var Tokenizer = (function () {
                    function Tokenizer(code, config) {
                      this.errorHandler = new error_handler_1.ErrorHandler()
                      this.errorHandler.tolerant = config
                        ? typeof config.tolerant === 'boolean' &&
                          config.tolerant
                        : false
                      this.scanner = new scanner_1.Scanner(
                        code,
                        this.errorHandler
                      )
                      this.scanner.trackComment = config
                        ? typeof config.comment === 'boolean' && config.comment
                        : false
                      this.trackRange = config
                        ? typeof config.range === 'boolean' && config.range
                        : false
                      this.trackLoc = config
                        ? typeof config.loc === 'boolean' && config.loc
                        : false
                      this.buffer = []
                      this.reader = new Reader()
                    }
                    Tokenizer.prototype.errors = function () {
                      return this.errorHandler.errors
                    }
                    Tokenizer.prototype.getNextToken = function () {
                      if (this.buffer.length === 0) {
                        var comments = this.scanner.scanComments()
                        if (this.scanner.trackComment) {
                          for (var i = 0; i < comments.length; ++i) {
                            var e = comments[i]
                            var value = this.scanner.source.slice(
                              e.slice[0],
                              e.slice[1]
                            )
                            var comment = {
                              type: e.multiLine
                                ? 'BlockComment'
                                : 'LineComment',
                              value: value,
                            }
                            if (this.trackRange) {
                              comment.range = e.range
                            }
                            if (this.trackLoc) {
                              comment.loc = e.loc
                            }
                            this.buffer.push(comment)
                          }
                        }
                        if (!this.scanner.eof()) {
                          var loc = void 0
                          if (this.trackLoc) {
                            loc = {
                              start: {
                                line: this.scanner.lineNumber,
                                column:
                                  this.scanner.index - this.scanner.lineStart,
                              },
                              end: {},
                            }
                          }
                          var startRegex =
                            this.scanner.source[this.scanner.index] === '/' &&
                            this.reader.isRegexStart()
                          var token = startRegex
                            ? this.scanner.scanRegExp()
                            : this.scanner.lex()
                          this.reader.push(token)
                          var entry = {
                            type: token_1.TokenName[token.type],
                            value: this.scanner.source.slice(
                              token.start,
                              token.end
                            ),
                          }
                          if (this.trackRange) {
                            entry.range = [token.start, token.end]
                          }
                          if (this.trackLoc) {
                            loc.end = {
                              line: this.scanner.lineNumber,
                              column:
                                this.scanner.index - this.scanner.lineStart,
                            }
                            entry.loc = loc
                          }
                          if (token.type === 9 /* RegularExpression */) {
                            var pattern = token.pattern
                            var flags = token.flags
                            entry.regex = { pattern: pattern, flags: flags }
                          }
                          this.buffer.push(entry)
                        }
                      }
                      return this.buffer.shift()
                    }
                    return Tokenizer
                  })()
                  exports.Tokenizer = Tokenizer

                  /***/
                },
                /******/
              ]
            )
          })
        },
        {},
      ],
      15: [
        function (require, module, exports) {
          ;(function () {
            'use strict'
            /* global define */

            var esprima
            var exportFn
            var toString = Object.prototype.toString

            if (
              typeof module === 'object' &&
              typeof module.exports === 'object' &&
              typeof require === 'function'
            ) {
              // server side
              esprima = require('esprima')
              exportFn = function (redeyed) {
                module.exports = redeyed
              }
              bootstrap(esprima, exportFn)
            } else if (typeof define === 'function' && define.amd) {
              // client side
              // amd
              define(['esprima'], function (esprima) {
                return bootstrap(esprima)
              })
            } else if (typeof window === 'object') {
              // no amd -> attach to window if it exists
              // Note that this requires 'esprima' to be defined on the window, so that script has to be loaded first
              window.redeyed = bootstrap(window.esprima)
            }

            function bootstrap(esprima, exportFn) {
              function isFunction(obj) {
                return toString.call(obj) === '[object Function]'
              }

              function isString(obj) {
                return toString.call(obj) === '[object String]'
              }

              function isObject(obj) {
                return toString.call(obj) === '[object Object]'
              }

              function surroundWith(before, after) {
                return function (s) {
                  return before + s + after
                }
              }

              function isNonCircular(key) {
                return key !== '_parent'
              }

              function objectizeString(value) {
                var vals = value.split(':')

                if (vals.length === 0 || vals.length > 2) {
                  throw new Error(
                    'illegal string config: ' +
                      value +
                      '\nShould be of format "before:after"'
                  )
                }

                if (vals.length === 1 || vals[1].length === 0) {
                  return vals.indexOf(':') < 0
                    ? { _before: vals[0] }
                    : { _after: vals[0] }
                } else {
                  return { _before: vals[0], _after: vals[1] }
                }
              }

              function objectize(node) {
                // Converts 'bef:aft' to { _before: bef, _after: aft }
                // and resolves undefined before/after from parent or root

                function resolve(value, key) {
                  // resolve before/after from root or parent if it isn't present on the current node
                  if (!value._parent) return undefined

                  // Immediate parent
                  if (value._parent._default && value._parent._default[key])
                    return value._parent._default[key]

                  // Root
                  var root = value._parent._parent
                  if (!root) return undefined

                  return root._default ? root._default[key] : undefined
                }

                function process(key) {
                  var value = node[key]

                  if (!value) return
                  if (isFunction(value)) return

                  // normalize all strings to objects
                  if (isString(value)) {
                    node[key] = value = objectizeString(value)
                  }

                  value._parent = node
                  if (isObject(value)) {
                    if (!value._before && !value._after) return objectize(value)

                    // resolve missing _before or _after from parent(s)
                    // in case we only have either one on this node
                    value._before = value._before || resolve(value, '_before')
                    value._after = value._after || resolve(value, '_after')

                    return
                  }

                  throw new Error(
                    'nodes need to be either {String}, {Object} or {Function}.' +
                      value +
                      ' is neither.'
                  )
                }

                // Process _default ones first so children can resolve missing before/after from them
                if (node._default) process('_default')

                Object.keys(node)
                  .filter(function (key) {
                    return (
                      isNonCircular(key) &&
                      node.hasOwnProperty(key) &&
                      key !== '_before' &&
                      key !== '_after' &&
                      key !== '_default'
                    )
                  })
                  .forEach(process)
              }

              function functionize(node) {
                Object.keys(node)
                  .filter(function (key) {
                    return isNonCircular(key) && node.hasOwnProperty(key)
                  })
                  .forEach(function (key) {
                    var value = node[key]

                    if (isFunction(value)) return

                    if (isObject(value)) {
                      if (!value._before && !value._after)
                        return functionize(value)

                      // at this point before/after were "inherited" from the parent or root
                      // (see objectize)
                      var before = value._before || ''
                      var after = value._after || ''

                      node[key] = surroundWith(before, after)
                      return node[key]
                    }
                  })
              }

              function normalize(root) {
                objectize(root)
                functionize(root)
              }

              function mergeTokensAndComments(tokens, comments) {
                var all = {}

                function addToAllByRangeStart(t) {
                  all[t.range[0]] = t
                }

                tokens.forEach(addToAllByRangeStart)
                comments.forEach(addToAllByRangeStart)

                // keys are sorted automatically
                return Object.keys(all).map(function (k) {
                  return all[k]
                })
              }

              function redeyed(code, config, opts) {
                opts = opts || {}
                var parser = opts.parser || esprima
                var jsx = !!opts.jsx
                // tokenizer doesn't support JSX at this point (esprima@4.0.0)
                // therefore we need to generate the AST via the parser not only to
                // avoid the tokenizer from erroring but also to get JSXIdentifier tokens
                var buildAst = jsx || !!opts.buildAst

                var hashbang = ''
                var ast
                var tokens
                var comments
                var lastSplitEnd = 0
                var splits = []
                var transformedCode
                var all
                var info

                // Replace hashbang line with empty whitespaces to preserve token locations
                if (code[0] === '#' && code[1] === '!') {
                  hashbang = code.substr(0, code.indexOf('\n') + 1)
                  code =
                    Array.apply(0, Array(hashbang.length)).join(' ') +
                    '\n' +
                    code.substr(hashbang.length)
                }

                if (buildAst) {
                  ast = parser.parse(code, {
                    tokens: true,
                    comment: true,
                    range: true,
                    loc: true,
                    tolerant: true,
                    jsx: true,
                  })
                  tokens = ast.tokens
                  comments = ast.comments
                } else {
                  tokens = []
                  comments = []
                  parser.tokenize(
                    code,
                    { range: true, loc: true, comment: true },
                    function (token) {
                      if (token.type === 'LineComment') {
                        token.type = 'Line'
                        comments.push(token)
                      } else if (token.type === 'BlockComment') {
                        token.type = 'Block'
                        comments.push(token)
                      } else {
                        // Optimistically upgrade 'static' to a keyword
                        if (
                          token.type === 'Identifier' &&
                          token.value === 'static'
                        )
                          token.type = 'Keyword'
                        tokens.push(token)
                      }
                    }
                  )
                }
                normalize(config)

                function tokenIndex(tokens, tkn, start) {
                  var current
                  var rangeStart = tkn.range[0]

                  for (current = start; current < tokens.length; current++) {
                    if (tokens[current].range[0] === rangeStart) return current
                  }

                  throw new Error(
                    'Token %s not found at or after index: %d',
                    tkn,
                    start
                  )
                }

                function process(surround) {
                  var result
                  var currentIndex
                  var nextIndex
                  var skip = 0
                  var splitEnd

                  result = surround(code.slice(start, end), info)
                  if (isObject(result)) {
                    splits.push(result.replacement)

                    currentIndex = info.tokenIndex
                    nextIndex = tokenIndex(
                      info.tokens,
                      result.skipPastToken,
                      currentIndex
                    )
                    skip = nextIndex - currentIndex
                    splitEnd = skip > 0 ? tokens[nextIndex - 1].range[1] : end
                  } else {
                    splits.push(result)
                    splitEnd = end
                  }

                  return { skip: skip, splitEnd: splitEnd }
                }

                function addSplit(start, end, surround, info) {
                  var result
                  var skip = 0

                  if (start >= end) return
                  if (surround) {
                    result = process(surround)
                    skip = result.skip
                    lastSplitEnd = result.splitEnd
                  } else {
                    splits.push(code.slice(start, end))
                    lastSplitEnd = end
                  }

                  return skip
                }

                all = mergeTokensAndComments(tokens, comments)
                for (var tokenIdx = 0; tokenIdx < all.length; tokenIdx++) {
                  var token = all[tokenIdx]
                  var surroundForType = config[token.type]
                  var surround
                  var start
                  var end

                  // At least the type (e.g., 'Keyword') needs to be specified for the token to be surrounded
                  if (surroundForType) {
                    // root defaults are only taken into account while resolving before/after otherwise
                    // a root default would apply to everything, even if no type default was specified
                    surround =
                      surroundForType &&
                      surroundForType.hasOwnProperty(token.value) &&
                      surroundForType[token.value] &&
                      isFunction(surroundForType[token.value])
                        ? surroundForType[token.value]
                        : surroundForType._default

                    start = token.range[0]
                    end = token.range[1]

                    addSplit(lastSplitEnd, start)
                    info = {
                      tokenIndex: tokenIdx,
                      tokens: all,
                      ast: ast,
                      code: code,
                    }
                    tokenIdx += addSplit(start, end, surround, info)
                  }
                }

                if (lastSplitEnd < code.length) {
                  addSplit(lastSplitEnd, code.length)
                }

                if (!opts.nojoin) {
                  transformedCode = splits.join('')
                  if (hashbang.length > 0) {
                    transformedCode =
                      hashbang + transformedCode.substr(hashbang.length)
                  }
                }

                return {
                  ast: ast,
                  tokens: tokens,
                  comments: comments,
                  splits: splits,
                  code: transformedCode,
                }
              }

              return exportFn ? exportFn(redeyed) : redeyed
            }
          })()
        },
        { esprima: 14 },
      ],
      16: [
        function (require, module, exports) {
          ;(function (__dirname) {
            'use strict'

            /**
             * @name peacock.defaultTheme
             * @returns {Object} the default peacock theme used to highlight code
             */
            var defaultTheme = require('./themes/default')

            /**
             * @name peacock.spans
             * @returns {Object} the default peacock spans used to wrap code tokens
             */
            var spans = require('./spans')
            /**
             * @name peacock.classes
             * @returns {Object} the default peacock classes used to highlight code
             */
            var classes = spans.classes

            var redeyed = require('redeyed')
            var path = require('path')

            function isPath(s) {
              return /[/\\]/.test(s)
            }

            function resolveTheme(t) {
              var mdlPath = isPath(t) ? t : path.join(__dirname, 'themes', t)
              try {
                return require(mdlPath)
              } catch (e) {
                console.error(e)
                console.warn(
                  "Couldn't resolve requested theme, using default theme instead"
                )
                return undefined
              }
            }

            /**
             * Highlights the proviced code or throws an error if it was not able to parse it.
             *
             * @name peacock.highlight
             * @param {String} code to highlight
             * @param {Object} $0 options
             * @param {Object|String} [$0.theme = peacock.defaultTheme] to use when highlighting [empty sample](https://github.com/thlorenz/peacock/blob/master/themes/empty.js)
             * @param {Boolean} [$0.linenos = false] if `true` line numbers will be included
             * @param {Boolean} [$0.jsx = true] if `true` peacock will support `jsx` syntax (which makes highlighting a tad bit slower)
             * @returns {String} the HTML with containing the highlighted code
             */
            function highlight(code, opts) {
              var toString = Object.prototype.toString
              var theme
              var highlightedCode

              function createLinenos(highlightedCode) {
                var linesLen = highlightedCode.split('\n').length
                var lines = []
                var totalDigits

                function getDigits(n) {
                  if (n < 10) return 1
                  if (n < 100) return 2
                  if (n < 1000) return 3
                  if (n < 10000) return 4
                  // this works for up to 99,999 lines - any questions?
                  return 5
                }

                function pad(n, totalDigits) {
                  // not pretty, but simple and should perform quite well
                  var padDigits = totalDigits - getDigits(n)
                  switch (padDigits) {
                    case 0:
                      return '' + n
                    case 1:
                      return ' ' + n
                    case 2:
                      return '  ' + n
                    case 3:
                      return '   ' + n
                    case 4:
                      return '    ' + n
                    case 5:
                      return '     ' + n
                  }
                }

                function linenoHtml(lineno, totalDigits) {
                  return [
                    '<span class="lineno">',
                    pad(lineno, totalDigits),
                    '</span>',
                  ].join('')
                }

                totalDigits = getDigits(linesLen)

                for (var i = 1; i <= linesLen; i++) {
                  lines.push(linenoHtml(i, totalDigits))
                }

                return lines.join('\n')
              }

              opts = opts || {}
              var jsx =
                typeof opts === 'string' ||
                typeof opts.jsx === 'undefined' ||
                !!opts.jsx

              function isObject(obj) {
                return toString.call(obj) === '[object Object]'
              }

              if (opts.theme) {
                theme = isObject(opts.theme)
                  ? opts.theme
                  : resolveTheme(opts.theme)
              } else {
                theme = defaultTheme
              }

              highlightedCode = redeyed(code, theme, { jsx: jsx }).code

              // Wrap highlighted code inside two column table with lineno column
              if (opts.linenos) {
                highlightedCode = [
                  '<table>',
                  '<td>',
                  createLinenos(highlightedCode),
                  '</td>',
                  '<td>',
                  highlightedCode,
                  '</td>',
                  '</table>',
                ].join('\n')
              }

              return [
                '<div class="highlight"><pre>',
                highlightedCode,
                '</pre></div>',
              ].join('\n')
            }

            module.exports = {
              highlight: highlight,
              defaultTheme: defaultTheme,
              spans: spans,
              classes: classes,
            }
          }.call(this, '/node_modules/peacock'))
        },
        { './spans': 17, './themes/default': 18, path: 12, redeyed: 15 },
      ],
      17: [
        function (require, module, exports) {
          'use strict'

          var classes = {
            String: 's',
            Number: 'f',

            Keyword: 'k',
            'Keyword.Constant': 'kc',
            'Keyword.Declaration': 'kd',
            'Keyword.Namespace': 'kn',
            'Keyword.Pseudo': 'kp',
            'Keyword.Reserved': 'kr',
            'Keyword.Type': 'kt',

            Name: 'n',
            'Name.Attribute': 'na',
            'Name.Builtin': 'nb',
            'Name.Builtin.Pseudo': 'bp',
            'Name.Class': 'nc',
            'Name.Constant': 'no',
            'Name.Decorator': 'nd',
            'Name.Entity': 'ni',
            'Name.Exception': 'ne',
            'Name.Function': 'nf',
            'Name.Property': 'py',
            'Name.Label': 'nl',
            'Name.Namespace': 'nn',
            'Name.Other': 'nx',
            'Name.Tag': 'nt',
            'Name.Variable': 'nv',
            'Name.Variable.Class': 'vc',
            'Name.Variable.Global': 'vg',
            'Name.Variable.Instance': 'vi',

            Literal: 'l',
            'Literal.Date': 'ld',

            Operator: 'o',
            Punctuation: 'p',

            Comment: 'c',
            'Comment.Multiline': 'cm',
            'Comment.Preproc': 'cp',
            'Comment.Single': 'c1',
            'Comment.Special': 'cs',

            Generic: 'g',
            'Generic.Deleted': 'gd',
            'Generic.Emph': 'ge',
            'Generic.Error': 'gr',
            'Generic.Heading': 'gh',
            'Generic.Inserted': 'gi',
            'Generic.Output': 'go',
            'Generic.Prompt': 'gp',
            'Generic.Strong': 'gs',
            'Generic.Subheading': 'gu',
            'Generic.Traceback': 'gt',
          }
          var spans = {}

          function escapeHtml(s) {
            return s
              .replace(/&/g, '&amp;')
              .replace(/</g, '&lt;')
              .replace(/>/g, '&gt;')
          }

          function wrap(clazz) {
            return function escapeAndWrap(s) {
              return [
                '<span class="',
                clazz,
                '">',
                escapeHtml(s),
                '</span>',
              ].join('')
            }
          }

          Object.keys(classes).forEach(function (k) {
            spans[k] = wrap(classes[k])
          })

          module.exports = spans
          module.exports.classes = classes
        },
        {},
      ],
      18: [
        function (require, module, exports) {
          var spans = require('../spans')

          module.exports = {
            Boolean: {
              true: undefined,
              false: undefined,
              _default: spans['Keyword.Constant'],
            },

            Identifier: {
              Date: spans['Literal.Date'],
              Error: spans['Generic.Error'],
              _default: spans.Name.Other,
            },

            Null: {
              _default: spans['Keyword.Constant'],
            },

            Numeric: {
              _default: spans.Number,
            },

            String: {
              _default: spans.String,
            },

            Keyword: {
              break: undefined,

              case: undefined,
              catch: undefined,
              class: undefined,
              const: undefined,
              continue: undefined,

              debugger: undefined,
              default: undefined,
              delete: undefined,
              do: undefined,

              else: undefined,
              enum: undefined,
              export: undefined,
              extends: undefined,

              finally: undefined,
              for: undefined,
              function: undefined,

              if: undefined,
              implements: undefined,
              import: undefined,
              in: undefined,
              instanceof: undefined,

              new: undefined,

              package: undefined,
              private: undefined,
              protected: undefined,
              public: undefined,

              return: undefined,

              static: undefined,
              super: undefined,
              switch: undefined,

              this: undefined,
              throw: undefined,
              try: undefined,
              typeof: undefined,

              var: undefined,
              void: undefined,

              while: undefined,
              with: undefined,
              yield: undefined,
              _default: spans.Keyword,
            },
            Punctuator: {
              ';': spans.Punctuation,
              '.': spans.Punctuation,
              ',': spans.Punctuation,

              '{': spans.Punctuation,
              '}': spans.Punctuation,
              '(': spans.Punctuation,
              ')': spans.Punctuation,
              '[': spans.Punctuation,
              ']': spans.Punctuation,

              '<': undefined,
              '>': undefined,
              '+': undefined,
              '-': undefined,
              '*': undefined,
              '%': undefined,
              '&': undefined,
              '|': undefined,
              '^': undefined,
              '!': undefined,
              '~': undefined,
              '?': undefined,
              ':': undefined,
              '=': undefined,

              '<=': undefined,
              '>=': undefined,
              '==': undefined,
              '!=': undefined,
              '++': undefined,
              '--': undefined,
              '<<': undefined,
              '>>': undefined,
              '&&': undefined,
              '||': undefined,
              '+=': undefined,
              '-=': undefined,
              '*=': undefined,
              '%=': undefined,
              '&=': undefined,
              '|=': undefined,
              '^=': undefined,
              '/=': undefined,
              '=>': undefined,
              '**': undefined,

              '===': undefined,
              '!==': undefined,
              '>>>': undefined,
              '<<=': undefined,
              '>>=': undefined,
              '>>>=': undefined,
              '...': undefined,
              '**=': undefined,

              _default: spans.Operator,
            },
            Line: {
              _default: spans['Comment.Single'],
            },

            Block: {
              _default: spans.Comment,
            },

            // JSX
            JSXAttribute: {
              _default: undefined,
            },
            JSXClosingElement: {
              _default: undefined,
            },
            JSXElement: {
              _default: undefined,
            },
            JSXEmptyExpression: {
              _default: undefined,
            },
            JSXExpressionContainer: {
              _default: undefined,
            },
            JSXIdentifier: {
              // many more identifies are possible, div, table, etc.
              className: spans['Name.Class'],
              _default: spans['Name.Tag'],
            },
            JSXMemberExpression: {
              _default: undefined,
            },
            JSXNamespacedName: {
              _default: undefined,
            },
            JSXOpeningElement: {
              _default: undefined,
            },
            JSXSpreadAttribute: {
              _default: undefined,
            },
            JSXText: {
              _default: undefined,
            },

            _default: undefined,
          }
        },
        { '../spans': 17 },
      ],
      19: [
        function (require, module, exports) {
          'use strict'

          var replace = String.prototype.replace
          var percentTwenties = /%20/g

          module.exports = {
            default: 'RFC3986',
            formatters: {
              RFC1738: function (value) {
                return replace.call(value, percentTwenties, '+')
              },
              RFC3986: function (value) {
                return value
              },
            },
            RFC1738: 'RFC1738',
            RFC3986: 'RFC3986',
          }
        },
        {},
      ],
      20: [
        function (require, module, exports) {
          'use strict'

          var stringify = require('./stringify')
          var parse = require('./parse')
          var formats = require('./formats')

          module.exports = {
            formats: formats,
            parse: parse,
            stringify: stringify,
          }
        },
        { './formats': 19, './parse': 21, './stringify': 22 },
      ],
      21: [
        function (require, module, exports) {
          'use strict'

          var utils = require('./utils')

          var has = Object.prototype.hasOwnProperty

          var defaults = {
            allowDots: false,
            allowPrototypes: false,
            arrayLimit: 20,
            decoder: utils.decode,
            delimiter: '&',
            depth: 5,
            parameterLimit: 1000,
            plainObjects: false,
            strictNullHandling: false,
          }

          var parseValues = function parseQueryStringValues(str, options) {
            var obj = {}
            var cleanStr = options.ignoreQueryPrefix
              ? str.replace(/^\?/, '')
              : str
            var limit =
              options.parameterLimit === Infinity
                ? undefined
                : options.parameterLimit
            var parts = cleanStr.split(options.delimiter, limit)

            for (var i = 0; i < parts.length; ++i) {
              var part = parts[i]

              var bracketEqualsPos = part.indexOf(']=')
              var pos =
                bracketEqualsPos === -1
                  ? part.indexOf('=')
                  : bracketEqualsPos + 1

              var key, val
              if (pos === -1) {
                key = options.decoder(part, defaults.decoder)
                val = options.strictNullHandling ? null : ''
              } else {
                key = options.decoder(part.slice(0, pos), defaults.decoder)
                val = options.decoder(part.slice(pos + 1), defaults.decoder)
              }
              if (has.call(obj, key)) {
                obj[key] = [].concat(obj[key]).concat(val)
              } else {
                obj[key] = val
              }
            }

            return obj
          }

          var parseObject = function (chain, val, options) {
            var leaf = val

            for (var i = chain.length - 1; i >= 0; --i) {
              var obj
              var root = chain[i]

              if (root === '[]') {
                obj = []
                obj = obj.concat(leaf)
              } else {
                obj = options.plainObjects ? Object.create(null) : {}
                var cleanRoot =
                  root.charAt(0) === '[' && root.charAt(root.length - 1) === ']'
                    ? root.slice(1, -1)
                    : root
                var index = parseInt(cleanRoot, 10)
                if (
                  !isNaN(index) &&
                  root !== cleanRoot &&
                  String(index) === cleanRoot &&
                  index >= 0 &&
                  options.parseArrays &&
                  index <= options.arrayLimit
                ) {
                  obj = []
                  obj[index] = leaf
                } else {
                  obj[cleanRoot] = leaf
                }
              }

              leaf = obj
            }

            return leaf
          }

          var parseKeys = function parseQueryStringKeys(
            givenKey,
            val,
            options
          ) {
            if (!givenKey) {
              return
            }

            // Transform dot notation to bracket notation
            var key = options.allowDots
              ? givenKey.replace(/\.([^.[]+)/g, '[$1]')
              : givenKey

            // The regex chunks

            var brackets = /(\[[^[\]]*])/
            var child = /(\[[^[\]]*])/g

            // Get the parent

            var segment = brackets.exec(key)
            var parent = segment ? key.slice(0, segment.index) : key

            // Stash the parent if it exists

            var keys = []
            if (parent) {
              // If we aren't using plain objects, optionally prefix keys
              // that would overwrite object prototype properties
              if (!options.plainObjects && has.call(Object.prototype, parent)) {
                if (!options.allowPrototypes) {
                  return
                }
              }

              keys.push(parent)
            }

            // Loop through children appending to the array until we hit depth

            var i = 0
            while ((segment = child.exec(key)) !== null && i < options.depth) {
              i += 1
              if (
                !options.plainObjects &&
                has.call(Object.prototype, segment[1].slice(1, -1))
              ) {
                if (!options.allowPrototypes) {
                  return
                }
              }
              keys.push(segment[1])
            }

            // If there's a remainder, just add whatever is left

            if (segment) {
              keys.push('[' + key.slice(segment.index) + ']')
            }

            return parseObject(keys, val, options)
          }

          module.exports = function (str, opts) {
            var options = opts ? utils.assign({}, opts) : {}

            if (
              options.decoder !== null &&
              options.decoder !== undefined &&
              typeof options.decoder !== 'function'
            ) {
              throw new TypeError('Decoder has to be a function.')
            }

            options.ignoreQueryPrefix = options.ignoreQueryPrefix === true
            options.delimiter =
              typeof options.delimiter === 'string' ||
              utils.isRegExp(options.delimiter)
                ? options.delimiter
                : defaults.delimiter
            options.depth =
              typeof options.depth === 'number' ? options.depth : defaults.depth
            options.arrayLimit =
              typeof options.arrayLimit === 'number'
                ? options.arrayLimit
                : defaults.arrayLimit
            options.parseArrays = options.parseArrays !== false
            options.decoder =
              typeof options.decoder === 'function'
                ? options.decoder
                : defaults.decoder
            options.allowDots =
              typeof options.allowDots === 'boolean'
                ? options.allowDots
                : defaults.allowDots
            options.plainObjects =
              typeof options.plainObjects === 'boolean'
                ? options.plainObjects
                : defaults.plainObjects
            options.allowPrototypes =
              typeof options.allowPrototypes === 'boolean'
                ? options.allowPrototypes
                : defaults.allowPrototypes
            options.parameterLimit =
              typeof options.parameterLimit === 'number'
                ? options.parameterLimit
                : defaults.parameterLimit
            options.strictNullHandling =
              typeof options.strictNullHandling === 'boolean'
                ? options.strictNullHandling
                : defaults.strictNullHandling

            if (str === '' || str === null || typeof str === 'undefined') {
              return options.plainObjects ? Object.create(null) : {}
            }

            var tempObj =
              typeof str === 'string' ? parseValues(str, options) : str
            var obj = options.plainObjects ? Object.create(null) : {}

            // Iterate over the keys and setup the new object

            var keys = Object.keys(tempObj)
            for (var i = 0; i < keys.length; ++i) {
              var key = keys[i]
              var newObj = parseKeys(key, tempObj[key], options)
              obj = utils.merge(obj, newObj, options)
            }

            return utils.compact(obj)
          }
        },
        { './utils': 23 },
      ],
      22: [
        function (require, module, exports) {
          'use strict'

          var utils = require('./utils')
          var formats = require('./formats')

          var arrayPrefixGenerators = {
            brackets: function brackets(prefix) {
              // eslint-disable-line func-name-matching
              return prefix + '[]'
            },
            indices: function indices(prefix, key) {
              // eslint-disable-line func-name-matching
              return prefix + '[' + key + ']'
            },
            repeat: function repeat(prefix) {
              // eslint-disable-line func-name-matching
              return prefix
            },
          }

          var toISO = Date.prototype.toISOString

          var defaults = {
            delimiter: '&',
            encode: true,
            encoder: utils.encode,
            encodeValuesOnly: false,
            serializeDate: function serializeDate(date) {
              // eslint-disable-line func-name-matching
              return toISO.call(date)
            },
            skipNulls: false,
            strictNullHandling: false,
          }

          var stringify = function stringify( // eslint-disable-line func-name-matching
            object,
            prefix,
            generateArrayPrefix,
            strictNullHandling,
            skipNulls,
            encoder,
            filter,
            sort,
            allowDots,
            serializeDate,
            formatter,
            encodeValuesOnly
          ) {
            var obj = object
            if (typeof filter === 'function') {
              obj = filter(prefix, obj)
            } else if (obj instanceof Date) {
              obj = serializeDate(obj)
            } else if (obj === null) {
              if (strictNullHandling) {
                return encoder && !encodeValuesOnly
                  ? encoder(prefix, defaults.encoder)
                  : prefix
              }

              obj = ''
            }

            if (
              typeof obj === 'string' ||
              typeof obj === 'number' ||
              typeof obj === 'boolean' ||
              utils.isBuffer(obj)
            ) {
              if (encoder) {
                var keyValue = encodeValuesOnly
                  ? prefix
                  : encoder(prefix, defaults.encoder)
                return [
                  formatter(keyValue) +
                    '=' +
                    formatter(encoder(obj, defaults.encoder)),
                ]
              }
              return [formatter(prefix) + '=' + formatter(String(obj))]
            }

            var values = []

            if (typeof obj === 'undefined') {
              return values
            }

            var objKeys
            if (Array.isArray(filter)) {
              objKeys = filter
            } else {
              var keys = Object.keys(obj)
              objKeys = sort ? keys.sort(sort) : keys
            }

            for (var i = 0; i < objKeys.length; ++i) {
              var key = objKeys[i]

              if (skipNulls && obj[key] === null) {
                continue
              }

              if (Array.isArray(obj)) {
                values = values.concat(
                  stringify(
                    obj[key],
                    generateArrayPrefix(prefix, key),
                    generateArrayPrefix,
                    strictNullHandling,
                    skipNulls,
                    encoder,
                    filter,
                    sort,
                    allowDots,
                    serializeDate,
                    formatter,
                    encodeValuesOnly
                  )
                )
              } else {
                values = values.concat(
                  stringify(
                    obj[key],
                    prefix + (allowDots ? '.' + key : '[' + key + ']'),
                    generateArrayPrefix,
                    strictNullHandling,
                    skipNulls,
                    encoder,
                    filter,
                    sort,
                    allowDots,
                    serializeDate,
                    formatter,
                    encodeValuesOnly
                  )
                )
              }
            }

            return values
          }

          module.exports = function (object, opts) {
            var obj = object
            var options = opts ? utils.assign({}, opts) : {}

            if (
              options.encoder !== null &&
              options.encoder !== undefined &&
              typeof options.encoder !== 'function'
            ) {
              throw new TypeError('Encoder has to be a function.')
            }

            var delimiter =
              typeof options.delimiter === 'undefined'
                ? defaults.delimiter
                : options.delimiter
            var strictNullHandling =
              typeof options.strictNullHandling === 'boolean'
                ? options.strictNullHandling
                : defaults.strictNullHandling
            var skipNulls =
              typeof options.skipNulls === 'boolean'
                ? options.skipNulls
                : defaults.skipNulls
            var encode =
              typeof options.encode === 'boolean'
                ? options.encode
                : defaults.encode
            var encoder =
              typeof options.encoder === 'function'
                ? options.encoder
                : defaults.encoder
            var sort = typeof options.sort === 'function' ? options.sort : null
            var allowDots =
              typeof options.allowDots === 'undefined'
                ? false
                : options.allowDots
            var serializeDate =
              typeof options.serializeDate === 'function'
                ? options.serializeDate
                : defaults.serializeDate
            var encodeValuesOnly =
              typeof options.encodeValuesOnly === 'boolean'
                ? options.encodeValuesOnly
                : defaults.encodeValuesOnly
            if (typeof options.format === 'undefined') {
              options.format = formats['default']
            } else if (
              !Object.prototype.hasOwnProperty.call(
                formats.formatters,
                options.format
              )
            ) {
              throw new TypeError('Unknown format option provided.')
            }
            var formatter = formats.formatters[options.format]
            var objKeys
            var filter

            if (typeof options.filter === 'function') {
              filter = options.filter
              obj = filter('', obj)
            } else if (Array.isArray(options.filter)) {
              filter = options.filter
              objKeys = filter
            }

            var keys = []

            if (typeof obj !== 'object' || obj === null) {
              return ''
            }

            var arrayFormat
            if (options.arrayFormat in arrayPrefixGenerators) {
              arrayFormat = options.arrayFormat
            } else if ('indices' in options) {
              arrayFormat = options.indices ? 'indices' : 'repeat'
            } else {
              arrayFormat = 'indices'
            }

            var generateArrayPrefix = arrayPrefixGenerators[arrayFormat]

            if (!objKeys) {
              objKeys = Object.keys(obj)
            }

            if (sort) {
              objKeys.sort(sort)
            }

            for (var i = 0; i < objKeys.length; ++i) {
              var key = objKeys[i]

              if (skipNulls && obj[key] === null) {
                continue
              }

              keys = keys.concat(
                stringify(
                  obj[key],
                  key,
                  generateArrayPrefix,
                  strictNullHandling,
                  skipNulls,
                  encode ? encoder : null,
                  filter,
                  sort,
                  allowDots,
                  serializeDate,
                  formatter,
                  encodeValuesOnly
                )
              )
            }

            var joined = keys.join(delimiter)
            var prefix = options.addQueryPrefix === true ? '?' : ''

            return joined.length > 0 ? prefix + joined : ''
          }
        },
        { './formats': 19, './utils': 23 },
      ],
      23: [
        function (require, module, exports) {
          'use strict'

          var has = Object.prototype.hasOwnProperty

          var hexTable = (function () {
            var array = []
            for (var i = 0; i < 256; ++i) {
              array.push(
                '%' + ((i < 16 ? '0' : '') + i.toString(16)).toUpperCase()
              )
            }

            return array
          })()

          var compactQueue = function compactQueue(queue) {
            var obj

            while (queue.length) {
              var item = queue.pop()
              obj = item.obj[item.prop]

              if (Array.isArray(obj)) {
                var compacted = []

                for (var j = 0; j < obj.length; ++j) {
                  if (typeof obj[j] !== 'undefined') {
                    compacted.push(obj[j])
                  }
                }

                item.obj[item.prop] = compacted
              }
            }

            return obj
          }

          var arrayToObject = function arrayToObject(source, options) {
            var obj = options && options.plainObjects ? Object.create(null) : {}
            for (var i = 0; i < source.length; ++i) {
              if (typeof source[i] !== 'undefined') {
                obj[i] = source[i]
              }
            }

            return obj
          }

          var merge = function merge(target, source, options) {
            if (!source) {
              return target
            }

            if (typeof source !== 'object') {
              if (Array.isArray(target)) {
                target.push(source)
              } else if (typeof target === 'object') {
                if (
                  options.plainObjects ||
                  options.allowPrototypes ||
                  !has.call(Object.prototype, source)
                ) {
                  target[source] = true
                }
              } else {
                return [target, source]
              }

              return target
            }

            if (typeof target !== 'object') {
              return [target].concat(source)
            }

            var mergeTarget = target
            if (Array.isArray(target) && !Array.isArray(source)) {
              mergeTarget = arrayToObject(target, options)
            }

            if (Array.isArray(target) && Array.isArray(source)) {
              source.forEach(function (item, i) {
                if (has.call(target, i)) {
                  if (target[i] && typeof target[i] === 'object') {
                    target[i] = merge(target[i], item, options)
                  } else {
                    target.push(item)
                  }
                } else {
                  target[i] = item
                }
              })
              return target
            }

            return Object.keys(source).reduce(function (acc, key) {
              var value = source[key]

              if (has.call(acc, key)) {
                acc[key] = merge(acc[key], value, options)
              } else {
                acc[key] = value
              }
              return acc
            }, mergeTarget)
          }

          var assign = function assignSingleSource(target, source) {
            return Object.keys(source).reduce(function (acc, key) {
              acc[key] = source[key]
              return acc
            }, target)
          }

          var decode = function (str) {
            try {
              return decodeURIComponent(str.replace(/\+/g, ' '))
            } catch (e) {
              return str
            }
          }

          var encode = function encode(str) {
            // This code was originally written by Brian White (mscdex) for the io.js core querystring library.
            // It has been adapted here for stricter adherence to RFC 3986
            if (str.length === 0) {
              return str
            }

            var string = typeof str === 'string' ? str : String(str)

            var out = ''
            for (var i = 0; i < string.length; ++i) {
              var c = string.charCodeAt(i)

              if (
                c === 0x2d || // -
                c === 0x2e || // .
                c === 0x5f || // _
                c === 0x7e || // ~
                (c >= 0x30 && c <= 0x39) || // 0-9
                (c >= 0x41 && c <= 0x5a) || // a-z
                (c >= 0x61 && c <= 0x7a) // A-Z
              ) {
                out += string.charAt(i)
                continue
              }

              if (c < 0x80) {
                out = out + hexTable[c]
                continue
              }

              if (c < 0x800) {
                out =
                  out +
                  (hexTable[0xc0 | (c >> 6)] + hexTable[0x80 | (c & 0x3f)])
                continue
              }

              if (c < 0xd800 || c >= 0xe000) {
                out =
                  out +
                  (hexTable[0xe0 | (c >> 12)] +
                    hexTable[0x80 | ((c >> 6) & 0x3f)] +
                    hexTable[0x80 | (c & 0x3f)])
                continue
              }

              i += 1
              c =
                0x10000 + (((c & 0x3ff) << 10) | (string.charCodeAt(i) & 0x3ff))
              out +=
                hexTable[0xf0 | (c >> 18)] +
                hexTable[0x80 | ((c >> 12) & 0x3f)] +
                hexTable[0x80 | ((c >> 6) & 0x3f)] +
                hexTable[0x80 | (c & 0x3f)]
            }

            return out
          }

          var compact = function compact(value) {
            var queue = [{ obj: { o: value }, prop: 'o' }]
            var refs = []

            for (var i = 0; i < queue.length; ++i) {
              var item = queue[i]
              var obj = item.obj[item.prop]

              var keys = Object.keys(obj)
              for (var j = 0; j < keys.length; ++j) {
                var key = keys[j]
                var val = obj[key]
                if (
                  typeof val === 'object' &&
                  val !== null &&
                  refs.indexOf(val) === -1
                ) {
                  queue.push({ obj: obj, prop: key })
                  refs.push(val)
                }
              }
            }

            return compactQueue(queue)
          }

          var isRegExp = function isRegExp(obj) {
            return Object.prototype.toString.call(obj) === '[object RegExp]'
          }

          var isBuffer = function isBuffer(obj) {
            if (obj === null || typeof obj === 'undefined') {
              return false
            }

            return !!(
              obj.constructor &&
              obj.constructor.isBuffer &&
              obj.constructor.isBuffer(obj)
            )
          }

          module.exports = {
            arrayToObject: arrayToObject,
            assign: assign,
            compact: compact,
            decode: decode,
            encode: encode,
            isBuffer: isBuffer,
            isRegExp: isRegExp,
            merge: merge,
          }
        },
        {},
      ],
      24: [
        function (require, module, exports) {
          ;(function (process) {
            /** @license React v16.3.3
             * react-dom.development.js
             *
             * Copyright (c) 2013-present, Facebook, Inc.
             *
             * This source code is licensed under the MIT license found in the
             * LICENSE file in the root directory of this source tree.
             */

            'use strict'

            if (process.env.NODE_ENV !== 'production') {
              ;(function () {
                'use strict'

                var invariant = require('fbjs/lib/invariant')
                var React = require('react')
                var warning = require('fbjs/lib/warning')
                var ExecutionEnvironment = require('fbjs/lib/ExecutionEnvironment')
                var _assign = require('object-assign')
                var emptyFunction = require('fbjs/lib/emptyFunction')
                var checkPropTypes = require('prop-types/checkPropTypes')
                var getActiveElement = require('fbjs/lib/getActiveElement')
                var shallowEqual = require('fbjs/lib/shallowEqual')
                var containsNode = require('fbjs/lib/containsNode')
                var emptyObject = require('fbjs/lib/emptyObject')
                var hyphenateStyleName = require('fbjs/lib/hyphenateStyleName')
                var camelizeStyleName = require('fbjs/lib/camelizeStyleName')

                // Relying on the `invariant()` implementation lets us
                // have preserve the format and params in the www builds.

                !React
                  ? invariant(
                      false,
                      'ReactDOM was loaded before React. Make sure you load the React package before loading ReactDOM.'
                    )
                  : void 0

                var invokeGuardedCallback = function (
                  name,
                  func,
                  context,
                  a,
                  b,
                  c,
                  d,
                  e,
                  f
                ) {
                  this._hasCaughtError = false
                  this._caughtError = null
                  var funcArgs = Array.prototype.slice.call(arguments, 3)
                  try {
                    func.apply(context, funcArgs)
                  } catch (error) {
                    this._caughtError = error
                    this._hasCaughtError = true
                  }
                }

                {
                  // In DEV mode, we swap out invokeGuardedCallback for a special version
                  // that plays more nicely with the browser's DevTools. The idea is to preserve
                  // "Pause on exceptions" behavior. Because React wraps all user-provided
                  // functions in invokeGuardedCallback, and the production version of
                  // invokeGuardedCallback uses a try-catch, all user exceptions are treated
                  // like caught exceptions, and the DevTools won't pause unless the developer
                  // takes the extra step of enabling pause on caught exceptions. This is
                  // untintuitive, though, because even though React has caught the error, from
                  // the developer's perspective, the error is uncaught.
                  //
                  // To preserve the expected "Pause on exceptions" behavior, we don't use a
                  // try-catch in DEV. Instead, we synchronously dispatch a fake event to a fake
                  // DOM node, and call the user-provided callback from inside an event handler
                  // for that fake event. If the callback throws, the error is "captured" using
                  // a global event handler. But because the error happens in a different
                  // event loop context, it does not interrupt the normal program flow.
                  // Effectively, this gives us try-catch behavior without actually using
                  // try-catch. Neat!

                  // Check that the browser supports the APIs we need to implement our special
                  // DEV version of invokeGuardedCallback
                  if (
                    typeof window !== 'undefined' &&
                    typeof window.dispatchEvent === 'function' &&
                    typeof document !== 'undefined' &&
                    typeof document.createEvent === 'function'
                  ) {
                    var fakeNode = document.createElement('react')

                    var invokeGuardedCallbackDev = function (
                      name,
                      func,
                      context,
                      a,
                      b,
                      c,
                      d,
                      e,
                      f
                    ) {
                      // If document doesn't exist we know for sure we will crash in this method
                      // when we call document.createEvent(). However this can cause confusing
                      // errors: https://github.com/facebookincubator/create-react-app/issues/3482
                      // So we preemptively throw with a better message instead.
                      !(typeof document !== 'undefined')
                        ? invariant(
                            false,
                            'The `document` global was defined when React was initialized, but is not defined anymore. This can happen in a test environment if a component schedules an update from an asynchronous callback, but the test has already finished running. To solve this, you can either unmount the component at the end of your test (and ensure that any asynchronous operations get canceled in `componentWillUnmount`), or you can change the test itself to be asynchronous.'
                          )
                        : void 0
                      var evt = document.createEvent('Event')

                      // Keeps track of whether the user-provided callback threw an error. We
                      // set this to true at the beginning, then set it to false right after
                      // calling the function. If the function errors, `didError` will never be
                      // set to false. This strategy works even if the browser is flaky and
                      // fails to call our global error handler, because it doesn't rely on
                      // the error event at all.
                      var didError = true

                      // Create an event handler for our fake event. We will synchronously
                      // dispatch our fake event using `dispatchEvent`. Inside the handler, we
                      // call the user-provided callback.
                      var funcArgs = Array.prototype.slice.call(arguments, 3)
                      function callCallback() {
                        // We immediately remove the callback from event listeners so that
                        // nested `invokeGuardedCallback` calls do not clash. Otherwise, a
                        // nested call would trigger the fake event handlers of any call higher
                        // in the stack.
                        fakeNode.removeEventListener(
                          evtType,
                          callCallback,
                          false
                        )
                        func.apply(context, funcArgs)
                        didError = false
                      }

                      // Create a global error event handler. We use this to capture the value
                      // that was thrown. It's possible that this error handler will fire more
                      // than once; for example, if non-React code also calls `dispatchEvent`
                      // and a handler for that event throws. We should be resilient to most of
                      // those cases. Even if our error event handler fires more than once, the
                      // last error event is always used. If the callback actually does error,
                      // we know that the last error event is the correct one, because it's not
                      // possible for anything else to have happened in between our callback
                      // erroring and the code that follows the `dispatchEvent` call below. If
                      // the callback doesn't error, but the error event was fired, we know to
                      // ignore it because `didError` will be false, as described above.
                      var error = void 0
                      // Use this to track whether the error event is ever called.
                      var didSetError = false
                      var isCrossOriginError = false

                      function onError(event) {
                        error = event.error
                        didSetError = true
                        if (
                          error === null &&
                          event.colno === 0 &&
                          event.lineno === 0
                        ) {
                          isCrossOriginError = true
                        }
                      }

                      // Create a fake event type.
                      var evtType =
                        'react-' + (name ? name : 'invokeguardedcallback')

                      // Attach our event handlers
                      window.addEventListener('error', onError)
                      fakeNode.addEventListener(evtType, callCallback, false)

                      // Synchronously dispatch our fake event. If the user-provided function
                      // errors, it will trigger our global error handler.
                      evt.initEvent(evtType, false, false)
                      fakeNode.dispatchEvent(evt)

                      if (didError) {
                        if (!didSetError) {
                          // The callback errored, but the error event never fired.
                          error = new Error(
                            'An error was thrown inside one of your components, but React ' +
                              "doesn't know what it was. This is likely due to browser " +
                              'flakiness. React does its best to preserve the "Pause on ' +
                              'exceptions" behavior of the DevTools, which requires some ' +
                              "DEV-mode only tricks. It's possible that these don't work in " +
                              'your browser. Try triggering the error in production mode, ' +
                              'or switching to a modern browser. If you suspect that this is ' +
                              'actually an issue with React, please file an issue.'
                          )
                        } else if (isCrossOriginError) {
                          error = new Error(
                            "A cross-origin error was thrown. React doesn't have access to " +
                              'the actual error object in development. ' +
                              'See https://fb.me/react-crossorigin-error for more information.'
                          )
                        }
                        this._hasCaughtError = true
                        this._caughtError = error
                      } else {
                        this._hasCaughtError = false
                        this._caughtError = null
                      }

                      // Remove our event listeners
                      window.removeEventListener('error', onError)
                    }

                    invokeGuardedCallback = invokeGuardedCallbackDev
                  }
                }

                var invokeGuardedCallback$1 = invokeGuardedCallback

                var ReactErrorUtils = {
                  // Used by Fiber to simulate a try-catch.
                  _caughtError: null,
                  _hasCaughtError: false,

                  // Used by event system to capture/rethrow the first error.
                  _rethrowError: null,
                  _hasRethrowError: false,

                  /**
                   * Call a function while guarding against errors that happens within it.
                   * Returns an error if it throws, otherwise null.
                   *
                   * In production, this is implemented using a try-catch. The reason we don't
                   * use a try-catch directly is so that we can swap out a different
                   * implementation in DEV mode.
                   *
                   * @param {String} name of the guard to use for logging or debugging
                   * @param {Function} func The function to invoke
                   * @param {*} context The context to use when calling the function
                   * @param {...*} args Arguments for function
                   */
                  invokeGuardedCallback: function (
                    name,
                    func,
                    context,
                    a,
                    b,
                    c,
                    d,
                    e,
                    f
                  ) {
                    invokeGuardedCallback$1.apply(ReactErrorUtils, arguments)
                  },

                  /**
                   * Same as invokeGuardedCallback, but instead of returning an error, it stores
                   * it in a global so it can be rethrown by `rethrowCaughtError` later.
                   * TODO: See if _caughtError and _rethrowError can be unified.
                   *
                   * @param {String} name of the guard to use for logging or debugging
                   * @param {Function} func The function to invoke
                   * @param {*} context The context to use when calling the function
                   * @param {...*} args Arguments for function
                   */
                  invokeGuardedCallbackAndCatchFirstError: function (
                    name,
                    func,
                    context,
                    a,
                    b,
                    c,
                    d,
                    e,
                    f
                  ) {
                    ReactErrorUtils.invokeGuardedCallback.apply(this, arguments)
                    if (ReactErrorUtils.hasCaughtError()) {
                      var error = ReactErrorUtils.clearCaughtError()
                      if (!ReactErrorUtils._hasRethrowError) {
                        ReactErrorUtils._hasRethrowError = true
                        ReactErrorUtils._rethrowError = error
                      }
                    }
                  },

                  /**
                   * During execution of guarded functions we will capture the first error which
                   * we will rethrow to be handled by the top level error handler.
                   */
                  rethrowCaughtError: function () {
                    return rethrowCaughtError.apply(ReactErrorUtils, arguments)
                  },

                  hasCaughtError: function () {
                    return ReactErrorUtils._hasCaughtError
                  },

                  clearCaughtError: function () {
                    if (ReactErrorUtils._hasCaughtError) {
                      var error = ReactErrorUtils._caughtError
                      ReactErrorUtils._caughtError = null
                      ReactErrorUtils._hasCaughtError = false
                      return error
                    } else {
                      invariant(
                        false,
                        'clearCaughtError was called but no error was captured. This error is likely caused by a bug in React. Please file an issue.'
                      )
                    }
                  },
                }

                var rethrowCaughtError = function () {
                  if (ReactErrorUtils._hasRethrowError) {
                    var error = ReactErrorUtils._rethrowError
                    ReactErrorUtils._rethrowError = null
                    ReactErrorUtils._hasRethrowError = false
                    throw error
                  }
                }

                /**
                 * Injectable ordering of event plugins.
                 */
                var eventPluginOrder = null

                /**
                 * Injectable mapping from names to event plugin modules.
                 */
                var namesToPlugins = {}

                /**
                 * Recomputes the plugin list using the injected plugins and plugin ordering.
                 *
                 * @private
                 */
                function recomputePluginOrdering() {
                  if (!eventPluginOrder) {
                    // Wait until an `eventPluginOrder` is injected.
                    return
                  }
                  for (var pluginName in namesToPlugins) {
                    var pluginModule = namesToPlugins[pluginName]
                    var pluginIndex = eventPluginOrder.indexOf(pluginName)
                    !(pluginIndex > -1)
                      ? invariant(
                          false,
                          'EventPluginRegistry: Cannot inject event plugins that do not exist in the plugin ordering, `%s`.',
                          pluginName
                        )
                      : void 0
                    if (plugins[pluginIndex]) {
                      continue
                    }
                    !pluginModule.extractEvents
                      ? invariant(
                          false,
                          'EventPluginRegistry: Event plugins must implement an `extractEvents` method, but `%s` does not.',
                          pluginName
                        )
                      : void 0
                    plugins[pluginIndex] = pluginModule
                    var publishedEvents = pluginModule.eventTypes
                    for (var eventName in publishedEvents) {
                      !publishEventForPlugin(
                        publishedEvents[eventName],
                        pluginModule,
                        eventName
                      )
                        ? invariant(
                            false,
                            'EventPluginRegistry: Failed to publish event `%s` for plugin `%s`.',
                            eventName,
                            pluginName
                          )
                        : void 0
                    }
                  }
                }

                /**
                 * Publishes an event so that it can be dispatched by the supplied plugin.
                 *
                 * @param {object} dispatchConfig Dispatch configuration for the event.
                 * @param {object} PluginModule Plugin publishing the event.
                 * @return {boolean} True if the event was successfully published.
                 * @private
                 */
                function publishEventForPlugin(
                  dispatchConfig,
                  pluginModule,
                  eventName
                ) {
                  !!eventNameDispatchConfigs.hasOwnProperty(eventName)
                    ? invariant(
                        false,
                        'EventPluginHub: More than one plugin attempted to publish the same event name, `%s`.',
                        eventName
                      )
                    : void 0
                  eventNameDispatchConfigs[eventName] = dispatchConfig

                  var phasedRegistrationNames =
                    dispatchConfig.phasedRegistrationNames
                  if (phasedRegistrationNames) {
                    for (var phaseName in phasedRegistrationNames) {
                      if (phasedRegistrationNames.hasOwnProperty(phaseName)) {
                        var phasedRegistrationName =
                          phasedRegistrationNames[phaseName]
                        publishRegistrationName(
                          phasedRegistrationName,
                          pluginModule,
                          eventName
                        )
                      }
                    }
                    return true
                  } else if (dispatchConfig.registrationName) {
                    publishRegistrationName(
                      dispatchConfig.registrationName,
                      pluginModule,
                      eventName
                    )
                    return true
                  }
                  return false
                }

                /**
                 * Publishes a registration name that is used to identify dispatched events.
                 *
                 * @param {string} registrationName Registration name to add.
                 * @param {object} PluginModule Plugin publishing the event.
                 * @private
                 */
                function publishRegistrationName(
                  registrationName,
                  pluginModule,
                  eventName
                ) {
                  !!registrationNameModules[registrationName]
                    ? invariant(
                        false,
                        'EventPluginHub: More than one plugin attempted to publish the same registration name, `%s`.',
                        registrationName
                      )
                    : void 0
                  registrationNameModules[registrationName] = pluginModule
                  registrationNameDependencies[registrationName] =
                    pluginModule.eventTypes[eventName].dependencies

                  {
                    var lowerCasedName = registrationName.toLowerCase()
                    possibleRegistrationNames[lowerCasedName] = registrationName

                    if (registrationName === 'onDoubleClick') {
                      possibleRegistrationNames.ondblclick = registrationName
                    }
                  }
                }

                /**
                 * Registers plugins so that they can extract and dispatch events.
                 *
                 * @see {EventPluginHub}
                 */

                /**
                 * Ordered list of injected plugins.
                 */
                var plugins = []

                /**
                 * Mapping from event name to dispatch config
                 */
                var eventNameDispatchConfigs = {}

                /**
                 * Mapping from registration name to plugin module
                 */
                var registrationNameModules = {}

                /**
                 * Mapping from registration name to event name
                 */
                var registrationNameDependencies = {}

                /**
                 * Mapping from lowercase registration names to the properly cased version,
                 * used to warn in the case of missing event handlers. Available
                 * only in true.
                 * @type {Object}
                 */
                var possibleRegistrationNames = {}
                // Trust the developer to only use possibleRegistrationNames in true

                /**
                 * Injects an ordering of plugins (by plugin name). This allows the ordering
                 * to be decoupled from injection of the actual plugins so that ordering is
                 * always deterministic regardless of packaging, on-the-fly injection, etc.
                 *
                 * @param {array} InjectedEventPluginOrder
                 * @internal
                 * @see {EventPluginHub.injection.injectEventPluginOrder}
                 */
                function injectEventPluginOrder(injectedEventPluginOrder) {
                  !!eventPluginOrder
                    ? invariant(
                        false,
                        'EventPluginRegistry: Cannot inject event plugin ordering more than once. You are likely trying to load more than one copy of React.'
                      )
                    : void 0
                  // Clone the ordering so it cannot be dynamically mutated.
                  eventPluginOrder = Array.prototype.slice.call(
                    injectedEventPluginOrder
                  )
                  recomputePluginOrdering()
                }

                /**
                 * Injects plugins to be used by `EventPluginHub`. The plugin names must be
                 * in the ordering injected by `injectEventPluginOrder`.
                 *
                 * Plugins can be injected as part of page initialization or on-the-fly.
                 *
                 * @param {object} injectedNamesToPlugins Map from names to plugin modules.
                 * @internal
                 * @see {EventPluginHub.injection.injectEventPluginsByName}
                 */
                function injectEventPluginsByName(injectedNamesToPlugins) {
                  var isOrderingDirty = false
                  for (var pluginName in injectedNamesToPlugins) {
                    if (!injectedNamesToPlugins.hasOwnProperty(pluginName)) {
                      continue
                    }
                    var pluginModule = injectedNamesToPlugins[pluginName]
                    if (
                      !namesToPlugins.hasOwnProperty(pluginName) ||
                      namesToPlugins[pluginName] !== pluginModule
                    ) {
                      !!namesToPlugins[pluginName]
                        ? invariant(
                            false,
                            'EventPluginRegistry: Cannot inject two different event plugins using the same name, `%s`.',
                            pluginName
                          )
                        : void 0
                      namesToPlugins[pluginName] = pluginModule
                      isOrderingDirty = true
                    }
                  }
                  if (isOrderingDirty) {
                    recomputePluginOrdering()
                  }
                }

                var EventPluginRegistry = Object.freeze({
                  plugins: plugins,
                  eventNameDispatchConfigs: eventNameDispatchConfigs,
                  registrationNameModules: registrationNameModules,
                  registrationNameDependencies: registrationNameDependencies,
                  possibleRegistrationNames: possibleRegistrationNames,
                  injectEventPluginOrder: injectEventPluginOrder,
                  injectEventPluginsByName: injectEventPluginsByName,
                })

                var getFiberCurrentPropsFromNode = null
                var getInstanceFromNode = null
                var getNodeFromInstance = null

                var injection$1 = {
                  injectComponentTree: function (Injected) {
                    getFiberCurrentPropsFromNode =
                      Injected.getFiberCurrentPropsFromNode
                    getInstanceFromNode = Injected.getInstanceFromNode
                    getNodeFromInstance = Injected.getNodeFromInstance

                    {
                      !(getNodeFromInstance && getInstanceFromNode)
                        ? warning(
                            false,
                            'EventPluginUtils.injection.injectComponentTree(...): Injected ' +
                              'module is missing getNodeFromInstance or getInstanceFromNode.'
                          )
                        : void 0
                    }
                  },
                }

                var validateEventDispatches = void 0
                {
                  validateEventDispatches = function (event) {
                    var dispatchListeners = event._dispatchListeners
                    var dispatchInstances = event._dispatchInstances

                    var listenersIsArr = Array.isArray(dispatchListeners)
                    var listenersLen = listenersIsArr
                      ? dispatchListeners.length
                      : dispatchListeners
                      ? 1
                      : 0

                    var instancesIsArr = Array.isArray(dispatchInstances)
                    var instancesLen = instancesIsArr
                      ? dispatchInstances.length
                      : dispatchInstances
                      ? 1
                      : 0

                    !(
                      instancesIsArr === listenersIsArr &&
                      instancesLen === listenersLen
                    )
                      ? warning(false, 'EventPluginUtils: Invalid `event`.')
                      : void 0
                  }
                }

                /**
                 * Dispatch the event to the listener.
                 * @param {SyntheticEvent} event SyntheticEvent to handle
                 * @param {boolean} simulated If the event is simulated (changes exn behavior)
                 * @param {function} listener Application-level callback
                 * @param {*} inst Internal component instance
                 */
                function executeDispatch(event, simulated, listener, inst) {
                  var type = event.type || 'unknown-event'
                  event.currentTarget = getNodeFromInstance(inst)
                  ReactErrorUtils.invokeGuardedCallbackAndCatchFirstError(
                    type,
                    listener,
                    undefined,
                    event
                  )
                  event.currentTarget = null
                }

                /**
                 * Standard/simple iteration through an event's collected dispatches.
                 */
                function executeDispatchesInOrder(event, simulated) {
                  var dispatchListeners = event._dispatchListeners
                  var dispatchInstances = event._dispatchInstances
                  {
                    validateEventDispatches(event)
                  }
                  if (Array.isArray(dispatchListeners)) {
                    for (var i = 0; i < dispatchListeners.length; i++) {
                      if (event.isPropagationStopped()) {
                        break
                      }
                      // Listeners and Instances are two parallel arrays that are always in sync.
                      executeDispatch(
                        event,
                        simulated,
                        dispatchListeners[i],
                        dispatchInstances[i]
                      )
                    }
                  } else if (dispatchListeners) {
                    executeDispatch(
                      event,
                      simulated,
                      dispatchListeners,
                      dispatchInstances
                    )
                  }
                  event._dispatchListeners = null
                  event._dispatchInstances = null
                }

                /**
                 * @see executeDispatchesInOrderStopAtTrueImpl
                 */

                /**
                 * Execution of a "direct" dispatch - there must be at most one dispatch
                 * accumulated on the event or it is considered an error. It doesn't really make
                 * sense for an event with multiple dispatches (bubbled) to keep track of the
                 * return values at each dispatch execution, but it does tend to make sense when
                 * dealing with "direct" dispatches.
                 *
                 * @return {*} The return value of executing the single dispatch.
                 */

                /**
                 * @param {SyntheticEvent} event
                 * @return {boolean} True iff number of dispatches accumulated is greater than 0.
                 */

                /**
                 * Accumulates items that must not be null or undefined into the first one. This
                 * is used to conserve memory by avoiding array allocations, and thus sacrifices
                 * API cleanness. Since `current` can be null before being passed in and not
                 * null after this function, make sure to assign it back to `current`:
                 *
                 * `a = accumulateInto(a, b);`
                 *
                 * This API should be sparingly used. Try `accumulate` for something cleaner.
                 *
                 * @return {*|array<*>} An accumulation of items.
                 */

                function accumulateInto(current, next) {
                  !(next != null)
                    ? invariant(
                        false,
                        'accumulateInto(...): Accumulated items must not be null or undefined.'
                      )
                    : void 0

                  if (current == null) {
                    return next
                  }

                  // Both are not empty. Warning: Never call x.concat(y) when you are not
                  // certain that x is an Array (x could be a string with concat method).
                  if (Array.isArray(current)) {
                    if (Array.isArray(next)) {
                      current.push.apply(current, next)
                      return current
                    }
                    current.push(next)
                    return current
                  }

                  if (Array.isArray(next)) {
                    // A bit too dangerous to mutate `next`.
                    return [current].concat(next)
                  }

                  return [current, next]
                }

                /**
                 * @param {array} arr an "accumulation" of items which is either an Array or
                 * a single item. Useful when paired with the `accumulate` module. This is a
                 * simple utility that allows us to reason about a collection of items, but
                 * handling the case when there is exactly one item (and we do not need to
                 * allocate an array).
                 * @param {function} cb Callback invoked with each element or a collection.
                 * @param {?} [scope] Scope used as `this` in a callback.
                 */
                function forEachAccumulated(arr, cb, scope) {
                  if (Array.isArray(arr)) {
                    arr.forEach(cb, scope)
                  } else if (arr) {
                    cb.call(scope, arr)
                  }
                }

                /**
                 * Internal queue of events that have accumulated their dispatches and are
                 * waiting to have their dispatches executed.
                 */
                var eventQueue = null

                /**
                 * Dispatches an event and releases it back into the pool, unless persistent.
                 *
                 * @param {?object} event Synthetic event to be dispatched.
                 * @param {boolean} simulated If the event is simulated (changes exn behavior)
                 * @private
                 */
                var executeDispatchesAndRelease = function (event, simulated) {
                  if (event) {
                    executeDispatchesInOrder(event, simulated)

                    if (!event.isPersistent()) {
                      event.constructor.release(event)
                    }
                  }
                }
                var executeDispatchesAndReleaseSimulated = function (e) {
                  return executeDispatchesAndRelease(e, true)
                }
                var executeDispatchesAndReleaseTopLevel = function (e) {
                  return executeDispatchesAndRelease(e, false)
                }

                function isInteractive(tag) {
                  return (
                    tag === 'button' ||
                    tag === 'input' ||
                    tag === 'select' ||
                    tag === 'textarea'
                  )
                }

                function shouldPreventMouseEvent(name, type, props) {
                  switch (name) {
                    case 'onClick':
                    case 'onClickCapture':
                    case 'onDoubleClick':
                    case 'onDoubleClickCapture':
                    case 'onMouseDown':
                    case 'onMouseDownCapture':
                    case 'onMouseMove':
                    case 'onMouseMoveCapture':
                    case 'onMouseUp':
                    case 'onMouseUpCapture':
                      return !!(props.disabled && isInteractive(type))
                    default:
                      return false
                  }
                }

                /**
                 * This is a unified interface for event plugins to be installed and configured.
                 *
                 * Event plugins can implement the following properties:
                 *
                 *   `extractEvents` {function(string, DOMEventTarget, string, object): *}
                 *     Required. When a top-level event is fired, this method is expected to
                 *     extract synthetic events that will in turn be queued and dispatched.
                 *
                 *   `eventTypes` {object}
                 *     Optional, plugins that fire events must publish a mapping of registration
                 *     names that are used to register listeners. Values of this mapping must
                 *     be objects that contain `registrationName` or `phasedRegistrationNames`.
                 *
                 *   `executeDispatch` {function(object, function, string)}
                 *     Optional, allows plugins to override how an event gets dispatched. By
                 *     default, the listener is simply invoked.
                 *
                 * Each plugin that is injected into `EventsPluginHub` is immediately operable.
                 *
                 * @public
                 */

                /**
                 * Methods for injecting dependencies.
                 */
                var injection = {
                  /**
                   * @param {array} InjectedEventPluginOrder
                   * @public
                   */
                  injectEventPluginOrder: injectEventPluginOrder,

                  /**
                   * @param {object} injectedNamesToPlugins Map from names to plugin modules.
                   */
                  injectEventPluginsByName: injectEventPluginsByName,
                }

                /**
                 * @param {object} inst The instance, which is the source of events.
                 * @param {string} registrationName Name of listener (e.g. `onClick`).
                 * @return {?function} The stored callback.
                 */
                function getListener(inst, registrationName) {
                  var listener = void 0

                  // TODO: shouldPreventMouseEvent is DOM-specific and definitely should not
                  // live here; needs to be moved to a better place soon
                  var stateNode = inst.stateNode
                  if (!stateNode) {
                    // Work in progress (ex: onload events in incremental mode).
                    return null
                  }
                  var props = getFiberCurrentPropsFromNode(stateNode)
                  if (!props) {
                    // Work in progress.
                    return null
                  }
                  listener = props[registrationName]
                  if (
                    shouldPreventMouseEvent(registrationName, inst.type, props)
                  ) {
                    return null
                  }
                  !(!listener || typeof listener === 'function')
                    ? invariant(
                        false,
                        'Expected `%s` listener to be a function, instead got a value of `%s` type.',
                        registrationName,
                        typeof listener
                      )
                    : void 0
                  return listener
                }

                /**
                 * Allows registered plugins an opportunity to extract events from top-level
                 * native browser events.
                 *
                 * @return {*} An accumulation of synthetic events.
                 * @internal
                 */
                function extractEvents(
                  topLevelType,
                  targetInst,
                  nativeEvent,
                  nativeEventTarget
                ) {
                  var events = null
                  for (var i = 0; i < plugins.length; i++) {
                    // Not every plugin in the ordering may be loaded at runtime.
                    var possiblePlugin = plugins[i]
                    if (possiblePlugin) {
                      var extractedEvents = possiblePlugin.extractEvents(
                        topLevelType,
                        targetInst,
                        nativeEvent,
                        nativeEventTarget
                      )
                      if (extractedEvents) {
                        events = accumulateInto(events, extractedEvents)
                      }
                    }
                  }
                  return events
                }

                function runEventsInBatch(events, simulated) {
                  if (events !== null) {
                    eventQueue = accumulateInto(eventQueue, events)
                  }

                  // Set `eventQueue` to null before processing it so that we can tell if more
                  // events get enqueued while processing.
                  var processingEventQueue = eventQueue
                  eventQueue = null

                  if (!processingEventQueue) {
                    return
                  }

                  if (simulated) {
                    forEachAccumulated(
                      processingEventQueue,
                      executeDispatchesAndReleaseSimulated
                    )
                  } else {
                    forEachAccumulated(
                      processingEventQueue,
                      executeDispatchesAndReleaseTopLevel
                    )
                  }
                  !!eventQueue
                    ? invariant(
                        false,
                        'processEventQueue(): Additional events were enqueued while processing an event queue. Support for this has not yet been implemented.'
                      )
                    : void 0
                  // This would be a good time to rethrow if any of the event handlers threw.
                  ReactErrorUtils.rethrowCaughtError()
                }

                function runExtractedEventsInBatch(
                  topLevelType,
                  targetInst,
                  nativeEvent,
                  nativeEventTarget
                ) {
                  var events = extractEvents(
                    topLevelType,
                    targetInst,
                    nativeEvent,
                    nativeEventTarget
                  )
                  runEventsInBatch(events, false)
                }

                var EventPluginHub = Object.freeze({
                  injection: injection,
                  getListener: getListener,
                  runEventsInBatch: runEventsInBatch,
                  runExtractedEventsInBatch: runExtractedEventsInBatch,
                })

                var IndeterminateComponent = 0 // Before we know whether it is functional or class
                var FunctionalComponent = 1
                var ClassComponent = 2
                var HostRoot = 3 // Root of a host tree. Could be nested inside another node.
                var HostPortal = 4 // A subtree. Could be an entry point to a different renderer.
                var HostComponent = 5
                var HostText = 6
                var CallComponent = 7
                var CallHandlerPhase = 8
                var ReturnComponent = 9
                var Fragment = 10
                var Mode = 11
                var ContextConsumer = 12
                var ContextProvider = 13
                var ForwardRef = 14

                var randomKey = Math.random().toString(36).slice(2)
                var internalInstanceKey = '__reactInternalInstance$' + randomKey
                var internalEventHandlersKey =
                  '__reactEventHandlers$' + randomKey

                function precacheFiberNode$1(hostInst, node) {
                  node[internalInstanceKey] = hostInst
                }

                /**
                 * Given a DOM node, return the closest ReactDOMComponent or
                 * ReactDOMTextComponent instance ancestor.
                 */
                function getClosestInstanceFromNode(node) {
                  if (node[internalInstanceKey]) {
                    return node[internalInstanceKey]
                  }

                  while (!node[internalInstanceKey]) {
                    if (node.parentNode) {
                      node = node.parentNode
                    } else {
                      // Top of the tree. This node must not be part of a React tree (or is
                      // unmounted, potentially).
                      return null
                    }
                  }

                  var inst = node[internalInstanceKey]
                  if (inst.tag === HostComponent || inst.tag === HostText) {
                    // In Fiber, this will always be the deepest root.
                    return inst
                  }

                  return null
                }

                /**
                 * Given a DOM node, return the ReactDOMComponent or ReactDOMTextComponent
                 * instance, or null if the node was not rendered by this React.
                 */
                function getInstanceFromNode$1(node) {
                  var inst = node[internalInstanceKey]
                  if (inst) {
                    if (inst.tag === HostComponent || inst.tag === HostText) {
                      return inst
                    } else {
                      return null
                    }
                  }
                  return null
                }

                /**
                 * Given a ReactDOMComponent or ReactDOMTextComponent, return the corresponding
                 * DOM node.
                 */
                function getNodeFromInstance$1(inst) {
                  if (inst.tag === HostComponent || inst.tag === HostText) {
                    // In Fiber this, is just the state node right now. We assume it will be
                    // a host component or host text.
                    return inst.stateNode
                  }

                  // Without this first invariant, passing a non-DOM-component triggers the next
                  // invariant for a missing parent, which is super confusing.
                  invariant(false, 'getNodeFromInstance: Invalid argument.')
                }

                function getFiberCurrentPropsFromNode$1(node) {
                  return node[internalEventHandlersKey] || null
                }

                function updateFiberProps$1(node, props) {
                  node[internalEventHandlersKey] = props
                }

                var ReactDOMComponentTree = Object.freeze({
                  precacheFiberNode: precacheFiberNode$1,
                  getClosestInstanceFromNode: getClosestInstanceFromNode,
                  getInstanceFromNode: getInstanceFromNode$1,
                  getNodeFromInstance: getNodeFromInstance$1,
                  getFiberCurrentPropsFromNode: getFiberCurrentPropsFromNode$1,
                  updateFiberProps: updateFiberProps$1,
                })

                function getParent(inst) {
                  do {
                    inst = inst['return']
                    // TODO: If this is a HostRoot we might want to bail out.
                    // That is depending on if we want nested subtrees (layers) to bubble
                    // events to their parent. We could also go through parentNode on the
                    // host node but that wouldn't work for React Native and doesn't let us
                    // do the portal feature.
                  } while (inst && inst.tag !== HostComponent)
                  if (inst) {
                    return inst
                  }
                  return null
                }

                /**
                 * Return the lowest common ancestor of A and B, or null if they are in
                 * different trees.
                 */
                function getLowestCommonAncestor(instA, instB) {
                  var depthA = 0
                  for (var tempA = instA; tempA; tempA = getParent(tempA)) {
                    depthA++
                  }
                  var depthB = 0
                  for (var tempB = instB; tempB; tempB = getParent(tempB)) {
                    depthB++
                  }

                  // If A is deeper, crawl up.
                  while (depthA - depthB > 0) {
                    instA = getParent(instA)
                    depthA--
                  }

                  // If B is deeper, crawl up.
                  while (depthB - depthA > 0) {
                    instB = getParent(instB)
                    depthB--
                  }

                  // Walk in lockstep until we find a match.
                  var depth = depthA
                  while (depth--) {
                    if (instA === instB || instA === instB.alternate) {
                      return instA
                    }
                    instA = getParent(instA)
                    instB = getParent(instB)
                  }
                  return null
                }

                /**
                 * Return if A is an ancestor of B.
                 */

                /**
                 * Return the parent instance of the passed-in instance.
                 */
                function getParentInstance(inst) {
                  return getParent(inst)
                }

                /**
                 * Simulates the traversal of a two-phase, capture/bubble event dispatch.
                 */
                function traverseTwoPhase(inst, fn, arg) {
                  var path = []
                  while (inst) {
                    path.push(inst)
                    inst = getParent(inst)
                  }
                  var i = void 0
                  for (i = path.length; i-- > 0; ) {
                    fn(path[i], 'captured', arg)
                  }
                  for (i = 0; i < path.length; i++) {
                    fn(path[i], 'bubbled', arg)
                  }
                }

                /**
                 * Traverses the ID hierarchy and invokes the supplied `cb` on any IDs that
                 * should would receive a `mouseEnter` or `mouseLeave` event.
                 *
                 * Does not invoke the callback on the nearest common ancestor because nothing
                 * "entered" or "left" that element.
                 */
                function traverseEnterLeave(from, to, fn, argFrom, argTo) {
                  var common =
                    from && to ? getLowestCommonAncestor(from, to) : null
                  var pathFrom = []
                  while (true) {
                    if (!from) {
                      break
                    }
                    if (from === common) {
                      break
                    }
                    var alternate = from.alternate
                    if (alternate !== null && alternate === common) {
                      break
                    }
                    pathFrom.push(from)
                    from = getParent(from)
                  }
                  var pathTo = []
                  while (true) {
                    if (!to) {
                      break
                    }
                    if (to === common) {
                      break
                    }
                    var _alternate = to.alternate
                    if (_alternate !== null && _alternate === common) {
                      break
                    }
                    pathTo.push(to)
                    to = getParent(to)
                  }
                  for (var i = 0; i < pathFrom.length; i++) {
                    fn(pathFrom[i], 'bubbled', argFrom)
                  }
                  for (var _i = pathTo.length; _i-- > 0; ) {
                    fn(pathTo[_i], 'captured', argTo)
                  }
                }

                /**
                 * Some event types have a notion of different registration names for different
                 * "phases" of propagation. This finds listeners by a given phase.
                 */
                function listenerAtPhase(inst, event, propagationPhase) {
                  var registrationName =
                    event.dispatchConfig.phasedRegistrationNames[
                      propagationPhase
                    ]
                  return getListener(inst, registrationName)
                }

                /**
                 * A small set of propagation patterns, each of which will accept a small amount
                 * of information, and generate a set of "dispatch ready event objects" - which
                 * are sets of events that have already been annotated with a set of dispatched
                 * listener functions/ids. The API is designed this way to discourage these
                 * propagation strategies from actually executing the dispatches, since we
                 * always want to collect the entire set of dispatches before executing even a
                 * single one.
                 */

                /**
                 * Tags a `SyntheticEvent` with dispatched listeners. Creating this function
                 * here, allows us to not have to bind or create functions for each event.
                 * Mutating the event's members allows us to not have to create a wrapping
                 * "dispatch" object that pairs the event with the listener.
                 */
                function accumulateDirectionalDispatches(inst, phase, event) {
                  {
                    !inst
                      ? warning(false, 'Dispatching inst must not be null')
                      : void 0
                  }
                  var listener = listenerAtPhase(inst, event, phase)
                  if (listener) {
                    event._dispatchListeners = accumulateInto(
                      event._dispatchListeners,
                      listener
                    )
                    event._dispatchInstances = accumulateInto(
                      event._dispatchInstances,
                      inst
                    )
                  }
                }

                /**
                 * Collect dispatches (must be entirely collected before dispatching - see unit
                 * tests). Lazily allocate the array to conserve memory.  We must loop through
                 * each event and perform the traversal for each one. We cannot perform a
                 * single traversal for the entire collection of events because each event may
                 * have a different target.
                 */
                function accumulateTwoPhaseDispatchesSingle(event) {
                  if (event && event.dispatchConfig.phasedRegistrationNames) {
                    traverseTwoPhase(
                      event._targetInst,
                      accumulateDirectionalDispatches,
                      event
                    )
                  }
                }

                /**
                 * Same as `accumulateTwoPhaseDispatchesSingle`, but skips over the targetID.
                 */
                function accumulateTwoPhaseDispatchesSingleSkipTarget(event) {
                  if (event && event.dispatchConfig.phasedRegistrationNames) {
                    var targetInst = event._targetInst
                    var parentInst = targetInst
                      ? getParentInstance(targetInst)
                      : null
                    traverseTwoPhase(
                      parentInst,
                      accumulateDirectionalDispatches,
                      event
                    )
                  }
                }

                /**
                 * Accumulates without regard to direction, does not look for phased
                 * registration names. Same as `accumulateDirectDispatchesSingle` but without
                 * requiring that the `dispatchMarker` be the same as the dispatched ID.
                 */
                function accumulateDispatches(inst, ignoredDirection, event) {
                  if (inst && event && event.dispatchConfig.registrationName) {
                    var registrationName = event.dispatchConfig.registrationName
                    var listener = getListener(inst, registrationName)
                    if (listener) {
                      event._dispatchListeners = accumulateInto(
                        event._dispatchListeners,
                        listener
                      )
                      event._dispatchInstances = accumulateInto(
                        event._dispatchInstances,
                        inst
                      )
                    }
                  }
                }

                /**
                 * Accumulates dispatches on an `SyntheticEvent`, but only for the
                 * `dispatchMarker`.
                 * @param {SyntheticEvent} event
                 */
                function accumulateDirectDispatchesSingle(event) {
                  if (event && event.dispatchConfig.registrationName) {
                    accumulateDispatches(event._targetInst, null, event)
                  }
                }

                function accumulateTwoPhaseDispatches(events) {
                  forEachAccumulated(events, accumulateTwoPhaseDispatchesSingle)
                }

                function accumulateTwoPhaseDispatchesSkipTarget(events) {
                  forEachAccumulated(
                    events,
                    accumulateTwoPhaseDispatchesSingleSkipTarget
                  )
                }

                function accumulateEnterLeaveDispatches(
                  leave,
                  enter,
                  from,
                  to
                ) {
                  traverseEnterLeave(
                    from,
                    to,
                    accumulateDispatches,
                    leave,
                    enter
                  )
                }

                function accumulateDirectDispatches(events) {
                  forEachAccumulated(events, accumulateDirectDispatchesSingle)
                }

                var EventPropagators = Object.freeze({
                  accumulateTwoPhaseDispatches: accumulateTwoPhaseDispatches,
                  accumulateTwoPhaseDispatchesSkipTarget: accumulateTwoPhaseDispatchesSkipTarget,
                  accumulateEnterLeaveDispatches: accumulateEnterLeaveDispatches,
                  accumulateDirectDispatches: accumulateDirectDispatches,
                })

                var contentKey = null

                /**
                 * Gets the key used to access text content on a DOM node.
                 *
                 * @return {?string} Key used to access text content.
                 * @internal
                 */
                function getTextContentAccessor() {
                  if (!contentKey && ExecutionEnvironment.canUseDOM) {
                    // Prefer textContent to innerText because many browsers support both but
                    // SVG <text> elements don't support innerText even when <div> does.
                    contentKey =
                      'textContent' in document.documentElement
                        ? 'textContent'
                        : 'innerText'
                  }
                  return contentKey
                }

                /**
                 * This helper object stores information about text content of a target node,
                 * allowing comparison of content before and after a given event.
                 *
                 * Identify the node where selection currently begins, then observe
                 * both its text content and its current position in the DOM. Since the
                 * browser may natively replace the target node during composition, we can
                 * use its position to find its replacement.
                 *
                 *
                 */
                var compositionState = {
                  _root: null,
                  _startText: null,
                  _fallbackText: null,
                }

                function initialize(nativeEventTarget) {
                  compositionState._root = nativeEventTarget
                  compositionState._startText = getText()
                  return true
                }

                function reset() {
                  compositionState._root = null
                  compositionState._startText = null
                  compositionState._fallbackText = null
                }

                function getData() {
                  if (compositionState._fallbackText) {
                    return compositionState._fallbackText
                  }

                  var start = void 0
                  var startValue = compositionState._startText
                  var startLength = startValue.length
                  var end = void 0
                  var endValue = getText()
                  var endLength = endValue.length

                  for (start = 0; start < startLength; start++) {
                    if (startValue[start] !== endValue[start]) {
                      break
                    }
                  }

                  var minEnd = startLength - start
                  for (end = 1; end <= minEnd; end++) {
                    if (
                      startValue[startLength - end] !==
                      endValue[endLength - end]
                    ) {
                      break
                    }
                  }

                  var sliceTail = end > 1 ? 1 - end : undefined
                  compositionState._fallbackText = endValue.slice(
                    start,
                    sliceTail
                  )
                  return compositionState._fallbackText
                }

                function getText() {
                  if ('value' in compositionState._root) {
                    return compositionState._root.value
                  }
                  return compositionState._root[getTextContentAccessor()]
                }

                /* eslint valid-typeof: 0 */

                var didWarnForAddedNewProperty = false
                var EVENT_POOL_SIZE = 10

                var shouldBeReleasedProperties = [
                  'dispatchConfig',
                  '_targetInst',
                  'nativeEvent',
                  'isDefaultPrevented',
                  'isPropagationStopped',
                  '_dispatchListeners',
                  '_dispatchInstances',
                ]

                /**
                 * @interface Event
                 * @see http://www.w3.org/TR/DOM-Level-3-Events/
                 */
                var EventInterface = {
                  type: null,
                  target: null,
                  // currentTarget is set when dispatching; no use in copying it here
                  currentTarget: emptyFunction.thatReturnsNull,
                  eventPhase: null,
                  bubbles: null,
                  cancelable: null,
                  timeStamp: function (event) {
                    return event.timeStamp || Date.now()
                  },
                  defaultPrevented: null,
                  isTrusted: null,
                }

                /**
                 * Synthetic events are dispatched by event plugins, typically in response to a
                 * top-level event delegation handler.
                 *
                 * These systems should generally use pooling to reduce the frequency of garbage
                 * collection. The system should check `isPersistent` to determine whether the
                 * event should be released into the pool after being dispatched. Users that
                 * need a persisted event should invoke `persist`.
                 *
                 * Synthetic events (and subclasses) implement the DOM Level 3 Events API by
                 * normalizing browser quirks. Subclasses do not necessarily have to implement a
                 * DOM interface; custom application-specific events can also subclass this.
                 *
                 * @param {object} dispatchConfig Configuration used to dispatch this event.
                 * @param {*} targetInst Marker identifying the event target.
                 * @param {object} nativeEvent Native browser event.
                 * @param {DOMEventTarget} nativeEventTarget Target node.
                 */
                function SyntheticEvent(
                  dispatchConfig,
                  targetInst,
                  nativeEvent,
                  nativeEventTarget
                ) {
                  {
                    // these have a getter/setter for warnings
                    delete this.nativeEvent
                    delete this.preventDefault
                    delete this.stopPropagation
                  }

                  this.dispatchConfig = dispatchConfig
                  this._targetInst = targetInst
                  this.nativeEvent = nativeEvent

                  var Interface = this.constructor.Interface
                  for (var propName in Interface) {
                    if (!Interface.hasOwnProperty(propName)) {
                      continue
                    }
                    {
                      delete this[propName] // this has a getter/setter for warnings
                    }
                    var normalize = Interface[propName]
                    if (normalize) {
                      this[propName] = normalize(nativeEvent)
                    } else {
                      if (propName === 'target') {
                        this.target = nativeEventTarget
                      } else {
                        this[propName] = nativeEvent[propName]
                      }
                    }
                  }

                  var defaultPrevented =
                    nativeEvent.defaultPrevented != null
                      ? nativeEvent.defaultPrevented
                      : nativeEvent.returnValue === false
                  if (defaultPrevented) {
                    this.isDefaultPrevented = emptyFunction.thatReturnsTrue
                  } else {
                    this.isDefaultPrevented = emptyFunction.thatReturnsFalse
                  }
                  this.isPropagationStopped = emptyFunction.thatReturnsFalse
                  return this
                }

                _assign(SyntheticEvent.prototype, {
                  preventDefault: function () {
                    this.defaultPrevented = true
                    var event = this.nativeEvent
                    if (!event) {
                      return
                    }

                    if (event.preventDefault) {
                      event.preventDefault()
                    } else if (typeof event.returnValue !== 'unknown') {
                      event.returnValue = false
                    }
                    this.isDefaultPrevented = emptyFunction.thatReturnsTrue
                  },

                  stopPropagation: function () {
                    var event = this.nativeEvent
                    if (!event) {
                      return
                    }

                    if (event.stopPropagation) {
                      event.stopPropagation()
                    } else if (typeof event.cancelBubble !== 'unknown') {
                      // The ChangeEventPlugin registers a "propertychange" event for
                      // IE. This event does not support bubbling or cancelling, and
                      // any references to cancelBubble throw "Member not found".  A
                      // typeof check of "unknown" circumvents this issue (and is also
                      // IE specific).
                      event.cancelBubble = true
                    }

                    this.isPropagationStopped = emptyFunction.thatReturnsTrue
                  },

                  /**
                   * We release all dispatched `SyntheticEvent`s after each event loop, adding
                   * them back into the pool. This allows a way to hold onto a reference that
                   * won't be added back into the pool.
                   */
                  persist: function () {
                    this.isPersistent = emptyFunction.thatReturnsTrue
                  },

                  /**
                   * Checks if this event should be released back into the pool.
                   *
                   * @return {boolean} True if this should not be released, false otherwise.
                   */
                  isPersistent: emptyFunction.thatReturnsFalse,

                  /**
                   * `PooledClass` looks for `destructor` on each instance it releases.
                   */
                  destructor: function () {
                    var Interface = this.constructor.Interface
                    for (var propName in Interface) {
                      {
                        Object.defineProperty(
                          this,
                          propName,
                          getPooledWarningPropertyDefinition(
                            propName,
                            Interface[propName]
                          )
                        )
                      }
                    }
                    for (
                      var i = 0;
                      i < shouldBeReleasedProperties.length;
                      i++
                    ) {
                      this[shouldBeReleasedProperties[i]] = null
                    }
                    {
                      Object.defineProperty(
                        this,
                        'nativeEvent',
                        getPooledWarningPropertyDefinition('nativeEvent', null)
                      )
                      Object.defineProperty(
                        this,
                        'preventDefault',
                        getPooledWarningPropertyDefinition(
                          'preventDefault',
                          emptyFunction
                        )
                      )
                      Object.defineProperty(
                        this,
                        'stopPropagation',
                        getPooledWarningPropertyDefinition(
                          'stopPropagation',
                          emptyFunction
                        )
                      )
                    }
                  },
                })

                SyntheticEvent.Interface = EventInterface

                /**
                 * Helper to reduce boilerplate when creating subclasses.
                 */
                SyntheticEvent.extend = function (Interface) {
                  var Super = this

                  var E = function () {}
                  E.prototype = Super.prototype
                  var prototype = new E()

                  function Class() {
                    return Super.apply(this, arguments)
                  }
                  _assign(prototype, Class.prototype)
                  Class.prototype = prototype
                  Class.prototype.constructor = Class

                  Class.Interface = _assign({}, Super.Interface, Interface)
                  Class.extend = Super.extend
                  addEventPoolingTo(Class)

                  return Class
                }

                /** Proxying after everything set on SyntheticEvent
                 * to resolve Proxy issue on some WebKit browsers
                 * in which some Event properties are set to undefined (GH#10010)
                 */
                {
                  var isProxySupported =
                    typeof Proxy === 'function' &&
                    // https://github.com/facebook/react/issues/12011
                    !Object.isSealed(new Proxy({}, {}))

                  if (isProxySupported) {
                    /*eslint-disable no-func-assign */
                    SyntheticEvent = new Proxy(SyntheticEvent, {
                      construct: function (target, args) {
                        return this.apply(
                          target,
                          Object.create(target.prototype),
                          args
                        )
                      },
                      apply: function (constructor, that, args) {
                        return new Proxy(constructor.apply(that, args), {
                          set: function (target, prop, value) {
                            if (
                              prop !== 'isPersistent' &&
                              !target.constructor.Interface.hasOwnProperty(
                                prop
                              ) &&
                              shouldBeReleasedProperties.indexOf(prop) === -1
                            ) {
                              !(
                                didWarnForAddedNewProperty ||
                                target.isPersistent()
                              )
                                ? warning(
                                    false,
                                    "This synthetic event is reused for performance reasons. If you're " +
                                      "seeing this, you're adding a new property in the synthetic event object. " +
                                      'The property is never released. See ' +
                                      'https://fb.me/react-event-pooling for more information.'
                                  )
                                : void 0
                              didWarnForAddedNewProperty = true
                            }
                            target[prop] = value
                            return true
                          },
                        })
                      },
                    })
                    /*eslint-enable no-func-assign */
                  }
                }

                addEventPoolingTo(SyntheticEvent)

                /**
                 * Helper to nullify syntheticEvent instance properties when destructing
                 *
                 * @param {String} propName
                 * @param {?object} getVal
                 * @return {object} defineProperty object
                 */
                function getPooledWarningPropertyDefinition(propName, getVal) {
                  var isFunction = typeof getVal === 'function'
                  return {
                    configurable: true,
                    set: set,
                    get: get,
                  }

                  function set(val) {
                    var action = isFunction
                      ? 'setting the method'
                      : 'setting the property'
                    warn(action, 'This is effectively a no-op')
                    return val
                  }

                  function get() {
                    var action = isFunction
                      ? 'accessing the method'
                      : 'accessing the property'
                    var result = isFunction
                      ? 'This is a no-op function'
                      : 'This is set to null'
                    warn(action, result)
                    return getVal
                  }

                  function warn(action, result) {
                    var warningCondition = false
                    !warningCondition
                      ? warning(
                          false,
                          "This synthetic event is reused for performance reasons. If you're seeing this, " +
                            "you're %s `%s` on a released/nullified synthetic event. %s. " +
                            'If you must keep the original synthetic event around, use event.persist(). ' +
                            'See https://fb.me/react-event-pooling for more information.',
                          action,
                          propName,
                          result
                        )
                      : void 0
                  }
                }

                function getPooledEvent(
                  dispatchConfig,
                  targetInst,
                  nativeEvent,
                  nativeInst
                ) {
                  var EventConstructor = this
                  if (EventConstructor.eventPool.length) {
                    var instance = EventConstructor.eventPool.pop()
                    EventConstructor.call(
                      instance,
                      dispatchConfig,
                      targetInst,
                      nativeEvent,
                      nativeInst
                    )
                    return instance
                  }
                  return new EventConstructor(
                    dispatchConfig,
                    targetInst,
                    nativeEvent,
                    nativeInst
                  )
                }

                function releasePooledEvent(event) {
                  var EventConstructor = this
                  !(event instanceof EventConstructor)
                    ? invariant(
                        false,
                        'Trying to release an event instance  into a pool of a different type.'
                      )
                    : void 0
                  event.destructor()
                  if (EventConstructor.eventPool.length < EVENT_POOL_SIZE) {
                    EventConstructor.eventPool.push(event)
                  }
                }

                function addEventPoolingTo(EventConstructor) {
                  EventConstructor.eventPool = []
                  EventConstructor.getPooled = getPooledEvent
                  EventConstructor.release = releasePooledEvent
                }

                var SyntheticEvent$1 = SyntheticEvent

                /**
                 * @interface Event
                 * @see http://www.w3.org/TR/DOM-Level-3-Events/#events-compositionevents
                 */
                var SyntheticCompositionEvent = SyntheticEvent$1.extend({
                  data: null,
                })

                /**
                 * @interface Event
                 * @see http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105
                 *      /#events-inputevents
                 */
                var SyntheticInputEvent = SyntheticEvent$1.extend({
                  data: null,
                })

                var END_KEYCODES = [9, 13, 27, 32] // Tab, Return, Esc, Space
                var START_KEYCODE = 229

                var canUseCompositionEvent =
                  ExecutionEnvironment.canUseDOM && 'CompositionEvent' in window

                var documentMode = null
                if (
                  ExecutionEnvironment.canUseDOM &&
                  'documentMode' in document
                ) {
                  documentMode = document.documentMode
                }

                // Webkit offers a very useful `textInput` event that can be used to
                // directly represent `beforeInput`. The IE `textinput` event is not as
                // useful, so we don't use it.
                var canUseTextInputEvent =
                  ExecutionEnvironment.canUseDOM &&
                  'TextEvent' in window &&
                  !documentMode

                // In IE9+, we have access to composition events, but the data supplied
                // by the native compositionend event may be incorrect. Japanese ideographic
                // spaces, for instance (\u3000) are not recorded correctly.
                var useFallbackCompositionData =
                  ExecutionEnvironment.canUseDOM &&
                  (!canUseCompositionEvent ||
                    (documentMode && documentMode > 8 && documentMode <= 11))

                var SPACEBAR_CODE = 32
                var SPACEBAR_CHAR = String.fromCharCode(SPACEBAR_CODE)

                // Events and their corresponding property names.
                var eventTypes = {
                  beforeInput: {
                    phasedRegistrationNames: {
                      bubbled: 'onBeforeInput',
                      captured: 'onBeforeInputCapture',
                    },
                    dependencies: [
                      'topCompositionEnd',
                      'topKeyPress',
                      'topTextInput',
                      'topPaste',
                    ],
                  },
                  compositionEnd: {
                    phasedRegistrationNames: {
                      bubbled: 'onCompositionEnd',
                      captured: 'onCompositionEndCapture',
                    },
                    dependencies: [
                      'topBlur',
                      'topCompositionEnd',
                      'topKeyDown',
                      'topKeyPress',
                      'topKeyUp',
                      'topMouseDown',
                    ],
                  },
                  compositionStart: {
                    phasedRegistrationNames: {
                      bubbled: 'onCompositionStart',
                      captured: 'onCompositionStartCapture',
                    },
                    dependencies: [
                      'topBlur',
                      'topCompositionStart',
                      'topKeyDown',
                      'topKeyPress',
                      'topKeyUp',
                      'topMouseDown',
                    ],
                  },
                  compositionUpdate: {
                    phasedRegistrationNames: {
                      bubbled: 'onCompositionUpdate',
                      captured: 'onCompositionUpdateCapture',
                    },
                    dependencies: [
                      'topBlur',
                      'topCompositionUpdate',
                      'topKeyDown',
                      'topKeyPress',
                      'topKeyUp',
                      'topMouseDown',
                    ],
                  },
                }

                // Track whether we've ever handled a keypress on the space key.
                var hasSpaceKeypress = false

                /**
                 * Return whether a native keypress event is assumed to be a command.
                 * This is required because Firefox fires `keypress` events for key commands
                 * (cut, copy, select-all, etc.) even though no character is inserted.
                 */
                function isKeypressCommand(nativeEvent) {
                  return (
                    (nativeEvent.ctrlKey ||
                      nativeEvent.altKey ||
                      nativeEvent.metaKey) &&
                    // ctrlKey && altKey is equivalent to AltGr, and is not a command.
                    !(nativeEvent.ctrlKey && nativeEvent.altKey)
                  )
                }

                /**
                 * Translate native top level events into event types.
                 *
                 * @param {string} topLevelType
                 * @return {object}
                 */
                function getCompositionEventType(topLevelType) {
                  switch (topLevelType) {
                    case 'topCompositionStart':
                      return eventTypes.compositionStart
                    case 'topCompositionEnd':
                      return eventTypes.compositionEnd
                    case 'topCompositionUpdate':
                      return eventTypes.compositionUpdate
                  }
                }

                /**
                 * Does our fallback best-guess model think this event signifies that
                 * composition has begun?
                 *
                 * @param {string} topLevelType
                 * @param {object} nativeEvent
                 * @return {boolean}
                 */
                function isFallbackCompositionStart(topLevelType, nativeEvent) {
                  return (
                    topLevelType === 'topKeyDown' &&
                    nativeEvent.keyCode === START_KEYCODE
                  )
                }

                /**
                 * Does our fallback mode think that this event is the end of composition?
                 *
                 * @param {string} topLevelType
                 * @param {object} nativeEvent
                 * @return {boolean}
                 */
                function isFallbackCompositionEnd(topLevelType, nativeEvent) {
                  switch (topLevelType) {
                    case 'topKeyUp':
                      // Command keys insert or clear IME input.
                      return END_KEYCODES.indexOf(nativeEvent.keyCode) !== -1
                    case 'topKeyDown':
                      // Expect IME keyCode on each keydown. If we get any other
                      // code we must have exited earlier.
                      return nativeEvent.keyCode !== START_KEYCODE
                    case 'topKeyPress':
                    case 'topMouseDown':
                    case 'topBlur':
                      // Events are not possible without cancelling IME.
                      return true
                    default:
                      return false
                  }
                }

                /**
                 * Google Input Tools provides composition data via a CustomEvent,
                 * with the `data` property populated in the `detail` object. If this
                 * is available on the event object, use it. If not, this is a plain
                 * composition event and we have nothing special to extract.
                 *
                 * @param {object} nativeEvent
                 * @return {?string}
                 */
                function getDataFromCustomEvent(nativeEvent) {
                  var detail = nativeEvent.detail
                  if (typeof detail === 'object' && 'data' in detail) {
                    return detail.data
                  }
                  return null
                }

                // Track the current IME composition status, if any.
                var isComposing = false

                /**
                 * @return {?object} A SyntheticCompositionEvent.
                 */
                function extractCompositionEvent(
                  topLevelType,
                  targetInst,
                  nativeEvent,
                  nativeEventTarget
                ) {
                  var eventType = void 0
                  var fallbackData = void 0

                  if (canUseCompositionEvent) {
                    eventType = getCompositionEventType(topLevelType)
                  } else if (!isComposing) {
                    if (isFallbackCompositionStart(topLevelType, nativeEvent)) {
                      eventType = eventTypes.compositionStart
                    }
                  } else if (
                    isFallbackCompositionEnd(topLevelType, nativeEvent)
                  ) {
                    eventType = eventTypes.compositionEnd
                  }

                  if (!eventType) {
                    return null
                  }

                  if (useFallbackCompositionData) {
                    // The current composition is stored statically and must not be
                    // overwritten while composition continues.
                    if (
                      !isComposing &&
                      eventType === eventTypes.compositionStart
                    ) {
                      isComposing = initialize(nativeEventTarget)
                    } else if (eventType === eventTypes.compositionEnd) {
                      if (isComposing) {
                        fallbackData = getData()
                      }
                    }
                  }

                  var event = SyntheticCompositionEvent.getPooled(
                    eventType,
                    targetInst,
                    nativeEvent,
                    nativeEventTarget
                  )

                  if (fallbackData) {
                    // Inject data generated from fallback path into the synthetic event.
                    // This matches the property of native CompositionEventInterface.
                    event.data = fallbackData
                  } else {
                    var customData = getDataFromCustomEvent(nativeEvent)
                    if (customData !== null) {
                      event.data = customData
                    }
                  }

                  accumulateTwoPhaseDispatches(event)
                  return event
                }

                /**
                 * @param {TopLevelTypes} topLevelType Record from `BrowserEventConstants`.
                 * @param {object} nativeEvent Native browser event.
                 * @return {?string} The string corresponding to this `beforeInput` event.
                 */
                function getNativeBeforeInputChars(topLevelType, nativeEvent) {
                  switch (topLevelType) {
                    case 'topCompositionEnd':
                      return getDataFromCustomEvent(nativeEvent)
                    case 'topKeyPress':
                      /**
                       * If native `textInput` events are available, our goal is to make
                       * use of them. However, there is a special case: the spacebar key.
                       * In Webkit, preventing default on a spacebar `textInput` event
                       * cancels character insertion, but it *also* causes the browser
                       * to fall back to its default spacebar behavior of scrolling the
                       * page.
                       *
                       * Tracking at:
                       * https://code.google.com/p/chromium/issues/detail?id=355103
                       *
                       * To avoid this issue, use the keypress event as if no `textInput`
                       * event is available.
                       */
                      var which = nativeEvent.which
                      if (which !== SPACEBAR_CODE) {
                        return null
                      }

                      hasSpaceKeypress = true
                      return SPACEBAR_CHAR

                    case 'topTextInput':
                      // Record the characters to be added to the DOM.
                      var chars = nativeEvent.data

                      // If it's a spacebar character, assume that we have already handled
                      // it at the keypress level and bail immediately. Android Chrome
                      // doesn't give us keycodes, so we need to blacklist it.
                      if (chars === SPACEBAR_CHAR && hasSpaceKeypress) {
                        return null
                      }

                      return chars

                    default:
                      // For other native event types, do nothing.
                      return null
                  }
                }

                /**
                 * For browsers that do not provide the `textInput` event, extract the
                 * appropriate string to use for SyntheticInputEvent.
                 *
                 * @param {string} topLevelType Record from `BrowserEventConstants`.
                 * @param {object} nativeEvent Native browser event.
                 * @return {?string} The fallback string for this `beforeInput` event.
                 */
                function getFallbackBeforeInputChars(
                  topLevelType,
                  nativeEvent
                ) {
                  // If we are currently composing (IME) and using a fallback to do so,
                  // try to extract the composed characters from the fallback object.
                  // If composition event is available, we extract a string only at
                  // compositionevent, otherwise extract it at fallback events.
                  if (isComposing) {
                    if (
                      topLevelType === 'topCompositionEnd' ||
                      (!canUseCompositionEvent &&
                        isFallbackCompositionEnd(topLevelType, nativeEvent))
                    ) {
                      var chars = getData()
                      reset()
                      isComposing = false
                      return chars
                    }
                    return null
                  }

                  switch (topLevelType) {
                    case 'topPaste':
                      // If a paste event occurs after a keypress, throw out the input
                      // chars. Paste events should not lead to BeforeInput events.
                      return null
                    case 'topKeyPress':
                      /**
                       * As of v27, Firefox may fire keypress events even when no character
                       * will be inserted. A few possibilities:
                       *
                       * - `which` is `0`. Arrow keys, Esc key, etc.
                       *
                       * - `which` is the pressed key code, but no char is available.
                       *   Ex: 'AltGr + d` in Polish. There is no modified character for
                       *   this key combination and no character is inserted into the
                       *   document, but FF fires the keypress for char code `100` anyway.
                       *   No `input` event will occur.
                       *
                       * - `which` is the pressed key code, but a command combination is
                       *   being used. Ex: `Cmd+C`. No character is inserted, and no
                       *   `input` event will occur.
                       */
                      if (!isKeypressCommand(nativeEvent)) {
                        // IE fires the `keypress` event when a user types an emoji via
                        // Touch keyboard of Windows.  In such a case, the `char` property
                        // holds an emoji character like `\uD83D\uDE0A`.  Because its length
                        // is 2, the property `which` does not represent an emoji correctly.
                        // In such a case, we directly return the `char` property instead of
                        // using `which`.
                        if (nativeEvent.char && nativeEvent.char.length > 1) {
                          return nativeEvent.char
                        } else if (nativeEvent.which) {
                          return String.fromCharCode(nativeEvent.which)
                        }
                      }
                      return null
                    case 'topCompositionEnd':
                      return useFallbackCompositionData
                        ? null
                        : nativeEvent.data
                    default:
                      return null
                  }
                }

                /**
                 * Extract a SyntheticInputEvent for `beforeInput`, based on either native
                 * `textInput` or fallback behavior.
                 *
                 * @return {?object} A SyntheticInputEvent.
                 */
                function extractBeforeInputEvent(
                  topLevelType,
                  targetInst,
                  nativeEvent,
                  nativeEventTarget
                ) {
                  var chars = void 0

                  if (canUseTextInputEvent) {
                    chars = getNativeBeforeInputChars(topLevelType, nativeEvent)
                  } else {
                    chars = getFallbackBeforeInputChars(
                      topLevelType,
                      nativeEvent
                    )
                  }

                  // If no characters are being inserted, no BeforeInput event should
                  // be fired.
                  if (!chars) {
                    return null
                  }

                  var event = SyntheticInputEvent.getPooled(
                    eventTypes.beforeInput,
                    targetInst,
                    nativeEvent,
                    nativeEventTarget
                  )

                  event.data = chars
                  accumulateTwoPhaseDispatches(event)
                  return event
                }

                /**
                 * Create an `onBeforeInput` event to match
                 * http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105/#events-inputevents.
                 *
                 * This event plugin is based on the native `textInput` event
                 * available in Chrome, Safari, Opera, and IE. This event fires after
                 * `onKeyPress` and `onCompositionEnd`, but before `onInput`.
                 *
                 * `beforeInput` is spec'd but not implemented in any browsers, and
                 * the `input` event does not provide any useful information about what has
                 * actually been added, contrary to the spec. Thus, `textInput` is the best
                 * available event to identify the characters that have actually been inserted
                 * into the target node.
                 *
                 * This plugin is also responsible for emitting `composition` events, thus
                 * allowing us to share composition fallback code for both `beforeInput` and
                 * `composition` event types.
                 */
                var BeforeInputEventPlugin = {
                  eventTypes: eventTypes,

                  extractEvents: function (
                    topLevelType,
                    targetInst,
                    nativeEvent,
                    nativeEventTarget
                  ) {
                    var composition = extractCompositionEvent(
                      topLevelType,
                      targetInst,
                      nativeEvent,
                      nativeEventTarget
                    )

                    var beforeInput = extractBeforeInputEvent(
                      topLevelType,
                      targetInst,
                      nativeEvent,
                      nativeEventTarget
                    )

                    if (composition === null) {
                      return beforeInput
                    }

                    if (beforeInput === null) {
                      return composition
                    }

                    return [composition, beforeInput]
                  },
                }

                // Use to restore controlled state after a change event has fired.

                var fiberHostComponent = null

                var ReactControlledComponentInjection = {
                  injectFiberControlledHostComponent: function (
                    hostComponentImpl
                  ) {
                    // The fiber implementation doesn't use dynamic dispatch so we need to
                    // inject the implementation.
                    fiberHostComponent = hostComponentImpl
                  },
                }

                var restoreTarget = null
                var restoreQueue = null

                function restoreStateOfTarget(target) {
                  // We perform this translation at the end of the event loop so that we
                  // always receive the correct fiber here
                  var internalInstance = getInstanceFromNode(target)
                  if (!internalInstance) {
                    // Unmounted
                    return
                  }
                  !(
                    fiberHostComponent &&
                    typeof fiberHostComponent.restoreControlledState ===
                      'function'
                  )
                    ? invariant(
                        false,
                        'Fiber needs to be injected to handle a fiber target for controlled events. This error is likely caused by a bug in React. Please file an issue.'
                      )
                    : void 0
                  var props = getFiberCurrentPropsFromNode(
                    internalInstance.stateNode
                  )
                  fiberHostComponent.restoreControlledState(
                    internalInstance.stateNode,
                    internalInstance.type,
                    props
                  )
                }

                var injection$2 = ReactControlledComponentInjection

                function enqueueStateRestore(target) {
                  if (restoreTarget) {
                    if (restoreQueue) {
                      restoreQueue.push(target)
                    } else {
                      restoreQueue = [target]
                    }
                  } else {
                    restoreTarget = target
                  }
                }

                function needsStateRestore() {
                  return restoreTarget !== null || restoreQueue !== null
                }

                function restoreStateIfNeeded() {
                  if (!restoreTarget) {
                    return
                  }
                  var target = restoreTarget
                  var queuedTargets = restoreQueue
                  restoreTarget = null
                  restoreQueue = null

                  restoreStateOfTarget(target)
                  if (queuedTargets) {
                    for (var i = 0; i < queuedTargets.length; i++) {
                      restoreStateOfTarget(queuedTargets[i])
                    }
                  }
                }

                var ReactControlledComponent = Object.freeze({
                  injection: injection$2,
                  enqueueStateRestore: enqueueStateRestore,
                  needsStateRestore: needsStateRestore,
                  restoreStateIfNeeded: restoreStateIfNeeded,
                })

                // Used as a way to call batchedUpdates when we don't have a reference to
                // the renderer. Such as when we're dispatching events or if third party
                // libraries need to call batchedUpdates. Eventually, this API will go away when
                // everything is batched by default. We'll then have a similar API to opt-out of
                // scheduled work and instead do synchronous work.

                // Defaults
                var _batchedUpdates = function (fn, bookkeeping) {
                  return fn(bookkeeping)
                }
                var _interactiveUpdates = function (fn, a, b) {
                  return fn(a, b)
                }
                var _flushInteractiveUpdates = function () {}

                var isBatching = false
                function batchedUpdates(fn, bookkeeping) {
                  if (isBatching) {
                    // If we are currently inside another batch, we need to wait until it
                    // fully completes before restoring state.
                    return fn(bookkeeping)
                  }
                  isBatching = true
                  try {
                    return _batchedUpdates(fn, bookkeeping)
                  } finally {
                    // Here we wait until all updates have propagated, which is important
                    // when using controlled components within layers:
                    // https://github.com/facebook/react/issues/1698
                    // Then we restore state of any controlled component.
                    isBatching = false
                    var controlledComponentsHavePendingUpdates = needsStateRestore()
                    if (controlledComponentsHavePendingUpdates) {
                      // If a controlled event was fired, we may need to restore the state of
                      // the DOM node back to the controlled value. This is necessary when React
                      // bails out of the update without touching the DOM.
                      _flushInteractiveUpdates()
                      restoreStateIfNeeded()
                    }
                  }
                }

                function interactiveUpdates(fn, a, b) {
                  return _interactiveUpdates(fn, a, b)
                }

                var injection$3 = {
                  injectRenderer: function (renderer) {
                    _batchedUpdates = renderer.batchedUpdates
                    _interactiveUpdates = renderer.interactiveUpdates
                    _flushInteractiveUpdates = renderer.flushInteractiveUpdates
                  },
                }

                /**
                 * @see http://www.whatwg.org/specs/web-apps/current-work/multipage/the-input-element.html#input-type-attr-summary
                 */
                var supportedInputTypes = {
                  color: true,
                  date: true,
                  datetime: true,
                  'datetime-local': true,
                  email: true,
                  month: true,
                  number: true,
                  password: true,
                  range: true,
                  search: true,
                  tel: true,
                  text: true,
                  time: true,
                  url: true,
                  week: true,
                }

                function isTextInputElement(elem) {
                  var nodeName =
                    elem && elem.nodeName && elem.nodeName.toLowerCase()

                  if (nodeName === 'input') {
                    return !!supportedInputTypes[elem.type]
                  }

                  if (nodeName === 'textarea') {
                    return true
                  }

                  return false
                }

                /**
                 * HTML nodeType values that represent the type of the node
                 */

                var ELEMENT_NODE = 1
                var TEXT_NODE = 3
                var COMMENT_NODE = 8
                var DOCUMENT_NODE = 9
                var DOCUMENT_FRAGMENT_NODE = 11

                /**
                 * Gets the target node from a native browser event by accounting for
                 * inconsistencies in browser DOM APIs.
                 *
                 * @param {object} nativeEvent Native browser event.
                 * @return {DOMEventTarget} Target node.
                 */
                function getEventTarget(nativeEvent) {
                  var target = nativeEvent.target || window

                  // Normalize SVG <use> element events #4963
                  if (target.correspondingUseElement) {
                    target = target.correspondingUseElement
                  }

                  // Safari may fire events on text nodes (Node.TEXT_NODE is 3).
                  // @see http://www.quirksmode.org/js/events_properties.html
                  return target.nodeType === TEXT_NODE
                    ? target.parentNode
                    : target
                }

                /**
                 * Checks if an event is supported in the current execution environment.
                 *
                 * NOTE: This will not work correctly for non-generic events such as `change`,
                 * `reset`, `load`, `error`, and `select`.
                 *
                 * Borrows from Modernizr.
                 *
                 * @param {string} eventNameSuffix Event name, e.g. "click".
                 * @param {?boolean} capture Check if the capture phase is supported.
                 * @return {boolean} True if the event is supported.
                 * @internal
                 * @license Modernizr 3.0.0pre (Custom Build) | MIT
                 */
                function isEventSupported(eventNameSuffix, capture) {
                  if (
                    !ExecutionEnvironment.canUseDOM ||
                    (capture && !('addEventListener' in document))
                  ) {
                    return false
                  }

                  var eventName = 'on' + eventNameSuffix
                  var isSupported = eventName in document

                  if (!isSupported) {
                    var element = document.createElement('div')
                    element.setAttribute(eventName, 'return;')
                    isSupported = typeof element[eventName] === 'function'
                  }

                  return isSupported
                }

                function isCheckable(elem) {
                  var type = elem.type
                  var nodeName = elem.nodeName
                  return (
                    nodeName &&
                    nodeName.toLowerCase() === 'input' &&
                    (type === 'checkbox' || type === 'radio')
                  )
                }

                function getTracker(node) {
                  return node._valueTracker
                }

                function detachTracker(node) {
                  node._valueTracker = null
                }

                function getValueFromNode(node) {
                  var value = ''
                  if (!node) {
                    return value
                  }

                  if (isCheckable(node)) {
                    value = node.checked ? 'true' : 'false'
                  } else {
                    value = node.value
                  }

                  return value
                }

                function trackValueOnNode(node) {
                  var valueField = isCheckable(node) ? 'checked' : 'value'
                  var descriptor = Object.getOwnPropertyDescriptor(
                    node.constructor.prototype,
                    valueField
                  )

                  var currentValue = '' + node[valueField]

                  // if someone has already defined a value or Safari, then bail
                  // and don't track value will cause over reporting of changes,
                  // but it's better then a hard failure
                  // (needed for certain tests that spyOn input values and Safari)
                  if (
                    node.hasOwnProperty(valueField) ||
                    typeof descriptor.get !== 'function' ||
                    typeof descriptor.set !== 'function'
                  ) {
                    return
                  }

                  Object.defineProperty(node, valueField, {
                    configurable: true,
                    get: function () {
                      return descriptor.get.call(this)
                    },
                    set: function (value) {
                      currentValue = '' + value
                      descriptor.set.call(this, value)
                    },
                  })
                  // We could've passed this the first time
                  // but it triggers a bug in IE11 and Edge 14/15.
                  // Calling defineProperty() again should be equivalent.
                  // https://github.com/facebook/react/issues/11768
                  Object.defineProperty(node, valueField, {
                    enumerable: descriptor.enumerable,
                  })

                  var tracker = {
                    getValue: function () {
                      return currentValue
                    },
                    setValue: function (value) {
                      currentValue = '' + value
                    },
                    stopTracking: function () {
                      detachTracker(node)
                      delete node[valueField]
                    },
                  }
                  return tracker
                }

                function track(node) {
                  if (getTracker(node)) {
                    return
                  }

                  // TODO: Once it's just Fiber we can move this to node._wrapperState
                  node._valueTracker = trackValueOnNode(node)
                }

                function updateValueIfChanged(node) {
                  if (!node) {
                    return false
                  }

                  var tracker = getTracker(node)
                  // if there is no tracker at this point it's unlikely
                  // that trying again will succeed
                  if (!tracker) {
                    return true
                  }

                  var lastValue = tracker.getValue()
                  var nextValue = getValueFromNode(node)
                  if (nextValue !== lastValue) {
                    tracker.setValue(nextValue)
                    return true
                  }
                  return false
                }

                var ReactInternals =
                  React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED

                var ReactCurrentOwner = ReactInternals.ReactCurrentOwner
                var ReactDebugCurrentFrame =
                  ReactInternals.ReactDebugCurrentFrame

                var describeComponentFrame = function (
                  name,
                  source,
                  ownerName
                ) {
                  return (
                    '\n    in ' +
                    (name || 'Unknown') +
                    (source
                      ? ' (at ' +
                        source.fileName.replace(/^.*[\\\/]/, '') +
                        ':' +
                        source.lineNumber +
                        ')'
                      : ownerName
                      ? ' (created by ' + ownerName + ')'
                      : '')
                  )
                }

                // The Symbol used to tag the ReactElement-like types. If there is no native Symbol
                // nor polyfill, then a plain number is used for performance.
                var hasSymbol = typeof Symbol === 'function' && Symbol['for']

                var REACT_ELEMENT_TYPE = hasSymbol
                  ? Symbol['for']('react.element')
                  : 0xeac7
                var REACT_CALL_TYPE = hasSymbol
                  ? Symbol['for']('react.call')
                  : 0xeac8
                var REACT_RETURN_TYPE = hasSymbol
                  ? Symbol['for']('react.return')
                  : 0xeac9
                var REACT_PORTAL_TYPE = hasSymbol
                  ? Symbol['for']('react.portal')
                  : 0xeaca
                var REACT_FRAGMENT_TYPE = hasSymbol
                  ? Symbol['for']('react.fragment')
                  : 0xeacb
                var REACT_STRICT_MODE_TYPE = hasSymbol
                  ? Symbol['for']('react.strict_mode')
                  : 0xeacc
                var REACT_PROVIDER_TYPE = hasSymbol
                  ? Symbol['for']('react.provider')
                  : 0xeacd
                var REACT_CONTEXT_TYPE = hasSymbol
                  ? Symbol['for']('react.context')
                  : 0xeace
                var REACT_ASYNC_MODE_TYPE = hasSymbol
                  ? Symbol['for']('react.async_mode')
                  : 0xeacf
                var REACT_FORWARD_REF_TYPE = hasSymbol
                  ? Symbol['for']('react.forward_ref')
                  : 0xead0

                var MAYBE_ITERATOR_SYMBOL =
                  typeof Symbol === 'function' && Symbol.iterator
                var FAUX_ITERATOR_SYMBOL = '@@iterator'

                function getIteratorFn(maybeIterable) {
                  if (
                    maybeIterable === null ||
                    typeof maybeIterable === 'undefined'
                  ) {
                    return null
                  }
                  var maybeIterator =
                    (MAYBE_ITERATOR_SYMBOL &&
                      maybeIterable[MAYBE_ITERATOR_SYMBOL]) ||
                    maybeIterable[FAUX_ITERATOR_SYMBOL]
                  if (typeof maybeIterator === 'function') {
                    return maybeIterator
                  }
                  return null
                }

                function getComponentName(fiber) {
                  var type = fiber.type

                  if (typeof type === 'function') {
                    return type.displayName || type.name
                  }
                  if (typeof type === 'string') {
                    return type
                  }
                  switch (type) {
                    case REACT_FRAGMENT_TYPE:
                      return 'ReactFragment'
                    case REACT_PORTAL_TYPE:
                      return 'ReactPortal'
                    case REACT_CALL_TYPE:
                      return 'ReactCall'
                    case REACT_RETURN_TYPE:
                      return 'ReactReturn'
                  }
                  if (typeof type === 'object' && type !== null) {
                    switch (type.$$typeof) {
                      case REACT_FORWARD_REF_TYPE:
                        var functionName =
                          type.render.displayName || type.render.name || ''
                        return functionName !== ''
                          ? 'ForwardRef(' + functionName + ')'
                          : 'ForwardRef'
                    }
                  }
                  return null
                }

                function describeFiber(fiber) {
                  switch (fiber.tag) {
                    case IndeterminateComponent:
                    case FunctionalComponent:
                    case ClassComponent:
                    case HostComponent:
                      var owner = fiber._debugOwner
                      var source = fiber._debugSource
                      var name = getComponentName(fiber)
                      var ownerName = null
                      if (owner) {
                        ownerName = getComponentName(owner)
                      }
                      return describeComponentFrame(name, source, ownerName)
                    default:
                      return ''
                  }
                }

                // This function can only be called with a work-in-progress fiber and
                // only during begin or complete phase. Do not call it under any other
                // circumstances.
                function getStackAddendumByWorkInProgressFiber(workInProgress) {
                  var info = ''
                  var node = workInProgress
                  do {
                    info += describeFiber(node)
                    // Otherwise this return pointer might point to the wrong tree:
                    node = node['return']
                  } while (node)
                  return info
                }

                function getCurrentFiberOwnerName$1() {
                  {
                    var fiber = ReactDebugCurrentFiber.current
                    if (fiber === null) {
                      return null
                    }
                    var owner = fiber._debugOwner
                    if (owner !== null && typeof owner !== 'undefined') {
                      return getComponentName(owner)
                    }
                  }
                  return null
                }

                function getCurrentFiberStackAddendum$1() {
                  {
                    var fiber = ReactDebugCurrentFiber.current
                    if (fiber === null) {
                      return null
                    }
                    // Safe because if current fiber exists, we are reconciling,
                    // and it is guaranteed to be the work-in-progress version.
                    return getStackAddendumByWorkInProgressFiber(fiber)
                  }
                  return null
                }

                function resetCurrentFiber() {
                  ReactDebugCurrentFrame.getCurrentStack = null
                  ReactDebugCurrentFiber.current = null
                  ReactDebugCurrentFiber.phase = null
                }

                function setCurrentFiber(fiber) {
                  ReactDebugCurrentFrame.getCurrentStack = getCurrentFiberStackAddendum$1
                  ReactDebugCurrentFiber.current = fiber
                  ReactDebugCurrentFiber.phase = null
                }

                function setCurrentPhase(phase) {
                  ReactDebugCurrentFiber.phase = phase
                }

                var ReactDebugCurrentFiber = {
                  current: null,
                  phase: null,
                  resetCurrentFiber: resetCurrentFiber,
                  setCurrentFiber: setCurrentFiber,
                  setCurrentPhase: setCurrentPhase,
                  getCurrentFiberOwnerName: getCurrentFiberOwnerName$1,
                  getCurrentFiberStackAddendum: getCurrentFiberStackAddendum$1,
                }

                // A reserved attribute.
                // It is handled by React separately and shouldn't be written to the DOM.
                var RESERVED = 0

                // A simple string attribute.
                // Attributes that aren't in the whitelist are presumed to have this type.
                var STRING = 1

                // A string attribute that accepts booleans in React. In HTML, these are called
                // "enumerated" attributes with "true" and "false" as possible values.
                // When true, it should be set to a "true" string.
                // When false, it should be set to a "false" string.
                var BOOLEANISH_STRING = 2

                // A real boolean attribute.
                // When true, it should be present (set either to an empty string or its name).
                // When false, it should be omitted.
                var BOOLEAN = 3

                // An attribute that can be used as a flag as well as with a value.
                // When true, it should be present (set either to an empty string or its name).
                // When false, it should be omitted.
                // For any other value, should be present with that value.
                var OVERLOADED_BOOLEAN = 4

                // An attribute that must be numeric or parse as a numeric.
                // When falsy, it should be removed.
                var NUMERIC = 5

                // An attribute that must be positive numeric or parse as a positive numeric.
                // When falsy, it should be removed.
                var POSITIVE_NUMERIC = 6

                /* eslint-disable max-len */
                var ATTRIBUTE_NAME_START_CHAR =
                  ':A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD'
                /* eslint-enable max-len */
                var ATTRIBUTE_NAME_CHAR =
                  ATTRIBUTE_NAME_START_CHAR +
                  '\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040'

                var ROOT_ATTRIBUTE_NAME = 'data-reactroot'
                var VALID_ATTRIBUTE_NAME_REGEX = new RegExp(
                  '^[' +
                    ATTRIBUTE_NAME_START_CHAR +
                    '][' +
                    ATTRIBUTE_NAME_CHAR +
                    ']*$'
                )

                var illegalAttributeNameCache = {}
                var validatedAttributeNameCache = {}

                function isAttributeNameSafe(attributeName) {
                  if (
                    validatedAttributeNameCache.hasOwnProperty(attributeName)
                  ) {
                    return true
                  }
                  if (illegalAttributeNameCache.hasOwnProperty(attributeName)) {
                    return false
                  }
                  if (VALID_ATTRIBUTE_NAME_REGEX.test(attributeName)) {
                    validatedAttributeNameCache[attributeName] = true
                    return true
                  }
                  illegalAttributeNameCache[attributeName] = true
                  {
                    warning(
                      false,
                      'Invalid attribute name: `%s`',
                      attributeName
                    )
                  }
                  return false
                }

                function shouldIgnoreAttribute(
                  name,
                  propertyInfo,
                  isCustomComponentTag
                ) {
                  if (propertyInfo !== null) {
                    return propertyInfo.type === RESERVED
                  }
                  if (isCustomComponentTag) {
                    return false
                  }
                  if (
                    name.length > 2 &&
                    (name[0] === 'o' || name[0] === 'O') &&
                    (name[1] === 'n' || name[1] === 'N')
                  ) {
                    return true
                  }
                  return false
                }

                function shouldRemoveAttributeWithWarning(
                  name,
                  value,
                  propertyInfo,
                  isCustomComponentTag
                ) {
                  if (propertyInfo !== null && propertyInfo.type === RESERVED) {
                    return false
                  }
                  switch (typeof value) {
                    case 'function':
                    // $FlowIssue symbol is perfectly valid here
                    case 'symbol':
                      // eslint-disable-line
                      return true
                    case 'boolean': {
                      if (isCustomComponentTag) {
                        return false
                      }
                      if (propertyInfo !== null) {
                        return !propertyInfo.acceptsBooleans
                      } else {
                        var prefix = name.toLowerCase().slice(0, 5)
                        return prefix !== 'data-' && prefix !== 'aria-'
                      }
                    }
                    default:
                      return false
                  }
                }

                function shouldRemoveAttribute(
                  name,
                  value,
                  propertyInfo,
                  isCustomComponentTag
                ) {
                  if (value === null || typeof value === 'undefined') {
                    return true
                  }
                  if (
                    shouldRemoveAttributeWithWarning(
                      name,
                      value,
                      propertyInfo,
                      isCustomComponentTag
                    )
                  ) {
                    return true
                  }
                  if (propertyInfo !== null) {
                    switch (propertyInfo.type) {
                      case BOOLEAN:
                        return !value
                      case OVERLOADED_BOOLEAN:
                        return value === false
                      case NUMERIC:
                        return isNaN(value)
                      case POSITIVE_NUMERIC:
                        return isNaN(value) || value < 1
                    }
                  }
                  return false
                }

                function getPropertyInfo(name) {
                  return properties.hasOwnProperty(name)
                    ? properties[name]
                    : null
                }

                function PropertyInfoRecord(
                  name,
                  type,
                  mustUseProperty,
                  attributeName,
                  attributeNamespace
                ) {
                  this.acceptsBooleans =
                    type === BOOLEANISH_STRING ||
                    type === BOOLEAN ||
                    type === OVERLOADED_BOOLEAN
                  this.attributeName = attributeName
                  this.attributeNamespace = attributeNamespace
                  this.mustUseProperty = mustUseProperty
                  this.propertyName = name
                  this.type = type
                }

                // When adding attributes to this list, be sure to also add them to
                // the `possibleStandardNames` module to ensure casing and incorrect
                // name warnings.
                var properties = {}

                // These props are reserved by React. They shouldn't be written to the DOM.
                ;[
                  'children',
                  'dangerouslySetInnerHTML',
                  // TODO: This prevents the assignment of defaultValue to regular
                  // elements (not just inputs). Now that ReactDOMInput assigns to the
                  // defaultValue property -- do we need this?
                  'defaultValue',
                  'defaultChecked',
                  'innerHTML',
                  'suppressContentEditableWarning',
                  'suppressHydrationWarning',
                  'style',
                ].forEach(function (name) {
                  properties[name] = new PropertyInfoRecord(
                    name,
                    RESERVED,
                    false, // mustUseProperty
                    name, // attributeName
                    null
                  )
                })

                // A few React string attributes have a different name.
                // This is a mapping from React prop names to the attribute names.
                ;[
                  ['acceptCharset', 'accept-charset'],
                  ['className', 'class'],
                  ['htmlFor', 'for'],
                  ['httpEquiv', 'http-equiv'],
                ].forEach(function (_ref) {
                  var name = _ref[0],
                    attributeName = _ref[1]

                  properties[name] = new PropertyInfoRecord(
                    name,
                    STRING,
                    false, // mustUseProperty
                    attributeName, // attributeName
                    null
                  )
                })

                // These are "enumerated" HTML attributes that accept "true" and "false".
                // In React, we let users pass `true` and `false` even though technically
                // these aren't boolean attributes (they are coerced to strings).
                ;[
                  'contentEditable',
                  'draggable',
                  'spellCheck',
                  'value',
                ].forEach(function (name) {
                  properties[name] = new PropertyInfoRecord(
                    name,
                    BOOLEANISH_STRING,
                    false, // mustUseProperty
                    name.toLowerCase(), // attributeName
                    null
                  )
                })

                // These are "enumerated" SVG attributes that accept "true" and "false".
                // In React, we let users pass `true` and `false` even though technically
                // these aren't boolean attributes (they are coerced to strings).
                // Since these are SVG attributes, their attribute names are case-sensitive.
                ;[
                  'autoReverse',
                  'externalResourcesRequired',
                  'preserveAlpha',
                ].forEach(function (name) {
                  properties[name] = new PropertyInfoRecord(
                    name,
                    BOOLEANISH_STRING,
                    false, // mustUseProperty
                    name, // attributeName
                    null
                  )
                })

                // These are HTML boolean attributes.
                ;[
                  'allowFullScreen',
                  'async',
                  // Note: there is a special case that prevents it from being written to the DOM
                  // on the client side because the browsers are inconsistent. Instead we call focus().
                  'autoFocus',
                  'autoPlay',
                  'controls',
                  'default',
                  'defer',
                  'disabled',
                  'formNoValidate',
                  'hidden',
                  'loop',
                  'noModule',
                  'noValidate',
                  'open',
                  'playsInline',
                  'readOnly',
                  'required',
                  'reversed',
                  'scoped',
                  'seamless',
                  // Microdata
                  'itemScope',
                ].forEach(function (name) {
                  properties[name] = new PropertyInfoRecord(
                    name,
                    BOOLEAN,
                    false, // mustUseProperty
                    name.toLowerCase(), // attributeName
                    null
                  )
                })

                // These are the few React props that we set as DOM properties
                // rather than attributes. These are all booleans.
                ;[
                  'checked',
                  // Note: `option.selected` is not updated if `select.multiple` is
                  // disabled with `removeAttribute`. We have special logic for handling this.
                  'multiple',
                  'muted',
                  'selected',
                ].forEach(function (name) {
                  properties[name] = new PropertyInfoRecord(
                    name,
                    BOOLEAN,
                    true, // mustUseProperty
                    name.toLowerCase(), // attributeName
                    null
                  )
                })

                // These are HTML attributes that are "overloaded booleans": they behave like
                // booleans, but can also accept a string value.
                ;['capture', 'download'].forEach(function (name) {
                  properties[name] = new PropertyInfoRecord(
                    name,
                    OVERLOADED_BOOLEAN,
                    false, // mustUseProperty
                    name.toLowerCase(), // attributeName
                    null
                  )
                })

                // These are HTML attributes that must be positive numbers.
                ;['cols', 'rows', 'size', 'span'].forEach(function (name) {
                  properties[name] = new PropertyInfoRecord(
                    name,
                    POSITIVE_NUMERIC,
                    false, // mustUseProperty
                    name.toLowerCase(), // attributeName
                    null
                  )
                })

                // These are HTML attributes that must be numbers.
                ;['rowSpan', 'start'].forEach(function (name) {
                  properties[name] = new PropertyInfoRecord(
                    name,
                    NUMERIC,
                    false, // mustUseProperty
                    name.toLowerCase(), // attributeName
                    null
                  )
                })

                var CAMELIZE = /[\-\:]([a-z])/g
                var capitalize = function (token) {
                  return token[1].toUpperCase()
                }

                // This is a list of all SVG attributes that need special casing, namespacing,
                // or boolean value assignment. Regular attributes that just accept strings
                // and have the same names are omitted, just like in the HTML whitelist.
                // Some of these attributes can be hard to find. This list was created by
                // scrapping the MDN documentation.
                ;[
                  'accent-height',
                  'alignment-baseline',
                  'arabic-form',
                  'baseline-shift',
                  'cap-height',
                  'clip-path',
                  'clip-rule',
                  'color-interpolation',
                  'color-interpolation-filters',
                  'color-profile',
                  'color-rendering',
                  'dominant-baseline',
                  'enable-background',
                  'fill-opacity',
                  'fill-rule',
                  'flood-color',
                  'flood-opacity',
                  'font-family',
                  'font-size',
                  'font-size-adjust',
                  'font-stretch',
                  'font-style',
                  'font-variant',
                  'font-weight',
                  'glyph-name',
                  'glyph-orientation-horizontal',
                  'glyph-orientation-vertical',
                  'horiz-adv-x',
                  'horiz-origin-x',
                  'image-rendering',
                  'letter-spacing',
                  'lighting-color',
                  'marker-end',
                  'marker-mid',
                  'marker-start',
                  'overline-position',
                  'overline-thickness',
                  'paint-order',
                  'panose-1',
                  'pointer-events',
                  'rendering-intent',
                  'shape-rendering',
                  'stop-color',
                  'stop-opacity',
                  'strikethrough-position',
                  'strikethrough-thickness',
                  'stroke-dasharray',
                  'stroke-dashoffset',
                  'stroke-linecap',
                  'stroke-linejoin',
                  'stroke-miterlimit',
                  'stroke-opacity',
                  'stroke-width',
                  'text-anchor',
                  'text-decoration',
                  'text-rendering',
                  'underline-position',
                  'underline-thickness',
                  'unicode-bidi',
                  'unicode-range',
                  'units-per-em',
                  'v-alphabetic',
                  'v-hanging',
                  'v-ideographic',
                  'v-mathematical',
                  'vector-effect',
                  'vert-adv-y',
                  'vert-origin-x',
                  'vert-origin-y',
                  'word-spacing',
                  'writing-mode',
                  'xmlns:xlink',
                  'x-height',
                ].forEach(function (attributeName) {
                  var name = attributeName.replace(CAMELIZE, capitalize)
                  properties[name] = new PropertyInfoRecord(
                    name,
                    STRING,
                    false, // mustUseProperty
                    attributeName,
                    null
                  )
                })

                // String SVG attributes with the xlink namespace.
                ;[
                  'xlink:actuate',
                  'xlink:arcrole',
                  'xlink:href',
                  'xlink:role',
                  'xlink:show',
                  'xlink:title',
                  'xlink:type',
                ].forEach(function (attributeName) {
                  var name = attributeName.replace(CAMELIZE, capitalize)
                  properties[name] = new PropertyInfoRecord(
                    name,
                    STRING,
                    false, // mustUseProperty
                    attributeName,
                    'http://www.w3.org/1999/xlink'
                  )
                })

                // String SVG attributes with the xml namespace.
                ;['xml:base', 'xml:lang', 'xml:space'].forEach(function (
                  attributeName
                ) {
                  var name = attributeName.replace(CAMELIZE, capitalize)
                  properties[name] = new PropertyInfoRecord(
                    name,
                    STRING,
                    false, // mustUseProperty
                    attributeName,
                    'http://www.w3.org/XML/1998/namespace'
                  )
                })

                // Special case: this attribute exists both in HTML and SVG.
                // Its "tabindex" attribute name is case-sensitive in SVG so we can't just use
                // its React `tabIndex` name, like we do for attributes that exist only in HTML.
                properties.tabIndex = new PropertyInfoRecord(
                  'tabIndex',
                  STRING,
                  false, // mustUseProperty
                  'tabindex', // attributeName
                  null
                )

                /**
                 * Get the value for a property on a node. Only used in DEV for SSR validation.
                 * The "expected" argument is used as a hint of what the expected value is.
                 * Some properties have multiple equivalent values.
                 */
                function getValueForProperty(
                  node,
                  name,
                  expected,
                  propertyInfo
                ) {
                  {
                    if (propertyInfo.mustUseProperty) {
                      var propertyName = propertyInfo.propertyName

                      return node[propertyName]
                    } else {
                      var attributeName = propertyInfo.attributeName

                      var stringValue = null

                      if (propertyInfo.type === OVERLOADED_BOOLEAN) {
                        if (node.hasAttribute(attributeName)) {
                          var value = node.getAttribute(attributeName)
                          if (value === '') {
                            return true
                          }
                          if (
                            shouldRemoveAttribute(
                              name,
                              expected,
                              propertyInfo,
                              false
                            )
                          ) {
                            return value
                          }
                          if (value === '' + expected) {
                            return expected
                          }
                          return value
                        }
                      } else if (node.hasAttribute(attributeName)) {
                        if (
                          shouldRemoveAttribute(
                            name,
                            expected,
                            propertyInfo,
                            false
                          )
                        ) {
                          // We had an attribute but shouldn't have had one, so read it
                          // for the error message.
                          return node.getAttribute(attributeName)
                        }
                        if (propertyInfo.type === BOOLEAN) {
                          // If this was a boolean, it doesn't matter what the value is
                          // the fact that we have it is the same as the expected.
                          return expected
                        }
                        // Even if this property uses a namespace we use getAttribute
                        // because we assume its namespaced name is the same as our config.
                        // To use getAttributeNS we need the local name which we don't have
                        // in our config atm.
                        stringValue = node.getAttribute(attributeName)
                      }

                      if (
                        shouldRemoveAttribute(
                          name,
                          expected,
                          propertyInfo,
                          false
                        )
                      ) {
                        return stringValue === null ? expected : stringValue
                      } else if (stringValue === '' + expected) {
                        return expected
                      } else {
                        return stringValue
                      }
                    }
                  }
                }

                /**
                 * Get the value for a attribute on a node. Only used in DEV for SSR validation.
                 * The third argument is used as a hint of what the expected value is. Some
                 * attributes have multiple equivalent values.
                 */
                function getValueForAttribute(node, name, expected) {
                  {
                    if (!isAttributeNameSafe(name)) {
                      return
                    }
                    if (!node.hasAttribute(name)) {
                      return expected === undefined ? undefined : null
                    }
                    var value = node.getAttribute(name)
                    if (value === '' + expected) {
                      return expected
                    }
                    return value
                  }
                }

                /**
                 * Sets the value for a property on a node.
                 *
                 * @param {DOMElement} node
                 * @param {string} name
                 * @param {*} value
                 */
                function setValueForProperty(
                  node,
                  name,
                  value,
                  isCustomComponentTag
                ) {
                  var propertyInfo = getPropertyInfo(name)
                  if (
                    shouldIgnoreAttribute(
                      name,
                      propertyInfo,
                      isCustomComponentTag
                    )
                  ) {
                    return
                  }
                  if (
                    shouldRemoveAttribute(
                      name,
                      value,
                      propertyInfo,
                      isCustomComponentTag
                    )
                  ) {
                    value = null
                  }
                  // If the prop isn't in the special list, treat it as a simple attribute.
                  if (isCustomComponentTag || propertyInfo === null) {
                    if (isAttributeNameSafe(name)) {
                      var _attributeName = name
                      if (value === null) {
                        node.removeAttribute(_attributeName)
                      } else {
                        node.setAttribute(_attributeName, '' + value)
                      }
                    }
                    return
                  }
                  var mustUseProperty = propertyInfo.mustUseProperty

                  if (mustUseProperty) {
                    var propertyName = propertyInfo.propertyName

                    if (value === null) {
                      var type = propertyInfo.type

                      node[propertyName] = type === BOOLEAN ? false : ''
                    } else {
                      // Contrary to `setAttribute`, object properties are properly
                      // `toString`ed by IE8/9.
                      node[propertyName] = value
                    }
                    return
                  }
                  // The rest are treated as attributes with special cases.
                  var attributeName = propertyInfo.attributeName,
                    attributeNamespace = propertyInfo.attributeNamespace

                  if (value === null) {
                    node.removeAttribute(attributeName)
                  } else {
                    var _type = propertyInfo.type

                    var attributeValue = void 0
                    if (
                      _type === BOOLEAN ||
                      (_type === OVERLOADED_BOOLEAN && value === true)
                    ) {
                      attributeValue = ''
                    } else {
                      // `setAttribute` with objects becomes only `[object]` in IE8/9,
                      // ('' + value) makes it output the correct toString()-value.
                      attributeValue = '' + value
                    }
                    if (attributeNamespace) {
                      node.setAttributeNS(
                        attributeNamespace,
                        attributeName,
                        attributeValue
                      )
                    } else {
                      node.setAttribute(attributeName, attributeValue)
                    }
                  }
                }

                var ReactControlledValuePropTypes = {
                  checkPropTypes: null,
                }

                {
                  var hasReadOnlyValue = {
                    button: true,
                    checkbox: true,
                    image: true,
                    hidden: true,
                    radio: true,
                    reset: true,
                    submit: true,
                  }

                  var propTypes = {
                    value: function (props, propName, componentName) {
                      if (
                        !props[propName] ||
                        hasReadOnlyValue[props.type] ||
                        props.onChange ||
                        props.readOnly ||
                        props.disabled
                      ) {
                        return null
                      }
                      return new Error(
                        'You provided a `value` prop to a form field without an ' +
                          '`onChange` handler. This will render a read-only field. If ' +
                          'the field should be mutable use `defaultValue`. Otherwise, ' +
                          'set either `onChange` or `readOnly`.'
                      )
                    },
                    checked: function (props, propName, componentName) {
                      if (
                        !props[propName] ||
                        props.onChange ||
                        props.readOnly ||
                        props.disabled
                      ) {
                        return null
                      }
                      return new Error(
                        'You provided a `checked` prop to a form field without an ' +
                          '`onChange` handler. This will render a read-only field. If ' +
                          'the field should be mutable use `defaultChecked`. Otherwise, ' +
                          'set either `onChange` or `readOnly`.'
                      )
                    },
                  }

                  /**
                   * Provide a linked `value` attribute for controlled forms. You should not use
                   * this outside of the ReactDOM controlled form components.
                   */
                  ReactControlledValuePropTypes.checkPropTypes = function (
                    tagName,
                    props,
                    getStack
                  ) {
                    checkPropTypes(propTypes, props, 'prop', tagName, getStack)
                  }
                }

                // TODO: direct imports like some-package/src/* are bad. Fix me.
                var getCurrentFiberOwnerName =
                  ReactDebugCurrentFiber.getCurrentFiberOwnerName
                var getCurrentFiberStackAddendum =
                  ReactDebugCurrentFiber.getCurrentFiberStackAddendum

                var didWarnValueDefaultValue = false
                var didWarnCheckedDefaultChecked = false
                var didWarnControlledToUncontrolled = false
                var didWarnUncontrolledToControlled = false

                function isControlled(props) {
                  var usesChecked =
                    props.type === 'checkbox' || props.type === 'radio'
                  return usesChecked
                    ? props.checked != null
                    : props.value != null
                }

                /**
                 * Implements an <input> host component that allows setting these optional
                 * props: `checked`, `value`, `defaultChecked`, and `defaultValue`.
                 *
                 * If `checked` or `value` are not supplied (or null/undefined), user actions
                 * that affect the checked state or value will trigger updates to the element.
                 *
                 * If they are supplied (and not null/undefined), the rendered element will not
                 * trigger updates to the element. Instead, the props must change in order for
                 * the rendered element to be updated.
                 *
                 * The rendered element will be initialized as unchecked (or `defaultChecked`)
                 * with an empty value (or `defaultValue`).
                 *
                 * See http://www.w3.org/TR/2012/WD-html5-20121025/the-input-element.html
                 */

                function getHostProps(element, props) {
                  var node = element
                  var checked = props.checked

                  var hostProps = _assign({}, props, {
                    defaultChecked: undefined,
                    defaultValue: undefined,
                    value: undefined,
                    checked:
                      checked != null
                        ? checked
                        : node._wrapperState.initialChecked,
                  })

                  return hostProps
                }

                function initWrapperState(element, props) {
                  {
                    ReactControlledValuePropTypes.checkPropTypes(
                      'input',
                      props,
                      getCurrentFiberStackAddendum
                    )

                    if (
                      props.checked !== undefined &&
                      props.defaultChecked !== undefined &&
                      !didWarnCheckedDefaultChecked
                    ) {
                      warning(
                        false,
                        '%s contains an input of type %s with both checked and defaultChecked props. ' +
                          'Input elements must be either controlled or uncontrolled ' +
                          '(specify either the checked prop, or the defaultChecked prop, but not ' +
                          'both). Decide between using a controlled or uncontrolled input ' +
                          'element and remove one of these props. More info: ' +
                          'https://fb.me/react-controlled-components',
                        getCurrentFiberOwnerName() || 'A component',
                        props.type
                      )
                      didWarnCheckedDefaultChecked = true
                    }
                    if (
                      props.value !== undefined &&
                      props.defaultValue !== undefined &&
                      !didWarnValueDefaultValue
                    ) {
                      warning(
                        false,
                        '%s contains an input of type %s with both value and defaultValue props. ' +
                          'Input elements must be either controlled or uncontrolled ' +
                          '(specify either the value prop, or the defaultValue prop, but not ' +
                          'both). Decide between using a controlled or uncontrolled input ' +
                          'element and remove one of these props. More info: ' +
                          'https://fb.me/react-controlled-components',
                        getCurrentFiberOwnerName() || 'A component',
                        props.type
                      )
                      didWarnValueDefaultValue = true
                    }
                  }

                  var node = element
                  var defaultValue =
                    props.defaultValue == null ? '' : props.defaultValue

                  node._wrapperState = {
                    initialChecked:
                      props.checked != null
                        ? props.checked
                        : props.defaultChecked,
                    initialValue: getSafeValue(
                      props.value != null ? props.value : defaultValue
                    ),
                    controlled: isControlled(props),
                  }
                }

                function updateChecked(element, props) {
                  var node = element
                  var checked = props.checked
                  if (checked != null) {
                    setValueForProperty(node, 'checked', checked, false)
                  }
                }

                function updateWrapper(element, props) {
                  var node = element
                  {
                    var _controlled = isControlled(props)

                    if (
                      !node._wrapperState.controlled &&
                      _controlled &&
                      !didWarnUncontrolledToControlled
                    ) {
                      warning(
                        false,
                        'A component is changing an uncontrolled input of type %s to be controlled. ' +
                          'Input elements should not switch from uncontrolled to controlled (or vice versa). ' +
                          'Decide between using a controlled or uncontrolled input ' +
                          'element for the lifetime of the component. More info: https://fb.me/react-controlled-components%s',
                        props.type,
                        getCurrentFiberStackAddendum()
                      )
                      didWarnUncontrolledToControlled = true
                    }
                    if (
                      node._wrapperState.controlled &&
                      !_controlled &&
                      !didWarnControlledToUncontrolled
                    ) {
                      warning(
                        false,
                        'A component is changing a controlled input of type %s to be uncontrolled. ' +
                          'Input elements should not switch from controlled to uncontrolled (or vice versa). ' +
                          'Decide between using a controlled or uncontrolled input ' +
                          'element for the lifetime of the component. More info: https://fb.me/react-controlled-components%s',
                        props.type,
                        getCurrentFiberStackAddendum()
                      )
                      didWarnControlledToUncontrolled = true
                    }
                  }

                  updateChecked(element, props)

                  var value = getSafeValue(props.value)

                  if (value != null) {
                    if (props.type === 'number') {
                      if (
                        (value === 0 && node.value === '') ||
                        // eslint-disable-next-line
                        node.value != value
                      ) {
                        node.value = '' + value
                      }
                    } else if (node.value !== '' + value) {
                      node.value = '' + value
                    }
                  }

                  if (props.hasOwnProperty('value')) {
                    setDefaultValue(node, props.type, value)
                  } else if (props.hasOwnProperty('defaultValue')) {
                    setDefaultValue(
                      node,
                      props.type,
                      getSafeValue(props.defaultValue)
                    )
                  }

                  if (props.checked == null && props.defaultChecked != null) {
                    node.defaultChecked = !!props.defaultChecked
                  }
                }

                function postMountWrapper(element, props) {
                  var node = element

                  if (
                    props.hasOwnProperty('value') ||
                    props.hasOwnProperty('defaultValue')
                  ) {
                    // Do not assign value if it is already set. This prevents user text input
                    // from being lost during SSR hydration.
                    if (node.value === '') {
                      node.value = '' + node._wrapperState.initialValue
                    }

                    // value must be assigned before defaultValue. This fixes an issue where the
                    // visually displayed value of date inputs disappears on mobile Safari and Chrome:
                    // https://github.com/facebook/react/issues/7233
                    node.defaultValue = '' + node._wrapperState.initialValue
                  }

                  // Normally, we'd just do `node.checked = node.checked` upon initial mount, less this bug
                  // this is needed to work around a chrome bug where setting defaultChecked
                  // will sometimes influence the value of checked (even after detachment).
                  // Reference: https://bugs.chromium.org/p/chromium/issues/detail?id=608416
                  // We need to temporarily unset name to avoid disrupting radio button groups.
                  var name = node.name
                  if (name !== '') {
                    node.name = ''
                  }
                  node.defaultChecked = !node.defaultChecked
                  node.defaultChecked = !node.defaultChecked
                  if (name !== '') {
                    node.name = name
                  }
                }

                function restoreControlledState(element, props) {
                  var node = element
                  updateWrapper(node, props)
                  updateNamedCousins(node, props)
                }

                function updateNamedCousins(rootNode, props) {
                  var name = props.name
                  if (props.type === 'radio' && name != null) {
                    var queryRoot = rootNode

                    while (queryRoot.parentNode) {
                      queryRoot = queryRoot.parentNode
                    }

                    // If `rootNode.form` was non-null, then we could try `form.elements`,
                    // but that sometimes behaves strangely in IE8. We could also try using
                    // `form.getElementsByName`, but that will only return direct children
                    // and won't include inputs that use the HTML5 `form=` attribute. Since
                    // the input might not even be in a form. It might not even be in the
                    // document. Let's just use the local `querySelectorAll` to ensure we don't
                    // miss anything.
                    var group = queryRoot.querySelectorAll(
                      'input[name=' +
                        JSON.stringify('' + name) +
                        '][type="radio"]'
                    )

                    for (var i = 0; i < group.length; i++) {
                      var otherNode = group[i]
                      if (
                        otherNode === rootNode ||
                        otherNode.form !== rootNode.form
                      ) {
                        continue
                      }
                      // This will throw if radio buttons rendered by different copies of React
                      // and the same name are rendered into the same form (same as #1939).
                      // That's probably okay; we don't support it just as we don't support
                      // mixing React radio buttons with non-React ones.
                      var otherProps = getFiberCurrentPropsFromNode$1(otherNode)
                      !otherProps
                        ? invariant(
                            false,
                            'ReactDOMInput: Mixing React and non-React radio inputs with the same `name` is not supported.'
                          )
                        : void 0

                      // We need update the tracked value on the named cousin since the value
                      // was changed but the input saw no event or value set
                      updateValueIfChanged(otherNode)

                      // If this is a controlled radio button group, forcing the input that
                      // was previously checked to update will cause it to be come re-checked
                      // as appropriate.
                      updateWrapper(otherNode, otherProps)
                    }
                  }
                }

                // In Chrome, assigning defaultValue to certain input types triggers input validation.
                // For number inputs, the display value loses trailing decimal points. For email inputs,
                // Chrome raises "The specified value <x> is not a valid email address".
                //
                // Here we check to see if the defaultValue has actually changed, avoiding these problems
                // when the user is inputting text
                //
                // https://github.com/facebook/react/issues/7253
                function setDefaultValue(node, type, value) {
                  if (
                    // Focused number inputs synchronize on blur. See ChangeEventPlugin.js
                    type !== 'number' ||
                    node.ownerDocument.activeElement !== node
                  ) {
                    if (value == null) {
                      node.defaultValue = '' + node._wrapperState.initialValue
                    } else if (node.defaultValue !== '' + value) {
                      node.defaultValue = '' + value
                    }
                  }
                }

                function getSafeValue(value) {
                  switch (typeof value) {
                    case 'boolean':
                    case 'number':
                    case 'object':
                    case 'string':
                    case 'undefined':
                      return value
                    default:
                      // function, symbol are assigned as empty strings
                      return ''
                  }
                }

                var eventTypes$1 = {
                  change: {
                    phasedRegistrationNames: {
                      bubbled: 'onChange',
                      captured: 'onChangeCapture',
                    },
                    dependencies: [
                      'topBlur',
                      'topChange',
                      'topClick',
                      'topFocus',
                      'topInput',
                      'topKeyDown',
                      'topKeyUp',
                      'topSelectionChange',
                    ],
                  },
                }

                function createAndAccumulateChangeEvent(
                  inst,
                  nativeEvent,
                  target
                ) {
                  var event = SyntheticEvent$1.getPooled(
                    eventTypes$1.change,
                    inst,
                    nativeEvent,
                    target
                  )
                  event.type = 'change'
                  // Flag this event loop as needing state restore.
                  enqueueStateRestore(target)
                  accumulateTwoPhaseDispatches(event)
                  return event
                }
                /**
                 * For IE shims
                 */
                var activeElement = null
                var activeElementInst = null

                /**
                 * SECTION: handle `change` event
                 */
                function shouldUseChangeEvent(elem) {
                  var nodeName = elem.nodeName && elem.nodeName.toLowerCase()
                  return (
                    nodeName === 'select' ||
                    (nodeName === 'input' && elem.type === 'file')
                  )
                }

                function manualDispatchChangeEvent(nativeEvent) {
                  var event = createAndAccumulateChangeEvent(
                    activeElementInst,
                    nativeEvent,
                    getEventTarget(nativeEvent)
                  )

                  // If change and propertychange bubbled, we'd just bind to it like all the
                  // other events and have it go through ReactBrowserEventEmitter. Since it
                  // doesn't, we manually listen for the events and so we have to enqueue and
                  // process the abstract event manually.
                  //
                  // Batching is necessary here in order to ensure that all event handlers run
                  // before the next rerender (including event handlers attached to ancestor
                  // elements instead of directly on the input). Without this, controlled
                  // components don't work properly in conjunction with event bubbling because
                  // the component is rerendered and the value reverted before all the event
                  // handlers can run. See https://github.com/facebook/react/issues/708.
                  batchedUpdates(runEventInBatch, event)
                }

                function runEventInBatch(event) {
                  runEventsInBatch(event, false)
                }

                function getInstIfValueChanged(targetInst) {
                  var targetNode = getNodeFromInstance$1(targetInst)
                  if (updateValueIfChanged(targetNode)) {
                    return targetInst
                  }
                }

                function getTargetInstForChangeEvent(topLevelType, targetInst) {
                  if (topLevelType === 'topChange') {
                    return targetInst
                  }
                }

                /**
                 * SECTION: handle `input` event
                 */
                var isInputEventSupported = false
                if (ExecutionEnvironment.canUseDOM) {
                  // IE9 claims to support the input event but fails to trigger it when
                  // deleting text, so we ignore its input events.
                  isInputEventSupported =
                    isEventSupported('input') &&
                    (!document.documentMode || document.documentMode > 9)
                }

                /**
                 * (For IE <=9) Starts tracking propertychange events on the passed-in element
                 * and override the value property so that we can distinguish user events from
                 * value changes in JS.
                 */
                function startWatchingForValueChange(target, targetInst) {
                  activeElement = target
                  activeElementInst = targetInst
                  activeElement.attachEvent(
                    'onpropertychange',
                    handlePropertyChange
                  )
                }

                /**
                 * (For IE <=9) Removes the event listeners from the currently-tracked element,
                 * if any exists.
                 */
                function stopWatchingForValueChange() {
                  if (!activeElement) {
                    return
                  }
                  activeElement.detachEvent(
                    'onpropertychange',
                    handlePropertyChange
                  )
                  activeElement = null
                  activeElementInst = null
                }

                /**
                 * (For IE <=9) Handles a propertychange event, sending a `change` event if
                 * the value of the active element has changed.
                 */
                function handlePropertyChange(nativeEvent) {
                  if (nativeEvent.propertyName !== 'value') {
                    return
                  }
                  if (getInstIfValueChanged(activeElementInst)) {
                    manualDispatchChangeEvent(nativeEvent)
                  }
                }

                function handleEventsForInputEventPolyfill(
                  topLevelType,
                  target,
                  targetInst
                ) {
                  if (topLevelType === 'topFocus') {
                    // In IE9, propertychange fires for most input events but is buggy and
                    // doesn't fire when text is deleted, but conveniently, selectionchange
                    // appears to fire in all of the remaining cases so we catch those and
                    // forward the event if the value has changed
                    // In either case, we don't want to call the event handler if the value
                    // is changed from JS so we redefine a setter for `.value` that updates
                    // our activeElementValue variable, allowing us to ignore those changes
                    //
                    // stopWatching() should be a noop here but we call it just in case we
                    // missed a blur event somehow.
                    stopWatchingForValueChange()
                    startWatchingForValueChange(target, targetInst)
                  } else if (topLevelType === 'topBlur') {
                    stopWatchingForValueChange()
                  }
                }

                // For IE8 and IE9.
                function getTargetInstForInputEventPolyfill(
                  topLevelType,
                  targetInst
                ) {
                  if (
                    topLevelType === 'topSelectionChange' ||
                    topLevelType === 'topKeyUp' ||
                    topLevelType === 'topKeyDown'
                  ) {
                    // On the selectionchange event, the target is just document which isn't
                    // helpful for us so just check activeElement instead.
                    //
                    // 99% of the time, keydown and keyup aren't necessary. IE8 fails to fire
                    // propertychange on the first input event after setting `value` from a
                    // script and fires only keydown, keypress, keyup. Catching keyup usually
                    // gets it and catching keydown lets us fire an event for the first
                    // keystroke if user does a key repeat (it'll be a little delayed: right
                    // before the second keystroke). Other input methods (e.g., paste) seem to
                    // fire selectionchange normally.
                    return getInstIfValueChanged(activeElementInst)
                  }
                }

                /**
                 * SECTION: handle `click` event
                 */
                function shouldUseClickEvent(elem) {
                  // Use the `click` event to detect changes to checkbox and radio inputs.
                  // This approach works across all browsers, whereas `change` does not fire
                  // until `blur` in IE8.
                  var nodeName = elem.nodeName
                  return (
                    nodeName &&
                    nodeName.toLowerCase() === 'input' &&
                    (elem.type === 'checkbox' || elem.type === 'radio')
                  )
                }

                function getTargetInstForClickEvent(topLevelType, targetInst) {
                  if (topLevelType === 'topClick') {
                    return getInstIfValueChanged(targetInst)
                  }
                }

                function getTargetInstForInputOrChangeEvent(
                  topLevelType,
                  targetInst
                ) {
                  if (
                    topLevelType === 'topInput' ||
                    topLevelType === 'topChange'
                  ) {
                    return getInstIfValueChanged(targetInst)
                  }
                }

                function handleControlledInputBlur(inst, node) {
                  // TODO: In IE, inst is occasionally null. Why?
                  if (inst == null) {
                    return
                  }

                  // Fiber and ReactDOM keep wrapper state in separate places
                  var state = inst._wrapperState || node._wrapperState

                  if (!state || !state.controlled || node.type !== 'number') {
                    return
                  }

                  // If controlled, assign the value attribute to the current value on blur
                  setDefaultValue(node, 'number', node.value)
                }

                /**
                 * This plugin creates an `onChange` event that normalizes change events
                 * across form elements. This event fires at a time when it's possible to
                 * change the element's value without seeing a flicker.
                 *
                 * Supported elements are:
                 * - input (see `isTextInputElement`)
                 * - textarea
                 * - select
                 */
                var ChangeEventPlugin = {
                  eventTypes: eventTypes$1,

                  _isInputEventSupported: isInputEventSupported,

                  extractEvents: function (
                    topLevelType,
                    targetInst,
                    nativeEvent,
                    nativeEventTarget
                  ) {
                    var targetNode = targetInst
                      ? getNodeFromInstance$1(targetInst)
                      : window

                    var getTargetInstFunc = void 0,
                      handleEventFunc = void 0
                    if (shouldUseChangeEvent(targetNode)) {
                      getTargetInstFunc = getTargetInstForChangeEvent
                    } else if (isTextInputElement(targetNode)) {
                      if (isInputEventSupported) {
                        getTargetInstFunc = getTargetInstForInputOrChangeEvent
                      } else {
                        getTargetInstFunc = getTargetInstForInputEventPolyfill
                        handleEventFunc = handleEventsForInputEventPolyfill
                      }
                    } else if (shouldUseClickEvent(targetNode)) {
                      getTargetInstFunc = getTargetInstForClickEvent
                    }

                    if (getTargetInstFunc) {
                      var inst = getTargetInstFunc(topLevelType, targetInst)
                      if (inst) {
                        var event = createAndAccumulateChangeEvent(
                          inst,
                          nativeEvent,
                          nativeEventTarget
                        )
                        return event
                      }
                    }

                    if (handleEventFunc) {
                      handleEventFunc(topLevelType, targetNode, targetInst)
                    }

                    // When blurring, set the value attribute for number inputs
                    if (topLevelType === 'topBlur') {
                      handleControlledInputBlur(targetInst, targetNode)
                    }
                  },
                }

                /**
                 * Module that is injectable into `EventPluginHub`, that specifies a
                 * deterministic ordering of `EventPlugin`s. A convenient way to reason about
                 * plugins, without having to package every one of them. This is better than
                 * having plugins be ordered in the same order that they are injected because
                 * that ordering would be influenced by the packaging order.
                 * `ResponderEventPlugin` must occur before `SimpleEventPlugin` so that
                 * preventing default on events is convenient in `SimpleEventPlugin` handlers.
                 */
                var DOMEventPluginOrder = [
                  'ResponderEventPlugin',
                  'SimpleEventPlugin',
                  'TapEventPlugin',
                  'EnterLeaveEventPlugin',
                  'ChangeEventPlugin',
                  'SelectEventPlugin',
                  'BeforeInputEventPlugin',
                ]

                var SyntheticUIEvent = SyntheticEvent$1.extend({
                  view: null,
                  detail: null,
                })

                /**
                 * Translation from modifier key to the associated property in the event.
                 * @see http://www.w3.org/TR/DOM-Level-3-Events/#keys-Modifiers
                 */

                var modifierKeyToProp = {
                  Alt: 'altKey',
                  Control: 'ctrlKey',
                  Meta: 'metaKey',
                  Shift: 'shiftKey',
                }

                // IE8 does not implement getModifierState so we simply map it to the only
                // modifier keys exposed by the event itself, does not support Lock-keys.
                // Currently, all major browsers except Chrome seems to support Lock-keys.
                function modifierStateGetter(keyArg) {
                  var syntheticEvent = this
                  var nativeEvent = syntheticEvent.nativeEvent
                  if (nativeEvent.getModifierState) {
                    return nativeEvent.getModifierState(keyArg)
                  }
                  var keyProp = modifierKeyToProp[keyArg]
                  return keyProp ? !!nativeEvent[keyProp] : false
                }

                function getEventModifierState(nativeEvent) {
                  return modifierStateGetter
                }

                /**
                 * @interface MouseEvent
                 * @see http://www.w3.org/TR/DOM-Level-3-Events/
                 */
                var SyntheticMouseEvent = SyntheticUIEvent.extend({
                  screenX: null,
                  screenY: null,
                  clientX: null,
                  clientY: null,
                  pageX: null,
                  pageY: null,
                  ctrlKey: null,
                  shiftKey: null,
                  altKey: null,
                  metaKey: null,
                  getModifierState: getEventModifierState,
                  button: null,
                  buttons: null,
                  relatedTarget: function (event) {
                    return (
                      event.relatedTarget ||
                      (event.fromElement === event.srcElement
                        ? event.toElement
                        : event.fromElement)
                    )
                  },
                })

                var eventTypes$2 = {
                  mouseEnter: {
                    registrationName: 'onMouseEnter',
                    dependencies: ['topMouseOut', 'topMouseOver'],
                  },
                  mouseLeave: {
                    registrationName: 'onMouseLeave',
                    dependencies: ['topMouseOut', 'topMouseOver'],
                  },
                }

                var EnterLeaveEventPlugin = {
                  eventTypes: eventTypes$2,

                  /**
                   * For almost every interaction we care about, there will be both a top-level
                   * `mouseover` and `mouseout` event that occurs. Only use `mouseout` so that
                   * we do not extract duplicate events. However, moving the mouse into the
                   * browser from outside will not fire a `mouseout` event. In this case, we use
                   * the `mouseover` top-level event.
                   */
                  extractEvents: function (
                    topLevelType,
                    targetInst,
                    nativeEvent,
                    nativeEventTarget
                  ) {
                    if (
                      topLevelType === 'topMouseOver' &&
                      (nativeEvent.relatedTarget || nativeEvent.fromElement)
                    ) {
                      return null
                    }
                    if (
                      topLevelType !== 'topMouseOut' &&
                      topLevelType !== 'topMouseOver'
                    ) {
                      // Must not be a mouse in or mouse out - ignoring.
                      return null
                    }

                    var win = void 0
                    if (nativeEventTarget.window === nativeEventTarget) {
                      // `nativeEventTarget` is probably a window object.
                      win = nativeEventTarget
                    } else {
                      // TODO: Figure out why `ownerDocument` is sometimes undefined in IE8.
                      var doc = nativeEventTarget.ownerDocument
                      if (doc) {
                        win = doc.defaultView || doc.parentWindow
                      } else {
                        win = window
                      }
                    }

                    var from = void 0
                    var to = void 0
                    if (topLevelType === 'topMouseOut') {
                      from = targetInst
                      var related =
                        nativeEvent.relatedTarget || nativeEvent.toElement
                      to = related ? getClosestInstanceFromNode(related) : null
                    } else {
                      // Moving to a node from outside the window.
                      from = null
                      to = targetInst
                    }

                    if (from === to) {
                      // Nothing pertains to our managed components.
                      return null
                    }

                    var fromNode =
                      from == null ? win : getNodeFromInstance$1(from)
                    var toNode = to == null ? win : getNodeFromInstance$1(to)

                    var leave = SyntheticMouseEvent.getPooled(
                      eventTypes$2.mouseLeave,
                      from,
                      nativeEvent,
                      nativeEventTarget
                    )
                    leave.type = 'mouseleave'
                    leave.target = fromNode
                    leave.relatedTarget = toNode

                    var enter = SyntheticMouseEvent.getPooled(
                      eventTypes$2.mouseEnter,
                      to,
                      nativeEvent,
                      nativeEventTarget
                    )
                    enter.type = 'mouseenter'
                    enter.target = toNode
                    enter.relatedTarget = fromNode

                    accumulateEnterLeaveDispatches(leave, enter, from, to)

                    return [leave, enter]
                  },
                }

                /**
                 * `ReactInstanceMap` maintains a mapping from a public facing stateful
                 * instance (key) and the internal representation (value). This allows public
                 * methods to accept the user facing instance as an argument and map them back
                 * to internal methods.
                 *
                 * Note that this module is currently shared and assumed to be stateless.
                 * If this becomes an actual Map, that will break.
                 */

                /**
                 * This API should be called `delete` but we'd have to make sure to always
                 * transform these to strings for IE support. When this transform is fully
                 * supported we can rename it.
                 */

                function get(key) {
                  return key._reactInternalFiber
                }

                function has(key) {
                  return key._reactInternalFiber !== undefined
                }

                function set(key, value) {
                  key._reactInternalFiber = value
                }

                // Don't change these two values. They're used by React Dev Tools.
                var NoEffect = /*              */ 0
                var PerformedWork = /*         */ 1

                // You can change the rest (and add more).
                var Placement = /*             */ 2
                var Update = /*                */ 4
                var PlacementAndUpdate = /*    */ 6
                var Deletion = /*              */ 8
                var ContentReset = /*          */ 16
                var Callback = /*              */ 32
                var DidCapture = /*            */ 64
                var Ref = /*                   */ 128
                var ErrLog = /*                */ 256
                var Snapshot = /*              */ 2048

                // Union of all host effects
                var HostEffectMask = /*        */ 2559

                var Incomplete = /*            */ 512
                var ShouldCapture = /*         */ 1024

                var MOUNTING = 1
                var MOUNTED = 2
                var UNMOUNTED = 3

                function isFiberMountedImpl(fiber) {
                  var node = fiber
                  if (!fiber.alternate) {
                    // If there is no alternate, this might be a new tree that isn't inserted
                    // yet. If it is, then it will have a pending insertion effect on it.
                    if ((node.effectTag & Placement) !== NoEffect) {
                      return MOUNTING
                    }
                    while (node['return']) {
                      node = node['return']
                      if ((node.effectTag & Placement) !== NoEffect) {
                        return MOUNTING
                      }
                    }
                  } else {
                    while (node['return']) {
                      node = node['return']
                    }
                  }
                  if (node.tag === HostRoot) {
                    // TODO: Check if this was a nested HostRoot when used with
                    // renderContainerIntoSubtree.
                    return MOUNTED
                  }
                  // If we didn't hit the root, that means that we're in an disconnected tree
                  // that has been unmounted.
                  return UNMOUNTED
                }

                function isFiberMounted(fiber) {
                  return isFiberMountedImpl(fiber) === MOUNTED
                }

                function isMounted(component) {
                  {
                    var owner = ReactCurrentOwner.current
                    if (owner !== null && owner.tag === ClassComponent) {
                      var ownerFiber = owner
                      var instance = ownerFiber.stateNode
                      !instance._warnedAboutRefsInRender
                        ? warning(
                            false,
                            '%s is accessing isMounted inside its render() function. ' +
                              'render() should be a pure function of props and state. It should ' +
                              'never access something that requires stale data from the previous ' +
                              'render, such as refs. Move this logic to componentDidMount and ' +
                              'componentDidUpdate instead.',
                            getComponentName(ownerFiber) || 'A component'
                          )
                        : void 0
                      instance._warnedAboutRefsInRender = true
                    }
                  }

                  var fiber = get(component)
                  if (!fiber) {
                    return false
                  }
                  return isFiberMountedImpl(fiber) === MOUNTED
                }

                function assertIsMounted(fiber) {
                  !(isFiberMountedImpl(fiber) === MOUNTED)
                    ? invariant(
                        false,
                        'Unable to find node on an unmounted component.'
                      )
                    : void 0
                }

                function findCurrentFiberUsingSlowPath(fiber) {
                  var alternate = fiber.alternate
                  if (!alternate) {
                    // If there is no alternate, then we only need to check if it is mounted.
                    var state = isFiberMountedImpl(fiber)
                    !(state !== UNMOUNTED)
                      ? invariant(
                          false,
                          'Unable to find node on an unmounted component.'
                        )
                      : void 0
                    if (state === MOUNTING) {
                      return null
                    }
                    return fiber
                  }
                  // If we have two possible branches, we'll walk backwards up to the root
                  // to see what path the root points to. On the way we may hit one of the
                  // special cases and we'll deal with them.
                  var a = fiber
                  var b = alternate
                  while (true) {
                    var parentA = a['return']
                    var parentB = parentA ? parentA.alternate : null
                    if (!parentA || !parentB) {
                      // We're at the root.
                      break
                    }

                    // If both copies of the parent fiber point to the same child, we can
                    // assume that the child is current. This happens when we bailout on low
                    // priority: the bailed out fiber's child reuses the current child.
                    if (parentA.child === parentB.child) {
                      var child = parentA.child
                      while (child) {
                        if (child === a) {
                          // We've determined that A is the current branch.
                          assertIsMounted(parentA)
                          return fiber
                        }
                        if (child === b) {
                          // We've determined that B is the current branch.
                          assertIsMounted(parentA)
                          return alternate
                        }
                        child = child.sibling
                      }
                      // We should never have an alternate for any mounting node. So the only
                      // way this could possibly happen is if this was unmounted, if at all.
                      invariant(
                        false,
                        'Unable to find node on an unmounted component.'
                      )
                    }

                    if (a['return'] !== b['return']) {
                      // The return pointer of A and the return pointer of B point to different
                      // fibers. We assume that return pointers never criss-cross, so A must
                      // belong to the child set of A.return, and B must belong to the child
                      // set of B.return.
                      a = parentA
                      b = parentB
                    } else {
                      // The return pointers point to the same fiber. We'll have to use the
                      // default, slow path: scan the child sets of each parent alternate to see
                      // which child belongs to which set.
                      //
                      // Search parent A's child set
                      var didFindChild = false
                      var _child = parentA.child
                      while (_child) {
                        if (_child === a) {
                          didFindChild = true
                          a = parentA
                          b = parentB
                          break
                        }
                        if (_child === b) {
                          didFindChild = true
                          b = parentA
                          a = parentB
                          break
                        }
                        _child = _child.sibling
                      }
                      if (!didFindChild) {
                        // Search parent B's child set
                        _child = parentB.child
                        while (_child) {
                          if (_child === a) {
                            didFindChild = true
                            a = parentB
                            b = parentA
                            break
                          }
                          if (_child === b) {
                            didFindChild = true
                            b = parentB
                            a = parentA
                            break
                          }
                          _child = _child.sibling
                        }
                        !didFindChild
                          ? invariant(
                              false,
                              'Child was not found in either parent set. This indicates a bug in React related to the return pointer. Please file an issue.'
                            )
                          : void 0
                      }
                    }

                    !(a.alternate === b)
                      ? invariant(
                          false,
                          "Return fibers should always be each others' alternates. This error is likely caused by a bug in React. Please file an issue."
                        )
                      : void 0
                  }
                  // If the root is not a host container, we're in a disconnected tree. I.e.
                  // unmounted.
                  !(a.tag === HostRoot)
                    ? invariant(
                        false,
                        'Unable to find node on an unmounted component.'
                      )
                    : void 0
                  if (a.stateNode.current === a) {
                    // We've determined that A is the current branch.
                    return fiber
                  }
                  // Otherwise B has to be current branch.
                  return alternate
                }

                function findCurrentHostFiber(parent) {
                  var currentParent = findCurrentFiberUsingSlowPath(parent)
                  if (!currentParent) {
                    return null
                  }

                  // Next we'll drill down this component to find the first HostComponent/Text.
                  var node = currentParent
                  while (true) {
                    if (node.tag === HostComponent || node.tag === HostText) {
                      return node
                    } else if (node.child) {
                      node.child['return'] = node
                      node = node.child
                      continue
                    }
                    if (node === currentParent) {
                      return null
                    }
                    while (!node.sibling) {
                      if (!node['return'] || node['return'] === currentParent) {
                        return null
                      }
                      node = node['return']
                    }
                    node.sibling['return'] = node['return']
                    node = node.sibling
                  }
                  // Flow needs the return null here, but ESLint complains about it.
                  // eslint-disable-next-line no-unreachable
                  return null
                }

                function findCurrentHostFiberWithNoPortals(parent) {
                  var currentParent = findCurrentFiberUsingSlowPath(parent)
                  if (!currentParent) {
                    return null
                  }

                  // Next we'll drill down this component to find the first HostComponent/Text.
                  var node = currentParent
                  while (true) {
                    if (node.tag === HostComponent || node.tag === HostText) {
                      return node
                    } else if (node.child && node.tag !== HostPortal) {
                      node.child['return'] = node
                      node = node.child
                      continue
                    }
                    if (node === currentParent) {
                      return null
                    }
                    while (!node.sibling) {
                      if (!node['return'] || node['return'] === currentParent) {
                        return null
                      }
                      node = node['return']
                    }
                    node.sibling['return'] = node['return']
                    node = node.sibling
                  }
                  // Flow needs the return null here, but ESLint complains about it.
                  // eslint-disable-next-line no-unreachable
                  return null
                }

                function addEventBubbleListener(element, eventType, listener) {
                  element.addEventListener(eventType, listener, false)
                }

                function addEventCaptureListener(element, eventType, listener) {
                  element.addEventListener(eventType, listener, true)
                }

                /**
                 * @interface Event
                 * @see http://www.w3.org/TR/css3-animations/#AnimationEvent-interface
                 * @see https://developer.mozilla.org/en-US/docs/Web/API/AnimationEvent
                 */
                var SyntheticAnimationEvent = SyntheticEvent$1.extend({
                  animationName: null,
                  elapsedTime: null,
                  pseudoElement: null,
                })

                /**
                 * @interface Event
                 * @see http://www.w3.org/TR/clipboard-apis/
                 */
                var SyntheticClipboardEvent = SyntheticEvent$1.extend({
                  clipboardData: function (event) {
                    return 'clipboardData' in event
                      ? event.clipboardData
                      : window.clipboardData
                  },
                })

                /**
                 * @interface FocusEvent
                 * @see http://www.w3.org/TR/DOM-Level-3-Events/
                 */
                var SyntheticFocusEvent = SyntheticUIEvent.extend({
                  relatedTarget: null,
                })

                /**
                 * `charCode` represents the actual "character code" and is safe to use with
                 * `String.fromCharCode`. As such, only keys that correspond to printable
                 * characters produce a valid `charCode`, the only exception to this is Enter.
                 * The Tab-key is considered non-printable and does not have a `charCode`,
                 * presumably because it does not produce a tab-character in browsers.
                 *
                 * @param {object} nativeEvent Native browser event.
                 * @return {number} Normalized `charCode` property.
                 */
                function getEventCharCode(nativeEvent) {
                  var charCode = void 0
                  var keyCode = nativeEvent.keyCode

                  if ('charCode' in nativeEvent) {
                    charCode = nativeEvent.charCode

                    // FF does not set `charCode` for the Enter-key, check against `keyCode`.
                    if (charCode === 0 && keyCode === 13) {
                      charCode = 13
                    }
                  } else {
                    // IE8 does not implement `charCode`, but `keyCode` has the correct value.
                    charCode = keyCode
                  }

                  // IE and Edge (on Windows) and Chrome / Safari (on Windows and Linux)
                  // report Enter as charCode 10 when ctrl is pressed.
                  if (charCode === 10) {
                    charCode = 13
                  }

                  // Some non-printable keys are reported in `charCode`/`keyCode`, discard them.
                  // Must not discard the (non-)printable Enter-key.
                  if (charCode >= 32 || charCode === 13) {
                    return charCode
                  }

                  return 0
                }

                /**
                 * Normalization of deprecated HTML5 `key` values
                 * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names
                 */
                var normalizeKey = {
                  Esc: 'Escape',
                  Spacebar: ' ',
                  Left: 'ArrowLeft',
                  Up: 'ArrowUp',
                  Right: 'ArrowRight',
                  Down: 'ArrowDown',
                  Del: 'Delete',
                  Win: 'OS',
                  Menu: 'ContextMenu',
                  Apps: 'ContextMenu',
                  Scroll: 'ScrollLock',
                  MozPrintableKey: 'Unidentified',
                }

                /**
                 * Translation from legacy `keyCode` to HTML5 `key`
                 * Only special keys supported, all others depend on keyboard layout or browser
                 * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names
                 */
                var translateToKey = {
                  '8': 'Backspace',
                  '9': 'Tab',
                  '12': 'Clear',
                  '13': 'Enter',
                  '16': 'Shift',
                  '17': 'Control',
                  '18': 'Alt',
                  '19': 'Pause',
                  '20': 'CapsLock',
                  '27': 'Escape',
                  '32': ' ',
                  '33': 'PageUp',
                  '34': 'PageDown',
                  '35': 'End',
                  '36': 'Home',
                  '37': 'ArrowLeft',
                  '38': 'ArrowUp',
                  '39': 'ArrowRight',
                  '40': 'ArrowDown',
                  '45': 'Insert',
                  '46': 'Delete',
                  '112': 'F1',
                  '113': 'F2',
                  '114': 'F3',
                  '115': 'F4',
                  '116': 'F5',
                  '117': 'F6',
                  '118': 'F7',
                  '119': 'F8',
                  '120': 'F9',
                  '121': 'F10',
                  '122': 'F11',
                  '123': 'F12',
                  '144': 'NumLock',
                  '145': 'ScrollLock',
                  '224': 'Meta',
                }

                /**
                 * @param {object} nativeEvent Native browser event.
                 * @return {string} Normalized `key` property.
                 */
                function getEventKey(nativeEvent) {
                  if (nativeEvent.key) {
                    // Normalize inconsistent values reported by browsers due to
                    // implementations of a working draft specification.

                    // FireFox implements `key` but returns `MozPrintableKey` for all
                    // printable characters (normalized to `Unidentified`), ignore it.
                    var key = normalizeKey[nativeEvent.key] || nativeEvent.key
                    if (key !== 'Unidentified') {
                      return key
                    }
                  }

                  // Browser does not implement `key`, polyfill as much of it as we can.
                  if (nativeEvent.type === 'keypress') {
                    var charCode = getEventCharCode(nativeEvent)

                    // The enter-key is technically both printable and non-printable and can
                    // thus be captured by `keypress`, no other non-printable key should.
                    return charCode === 13
                      ? 'Enter'
                      : String.fromCharCode(charCode)
                  }
                  if (
                    nativeEvent.type === 'keydown' ||
                    nativeEvent.type === 'keyup'
                  ) {
                    // While user keyboard layout determines the actual meaning of each
                    // `keyCode` value, almost all function keys have a universal value.
                    return translateToKey[nativeEvent.keyCode] || 'Unidentified'
                  }
                  return ''
                }

                /**
                 * @interface KeyboardEvent
                 * @see http://www.w3.org/TR/DOM-Level-3-Events/
                 */
                var SyntheticKeyboardEvent = SyntheticUIEvent.extend({
                  key: getEventKey,
                  location: null,
                  ctrlKey: null,
                  shiftKey: null,
                  altKey: null,
                  metaKey: null,
                  repeat: null,
                  locale: null,
                  getModifierState: getEventModifierState,
                  // Legacy Interface
                  charCode: function (event) {
                    // `charCode` is the result of a KeyPress event and represents the value of
                    // the actual printable character.

                    // KeyPress is deprecated, but its replacement is not yet final and not
                    // implemented in any major browser. Only KeyPress has charCode.
                    if (event.type === 'keypress') {
                      return getEventCharCode(event)
                    }
                    return 0
                  },
                  keyCode: function (event) {
                    // `keyCode` is the result of a KeyDown/Up event and represents the value of
                    // physical keyboard key.

                    // The actual meaning of the value depends on the users' keyboard layout
                    // which cannot be detected. Assuming that it is a US keyboard layout
                    // provides a surprisingly accurate mapping for US and European users.
                    // Due to this, it is left to the user to implement at this time.
                    if (event.type === 'keydown' || event.type === 'keyup') {
                      return event.keyCode
                    }
                    return 0
                  },
                  which: function (event) {
                    // `which` is an alias for either `keyCode` or `charCode` depending on the
                    // type of the event.
                    if (event.type === 'keypress') {
                      return getEventCharCode(event)
                    }
                    if (event.type === 'keydown' || event.type === 'keyup') {
                      return event.keyCode
                    }
                    return 0
                  },
                })

                /**
                 * @interface DragEvent
                 * @see http://www.w3.org/TR/DOM-Level-3-Events/
                 */
                var SyntheticDragEvent = SyntheticMouseEvent.extend({
                  dataTransfer: null,
                })

                /**
                 * @interface TouchEvent
                 * @see http://www.w3.org/TR/touch-events/
                 */
                var SyntheticTouchEvent = SyntheticUIEvent.extend({
                  touches: null,
                  targetTouches: null,
                  changedTouches: null,
                  altKey: null,
                  metaKey: null,
                  ctrlKey: null,
                  shiftKey: null,
                  getModifierState: getEventModifierState,
                })

                /**
                 * @interface Event
                 * @see http://www.w3.org/TR/2009/WD-css3-transitions-20090320/#transition-events-
                 * @see https://developer.mozilla.org/en-US/docs/Web/API/TransitionEvent
                 */
                var SyntheticTransitionEvent = SyntheticEvent$1.extend({
                  propertyName: null,
                  elapsedTime: null,
                  pseudoElement: null,
                })

                /**
                 * @interface WheelEvent
                 * @see http://www.w3.org/TR/DOM-Level-3-Events/
                 */
                var SyntheticWheelEvent = SyntheticMouseEvent.extend({
                  deltaX: function (event) {
                    return 'deltaX' in event
                      ? event.deltaX // Fallback to `wheelDeltaX` for Webkit and normalize (right is positive).
                      : 'wheelDeltaX' in event
                      ? -event.wheelDeltaX
                      : 0
                  },
                  deltaY: function (event) {
                    return 'deltaY' in event
                      ? event.deltaY // Fallback to `wheelDeltaY` for Webkit and normalize (down is positive).
                      : 'wheelDeltaY' in event
                      ? -event.wheelDeltaY // Fallback to `wheelDelta` for IE<9 and normalize (down is positive).
                      : 'wheelDelta' in event
                      ? -event.wheelDelta
                      : 0
                  },

                  deltaZ: null,

                  // Browsers without "deltaMode" is reporting in raw wheel delta where one
                  // notch on the scroll is always +/- 120, roughly equivalent to pixels.
                  // A good approximation of DOM_DELTA_LINE (1) is 5% of viewport size or
                  // ~40 pixels, for DOM_DELTA_SCREEN (2) it is 87.5% of viewport size.
                  deltaMode: null,
                })

                /**
                 * Turns
                 * ['abort', ...]
                 * into
                 * eventTypes = {
                 *   'abort': {
                 *     phasedRegistrationNames: {
                 *       bubbled: 'onAbort',
                 *       captured: 'onAbortCapture',
                 *     },
                 *     dependencies: ['topAbort'],
                 *   },
                 *   ...
                 * };
                 * topLevelEventsToDispatchConfig = {
                 *   'topAbort': { sameConfig }
                 * };
                 */
                var interactiveEventTypeNames = [
                  'blur',
                  'cancel',
                  'click',
                  'close',
                  'contextMenu',
                  'copy',
                  'cut',
                  'doubleClick',
                  'dragEnd',
                  'dragStart',
                  'drop',
                  'focus',
                  'input',
                  'invalid',
                  'keyDown',
                  'keyPress',
                  'keyUp',
                  'mouseDown',
                  'mouseUp',
                  'paste',
                  'pause',
                  'play',
                  'rateChange',
                  'reset',
                  'seeked',
                  'submit',
                  'touchCancel',
                  'touchEnd',
                  'touchStart',
                  'volumeChange',
                ]
                var nonInteractiveEventTypeNames = [
                  'abort',
                  'animationEnd',
                  'animationIteration',
                  'animationStart',
                  'canPlay',
                  'canPlayThrough',
                  'drag',
                  'dragEnter',
                  'dragExit',
                  'dragLeave',
                  'dragOver',
                  'durationChange',
                  'emptied',
                  'encrypted',
                  'ended',
                  'error',
                  'load',
                  'loadedData',
                  'loadedMetadata',
                  'loadStart',
                  'mouseMove',
                  'mouseOut',
                  'mouseOver',
                  'playing',
                  'progress',
                  'scroll',
                  'seeking',
                  'stalled',
                  'suspend',
                  'timeUpdate',
                  'toggle',
                  'touchMove',
                  'transitionEnd',
                  'waiting',
                  'wheel',
                ]

                var eventTypes$4 = {}
                var topLevelEventsToDispatchConfig = {}

                function addEventTypeNameToConfig(event, isInteractive) {
                  var capitalizedEvent = event[0].toUpperCase() + event.slice(1)
                  var onEvent = 'on' + capitalizedEvent
                  var topEvent = 'top' + capitalizedEvent

                  var type = {
                    phasedRegistrationNames: {
                      bubbled: onEvent,
                      captured: onEvent + 'Capture',
                    },
                    dependencies: [topEvent],
                    isInteractive: isInteractive,
                  }
                  eventTypes$4[event] = type
                  topLevelEventsToDispatchConfig[topEvent] = type
                }

                interactiveEventTypeNames.forEach(function (eventTypeName) {
                  addEventTypeNameToConfig(eventTypeName, true)
                })
                nonInteractiveEventTypeNames.forEach(function (eventTypeName) {
                  addEventTypeNameToConfig(eventTypeName, false)
                })

                // Only used in DEV for exhaustiveness validation.
                var knownHTMLTopLevelTypes = [
                  'topAbort',
                  'topCancel',
                  'topCanPlay',
                  'topCanPlayThrough',
                  'topClose',
                  'topDurationChange',
                  'topEmptied',
                  'topEncrypted',
                  'topEnded',
                  'topError',
                  'topInput',
                  'topInvalid',
                  'topLoad',
                  'topLoadedData',
                  'topLoadedMetadata',
                  'topLoadStart',
                  'topPause',
                  'topPlay',
                  'topPlaying',
                  'topProgress',
                  'topRateChange',
                  'topReset',
                  'topSeeked',
                  'topSeeking',
                  'topStalled',
                  'topSubmit',
                  'topSuspend',
                  'topTimeUpdate',
                  'topToggle',
                  'topVolumeChange',
                  'topWaiting',
                ]

                var SimpleEventPlugin = {
                  eventTypes: eventTypes$4,

                  isInteractiveTopLevelEventType: function (topLevelType) {
                    var config = topLevelEventsToDispatchConfig[topLevelType]
                    return config !== undefined && config.isInteractive === true
                  },

                  extractEvents: function (
                    topLevelType,
                    targetInst,
                    nativeEvent,
                    nativeEventTarget
                  ) {
                    var dispatchConfig =
                      topLevelEventsToDispatchConfig[topLevelType]
                    if (!dispatchConfig) {
                      return null
                    }
                    var EventConstructor = void 0
                    switch (topLevelType) {
                      case 'topKeyPress':
                        // Firefox creates a keypress event for function keys too. This removes
                        // the unwanted keypress events. Enter is however both printable and
                        // non-printable. One would expect Tab to be as well (but it isn't).
                        if (getEventCharCode(nativeEvent) === 0) {
                          return null
                        }
                      /* falls through */
                      case 'topKeyDown':
                      case 'topKeyUp':
                        EventConstructor = SyntheticKeyboardEvent
                        break
                      case 'topBlur':
                      case 'topFocus':
                        EventConstructor = SyntheticFocusEvent
                        break
                      case 'topClick':
                        // Firefox creates a click event on right mouse clicks. This removes the
                        // unwanted click events.
                        if (nativeEvent.button === 2) {
                          return null
                        }
                      /* falls through */
                      case 'topDoubleClick':
                      case 'topMouseDown':
                      case 'topMouseMove':
                      case 'topMouseUp':
                      // TODO: Disabled elements should not respond to mouse events
                      /* falls through */
                      case 'topMouseOut':
                      case 'topMouseOver':
                      case 'topContextMenu':
                        EventConstructor = SyntheticMouseEvent
                        break
                      case 'topDrag':
                      case 'topDragEnd':
                      case 'topDragEnter':
                      case 'topDragExit':
                      case 'topDragLeave':
                      case 'topDragOver':
                      case 'topDragStart':
                      case 'topDrop':
                        EventConstructor = SyntheticDragEvent
                        break
                      case 'topTouchCancel':
                      case 'topTouchEnd':
                      case 'topTouchMove':
                      case 'topTouchStart':
                        EventConstructor = SyntheticTouchEvent
                        break
                      case 'topAnimationEnd':
                      case 'topAnimationIteration':
                      case 'topAnimationStart':
                        EventConstructor = SyntheticAnimationEvent
                        break
                      case 'topTransitionEnd':
                        EventConstructor = SyntheticTransitionEvent
                        break
                      case 'topScroll':
                        EventConstructor = SyntheticUIEvent
                        break
                      case 'topWheel':
                        EventConstructor = SyntheticWheelEvent
                        break
                      case 'topCopy':
                      case 'topCut':
                      case 'topPaste':
                        EventConstructor = SyntheticClipboardEvent
                        break
                      default:
                        {
                          if (
                            knownHTMLTopLevelTypes.indexOf(topLevelType) === -1
                          ) {
                            warning(
                              false,
                              'SimpleEventPlugin: Unhandled event type, `%s`. This warning ' +
                                'is likely caused by a bug in React. Please file an issue.',
                              topLevelType
                            )
                          }
                        }
                        // HTML Events
                        // @see http://www.w3.org/TR/html5/index.html#events-0
                        EventConstructor = SyntheticEvent$1
                        break
                    }
                    var event = EventConstructor.getPooled(
                      dispatchConfig,
                      targetInst,
                      nativeEvent,
                      nativeEventTarget
                    )
                    accumulateTwoPhaseDispatches(event)
                    return event
                  },
                }

                var isInteractiveTopLevelEventType =
                  SimpleEventPlugin.isInteractiveTopLevelEventType

                var CALLBACK_BOOKKEEPING_POOL_SIZE = 10
                var callbackBookkeepingPool = []

                /**
                 * Find the deepest React component completely containing the root of the
                 * passed-in instance (for use when entire React trees are nested within each
                 * other). If React trees are not nested, returns null.
                 */
                function findRootContainerNode(inst) {
                  // TODO: It may be a good idea to cache this to prevent unnecessary DOM
                  // traversal, but caching is difficult to do correctly without using a
                  // mutation observer to listen for all DOM changes.
                  while (inst['return']) {
                    inst = inst['return']
                  }
                  if (inst.tag !== HostRoot) {
                    // This can happen if we're in a detached tree.
                    return null
                  }
                  return inst.stateNode.containerInfo
                }

                // Used to store ancestor hierarchy in top level callback
                function getTopLevelCallbackBookKeeping(
                  topLevelType,
                  nativeEvent,
                  targetInst
                ) {
                  if (callbackBookkeepingPool.length) {
                    var instance = callbackBookkeepingPool.pop()
                    instance.topLevelType = topLevelType
                    instance.nativeEvent = nativeEvent
                    instance.targetInst = targetInst
                    return instance
                  }
                  return {
                    topLevelType: topLevelType,
                    nativeEvent: nativeEvent,
                    targetInst: targetInst,
                    ancestors: [],
                  }
                }

                function releaseTopLevelCallbackBookKeeping(instance) {
                  instance.topLevelType = null
                  instance.nativeEvent = null
                  instance.targetInst = null
                  instance.ancestors.length = 0
                  if (
                    callbackBookkeepingPool.length <
                    CALLBACK_BOOKKEEPING_POOL_SIZE
                  ) {
                    callbackBookkeepingPool.push(instance)
                  }
                }

                function handleTopLevel(bookKeeping) {
                  var targetInst = bookKeeping.targetInst

                  // Loop through the hierarchy, in case there's any nested components.
                  // It's important that we build the array of ancestors before calling any
                  // event handlers, because event handlers can modify the DOM, leading to
                  // inconsistencies with ReactMount's node cache. See #1105.
                  var ancestor = targetInst
                  do {
                    if (!ancestor) {
                      bookKeeping.ancestors.push(ancestor)
                      break
                    }
                    var root = findRootContainerNode(ancestor)
                    if (!root) {
                      break
                    }
                    bookKeeping.ancestors.push(ancestor)
                    ancestor = getClosestInstanceFromNode(root)
                  } while (ancestor)

                  for (var i = 0; i < bookKeeping.ancestors.length; i++) {
                    targetInst = bookKeeping.ancestors[i]
                    runExtractedEventsInBatch(
                      bookKeeping.topLevelType,
                      targetInst,
                      bookKeeping.nativeEvent,
                      getEventTarget(bookKeeping.nativeEvent)
                    )
                  }
                }

                // TODO: can we stop exporting these?
                var _enabled = true

                function setEnabled(enabled) {
                  _enabled = !!enabled
                }

                function isEnabled() {
                  return _enabled
                }

                /**
                 * Traps top-level events by using event bubbling.
                 *
                 * @param {string} topLevelType Record from `BrowserEventConstants`.
                 * @param {string} handlerBaseName Event name (e.g. "click").
                 * @param {object} element Element on which to attach listener.
                 * @return {?object} An object with a remove function which will forcefully
                 *                  remove the listener.
                 * @internal
                 */
                function trapBubbledEvent(
                  topLevelType,
                  handlerBaseName,
                  element
                ) {
                  if (!element) {
                    return null
                  }
                  var dispatch = isInteractiveTopLevelEventType(topLevelType)
                    ? dispatchInteractiveEvent
                    : dispatchEvent

                  addEventBubbleListener(
                    element,
                    handlerBaseName,
                    // Check if interactive and wrap in interactiveUpdates
                    dispatch.bind(null, topLevelType)
                  )
                }

                /**
                 * Traps a top-level event by using event capturing.
                 *
                 * @param {string} topLevelType Record from `BrowserEventConstants`.
                 * @param {string} handlerBaseName Event name (e.g. "click").
                 * @param {object} element Element on which to attach listener.
                 * @return {?object} An object with a remove function which will forcefully
                 *                  remove the listener.
                 * @internal
                 */
                function trapCapturedEvent(
                  topLevelType,
                  handlerBaseName,
                  element
                ) {
                  if (!element) {
                    return null
                  }
                  var dispatch = isInteractiveTopLevelEventType(topLevelType)
                    ? dispatchInteractiveEvent
                    : dispatchEvent

                  addEventCaptureListener(
                    element,
                    handlerBaseName,
                    // Check if interactive and wrap in interactiveUpdates
                    dispatch.bind(null, topLevelType)
                  )
                }

                function dispatchInteractiveEvent(topLevelType, nativeEvent) {
                  interactiveUpdates(dispatchEvent, topLevelType, nativeEvent)
                }

                function dispatchEvent(topLevelType, nativeEvent) {
                  if (!_enabled) {
                    return
                  }

                  var nativeEventTarget = getEventTarget(nativeEvent)
                  var targetInst = getClosestInstanceFromNode(nativeEventTarget)
                  if (
                    targetInst !== null &&
                    typeof targetInst.tag === 'number' &&
                    !isFiberMounted(targetInst)
                  ) {
                    // If we get an event (ex: img onload) before committing that
                    // component's mount, ignore it for now (that is, treat it as if it was an
                    // event on a non-React tree). We might also consider queueing events and
                    // dispatching them after the mount.
                    targetInst = null
                  }

                  var bookKeeping = getTopLevelCallbackBookKeeping(
                    topLevelType,
                    nativeEvent,
                    targetInst
                  )

                  try {
                    // Event queue being processed in the same cycle allows
                    // `preventDefault`.
                    batchedUpdates(handleTopLevel, bookKeeping)
                  } finally {
                    releaseTopLevelCallbackBookKeeping(bookKeeping)
                  }
                }

                var ReactDOMEventListener = Object.freeze({
                  get _enabled() {
                    return _enabled
                  },
                  setEnabled: setEnabled,
                  isEnabled: isEnabled,
                  trapBubbledEvent: trapBubbledEvent,
                  trapCapturedEvent: trapCapturedEvent,
                  dispatchEvent: dispatchEvent,
                })

                /**
                 * Generate a mapping of standard vendor prefixes using the defined style property and event name.
                 *
                 * @param {string} styleProp
                 * @param {string} eventName
                 * @returns {object}
                 */
                function makePrefixMap(styleProp, eventName) {
                  var prefixes = {}

                  prefixes[styleProp.toLowerCase()] = eventName.toLowerCase()
                  prefixes['Webkit' + styleProp] = 'webkit' + eventName
                  prefixes['Moz' + styleProp] = 'moz' + eventName
                  prefixes['ms' + styleProp] = 'MS' + eventName
                  prefixes['O' + styleProp] = 'o' + eventName.toLowerCase()

                  return prefixes
                }

                /**
                 * A list of event names to a configurable list of vendor prefixes.
                 */
                var vendorPrefixes = {
                  animationend: makePrefixMap('Animation', 'AnimationEnd'),
                  animationiteration: makePrefixMap(
                    'Animation',
                    'AnimationIteration'
                  ),
                  animationstart: makePrefixMap('Animation', 'AnimationStart'),
                  transitionend: makePrefixMap('Transition', 'TransitionEnd'),
                }

                /**
                 * Event names that have already been detected and prefixed (if applicable).
                 */
                var prefixedEventNames = {}

                /**
                 * Element to check for prefixes on.
                 */
                var style = {}

                /**
                 * Bootstrap if a DOM exists.
                 */
                if (ExecutionEnvironment.canUseDOM) {
                  style = document.createElement('div').style

                  // On some platforms, in particular some releases of Android 4.x,
                  // the un-prefixed "animation" and "transition" properties are defined on the
                  // style object but the events that fire will still be prefixed, so we need
                  // to check if the un-prefixed events are usable, and if not remove them from the map.
                  if (!('AnimationEvent' in window)) {
                    delete vendorPrefixes.animationend.animation
                    delete vendorPrefixes.animationiteration.animation
                    delete vendorPrefixes.animationstart.animation
                  }

                  // Same as above
                  if (!('TransitionEvent' in window)) {
                    delete vendorPrefixes.transitionend.transition
                  }
                }

                /**
                 * Attempts to determine the correct vendor prefixed event name.
                 *
                 * @param {string} eventName
                 * @returns {string}
                 */
                function getVendorPrefixedEventName(eventName) {
                  if (prefixedEventNames[eventName]) {
                    return prefixedEventNames[eventName]
                  } else if (!vendorPrefixes[eventName]) {
                    return eventName
                  }

                  var prefixMap = vendorPrefixes[eventName]

                  for (var styleProp in prefixMap) {
                    if (
                      prefixMap.hasOwnProperty(styleProp) &&
                      styleProp in style
                    ) {
                      return (prefixedEventNames[eventName] =
                        prefixMap[styleProp])
                    }
                  }

                  return eventName
                }

                /**
                 * Types of raw signals from the browser caught at the top level.
                 *
                 * For events like 'submit' or audio/video events which don't consistently
                 * bubble (which we trap at a lower node than `document`), binding
                 * at `document` would cause duplicate events so we don't include them here.
                 */
                var topLevelTypes = {
                  topAnimationEnd: getVendorPrefixedEventName('animationend'),
                  topAnimationIteration: getVendorPrefixedEventName(
                    'animationiteration'
                  ),
                  topAnimationStart: getVendorPrefixedEventName(
                    'animationstart'
                  ),
                  topBlur: 'blur',
                  topCancel: 'cancel',
                  topChange: 'change',
                  topClick: 'click',
                  topClose: 'close',
                  topCompositionEnd: 'compositionend',
                  topCompositionStart: 'compositionstart',
                  topCompositionUpdate: 'compositionupdate',
                  topContextMenu: 'contextmenu',
                  topCopy: 'copy',
                  topCut: 'cut',
                  topDoubleClick: 'dblclick',
                  topDrag: 'drag',
                  topDragEnd: 'dragend',
                  topDragEnter: 'dragenter',
                  topDragExit: 'dragexit',
                  topDragLeave: 'dragleave',
                  topDragOver: 'dragover',
                  topDragStart: 'dragstart',
                  topDrop: 'drop',
                  topFocus: 'focus',
                  topInput: 'input',
                  topKeyDown: 'keydown',
                  topKeyPress: 'keypress',
                  topKeyUp: 'keyup',
                  topLoad: 'load',
                  topLoadStart: 'loadstart',
                  topMouseDown: 'mousedown',
                  topMouseMove: 'mousemove',
                  topMouseOut: 'mouseout',
                  topMouseOver: 'mouseover',
                  topMouseUp: 'mouseup',
                  topPaste: 'paste',
                  topScroll: 'scroll',
                  topSelectionChange: 'selectionchange',
                  topTextInput: 'textInput',
                  topToggle: 'toggle',
                  topTouchCancel: 'touchcancel',
                  topTouchEnd: 'touchend',
                  topTouchMove: 'touchmove',
                  topTouchStart: 'touchstart',
                  topTransitionEnd: getVendorPrefixedEventName('transitionend'),
                  topWheel: 'wheel',
                }

                // There are so many media events, it makes sense to just
                // maintain a list of them. Note these aren't technically
                // "top-level" since they don't bubble. We should come up
                // with a better naming convention if we come to refactoring
                // the event system.
                var mediaEventTypes = {
                  topAbort: 'abort',
                  topCanPlay: 'canplay',
                  topCanPlayThrough: 'canplaythrough',
                  topDurationChange: 'durationchange',
                  topEmptied: 'emptied',
                  topEncrypted: 'encrypted',
                  topEnded: 'ended',
                  topError: 'error',
                  topLoadedData: 'loadeddata',
                  topLoadedMetadata: 'loadedmetadata',
                  topLoadStart: 'loadstart',
                  topPause: 'pause',
                  topPlay: 'play',
                  topPlaying: 'playing',
                  topProgress: 'progress',
                  topRateChange: 'ratechange',
                  topSeeked: 'seeked',
                  topSeeking: 'seeking',
                  topStalled: 'stalled',
                  topSuspend: 'suspend',
                  topTimeUpdate: 'timeupdate',
                  topVolumeChange: 'volumechange',
                  topWaiting: 'waiting',
                }

                /**
                 * Summary of `ReactBrowserEventEmitter` event handling:
                 *
                 *  - Top-level delegation is used to trap most native browser events. This
                 *    may only occur in the main thread and is the responsibility of
                 *    ReactDOMEventListener, which is injected and can therefore support
                 *    pluggable event sources. This is the only work that occurs in the main
                 *    thread.
                 *
                 *  - We normalize and de-duplicate events to account for browser quirks. This
                 *    may be done in the worker thread.
                 *
                 *  - Forward these native events (with the associated top-level type used to
                 *    trap it) to `EventPluginHub`, which in turn will ask plugins if they want
                 *    to extract any synthetic events.
                 *
                 *  - The `EventPluginHub` will then process each event by annotating them with
                 *    "dispatches", a sequence of listeners and IDs that care about that event.
                 *
                 *  - The `EventPluginHub` then dispatches the events.
                 *
                 * Overview of React and the event system:
                 *
                 * +------------+    .
                 * |    DOM     |    .
                 * +------------+    .
                 *       |           .
                 *       v           .
                 * +------------+    .
                 * | ReactEvent |    .
                 * |  Listener  |    .
                 * +------------+    .                         +-----------+
                 *       |           .               +--------+|SimpleEvent|
                 *       |           .               |         |Plugin     |
                 * +-----|------+    .               v         +-----------+
                 * |     |      |    .    +--------------+                    +------------+
                 * |     +-----------.--->|EventPluginHub|                    |    Event   |
                 * |            |    .    |              |     +-----------+  | Propagators|
                 * | ReactEvent |    .    |              |     |TapEvent   |  |------------|
                 * |  Emitter   |    .    |              |<---+|Plugin     |  |other plugin|
                 * |            |    .    |              |     +-----------+  |  utilities |
                 * |     +-----------.--->|              |                    +------------+
                 * |     |      |    .    +--------------+
                 * +-----|------+    .                ^        +-----------+
                 *       |           .                |        |Enter/Leave|
                 *       +           .                +-------+|Plugin     |
                 * +-------------+   .                         +-----------+
                 * | application |   .
                 * |-------------|   .
                 * |             |   .
                 * |             |   .
                 * +-------------+   .
                 *                   .
                 *    React Core     .  General Purpose Event Plugin System
                 */

                var alreadyListeningTo = {}
                var reactTopListenersCounter = 0

                /**
                 * To ensure no conflicts with other potential React instances on the page
                 */
                var topListenersIDKey =
                  '_reactListenersID' + ('' + Math.random()).slice(2)

                function getListeningForDocument(mountAt) {
                  // In IE8, `mountAt` is a host object and doesn't have `hasOwnProperty`
                  // directly.
                  if (
                    !Object.prototype.hasOwnProperty.call(
                      mountAt,
                      topListenersIDKey
                    )
                  ) {
                    mountAt[topListenersIDKey] = reactTopListenersCounter++
                    alreadyListeningTo[mountAt[topListenersIDKey]] = {}
                  }
                  return alreadyListeningTo[mountAt[topListenersIDKey]]
                }

                /**
                 * We listen for bubbled touch events on the document object.
                 *
                 * Firefox v8.01 (and possibly others) exhibited strange behavior when
                 * mounting `onmousemove` events at some node that was not the document
                 * element. The symptoms were that if your mouse is not moving over something
                 * contained within that mount point (for example on the background) the
                 * top-level listeners for `onmousemove` won't be called. However, if you
                 * register the `mousemove` on the document object, then it will of course
                 * catch all `mousemove`s. This along with iOS quirks, justifies restricting
                 * top-level listeners to the document object only, at least for these
                 * movement types of events and possibly all events.
                 *
                 * @see http://www.quirksmode.org/blog/archives/2010/09/click_event_del.html
                 *
                 * Also, `keyup`/`keypress`/`keydown` do not bubble to the window on IE, but
                 * they bubble to document.
                 *
                 * @param {string} registrationName Name of listener (e.g. `onClick`).
                 * @param {object} contentDocumentHandle Document which owns the container
                 */
                function listenTo(registrationName, contentDocumentHandle) {
                  var mountAt = contentDocumentHandle
                  var isListening = getListeningForDocument(mountAt)
                  var dependencies =
                    registrationNameDependencies[registrationName]

                  for (var i = 0; i < dependencies.length; i++) {
                    var dependency = dependencies[i]
                    if (
                      !(
                        isListening.hasOwnProperty(dependency) &&
                        isListening[dependency]
                      )
                    ) {
                      if (dependency === 'topScroll') {
                        trapCapturedEvent('topScroll', 'scroll', mountAt)
                      } else if (
                        dependency === 'topFocus' ||
                        dependency === 'topBlur'
                      ) {
                        trapCapturedEvent('topFocus', 'focus', mountAt)
                        trapCapturedEvent('topBlur', 'blur', mountAt)

                        // to make sure blur and focus event listeners are only attached once
                        isListening.topBlur = true
                        isListening.topFocus = true
                      } else if (dependency === 'topCancel') {
                        if (isEventSupported('cancel', true)) {
                          trapCapturedEvent('topCancel', 'cancel', mountAt)
                        }
                        isListening.topCancel = true
                      } else if (dependency === 'topClose') {
                        if (isEventSupported('close', true)) {
                          trapCapturedEvent('topClose', 'close', mountAt)
                        }
                        isListening.topClose = true
                      } else if (topLevelTypes.hasOwnProperty(dependency)) {
                        trapBubbledEvent(
                          dependency,
                          topLevelTypes[dependency],
                          mountAt
                        )
                      }

                      isListening[dependency] = true
                    }
                  }
                }

                function isListeningToAllDependencies(
                  registrationName,
                  mountAt
                ) {
                  var isListening = getListeningForDocument(mountAt)
                  var dependencies =
                    registrationNameDependencies[registrationName]
                  for (var i = 0; i < dependencies.length; i++) {
                    var dependency = dependencies[i]
                    if (
                      !(
                        isListening.hasOwnProperty(dependency) &&
                        isListening[dependency]
                      )
                    ) {
                      return false
                    }
                  }
                  return true
                }

                /**
                 * Given any node return the first leaf node without children.
                 *
                 * @param {DOMElement|DOMTextNode} node
                 * @return {DOMElement|DOMTextNode}
                 */
                function getLeafNode(node) {
                  while (node && node.firstChild) {
                    node = node.firstChild
                  }
                  return node
                }

                /**
                 * Get the next sibling within a container. This will walk up the
                 * DOM if a node's siblings have been exhausted.
                 *
                 * @param {DOMElement|DOMTextNode} node
                 * @return {?DOMElement|DOMTextNode}
                 */
                function getSiblingNode(node) {
                  while (node) {
                    if (node.nextSibling) {
                      return node.nextSibling
                    }
                    node = node.parentNode
                  }
                }

                /**
                 * Get object describing the nodes which contain characters at offset.
                 *
                 * @param {DOMElement|DOMTextNode} root
                 * @param {number} offset
                 * @return {?object}
                 */
                function getNodeForCharacterOffset(root, offset) {
                  var node = getLeafNode(root)
                  var nodeStart = 0
                  var nodeEnd = 0

                  while (node) {
                    if (node.nodeType === TEXT_NODE) {
                      nodeEnd = nodeStart + node.textContent.length

                      if (nodeStart <= offset && nodeEnd >= offset) {
                        return {
                          node: node,
                          offset: offset - nodeStart,
                        }
                      }

                      nodeStart = nodeEnd
                    }

                    node = getLeafNode(getSiblingNode(node))
                  }
                }

                /**
                 * @param {DOMElement} outerNode
                 * @return {?object}
                 */
                function getOffsets(outerNode) {
                  var selection = window.getSelection && window.getSelection()

                  if (!selection || selection.rangeCount === 0) {
                    return null
                  }

                  var anchorNode = selection.anchorNode,
                    anchorOffset = selection.anchorOffset,
                    focusNode = selection.focusNode,
                    focusOffset = selection.focusOffset

                  // In Firefox, anchorNode and focusNode can be "anonymous divs", e.g. the
                  // up/down buttons on an <input type="number">. Anonymous divs do not seem to
                  // expose properties, triggering a "Permission denied error" if any of its
                  // properties are accessed. The only seemingly possible way to avoid erroring
                  // is to access a property that typically works for non-anonymous divs and
                  // catch any error that may otherwise arise. See
                  // https://bugzilla.mozilla.org/show_bug.cgi?id=208427

                  try {
                    /* eslint-disable no-unused-expressions */
                    anchorNode.nodeType
                    focusNode.nodeType
                    /* eslint-enable no-unused-expressions */
                  } catch (e) {
                    return null
                  }

                  return getModernOffsetsFromPoints(
                    outerNode,
                    anchorNode,
                    anchorOffset,
                    focusNode,
                    focusOffset
                  )
                }

                /**
                 * Returns {start, end} where `start` is the character/codepoint index of
                 * (anchorNode, anchorOffset) within the textContent of `outerNode`, and
                 * `end` is the index of (focusNode, focusOffset).
                 *
                 * Returns null if you pass in garbage input but we should probably just crash.
                 *
                 * Exported only for testing.
                 */
                function getModernOffsetsFromPoints(
                  outerNode,
                  anchorNode,
                  anchorOffset,
                  focusNode,
                  focusOffset
                ) {
                  var length = 0
                  var start = -1
                  var end = -1
                  var indexWithinAnchor = 0
                  var indexWithinFocus = 0
                  var node = outerNode
                  var parentNode = null

                  outer: while (true) {
                    var next = null

                    while (true) {
                      if (
                        node === anchorNode &&
                        (anchorOffset === 0 || node.nodeType === TEXT_NODE)
                      ) {
                        start = length + anchorOffset
                      }
                      if (
                        node === focusNode &&
                        (focusOffset === 0 || node.nodeType === TEXT_NODE)
                      ) {
                        end = length + focusOffset
                      }

                      if (node.nodeType === TEXT_NODE) {
                        length += node.nodeValue.length
                      }

                      if ((next = node.firstChild) === null) {
                        break
                      }
                      // Moving from `node` to its first child `next`.
                      parentNode = node
                      node = next
                    }

                    while (true) {
                      if (node === outerNode) {
                        // If `outerNode` has children, this is always the second time visiting
                        // it. If it has no children, this is still the first loop, and the only
                        // valid selection is anchorNode and focusNode both equal to this node
                        // and both offsets 0, in which case we will have handled above.
                        break outer
                      }
                      if (
                        parentNode === anchorNode &&
                        ++indexWithinAnchor === anchorOffset
                      ) {
                        start = length
                      }
                      if (
                        parentNode === focusNode &&
                        ++indexWithinFocus === focusOffset
                      ) {
                        end = length
                      }
                      if ((next = node.nextSibling) !== null) {
                        break
                      }
                      node = parentNode
                      parentNode = node.parentNode
                    }

                    // Moving from `node` to its next sibling `next`.
                    node = next
                  }

                  if (start === -1 || end === -1) {
                    // This should never happen. (Would happen if the anchor/focus nodes aren't
                    // actually inside the passed-in node.)
                    return null
                  }

                  return {
                    start: start,
                    end: end,
                  }
                }

                /**
                 * In modern non-IE browsers, we can support both forward and backward
                 * selections.
                 *
                 * Note: IE10+ supports the Selection object, but it does not support
                 * the `extend` method, which means that even in modern IE, it's not possible
                 * to programmatically create a backward selection. Thus, for all IE
                 * versions, we use the old IE API to create our selections.
                 *
                 * @param {DOMElement|DOMTextNode} node
                 * @param {object} offsets
                 */
                function setOffsets(node, offsets) {
                  if (!window.getSelection) {
                    return
                  }

                  var selection = window.getSelection()
                  var length = node[getTextContentAccessor()].length
                  var start = Math.min(offsets.start, length)
                  var end =
                    offsets.end === undefined
                      ? start
                      : Math.min(offsets.end, length)

                  // IE 11 uses modern selection, but doesn't support the extend method.
                  // Flip backward selections, so we can set with a single range.
                  if (!selection.extend && start > end) {
                    var temp = end
                    end = start
                    start = temp
                  }

                  var startMarker = getNodeForCharacterOffset(node, start)
                  var endMarker = getNodeForCharacterOffset(node, end)

                  if (startMarker && endMarker) {
                    if (
                      selection.rangeCount === 1 &&
                      selection.anchorNode === startMarker.node &&
                      selection.anchorOffset === startMarker.offset &&
                      selection.focusNode === endMarker.node &&
                      selection.focusOffset === endMarker.offset
                    ) {
                      return
                    }
                    var range = document.createRange()
                    range.setStart(startMarker.node, startMarker.offset)
                    selection.removeAllRanges()

                    if (start > end) {
                      selection.addRange(range)
                      selection.extend(endMarker.node, endMarker.offset)
                    } else {
                      range.setEnd(endMarker.node, endMarker.offset)
                      selection.addRange(range)
                    }
                  }
                }

                function isInDocument(node) {
                  return containsNode(document.documentElement, node)
                }

                /**
                 * @ReactInputSelection: React input selection module. Based on Selection.js,
                 * but modified to be suitable for react and has a couple of bug fixes (doesn't
                 * assume buttons have range selections allowed).
                 * Input selection module for React.
                 */

                function hasSelectionCapabilities(elem) {
                  var nodeName =
                    elem && elem.nodeName && elem.nodeName.toLowerCase()
                  return (
                    nodeName &&
                    ((nodeName === 'input' && elem.type === 'text') ||
                      nodeName === 'textarea' ||
                      elem.contentEditable === 'true')
                  )
                }

                function getSelectionInformation() {
                  var focusedElem = getActiveElement()
                  return {
                    focusedElem: focusedElem,
                    selectionRange: hasSelectionCapabilities(focusedElem)
                      ? getSelection$1(focusedElem)
                      : null,
                  }
                }

                /**
                 * @restoreSelection: If any selection information was potentially lost,
                 * restore it. This is useful when performing operations that could remove dom
                 * nodes and place them back in, resulting in focus being lost.
                 */
                function restoreSelection(priorSelectionInformation) {
                  var curFocusedElem = getActiveElement()
                  var priorFocusedElem = priorSelectionInformation.focusedElem
                  var priorSelectionRange =
                    priorSelectionInformation.selectionRange
                  if (
                    curFocusedElem !== priorFocusedElem &&
                    isInDocument(priorFocusedElem)
                  ) {
                    if (hasSelectionCapabilities(priorFocusedElem)) {
                      setSelection(priorFocusedElem, priorSelectionRange)
                    }

                    // Focusing a node can change the scroll position, which is undesirable
                    var ancestors = []
                    var ancestor = priorFocusedElem
                    while ((ancestor = ancestor.parentNode)) {
                      if (ancestor.nodeType === ELEMENT_NODE) {
                        ancestors.push({
                          element: ancestor,
                          left: ancestor.scrollLeft,
                          top: ancestor.scrollTop,
                        })
                      }
                    }

                    priorFocusedElem.focus()

                    for (var i = 0; i < ancestors.length; i++) {
                      var info = ancestors[i]
                      info.element.scrollLeft = info.left
                      info.element.scrollTop = info.top
                    }
                  }
                }

                /**
                 * @getSelection: Gets the selection bounds of a focused textarea, input or
                 * contentEditable node.
                 * -@input: Look up selection bounds of this input
                 * -@return {start: selectionStart, end: selectionEnd}
                 */
                function getSelection$1(input) {
                  var selection = void 0

                  if ('selectionStart' in input) {
                    // Modern browser with input or textarea.
                    selection = {
                      start: input.selectionStart,
                      end: input.selectionEnd,
                    }
                  } else {
                    // Content editable or old IE textarea.
                    selection = getOffsets(input)
                  }

                  return selection || { start: 0, end: 0 }
                }

                /**
                 * @setSelection: Sets the selection bounds of a textarea or input and focuses
                 * the input.
                 * -@input     Set selection bounds of this input or textarea
                 * -@offsets   Object of same form that is returned from get*
                 */
                function setSelection(input, offsets) {
                  var start = offsets.start,
                    end = offsets.end

                  if (end === undefined) {
                    end = start
                  }

                  if ('selectionStart' in input) {
                    input.selectionStart = start
                    input.selectionEnd = Math.min(end, input.value.length)
                  } else {
                    setOffsets(input, offsets)
                  }
                }

                var skipSelectionChangeEvent =
                  ExecutionEnvironment.canUseDOM &&
                  'documentMode' in document &&
                  document.documentMode <= 11

                var eventTypes$3 = {
                  select: {
                    phasedRegistrationNames: {
                      bubbled: 'onSelect',
                      captured: 'onSelectCapture',
                    },
                    dependencies: [
                      'topBlur',
                      'topContextMenu',
                      'topFocus',
                      'topKeyDown',
                      'topKeyUp',
                      'topMouseDown',
                      'topMouseUp',
                      'topSelectionChange',
                    ],
                  },
                }

                var activeElement$1 = null
                var activeElementInst$1 = null
                var lastSelection = null
                var mouseDown = false

                /**
                 * Get an object which is a unique representation of the current selection.
                 *
                 * The return value will not be consistent across nodes or browsers, but
                 * two identical selections on the same node will return identical objects.
                 *
                 * @param {DOMElement} node
                 * @return {object}
                 */
                function getSelection(node) {
                  if (
                    'selectionStart' in node &&
                    hasSelectionCapabilities(node)
                  ) {
                    return {
                      start: node.selectionStart,
                      end: node.selectionEnd,
                    }
                  } else if (window.getSelection) {
                    var selection = window.getSelection()
                    return {
                      anchorNode: selection.anchorNode,
                      anchorOffset: selection.anchorOffset,
                      focusNode: selection.focusNode,
                      focusOffset: selection.focusOffset,
                    }
                  }
                }

                /**
                 * Poll selection to see whether it's changed.
                 *
                 * @param {object} nativeEvent
                 * @return {?SyntheticEvent}
                 */
                function constructSelectEvent(nativeEvent, nativeEventTarget) {
                  // Ensure we have the right element, and that the user is not dragging a
                  // selection (this matches native `select` event behavior). In HTML5, select
                  // fires only on input and textarea thus if there's no focused element we
                  // won't dispatch.
                  if (
                    mouseDown ||
                    activeElement$1 == null ||
                    activeElement$1 !== getActiveElement()
                  ) {
                    return null
                  }

                  // Only fire when selection has actually changed.
                  var currentSelection = getSelection(activeElement$1)
                  if (
                    !lastSelection ||
                    !shallowEqual(lastSelection, currentSelection)
                  ) {
                    lastSelection = currentSelection

                    var syntheticEvent = SyntheticEvent$1.getPooled(
                      eventTypes$3.select,
                      activeElementInst$1,
                      nativeEvent,
                      nativeEventTarget
                    )

                    syntheticEvent.type = 'select'
                    syntheticEvent.target = activeElement$1

                    accumulateTwoPhaseDispatches(syntheticEvent)

                    return syntheticEvent
                  }

                  return null
                }

                /**
                 * This plugin creates an `onSelect` event that normalizes select events
                 * across form elements.
                 *
                 * Supported elements are:
                 * - input (see `isTextInputElement`)
                 * - textarea
                 * - contentEditable
                 *
                 * This differs from native browser implementations in the following ways:
                 * - Fires on contentEditable fields as well as inputs.
                 * - Fires for collapsed selection.
                 * - Fires after user input.
                 */
                var SelectEventPlugin = {
                  eventTypes: eventTypes$3,

                  extractEvents: function (
                    topLevelType,
                    targetInst,
                    nativeEvent,
                    nativeEventTarget
                  ) {
                    var doc =
                      nativeEventTarget.window === nativeEventTarget
                        ? nativeEventTarget.document
                        : nativeEventTarget.nodeType === DOCUMENT_NODE
                        ? nativeEventTarget
                        : nativeEventTarget.ownerDocument
                    // Track whether all listeners exists for this plugin. If none exist, we do
                    // not extract events. See #3639.
                    if (
                      !doc ||
                      !isListeningToAllDependencies('onSelect', doc)
                    ) {
                      return null
                    }

                    var targetNode = targetInst
                      ? getNodeFromInstance$1(targetInst)
                      : window

                    switch (topLevelType) {
                      // Track the input node that has focus.
                      case 'topFocus':
                        if (
                          isTextInputElement(targetNode) ||
                          targetNode.contentEditable === 'true'
                        ) {
                          activeElement$1 = targetNode
                          activeElementInst$1 = targetInst
                          lastSelection = null
                        }
                        break
                      case 'topBlur':
                        activeElement$1 = null
                        activeElementInst$1 = null
                        lastSelection = null
                        break
                      // Don't fire the event while the user is dragging. This matches the
                      // semantics of the native select event.
                      case 'topMouseDown':
                        mouseDown = true
                        break
                      case 'topContextMenu':
                      case 'topMouseUp':
                        mouseDown = false
                        return constructSelectEvent(
                          nativeEvent,
                          nativeEventTarget
                        )
                      // Chrome and IE fire non-standard event when selection is changed (and
                      // sometimes when it hasn't). IE's event fires out of order with respect
                      // to key and input events on deletion, so we discard it.
                      //
                      // Firefox doesn't support selectionchange, so check selection status
                      // after each key entry. The selection changes after keydown and before
                      // keyup, but we check on keydown as well in the case of holding down a
                      // key, when multiple keydown events are fired but only one keyup is.
                      // This is also our approach for IE handling, for the reason above.
                      case 'topSelectionChange':
                        if (skipSelectionChangeEvent) {
                          break
                        }
                      // falls through
                      case 'topKeyDown':
                      case 'topKeyUp':
                        return constructSelectEvent(
                          nativeEvent,
                          nativeEventTarget
                        )
                    }

                    return null
                  },
                }

                /**
                 * Inject modules for resolving DOM hierarchy and plugin ordering.
                 */
                injection.injectEventPluginOrder(DOMEventPluginOrder)
                injection$1.injectComponentTree(ReactDOMComponentTree)

                /**
                 * Some important event plugins included by default (without having to require
                 * them).
                 */
                injection.injectEventPluginsByName({
                  SimpleEventPlugin: SimpleEventPlugin,
                  EnterLeaveEventPlugin: EnterLeaveEventPlugin,
                  ChangeEventPlugin: ChangeEventPlugin,
                  SelectEventPlugin: SelectEventPlugin,
                  BeforeInputEventPlugin: BeforeInputEventPlugin,
                })

                // Max 31 bit integer. The max integer size in V8 for 32-bit systems.
                // Math.pow(2, 30) - 1
                // 0b111111111111111111111111111111
                var MAX_SIGNED_31_BIT_INT = 1073741823

                // TODO: Use an opaque type once ESLint et al support the syntax

                var NoWork = 0
                var Sync = 1
                var Never = MAX_SIGNED_31_BIT_INT

                var UNIT_SIZE = 10
                var MAGIC_NUMBER_OFFSET = 2

                // 1 unit of expiration time represents 10ms.
                function msToExpirationTime(ms) {
                  // Always add an offset so that we don't clash with the magic number for NoWork.
                  return ((ms / UNIT_SIZE) | 0) + MAGIC_NUMBER_OFFSET
                }

                function expirationTimeToMs(expirationTime) {
                  return (expirationTime - MAGIC_NUMBER_OFFSET) * UNIT_SIZE
                }

                function ceiling(num, precision) {
                  return (((num / precision) | 0) + 1) * precision
                }

                function computeExpirationBucket(
                  currentTime,
                  expirationInMs,
                  bucketSizeMs
                ) {
                  return ceiling(
                    currentTime + expirationInMs / UNIT_SIZE,
                    bucketSizeMs / UNIT_SIZE
                  )
                }

                var NoContext = 0
                var AsyncMode = 1
                var StrictMode = 2

                var hasBadMapPolyfill = void 0

                {
                  hasBadMapPolyfill = false
                  try {
                    var nonExtensibleObject = Object.preventExtensions({})
                    var testMap = new Map([[nonExtensibleObject, null]])
                    var testSet = new Set([nonExtensibleObject])
                    // This is necessary for Rollup to not consider these unused.
                    // https://github.com/rollup/rollup/issues/1771
                    // TODO: we can remove these if Rollup fixes the bug.
                    testMap.set(0, 0)
                    testSet.add(0)
                  } catch (e) {
                    // TODO: Consider warning about bad polyfills
                    hasBadMapPolyfill = true
                  }
                }

                // A Fiber is work on a Component that needs to be done or was done. There can
                // be more than one per component.

                var debugCounter = void 0

                {
                  debugCounter = 1
                }

                function FiberNode(tag, pendingProps, key, mode) {
                  // Instance
                  this.tag = tag
                  this.key = key
                  this.type = null
                  this.stateNode = null

                  // Fiber
                  this['return'] = null
                  this.child = null
                  this.sibling = null
                  this.index = 0

                  this.ref = null

                  this.pendingProps = pendingProps
                  this.memoizedProps = null
                  this.updateQueue = null
                  this.memoizedState = null

                  this.mode = mode

                  // Effects
                  this.effectTag = NoEffect
                  this.nextEffect = null

                  this.firstEffect = null
                  this.lastEffect = null

                  this.expirationTime = NoWork

                  this.alternate = null

                  {
                    this._debugID = debugCounter++
                    this._debugSource = null
                    this._debugOwner = null
                    this._debugIsCurrentlyTiming = false
                    if (
                      !hasBadMapPolyfill &&
                      typeof Object.preventExtensions === 'function'
                    ) {
                      Object.preventExtensions(this)
                    }
                  }
                }

                // This is a constructor function, rather than a POJO constructor, still
                // please ensure we do the following:
                // 1) Nobody should add any instance methods on this. Instance methods can be
                //    more difficult to predict when they get optimized and they are almost
                //    never inlined properly in static compilers.
                // 2) Nobody should rely on `instanceof Fiber` for type testing. We should
                //    always know when it is a fiber.
                // 3) We might want to experiment with using numeric keys since they are easier
                //    to optimize in a non-JIT environment.
                // 4) We can easily go from a constructor to a createFiber object literal if that
                //    is faster.
                // 5) It should be easy to port this to a C struct and keep a C implementation
                //    compatible.
                var createFiber = function (tag, pendingProps, key, mode) {
                  // $FlowFixMe: the shapes are exact here but Flow doesn't like constructors
                  return new FiberNode(tag, pendingProps, key, mode)
                }

                function shouldConstruct(Component) {
                  return !!(
                    Component.prototype && Component.prototype.isReactComponent
                  )
                }

                // This is used to create an alternate fiber to do work on.
                function createWorkInProgress(
                  current,
                  pendingProps,
                  expirationTime
                ) {
                  var workInProgress = current.alternate
                  if (workInProgress === null) {
                    // We use a double buffering pooling technique because we know that we'll
                    // only ever need at most two versions of a tree. We pool the "other" unused
                    // node that we're free to reuse. This is lazily created to avoid allocating
                    // extra objects for things that are never updated. It also allow us to
                    // reclaim the extra memory if needed.
                    workInProgress = createFiber(
                      current.tag,
                      pendingProps,
                      current.key,
                      current.mode
                    )
                    workInProgress.type = current.type
                    workInProgress.stateNode = current.stateNode

                    {
                      // DEV-only fields
                      workInProgress._debugID = current._debugID
                      workInProgress._debugSource = current._debugSource
                      workInProgress._debugOwner = current._debugOwner
                    }

                    workInProgress.alternate = current
                    current.alternate = workInProgress
                  } else {
                    workInProgress.pendingProps = pendingProps

                    // We already have an alternate.
                    // Reset the effect tag.
                    workInProgress.effectTag = NoEffect

                    // The effect list is no longer valid.
                    workInProgress.nextEffect = null
                    workInProgress.firstEffect = null
                    workInProgress.lastEffect = null
                  }

                  workInProgress.expirationTime = expirationTime

                  workInProgress.child = current.child
                  workInProgress.memoizedProps = current.memoizedProps
                  workInProgress.memoizedState = current.memoizedState
                  workInProgress.updateQueue = current.updateQueue

                  // These will be overridden during the parent's reconciliation
                  workInProgress.sibling = current.sibling
                  workInProgress.index = current.index
                  workInProgress.ref = current.ref

                  return workInProgress
                }

                function createHostRootFiber(isAsync) {
                  var mode = isAsync ? AsyncMode | StrictMode : NoContext
                  return createFiber(HostRoot, null, null, mode)
                }

                function createFiberFromElement(element, mode, expirationTime) {
                  var owner = null
                  {
                    owner = element._owner
                  }

                  var fiber = void 0
                  var type = element.type
                  var key = element.key
                  var pendingProps = element.props

                  var fiberTag = void 0
                  if (typeof type === 'function') {
                    fiberTag = shouldConstruct(type)
                      ? ClassComponent
                      : IndeterminateComponent
                  } else if (typeof type === 'string') {
                    fiberTag = HostComponent
                  } else {
                    switch (type) {
                      case REACT_FRAGMENT_TYPE:
                        return createFiberFromFragment(
                          pendingProps.children,
                          mode,
                          expirationTime,
                          key
                        )
                      case REACT_ASYNC_MODE_TYPE:
                        fiberTag = Mode
                        mode |= AsyncMode | StrictMode
                        break
                      case REACT_STRICT_MODE_TYPE:
                        fiberTag = Mode
                        mode |= StrictMode
                        break
                      case REACT_CALL_TYPE:
                        fiberTag = CallComponent
                        break
                      case REACT_RETURN_TYPE:
                        fiberTag = ReturnComponent
                        break
                      default: {
                        if (typeof type === 'object' && type !== null) {
                          switch (type.$$typeof) {
                            case REACT_PROVIDER_TYPE:
                              fiberTag = ContextProvider
                              break
                            case REACT_CONTEXT_TYPE:
                              // This is a consumer
                              fiberTag = ContextConsumer
                              break
                            case REACT_FORWARD_REF_TYPE:
                              fiberTag = ForwardRef
                              break
                            default:
                              if (typeof type.tag === 'number') {
                                // Currently assumed to be a continuation and therefore is a
                                // fiber already.
                                // TODO: The yield system is currently broken for updates in
                                // some cases. The reified yield stores a fiber, but we don't
                                // know which fiber that is; the current or a workInProgress?
                                // When the continuation gets rendered here we don't know if we
                                // can reuse that fiber or if we need to clone it. There is
                                // probably a clever way to restructure this.
                                fiber = type
                                fiber.pendingProps = pendingProps
                                fiber.expirationTime = expirationTime
                                return fiber
                              } else {
                                throwOnInvalidElementType(type, owner)
                              }
                              break
                          }
                        } else {
                          throwOnInvalidElementType(type, owner)
                        }
                      }
                    }
                  }

                  fiber = createFiber(fiberTag, pendingProps, key, mode)
                  fiber.type = type
                  fiber.expirationTime = expirationTime

                  {
                    fiber._debugSource = element._source
                    fiber._debugOwner = element._owner
                  }

                  return fiber
                }

                function throwOnInvalidElementType(type, owner) {
                  var info = ''
                  {
                    if (
                      type === undefined ||
                      (typeof type === 'object' &&
                        type !== null &&
                        Object.keys(type).length === 0)
                    ) {
                      info +=
                        ' You likely forgot to export your component from the file ' +
                        "it's defined in, or you might have mixed up default and " +
                        'named imports.'
                    }
                    var ownerName = owner ? getComponentName(owner) : null
                    if (ownerName) {
                      info +=
                        '\n\nCheck the render method of `' + ownerName + '`.'
                    }
                  }
                  invariant(
                    false,
                    'Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s',
                    type == null ? type : typeof type,
                    info
                  )
                }

                function createFiberFromFragment(
                  elements,
                  mode,
                  expirationTime,
                  key
                ) {
                  var fiber = createFiber(Fragment, elements, key, mode)
                  fiber.expirationTime = expirationTime
                  return fiber
                }

                function createFiberFromText(content, mode, expirationTime) {
                  var fiber = createFiber(HostText, content, null, mode)
                  fiber.expirationTime = expirationTime
                  return fiber
                }

                function createFiberFromHostInstanceForDeletion() {
                  var fiber = createFiber(HostComponent, null, null, NoContext)
                  fiber.type = 'DELETED'
                  return fiber
                }

                function createFiberFromPortal(portal, mode, expirationTime) {
                  var pendingProps =
                    portal.children !== null ? portal.children : []
                  var fiber = createFiber(
                    HostPortal,
                    pendingProps,
                    portal.key,
                    mode
                  )
                  fiber.expirationTime = expirationTime
                  fiber.stateNode = {
                    containerInfo: portal.containerInfo,
                    pendingChildren: null, // Used by persistent updates
                    implementation: portal.implementation,
                  }
                  return fiber
                }

                // Used for stashing WIP properties to replay failed work in DEV.
                function assignFiberPropertiesInDEV(target, source) {
                  if (target === null) {
                    // This Fiber's initial properties will always be overwritten.
                    // We only use a Fiber to ensure the same hidden class so DEV isn't slow.
                    target = createFiber(
                      IndeterminateComponent,
                      null,
                      null,
                      NoContext
                    )
                  }

                  // This is intentionally written as a list of all properties.
                  // We tried to use Object.assign() instead but this is called in
                  // the hottest path, and Object.assign() was too slow:
                  // https://github.com/facebook/react/issues/12502
                  // This code is DEV-only so size is not a concern.

                  target.tag = source.tag
                  target.key = source.key
                  target.type = source.type
                  target.stateNode = source.stateNode
                  target['return'] = source['return']
                  target.child = source.child
                  target.sibling = source.sibling
                  target.index = source.index
                  target.ref = source.ref
                  target.pendingProps = source.pendingProps
                  target.memoizedProps = source.memoizedProps
                  target.updateQueue = source.updateQueue
                  target.memoizedState = source.memoizedState
                  target.mode = source.mode
                  target.effectTag = source.effectTag
                  target.nextEffect = source.nextEffect
                  target.firstEffect = source.firstEffect
                  target.lastEffect = source.lastEffect
                  target.expirationTime = source.expirationTime
                  target.alternate = source.alternate
                  target._debugID = source._debugID
                  target._debugSource = source._debugSource
                  target._debugOwner = source._debugOwner
                  target._debugIsCurrentlyTiming =
                    source._debugIsCurrentlyTiming
                  return target
                }

                // TODO: This should be lifted into the renderer.

                function createFiberRoot(containerInfo, isAsync, hydrate) {
                  // Cyclic construction. This cheats the type system right now because
                  // stateNode is any.
                  var uninitializedFiber = createHostRootFiber(isAsync)
                  var root = {
                    current: uninitializedFiber,
                    containerInfo: containerInfo,
                    pendingChildren: null,
                    pendingCommitExpirationTime: NoWork,
                    finishedWork: null,
                    context: null,
                    pendingContext: null,
                    hydrate: hydrate,
                    remainingExpirationTime: NoWork,
                    firstBatch: null,
                    nextScheduledRoot: null,
                  }
                  uninitializedFiber.stateNode = root
                  return root
                }

                var onCommitFiberRoot = null
                var onCommitFiberUnmount = null
                var hasLoggedError = false

                function catchErrors(fn) {
                  return function (arg) {
                    try {
                      return fn(arg)
                    } catch (err) {
                      if (true && !hasLoggedError) {
                        hasLoggedError = true
                        warning(
                          false,
                          'React DevTools encountered an error: %s',
                          err
                        )
                      }
                    }
                  }
                }

                function injectInternals(internals) {
                  if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === 'undefined') {
                    // No DevTools
                    return false
                  }
                  var hook = __REACT_DEVTOOLS_GLOBAL_HOOK__
                  if (hook.isDisabled) {
                    // This isn't a real property on the hook, but it can be set to opt out
                    // of DevTools integration and associated warnings and logs.
                    // https://github.com/facebook/react/issues/3877
                    return true
                  }
                  if (!hook.supportsFiber) {
                    {
                      warning(
                        false,
                        'The installed version of React DevTools is too old and will not work ' +
                          'with the current version of React. Please update React DevTools. ' +
                          'https://fb.me/react-devtools'
                      )
                    }
                    // DevTools exists, even though it doesn't support Fiber.
                    return true
                  }
                  try {
                    var rendererID = hook.inject(internals)
                    // We have successfully injected, so now it is safe to set up hooks.
                    onCommitFiberRoot = catchErrors(function (root) {
                      return hook.onCommitFiberRoot(rendererID, root)
                    })
                    onCommitFiberUnmount = catchErrors(function (fiber) {
                      return hook.onCommitFiberUnmount(rendererID, fiber)
                    })
                  } catch (err) {
                    // Catch all errors because it is unsafe to throw during initialization.
                    {
                      warning(
                        false,
                        'React DevTools encountered an error: %s.',
                        err
                      )
                    }
                  }
                  // DevTools exists
                  return true
                }

                function onCommitRoot(root) {
                  if (typeof onCommitFiberRoot === 'function') {
                    onCommitFiberRoot(root)
                  }
                }

                function onCommitUnmount(fiber) {
                  if (typeof onCommitFiberUnmount === 'function') {
                    onCommitFiberUnmount(fiber)
                  }
                }

                /**
                 * Forked from fbjs/warning:
                 * https://github.com/facebook/fbjs/blob/e66ba20ad5be433eb54423f2b097d829324d9de6/packages/fbjs/src/__forks__/warning.js
                 *
                 * Only change is we use console.warn instead of console.error,
                 * and do nothing when 'console' is not supported.
                 * This really simplifies the code.
                 * ---
                 * Similar to invariant but only logs a warning if the condition is not met.
                 * This can be used to log issues in development environments in critical
                 * paths. Removing the logging code for production environments will keep the
                 * same logic and follow the same code paths.
                 */

                var lowPriorityWarning = function () {}

                {
                  var printWarning = function (format) {
                    for (
                      var _len = arguments.length,
                        args = Array(_len > 1 ? _len - 1 : 0),
                        _key = 1;
                      _key < _len;
                      _key++
                    ) {
                      args[_key - 1] = arguments[_key]
                    }

                    var argIndex = 0
                    var message =
                      'Warning: ' +
                      format.replace(/%s/g, function () {
                        return args[argIndex++]
                      })
                    if (typeof console !== 'undefined') {
                      console.warn(message)
                    }
                    try {
                      // --- Welcome to debugging React ---
                      // This error was thrown as a convenience so that you can use this stack
                      // to find the callsite that caused this warning to fire.
                      throw new Error(message)
                    } catch (x) {}
                  }

                  lowPriorityWarning = function (condition, format) {
                    if (format === undefined) {
                      throw new Error(
                        '`warning(condition, format, ...args)` requires a warning ' +
                          'message argument'
                      )
                    }
                    if (!condition) {
                      for (
                        var _len2 = arguments.length,
                          args = Array(_len2 > 2 ? _len2 - 2 : 0),
                          _key2 = 2;
                        _key2 < _len2;
                        _key2++
                      ) {
                        args[_key2 - 2] = arguments[_key2]
                      }

                      printWarning.apply(undefined, [format].concat(args))
                    }
                  }
                }

                var lowPriorityWarning$1 = lowPriorityWarning

                var ReactStrictModeWarnings = {
                  discardPendingWarnings: function () {},
                  flushPendingDeprecationWarnings: function () {},
                  flushPendingUnsafeLifecycleWarnings: function () {},
                  recordDeprecationWarnings: function (fiber, instance) {},
                  recordUnsafeLifecycleWarnings: function (fiber, instance) {},
                }

                {
                  var LIFECYCLE_SUGGESTIONS = {
                    UNSAFE_componentWillMount: 'componentDidMount',
                    UNSAFE_componentWillReceiveProps:
                      'static getDerivedStateFromProps',
                    UNSAFE_componentWillUpdate: 'componentDidUpdate',
                  }

                  var pendingComponentWillMountWarnings = []
                  var pendingComponentWillReceivePropsWarnings = []
                  var pendingComponentWillUpdateWarnings = []
                  var pendingUnsafeLifecycleWarnings = new Map()

                  // Tracks components we have already warned about.
                  var didWarnAboutDeprecatedLifecycles = new Set()
                  var didWarnAboutUnsafeLifecycles = new Set()

                  var setToSortedString = function (set) {
                    var array = []
                    set.forEach(function (value) {
                      array.push(value)
                    })
                    return array.sort().join(', ')
                  }

                  ReactStrictModeWarnings.discardPendingWarnings = function () {
                    pendingComponentWillMountWarnings = []
                    pendingComponentWillReceivePropsWarnings = []
                    pendingComponentWillUpdateWarnings = []
                    pendingUnsafeLifecycleWarnings = new Map()
                  }

                  ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings = function () {
                    pendingUnsafeLifecycleWarnings.forEach(function (
                      lifecycleWarningsMap,
                      strictRoot
                    ) {
                      var lifecyclesWarningMesages = []

                      Object.keys(lifecycleWarningsMap).forEach(function (
                        lifecycle
                      ) {
                        var lifecycleWarnings = lifecycleWarningsMap[lifecycle]
                        if (lifecycleWarnings.length > 0) {
                          var componentNames = new Set()
                          lifecycleWarnings.forEach(function (fiber) {
                            componentNames.add(
                              getComponentName(fiber) || 'Component'
                            )
                            didWarnAboutUnsafeLifecycles.add(fiber.type)
                          })

                          var formatted = lifecycle.replace('UNSAFE_', '')
                          var suggestion = LIFECYCLE_SUGGESTIONS[lifecycle]
                          var sortedComponentNames = setToSortedString(
                            componentNames
                          )

                          lifecyclesWarningMesages.push(
                            formatted +
                              ': Please update the following components to use ' +
                              (suggestion + ' instead: ' + sortedComponentNames)
                          )
                        }
                      })

                      if (lifecyclesWarningMesages.length > 0) {
                        var strictRootComponentStack = getStackAddendumByWorkInProgressFiber(
                          strictRoot
                        )

                        warning(
                          false,
                          'Unsafe lifecycle methods were found within a strict-mode tree:%s' +
                            '\n\n%s' +
                            '\n\nLearn more about this warning here:' +
                            '\nhttps://fb.me/react-strict-mode-warnings',
                          strictRootComponentStack,
                          lifecyclesWarningMesages.join('\n\n')
                        )
                      }
                    })

                    pendingUnsafeLifecycleWarnings = new Map()
                  }

                  var getStrictRoot = function (fiber) {
                    var maybeStrictRoot = null

                    while (fiber !== null) {
                      if (fiber.mode & StrictMode) {
                        maybeStrictRoot = fiber
                      }

                      fiber = fiber['return']
                    }

                    return maybeStrictRoot
                  }

                  ReactStrictModeWarnings.flushPendingDeprecationWarnings = function () {
                    if (pendingComponentWillMountWarnings.length > 0) {
                      var uniqueNames = new Set()
                      pendingComponentWillMountWarnings.forEach(function (
                        fiber
                      ) {
                        uniqueNames.add(getComponentName(fiber) || 'Component')
                        didWarnAboutDeprecatedLifecycles.add(fiber.type)
                      })

                      var sortedNames = setToSortedString(uniqueNames)

                      lowPriorityWarning$1(
                        false,
                        'componentWillMount is deprecated and will be removed in the next major version. ' +
                          'Use componentDidMount instead. As a temporary workaround, ' +
                          'you can rename to UNSAFE_componentWillMount.' +
                          '\n\nPlease update the following components: %s' +
                          '\n\nLearn more about this warning here:' +
                          '\nhttps://fb.me/react-async-component-lifecycle-hooks',
                        sortedNames
                      )

                      pendingComponentWillMountWarnings = []
                    }

                    if (pendingComponentWillReceivePropsWarnings.length > 0) {
                      var _uniqueNames = new Set()
                      pendingComponentWillReceivePropsWarnings.forEach(
                        function (fiber) {
                          _uniqueNames.add(
                            getComponentName(fiber) || 'Component'
                          )
                          didWarnAboutDeprecatedLifecycles.add(fiber.type)
                        }
                      )

                      var _sortedNames = setToSortedString(_uniqueNames)

                      lowPriorityWarning$1(
                        false,
                        'componentWillReceiveProps is deprecated and will be removed in the next major version. ' +
                          'Use static getDerivedStateFromProps instead.' +
                          '\n\nPlease update the following components: %s' +
                          '\n\nLearn more about this warning here:' +
                          '\nhttps://fb.me/react-async-component-lifecycle-hooks',
                        _sortedNames
                      )

                      pendingComponentWillReceivePropsWarnings = []
                    }

                    if (pendingComponentWillUpdateWarnings.length > 0) {
                      var _uniqueNames2 = new Set()
                      pendingComponentWillUpdateWarnings.forEach(function (
                        fiber
                      ) {
                        _uniqueNames2.add(
                          getComponentName(fiber) || 'Component'
                        )
                        didWarnAboutDeprecatedLifecycles.add(fiber.type)
                      })

                      var _sortedNames2 = setToSortedString(_uniqueNames2)

                      lowPriorityWarning$1(
                        false,
                        'componentWillUpdate is deprecated and will be removed in the next major version. ' +
                          'Use componentDidUpdate instead. As a temporary workaround, ' +
                          'you can rename to UNSAFE_componentWillUpdate.' +
                          '\n\nPlease update the following components: %s' +
                          '\n\nLearn more about this warning here:' +
                          '\nhttps://fb.me/react-async-component-lifecycle-hooks',
                        _sortedNames2
                      )

                      pendingComponentWillUpdateWarnings = []
                    }
                  }

                  ReactStrictModeWarnings.recordDeprecationWarnings = function (
                    fiber,
                    instance
                  ) {
                    // Dedup strategy: Warn once per component.
                    if (didWarnAboutDeprecatedLifecycles.has(fiber.type)) {
                      return
                    }

                    // Don't warn about react-lifecycles-compat polyfilled components.
                    if (
                      typeof instance.componentWillMount === 'function' &&
                      instance.componentWillMount
                        .__suppressDeprecationWarning !== true
                    ) {
                      pendingComponentWillMountWarnings.push(fiber)
                    }
                    if (
                      typeof instance.componentWillReceiveProps ===
                        'function' &&
                      instance.componentWillReceiveProps
                        .__suppressDeprecationWarning !== true
                    ) {
                      pendingComponentWillReceivePropsWarnings.push(fiber)
                    }
                    if (
                      typeof instance.componentWillUpdate === 'function' &&
                      instance.componentWillUpdate
                        .__suppressDeprecationWarning !== true
                    ) {
                      pendingComponentWillUpdateWarnings.push(fiber)
                    }
                  }

                  ReactStrictModeWarnings.recordUnsafeLifecycleWarnings = function (
                    fiber,
                    instance
                  ) {
                    var strictRoot = getStrictRoot(fiber)

                    // Dedup strategy: Warn once per component.
                    // This is difficult to track any other way since component names
                    // are often vague and are likely to collide between 3rd party libraries.
                    // An expand property is probably okay to use here since it's DEV-only,
                    // and will only be set in the event of serious warnings.
                    if (didWarnAboutUnsafeLifecycles.has(fiber.type)) {
                      return
                    }

                    // Don't warn about react-lifecycles-compat polyfilled components.
                    // Note that it is sufficient to check for the presence of a
                    // single lifecycle, componentWillMount, with the polyfill flag.
                    if (
                      typeof instance.componentWillMount === 'function' &&
                      instance.componentWillMount
                        .__suppressDeprecationWarning === true
                    ) {
                      return
                    }

                    var warningsForRoot = void 0
                    if (!pendingUnsafeLifecycleWarnings.has(strictRoot)) {
                      warningsForRoot = {
                        UNSAFE_componentWillMount: [],
                        UNSAFE_componentWillReceiveProps: [],
                        UNSAFE_componentWillUpdate: [],
                      }

                      pendingUnsafeLifecycleWarnings.set(
                        strictRoot,
                        warningsForRoot
                      )
                    } else {
                      warningsForRoot = pendingUnsafeLifecycleWarnings.get(
                        strictRoot
                      )
                    }

                    var unsafeLifecycles = []
                    if (
                      typeof instance.componentWillMount === 'function' ||
                      typeof instance.UNSAFE_componentWillMount === 'function'
                    ) {
                      unsafeLifecycles.push('UNSAFE_componentWillMount')
                    }
                    if (
                      typeof instance.componentWillReceiveProps ===
                        'function' ||
                      typeof instance.UNSAFE_componentWillReceiveProps ===
                        'function'
                    ) {
                      unsafeLifecycles.push('UNSAFE_componentWillReceiveProps')
                    }
                    if (
                      typeof instance.componentWillUpdate === 'function' ||
                      typeof instance.UNSAFE_componentWillUpdate === 'function'
                    ) {
                      unsafeLifecycles.push('UNSAFE_componentWillUpdate')
                    }

                    if (unsafeLifecycles.length > 0) {
                      unsafeLifecycles.forEach(function (lifecycle) {
                        warningsForRoot[lifecycle].push(fiber)
                      })
                    }
                  }
                }

                // Exports ReactDOM.createRoot
                var enableUserTimingAPI = true

                // Mutating mode (React DOM, React ART, React Native):
                var enableMutatingReconciler = true
                // Experimental noop mode (currently unused):
                var enableNoopReconciler = false
                // Experimental persistent mode (Fabric):
                var enablePersistentReconciler = false
                // Experimental error-boundary API that can recover from errors within a single
                // render phase
                var enableGetDerivedStateFromCatch = false
                // Helps identify side effects in begin-phase lifecycle hooks and setState reducers:
                var debugRenderPhaseSideEffects = false

                // In some cases, StrictMode should also double-render lifecycles.
                // This can be confusing for tests though,
                // And it can be bad for performance in production.
                // This feature flag can be used to control the behavior:
                var debugRenderPhaseSideEffectsForStrictMode = true

                // To preserve the "Pause on caught exceptions" behavior of the debugger, we
                // replay the begin phase of a failed component inside invokeGuardedCallback.
                var replayFailedUnitOfWorkWithInvokeGuardedCallback = true

                // Warn about deprecated, async-unsafe lifecycles; relates to RFC #6:
                var warnAboutDeprecatedLifecycles = false

                var alwaysUseRequestIdleCallbackPolyfill = false

                // Only used in www builds.

                // Prefix measurements so that it's possible to filter them.
                // Longer prefixes are hard to read in DevTools.
                var reactEmoji = '\u269B'
                var warningEmoji = '\u26D4'
                var supportsUserTiming =
                  typeof performance !== 'undefined' &&
                  typeof performance.mark === 'function' &&
                  typeof performance.clearMarks === 'function' &&
                  typeof performance.measure === 'function' &&
                  typeof performance.clearMeasures === 'function'

                // Keep track of current fiber so that we know the path to unwind on pause.
                // TODO: this looks the same as nextUnitOfWork in scheduler. Can we unify them?
                var currentFiber = null
                // If we're in the middle of user code, which fiber and method is it?
                // Reusing `currentFiber` would be confusing for this because user code fiber
                // can change during commit phase too, but we don't need to unwind it (since
                // lifecycles in the commit phase don't resemble a tree).
                var currentPhase = null
                var currentPhaseFiber = null
                // Did lifecycle hook schedule an update? This is often a performance problem,
                // so we will keep track of it, and include it in the report.
                // Track commits caused by cascading updates.
                var isCommitting = false
                var hasScheduledUpdateInCurrentCommit = false
                var hasScheduledUpdateInCurrentPhase = false
                var commitCountInCurrentWorkLoop = 0
                var effectCountInCurrentCommit = 0
                var isWaitingForCallback = false
                // During commits, we only show a measurement once per method name
                // to avoid stretch the commit phase with measurement overhead.
                var labelsInCurrentCommit = new Set()

                var formatMarkName = function (markName) {
                  return reactEmoji + ' ' + markName
                }

                var formatLabel = function (label, warning$$1) {
                  var prefix = warning$$1
                    ? warningEmoji + ' '
                    : reactEmoji + ' '
                  var suffix = warning$$1 ? ' Warning: ' + warning$$1 : ''
                  return '' + prefix + label + suffix
                }

                var beginMark = function (markName) {
                  performance.mark(formatMarkName(markName))
                }

                var clearMark = function (markName) {
                  performance.clearMarks(formatMarkName(markName))
                }

                var endMark = function (label, markName, warning$$1) {
                  var formattedMarkName = formatMarkName(markName)
                  var formattedLabel = formatLabel(label, warning$$1)
                  try {
                    performance.measure(formattedLabel, formattedMarkName)
                  } catch (err) {}
                  // If previous mark was missing for some reason, this will throw.
                  // This could only happen if React crashed in an unexpected place earlier.
                  // Don't pile on with more errors.

                  // Clear marks immediately to avoid growing buffer.
                  performance.clearMarks(formattedMarkName)
                  performance.clearMeasures(formattedLabel)
                }

                var getFiberMarkName = function (label, debugID) {
                  return label + ' (#' + debugID + ')'
                }

                var getFiberLabel = function (componentName, isMounted, phase) {
                  if (phase === null) {
                    // These are composite component total time measurements.
                    return (
                      componentName +
                      ' [' +
                      (isMounted ? 'update' : 'mount') +
                      ']'
                    )
                  } else {
                    // Composite component methods.
                    return componentName + '.' + phase
                  }
                }

                var beginFiberMark = function (fiber, phase) {
                  var componentName = getComponentName(fiber) || 'Unknown'
                  var debugID = fiber._debugID
                  var isMounted = fiber.alternate !== null
                  var label = getFiberLabel(componentName, isMounted, phase)

                  if (isCommitting && labelsInCurrentCommit.has(label)) {
                    // During the commit phase, we don't show duplicate labels because
                    // there is a fixed overhead for every measurement, and we don't
                    // want to stretch the commit phase beyond necessary.
                    return false
                  }
                  labelsInCurrentCommit.add(label)

                  var markName = getFiberMarkName(label, debugID)
                  beginMark(markName)
                  return true
                }

                var clearFiberMark = function (fiber, phase) {
                  var componentName = getComponentName(fiber) || 'Unknown'
                  var debugID = fiber._debugID
                  var isMounted = fiber.alternate !== null
                  var label = getFiberLabel(componentName, isMounted, phase)
                  var markName = getFiberMarkName(label, debugID)
                  clearMark(markName)
                }

                var endFiberMark = function (fiber, phase, warning$$1) {
                  var componentName = getComponentName(fiber) || 'Unknown'
                  var debugID = fiber._debugID
                  var isMounted = fiber.alternate !== null
                  var label = getFiberLabel(componentName, isMounted, phase)
                  var markName = getFiberMarkName(label, debugID)
                  endMark(label, markName, warning$$1)
                }

                var shouldIgnoreFiber = function (fiber) {
                  // Host components should be skipped in the timeline.
                  // We could check typeof fiber.type, but does this work with RN?
                  switch (fiber.tag) {
                    case HostRoot:
                    case HostComponent:
                    case HostText:
                    case HostPortal:
                    case CallComponent:
                    case ReturnComponent:
                    case Fragment:
                    case ContextProvider:
                    case ContextConsumer:
                    case Mode:
                      return true
                    default:
                      return false
                  }
                }

                var clearPendingPhaseMeasurement = function () {
                  if (currentPhase !== null && currentPhaseFiber !== null) {
                    clearFiberMark(currentPhaseFiber, currentPhase)
                  }
                  currentPhaseFiber = null
                  currentPhase = null
                  hasScheduledUpdateInCurrentPhase = false
                }

                var pauseTimers = function () {
                  // Stops all currently active measurements so that they can be resumed
                  // if we continue in a later deferred loop from the same unit of work.
                  var fiber = currentFiber
                  while (fiber) {
                    if (fiber._debugIsCurrentlyTiming) {
                      endFiberMark(fiber, null, null)
                    }
                    fiber = fiber['return']
                  }
                }

                var resumeTimersRecursively = function (fiber) {
                  if (fiber['return'] !== null) {
                    resumeTimersRecursively(fiber['return'])
                  }
                  if (fiber._debugIsCurrentlyTiming) {
                    beginFiberMark(fiber, null)
                  }
                }

                var resumeTimers = function () {
                  // Resumes all measurements that were active during the last deferred loop.
                  if (currentFiber !== null) {
                    resumeTimersRecursively(currentFiber)
                  }
                }

                function recordEffect() {
                  if (enableUserTimingAPI) {
                    effectCountInCurrentCommit++
                  }
                }

                function recordScheduleUpdate() {
                  if (enableUserTimingAPI) {
                    if (isCommitting) {
                      hasScheduledUpdateInCurrentCommit = true
                    }
                    if (
                      currentPhase !== null &&
                      currentPhase !== 'componentWillMount' &&
                      currentPhase !== 'componentWillReceiveProps'
                    ) {
                      hasScheduledUpdateInCurrentPhase = true
                    }
                  }
                }

                function startRequestCallbackTimer() {
                  if (enableUserTimingAPI) {
                    if (supportsUserTiming && !isWaitingForCallback) {
                      isWaitingForCallback = true
                      beginMark('(Waiting for async callback...)')
                    }
                  }
                }

                function stopRequestCallbackTimer(didExpire, expirationTime) {
                  if (enableUserTimingAPI) {
                    if (supportsUserTiming) {
                      isWaitingForCallback = false
                      var warning$$1 = didExpire
                        ? 'React was blocked by main thread'
                        : null
                      endMark(
                        '(Waiting for async callback... will force flush in ' +
                          expirationTime +
                          ' ms)',
                        '(Waiting for async callback...)',
                        warning$$1
                      )
                    }
                  }
                }

                function startWorkTimer(fiber) {
                  if (enableUserTimingAPI) {
                    if (!supportsUserTiming || shouldIgnoreFiber(fiber)) {
                      return
                    }
                    // If we pause, this is the fiber to unwind from.
                    currentFiber = fiber
                    if (!beginFiberMark(fiber, null)) {
                      return
                    }
                    fiber._debugIsCurrentlyTiming = true
                  }
                }

                function cancelWorkTimer(fiber) {
                  if (enableUserTimingAPI) {
                    if (!supportsUserTiming || shouldIgnoreFiber(fiber)) {
                      return
                    }
                    // Remember we shouldn't complete measurement for this fiber.
                    // Otherwise flamechart will be deep even for small updates.
                    fiber._debugIsCurrentlyTiming = false
                    clearFiberMark(fiber, null)
                  }
                }

                function stopWorkTimer(fiber) {
                  if (enableUserTimingAPI) {
                    if (!supportsUserTiming || shouldIgnoreFiber(fiber)) {
                      return
                    }
                    // If we pause, its parent is the fiber to unwind from.
                    currentFiber = fiber['return']
                    if (!fiber._debugIsCurrentlyTiming) {
                      return
                    }
                    fiber._debugIsCurrentlyTiming = false
                    endFiberMark(fiber, null, null)
                  }
                }

                function stopFailedWorkTimer(fiber) {
                  if (enableUserTimingAPI) {
                    if (!supportsUserTiming || shouldIgnoreFiber(fiber)) {
                      return
                    }
                    // If we pause, its parent is the fiber to unwind from.
                    currentFiber = fiber['return']
                    if (!fiber._debugIsCurrentlyTiming) {
                      return
                    }
                    fiber._debugIsCurrentlyTiming = false
                    var warning$$1 =
                      'An error was thrown inside this error boundary'
                    endFiberMark(fiber, null, warning$$1)
                  }
                }

                function startPhaseTimer(fiber, phase) {
                  if (enableUserTimingAPI) {
                    if (!supportsUserTiming) {
                      return
                    }
                    clearPendingPhaseMeasurement()
                    if (!beginFiberMark(fiber, phase)) {
                      return
                    }
                    currentPhaseFiber = fiber
                    currentPhase = phase
                  }
                }

                function stopPhaseTimer() {
                  if (enableUserTimingAPI) {
                    if (!supportsUserTiming) {
                      return
                    }
                    if (currentPhase !== null && currentPhaseFiber !== null) {
                      var warning$$1 = hasScheduledUpdateInCurrentPhase
                        ? 'Scheduled a cascading update'
                        : null
                      endFiberMark(currentPhaseFiber, currentPhase, warning$$1)
                    }
                    currentPhase = null
                    currentPhaseFiber = null
                  }
                }

                function startWorkLoopTimer(nextUnitOfWork) {
                  if (enableUserTimingAPI) {
                    currentFiber = nextUnitOfWork
                    if (!supportsUserTiming) {
                      return
                    }
                    commitCountInCurrentWorkLoop = 0
                    // This is top level call.
                    // Any other measurements are performed within.
                    beginMark('(React Tree Reconciliation)')
                    // Resume any measurements that were in progress during the last loop.
                    resumeTimers()
                  }
                }

                function stopWorkLoopTimer(interruptedBy, didCompleteRoot) {
                  if (enableUserTimingAPI) {
                    if (!supportsUserTiming) {
                      return
                    }
                    var warning$$1 = null
                    if (interruptedBy !== null) {
                      if (interruptedBy.tag === HostRoot) {
                        warning$$1 =
                          'A top-level update interrupted the previous render'
                      } else {
                        var componentName =
                          getComponentName(interruptedBy) || 'Unknown'
                        warning$$1 =
                          'An update to ' +
                          componentName +
                          ' interrupted the previous render'
                      }
                    } else if (commitCountInCurrentWorkLoop > 1) {
                      warning$$1 = 'There were cascading updates'
                    }
                    commitCountInCurrentWorkLoop = 0
                    var label = didCompleteRoot
                      ? '(React Tree Reconciliation: Completed Root)'
                      : '(React Tree Reconciliation: Yielded)'
                    // Pause any measurements until the next loop.
                    pauseTimers()
                    endMark(label, '(React Tree Reconciliation)', warning$$1)
                  }
                }

                function startCommitTimer() {
                  if (enableUserTimingAPI) {
                    if (!supportsUserTiming) {
                      return
                    }
                    isCommitting = true
                    hasScheduledUpdateInCurrentCommit = false
                    labelsInCurrentCommit.clear()
                    beginMark('(Committing Changes)')
                  }
                }

                function stopCommitTimer() {
                  if (enableUserTimingAPI) {
                    if (!supportsUserTiming) {
                      return
                    }

                    var warning$$1 = null
                    if (hasScheduledUpdateInCurrentCommit) {
                      warning$$1 = 'Lifecycle hook scheduled a cascading update'
                    } else if (commitCountInCurrentWorkLoop > 0) {
                      warning$$1 =
                        'Caused by a cascading update in earlier commit'
                    }
                    hasScheduledUpdateInCurrentCommit = false
                    commitCountInCurrentWorkLoop++
                    isCommitting = false
                    labelsInCurrentCommit.clear()

                    endMark(
                      '(Committing Changes)',
                      '(Committing Changes)',
                      warning$$1
                    )
                  }
                }

                function startCommitSnapshotEffectsTimer() {
                  if (enableUserTimingAPI) {
                    if (!supportsUserTiming) {
                      return
                    }
                    effectCountInCurrentCommit = 0
                    beginMark('(Committing Snapshot Effects)')
                  }
                }

                function stopCommitSnapshotEffectsTimer() {
                  if (enableUserTimingAPI) {
                    if (!supportsUserTiming) {
                      return
                    }
                    var count = effectCountInCurrentCommit
                    effectCountInCurrentCommit = 0
                    endMark(
                      '(Committing Snapshot Effects: ' + count + ' Total)',
                      '(Committing Snapshot Effects)',
                      null
                    )
                  }
                }

                function startCommitHostEffectsTimer() {
                  if (enableUserTimingAPI) {
                    if (!supportsUserTiming) {
                      return
                    }
                    effectCountInCurrentCommit = 0
                    beginMark('(Committing Host Effects)')
                  }
                }

                function stopCommitHostEffectsTimer() {
                  if (enableUserTimingAPI) {
                    if (!supportsUserTiming) {
                      return
                    }
                    var count = effectCountInCurrentCommit
                    effectCountInCurrentCommit = 0
                    endMark(
                      '(Committing Host Effects: ' + count + ' Total)',
                      '(Committing Host Effects)',
                      null
                    )
                  }
                }

                function startCommitLifeCyclesTimer() {
                  if (enableUserTimingAPI) {
                    if (!supportsUserTiming) {
                      return
                    }
                    effectCountInCurrentCommit = 0
                    beginMark('(Calling Lifecycle Methods)')
                  }
                }

                function stopCommitLifeCyclesTimer() {
                  if (enableUserTimingAPI) {
                    if (!supportsUserTiming) {
                      return
                    }
                    var count = effectCountInCurrentCommit
                    effectCountInCurrentCommit = 0
                    endMark(
                      '(Calling Lifecycle Methods: ' + count + ' Total)',
                      '(Calling Lifecycle Methods)',
                      null
                    )
                  }
                }

                var didWarnUpdateInsideUpdate = void 0

                {
                  didWarnUpdateInsideUpdate = false
                }

                // Callbacks are not validated until invocation

                // Singly linked-list of updates. When an update is scheduled, it is added to
                // the queue of the current fiber and the work-in-progress fiber. The two queues
                // are separate but they share a persistent structure.
                //
                // During reconciliation, updates are removed from the work-in-progress fiber,
                // but they remain on the current fiber. That ensures that if a work-in-progress
                // is aborted, the aborted updates are recovered by cloning from current.
                //
                // The work-in-progress queue is always a subset of the current queue.
                //
                // When the tree is committed, the work-in-progress becomes the current.

                function createUpdateQueue(baseState) {
                  var queue = {
                    baseState: baseState,
                    expirationTime: NoWork,
                    first: null,
                    last: null,
                    callbackList: null,
                    hasForceUpdate: false,
                    isInitialized: false,
                    capturedValues: null,
                  }
                  {
                    queue.isProcessing = false
                  }
                  return queue
                }

                function insertUpdateIntoQueue(queue, update) {
                  // Append the update to the end of the list.
                  if (queue.last === null) {
                    // Queue is empty
                    queue.first = queue.last = update
                  } else {
                    queue.last.next = update
                    queue.last = update
                  }
                  if (
                    queue.expirationTime === NoWork ||
                    queue.expirationTime > update.expirationTime
                  ) {
                    queue.expirationTime = update.expirationTime
                  }
                }

                var q1 = void 0
                var q2 = void 0
                function ensureUpdateQueues(fiber) {
                  q1 = q2 = null
                  // We'll have at least one and at most two distinct update queues.
                  var alternateFiber = fiber.alternate
                  var queue1 = fiber.updateQueue
                  if (queue1 === null) {
                    // TODO: We don't know what the base state will be until we begin work.
                    // It depends on which fiber is the next current. Initialize with an empty
                    // base state, then set to the memoizedState when rendering. Not super
                    // happy with this approach.
                    queue1 = fiber.updateQueue = createUpdateQueue(null)
                  }

                  var queue2 = void 0
                  if (alternateFiber !== null) {
                    queue2 = alternateFiber.updateQueue
                    if (queue2 === null) {
                      queue2 = alternateFiber.updateQueue = createUpdateQueue(
                        null
                      )
                    }
                  } else {
                    queue2 = null
                  }
                  queue2 = queue2 !== queue1 ? queue2 : null

                  // Use module variables instead of returning a tuple
                  q1 = queue1
                  q2 = queue2
                }

                function insertUpdateIntoFiber(fiber, update) {
                  ensureUpdateQueues(fiber)
                  var queue1 = q1
                  var queue2 = q2

                  // Warn if an update is scheduled from inside an updater function.
                  {
                    if (
                      (queue1.isProcessing ||
                        (queue2 !== null && queue2.isProcessing)) &&
                      !didWarnUpdateInsideUpdate
                    ) {
                      warning(
                        false,
                        'An update (setState, replaceState, or forceUpdate) was scheduled ' +
                          'from inside an update function. Update functions should be pure, ' +
                          'with zero side-effects. Consider using componentDidUpdate or a ' +
                          'callback.'
                      )
                      didWarnUpdateInsideUpdate = true
                    }
                  }

                  // If there's only one queue, add the update to that queue and exit.
                  if (queue2 === null) {
                    insertUpdateIntoQueue(queue1, update)
                    return
                  }

                  // If either queue is empty, we need to add to both queues.
                  if (queue1.last === null || queue2.last === null) {
                    insertUpdateIntoQueue(queue1, update)
                    insertUpdateIntoQueue(queue2, update)
                    return
                  }

                  // If both lists are not empty, the last update is the same for both lists
                  // because of structural sharing. So, we should only append to one of
                  // the lists.
                  insertUpdateIntoQueue(queue1, update)
                  // But we still need to update the `last` pointer of queue2.
                  queue2.last = update
                }

                function getUpdateExpirationTime(fiber) {
                  switch (fiber.tag) {
                    case HostRoot:
                    case ClassComponent:
                      var updateQueue = fiber.updateQueue
                      if (updateQueue === null) {
                        return NoWork
                      }
                      return updateQueue.expirationTime
                    default:
                      return NoWork
                  }
                }

                function getStateFromUpdate(
                  update,
                  instance,
                  prevState,
                  props
                ) {
                  var partialState = update.partialState
                  if (typeof partialState === 'function') {
                    return partialState.call(instance, prevState, props)
                  } else {
                    return partialState
                  }
                }

                function processUpdateQueue(
                  current,
                  workInProgress,
                  queue,
                  instance,
                  props,
                  renderExpirationTime
                ) {
                  if (current !== null && current.updateQueue === queue) {
                    // We need to create a work-in-progress queue, by cloning the current queue.
                    var currentQueue = queue
                    queue = workInProgress.updateQueue = {
                      baseState: currentQueue.baseState,
                      expirationTime: currentQueue.expirationTime,
                      first: currentQueue.first,
                      last: currentQueue.last,
                      isInitialized: currentQueue.isInitialized,
                      capturedValues: currentQueue.capturedValues,
                      // These fields are no longer valid because they were already committed.
                      // Reset them.
                      callbackList: null,
                      hasForceUpdate: false,
                    }
                  }

                  {
                    // Set this flag so we can warn if setState is called inside the update
                    // function of another setState.
                    queue.isProcessing = true
                  }

                  // Reset the remaining expiration time. If we skip over any updates, we'll
                  // increase this accordingly.
                  queue.expirationTime = NoWork

                  // TODO: We don't know what the base state will be until we begin work.
                  // It depends on which fiber is the next current. Initialize with an empty
                  // base state, then set to the memoizedState when rendering. Not super
                  // happy with this approach.
                  var state = void 0
                  if (queue.isInitialized) {
                    state = queue.baseState
                  } else {
                    state = queue.baseState = workInProgress.memoizedState
                    queue.isInitialized = true
                  }
                  var dontMutatePrevState = true
                  var update = queue.first
                  var didSkip = false
                  while (update !== null) {
                    var updateExpirationTime = update.expirationTime
                    if (updateExpirationTime > renderExpirationTime) {
                      // This update does not have sufficient priority. Skip it.
                      var remainingExpirationTime = queue.expirationTime
                      if (
                        remainingExpirationTime === NoWork ||
                        remainingExpirationTime > updateExpirationTime
                      ) {
                        // Update the remaining expiration time.
                        queue.expirationTime = updateExpirationTime
                      }
                      if (!didSkip) {
                        didSkip = true
                        queue.baseState = state
                      }
                      // Continue to the next update.
                      update = update.next
                      continue
                    }

                    // This update does have sufficient priority.

                    // If no previous updates were skipped, drop this update from the queue by
                    // advancing the head of the list.
                    if (!didSkip) {
                      queue.first = update.next
                      if (queue.first === null) {
                        queue.last = null
                      }
                    }

                    // Invoke setState callback an extra time to help detect side-effects.
                    // Ignore the return value in this case.
                    if (
                      debugRenderPhaseSideEffects ||
                      (debugRenderPhaseSideEffectsForStrictMode &&
                        workInProgress.mode & StrictMode)
                    ) {
                      getStateFromUpdate(update, instance, state, props)
                    }

                    // Process the update
                    var _partialState = void 0
                    if (update.isReplace) {
                      state = getStateFromUpdate(update, instance, state, props)
                      dontMutatePrevState = true
                    } else {
                      _partialState = getStateFromUpdate(
                        update,
                        instance,
                        state,
                        props
                      )
                      if (_partialState) {
                        if (dontMutatePrevState) {
                          // $FlowFixMe: Idk how to type this properly.
                          state = _assign({}, state, _partialState)
                        } else {
                          state = _assign(state, _partialState)
                        }
                        dontMutatePrevState = false
                      }
                    }
                    if (update.isForced) {
                      queue.hasForceUpdate = true
                    }
                    if (update.callback !== null) {
                      // Append to list of callbacks.
                      var _callbackList = queue.callbackList
                      if (_callbackList === null) {
                        _callbackList = queue.callbackList = []
                      }
                      _callbackList.push(update)
                    }
                    if (update.capturedValue !== null) {
                      var _capturedValues = queue.capturedValues
                      if (_capturedValues === null) {
                        queue.capturedValues = [update.capturedValue]
                      } else {
                        _capturedValues.push(update.capturedValue)
                      }
                    }
                    update = update.next
                  }

                  if (queue.callbackList !== null) {
                    workInProgress.effectTag |= Callback
                  } else if (
                    queue.first === null &&
                    !queue.hasForceUpdate &&
                    queue.capturedValues === null
                  ) {
                    // The queue is empty. We can reset it.
                    workInProgress.updateQueue = null
                  }

                  if (!didSkip) {
                    didSkip = true
                    queue.baseState = state
                  }

                  {
                    // No longer processing.
                    queue.isProcessing = false
                  }

                  return state
                }

                function commitCallbacks(queue, context) {
                  var callbackList = queue.callbackList
                  if (callbackList === null) {
                    return
                  }
                  // Set the list to null to make sure they don't get called more than once.
                  queue.callbackList = null
                  for (var i = 0; i < callbackList.length; i++) {
                    var update = callbackList[i]
                    var _callback = update.callback
                    // This update might be processed again. Clear the callback so it's only
                    // called once.
                    update.callback = null
                    !(typeof _callback === 'function')
                      ? invariant(
                          false,
                          'Invalid argument passed as callback. Expected a function. Instead received: %s',
                          _callback
                        )
                      : void 0
                    _callback.call(context)
                  }
                }

                var fakeInternalInstance = {}
                var isArray = Array.isArray

                var didWarnAboutStateAssignmentForComponent = void 0
                var didWarnAboutUndefinedDerivedState = void 0
                var didWarnAboutUninitializedState = void 0
                var didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate = void 0
                var didWarnAboutLegacyLifecyclesAndDerivedState = void 0
                var warnOnInvalidCallback$1 = void 0

                {
                  didWarnAboutStateAssignmentForComponent = new Set()
                  didWarnAboutUndefinedDerivedState = new Set()
                  didWarnAboutUninitializedState = new Set()
                  didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate = new Set()
                  didWarnAboutLegacyLifecyclesAndDerivedState = new Set()

                  var didWarnOnInvalidCallback = new Set()

                  warnOnInvalidCallback$1 = function (callback, callerName) {
                    if (callback === null || typeof callback === 'function') {
                      return
                    }
                    var key = callerName + '_' + callback
                    if (!didWarnOnInvalidCallback.has(key)) {
                      didWarnOnInvalidCallback.add(key)
                      warning(
                        false,
                        '%s(...): Expected the last optional `callback` argument to be a ' +
                          'function. Instead received: %s.',
                        callerName,
                        callback
                      )
                    }
                  }

                  // This is so gross but it's at least non-critical and can be removed if
                  // it causes problems. This is meant to give a nicer error message for
                  // ReactDOM15.unstable_renderSubtreeIntoContainer(reactDOM16Component,
                  // ...)) which otherwise throws a "_processChildContext is not a function"
                  // exception.
                  Object.defineProperty(
                    fakeInternalInstance,
                    '_processChildContext',
                    {
                      enumerable: false,
                      value: function () {
                        invariant(
                          false,
                          "_processChildContext is not available in React 16+. This likely means you have multiple copies of React and are attempting to nest a React 15 tree inside a React 16 tree using unstable_renderSubtreeIntoContainer, which isn't supported. Try to make sure you have only one copy of React (and ideally, switch to ReactDOM.createPortal)."
                        )
                      },
                    }
                  )
                  Object.freeze(fakeInternalInstance)
                }
                function callGetDerivedStateFromCatch(ctor, capturedValues) {
                  var resultState = {}
                  for (var i = 0; i < capturedValues.length; i++) {
                    var capturedValue = capturedValues[i]
                    var error = capturedValue.value
                    var partialState = ctor.getDerivedStateFromCatch.call(
                      null,
                      error
                    )
                    if (partialState !== null && partialState !== undefined) {
                      _assign(resultState, partialState)
                    }
                  }
                  return resultState
                }

                var ReactFiberClassComponent = function (
                  legacyContext,
                  scheduleWork,
                  computeExpirationForFiber,
                  memoizeProps,
                  memoizeState
                ) {
                  var cacheContext = legacyContext.cacheContext,
                    getMaskedContext = legacyContext.getMaskedContext,
                    getUnmaskedContext = legacyContext.getUnmaskedContext,
                    isContextConsumer = legacyContext.isContextConsumer,
                    hasContextChanged = legacyContext.hasContextChanged

                  // Class component state updater

                  var updater = {
                    isMounted: isMounted,
                    enqueueSetState: function (
                      instance,
                      partialState,
                      callback
                    ) {
                      var fiber = get(instance)
                      callback = callback === undefined ? null : callback
                      {
                        warnOnInvalidCallback$1(callback, 'setState')
                      }
                      var expirationTime = computeExpirationForFiber(fiber)
                      var update = {
                        expirationTime: expirationTime,
                        partialState: partialState,
                        callback: callback,
                        isReplace: false,
                        isForced: false,
                        capturedValue: null,
                        next: null,
                      }
                      insertUpdateIntoFiber(fiber, update)
                      scheduleWork(fiber, expirationTime)
                    },
                    enqueueReplaceState: function (instance, state, callback) {
                      var fiber = get(instance)
                      callback = callback === undefined ? null : callback
                      {
                        warnOnInvalidCallback$1(callback, 'replaceState')
                      }
                      var expirationTime = computeExpirationForFiber(fiber)
                      var update = {
                        expirationTime: expirationTime,
                        partialState: state,
                        callback: callback,
                        isReplace: true,
                        isForced: false,
                        capturedValue: null,
                        next: null,
                      }
                      insertUpdateIntoFiber(fiber, update)
                      scheduleWork(fiber, expirationTime)
                    },
                    enqueueForceUpdate: function (instance, callback) {
                      var fiber = get(instance)
                      callback = callback === undefined ? null : callback
                      {
                        warnOnInvalidCallback$1(callback, 'forceUpdate')
                      }
                      var expirationTime = computeExpirationForFiber(fiber)
                      var update = {
                        expirationTime: expirationTime,
                        partialState: null,
                        callback: callback,
                        isReplace: false,
                        isForced: true,
                        capturedValue: null,
                        next: null,
                      }
                      insertUpdateIntoFiber(fiber, update)
                      scheduleWork(fiber, expirationTime)
                    },
                  }

                  function checkShouldComponentUpdate(
                    workInProgress,
                    oldProps,
                    newProps,
                    oldState,
                    newState,
                    newContext
                  ) {
                    if (
                      oldProps === null ||
                      (workInProgress.updateQueue !== null &&
                        workInProgress.updateQueue.hasForceUpdate)
                    ) {
                      // If the workInProgress already has an Update effect, return true
                      return true
                    }

                    var instance = workInProgress.stateNode
                    var ctor = workInProgress.type
                    if (typeof instance.shouldComponentUpdate === 'function') {
                      startPhaseTimer(workInProgress, 'shouldComponentUpdate')
                      var shouldUpdate = instance.shouldComponentUpdate(
                        newProps,
                        newState,
                        newContext
                      )
                      stopPhaseTimer()

                      {
                        !(shouldUpdate !== undefined)
                          ? warning(
                              false,
                              '%s.shouldComponentUpdate(): Returned undefined instead of a ' +
                                'boolean value. Make sure to return true or false.',
                              getComponentName(workInProgress) || 'Component'
                            )
                          : void 0
                      }

                      return shouldUpdate
                    }

                    if (ctor.prototype && ctor.prototype.isPureReactComponent) {
                      return (
                        !shallowEqual(oldProps, newProps) ||
                        !shallowEqual(oldState, newState)
                      )
                    }

                    return true
                  }

                  function checkClassInstance(workInProgress) {
                    var instance = workInProgress.stateNode
                    var type = workInProgress.type
                    {
                      var name = getComponentName(workInProgress) || 'Component'
                      var renderPresent = instance.render

                      if (!renderPresent) {
                        if (
                          type.prototype &&
                          typeof type.prototype.render === 'function'
                        ) {
                          warning(
                            false,
                            '%s(...): No `render` method found on the returned component ' +
                              'instance: did you accidentally return an object from the constructor?',
                            name
                          )
                        } else {
                          warning(
                            false,
                            '%s(...): No `render` method found on the returned component ' +
                              'instance: you may have forgotten to define `render`.',
                            name
                          )
                        }
                      }

                      var noGetInitialStateOnES6 =
                        !instance.getInitialState ||
                        instance.getInitialState.isReactClassApproved ||
                        instance.state
                      !noGetInitialStateOnES6
                        ? warning(
                            false,
                            'getInitialState was defined on %s, a plain JavaScript class. ' +
                              'This is only supported for classes created using React.createClass. ' +
                              'Did you mean to define a state property instead?',
                            name
                          )
                        : void 0
                      var noGetDefaultPropsOnES6 =
                        !instance.getDefaultProps ||
                        instance.getDefaultProps.isReactClassApproved
                      !noGetDefaultPropsOnES6
                        ? warning(
                            false,
                            'getDefaultProps was defined on %s, a plain JavaScript class. ' +
                              'This is only supported for classes created using React.createClass. ' +
                              'Use a static property to define defaultProps instead.',
                            name
                          )
                        : void 0
                      var noInstancePropTypes = !instance.propTypes
                      !noInstancePropTypes
                        ? warning(
                            false,
                            'propTypes was defined as an instance property on %s. Use a static ' +
                              'property to define propTypes instead.',
                            name
                          )
                        : void 0
                      var noInstanceContextTypes = !instance.contextTypes
                      !noInstanceContextTypes
                        ? warning(
                            false,
                            'contextTypes was defined as an instance property on %s. Use a static ' +
                              'property to define contextTypes instead.',
                            name
                          )
                        : void 0
                      var noComponentShouldUpdate =
                        typeof instance.componentShouldUpdate !== 'function'
                      !noComponentShouldUpdate
                        ? warning(
                            false,
                            '%s has a method called ' +
                              'componentShouldUpdate(). Did you mean shouldComponentUpdate()? ' +
                              'The name is phrased as a question because the function is ' +
                              'expected to return a value.',
                            name
                          )
                        : void 0
                      if (
                        type.prototype &&
                        type.prototype.isPureReactComponent &&
                        typeof instance.shouldComponentUpdate !== 'undefined'
                      ) {
                        warning(
                          false,
                          '%s has a method called shouldComponentUpdate(). ' +
                            'shouldComponentUpdate should not be used when extending React.PureComponent. ' +
                            'Please extend React.Component if shouldComponentUpdate is used.',
                          getComponentName(workInProgress) || 'A pure component'
                        )
                      }
                      var noComponentDidUnmount =
                        typeof instance.componentDidUnmount !== 'function'
                      !noComponentDidUnmount
                        ? warning(
                            false,
                            '%s has a method called ' +
                              'componentDidUnmount(). But there is no such lifecycle method. ' +
                              'Did you mean componentWillUnmount()?',
                            name
                          )
                        : void 0
                      var noComponentDidReceiveProps =
                        typeof instance.componentDidReceiveProps !== 'function'
                      !noComponentDidReceiveProps
                        ? warning(
                            false,
                            '%s has a method called ' +
                              'componentDidReceiveProps(). But there is no such lifecycle method. ' +
                              'If you meant to update the state in response to changing props, ' +
                              'use componentWillReceiveProps(). If you meant to fetch data or ' +
                              'run side-effects or mutations after React has updated the UI, use componentDidUpdate().',
                            name
                          )
                        : void 0
                      var noComponentWillRecieveProps =
                        typeof instance.componentWillRecieveProps !== 'function'
                      !noComponentWillRecieveProps
                        ? warning(
                            false,
                            '%s has a method called ' +
                              'componentWillRecieveProps(). Did you mean componentWillReceiveProps()?',
                            name
                          )
                        : void 0
                      var noUnsafeComponentWillRecieveProps =
                        typeof instance.UNSAFE_componentWillRecieveProps !==
                        'function'
                      !noUnsafeComponentWillRecieveProps
                        ? warning(
                            false,
                            '%s has a method called ' +
                              'UNSAFE_componentWillRecieveProps(). Did you mean UNSAFE_componentWillReceiveProps()?',
                            name
                          )
                        : void 0
                      var hasMutatedProps =
                        instance.props !== workInProgress.pendingProps
                      !(instance.props === undefined || !hasMutatedProps)
                        ? warning(
                            false,
                            '%s(...): When calling super() in `%s`, make sure to pass ' +
                              "up the same props that your component's constructor was passed.",
                            name,
                            name
                          )
                        : void 0
                      var noInstanceDefaultProps = !instance.defaultProps
                      !noInstanceDefaultProps
                        ? warning(
                            false,
                            'Setting defaultProps as an instance property on %s is not supported and will be ignored.' +
                              ' Instead, define defaultProps as a static property on %s.',
                            name,
                            name
                          )
                        : void 0

                      if (
                        typeof instance.getSnapshotBeforeUpdate ===
                          'function' &&
                        typeof instance.componentDidUpdate !== 'function' &&
                        !didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.has(
                          type
                        )
                      ) {
                        didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.add(
                          type
                        )
                        warning(
                          false,
                          '%s: getSnapshotBeforeUpdate() should be used with componentDidUpdate(). ' +
                            'This component defines getSnapshotBeforeUpdate() only.',
                          getComponentName(workInProgress)
                        )
                      }

                      var noInstanceGetDerivedStateFromProps =
                        typeof instance.getDerivedStateFromProps !== 'function'
                      !noInstanceGetDerivedStateFromProps
                        ? warning(
                            false,
                            '%s: getDerivedStateFromProps() is defined as an instance method ' +
                              'and will be ignored. Instead, declare it as a static method.',
                            name
                          )
                        : void 0
                      var noInstanceGetDerivedStateFromCatch =
                        typeof instance.getDerivedStateFromCatch !== 'function'
                      !noInstanceGetDerivedStateFromCatch
                        ? warning(
                            false,
                            '%s: getDerivedStateFromCatch() is defined as an instance method ' +
                              'and will be ignored. Instead, declare it as a static method.',
                            name
                          )
                        : void 0
                      var noStaticGetSnapshotBeforeUpdate =
                        typeof type.getSnapshotBeforeUpdate !== 'function'
                      !noStaticGetSnapshotBeforeUpdate
                        ? warning(
                            false,
                            '%s: getSnapshotBeforeUpdate() is defined as a static method ' +
                              'and will be ignored. Instead, declare it as an instance method.',
                            name
                          )
                        : void 0
                      var _state = instance.state
                      if (
                        _state &&
                        (typeof _state !== 'object' || isArray(_state))
                      ) {
                        warning(
                          false,
                          '%s.state: must be set to an object or null',
                          name
                        )
                      }
                      if (typeof instance.getChildContext === 'function') {
                        !(typeof type.childContextTypes === 'object')
                          ? warning(
                              false,
                              '%s.getChildContext(): childContextTypes must be defined in order to ' +
                                'use getChildContext().',
                              name
                            )
                          : void 0
                      }
                    }
                  }

                  function resetInputPointers(workInProgress, instance) {
                    instance.props = workInProgress.memoizedProps
                    instance.state = workInProgress.memoizedState
                  }

                  function adoptClassInstance(workInProgress, instance) {
                    instance.updater = updater
                    workInProgress.stateNode = instance
                    // The instance needs access to the fiber so that it can schedule updates
                    set(instance, workInProgress)
                    {
                      instance._reactInternalInstance = fakeInternalInstance
                    }
                  }

                  function constructClassInstance(workInProgress, props) {
                    var ctor = workInProgress.type
                    var unmaskedContext = getUnmaskedContext(workInProgress)
                    var needsContext = isContextConsumer(workInProgress)
                    var context = needsContext
                      ? getMaskedContext(workInProgress, unmaskedContext)
                      : emptyObject

                    // Instantiate twice to help detect side-effects.
                    if (
                      debugRenderPhaseSideEffects ||
                      (debugRenderPhaseSideEffectsForStrictMode &&
                        workInProgress.mode & StrictMode)
                    ) {
                      new ctor(props, context) // eslint-disable-line no-new
                    }

                    var instance = new ctor(props, context)
                    var state =
                      instance.state !== null && instance.state !== undefined
                        ? instance.state
                        : null
                    adoptClassInstance(workInProgress, instance)

                    {
                      if (
                        typeof ctor.getDerivedStateFromProps === 'function' &&
                        state === null
                      ) {
                        var componentName =
                          getComponentName(workInProgress) || 'Component'
                        if (
                          !didWarnAboutUninitializedState.has(componentName)
                        ) {
                          didWarnAboutUninitializedState.add(componentName)
                          warning(
                            false,
                            '%s: Did not properly initialize state during construction. ' +
                              'Expected state to be an object, but it was %s.',
                            componentName,
                            instance.state === null ? 'null' : 'undefined'
                          )
                        }
                      }

                      // If new component APIs are defined, "unsafe" lifecycles won't be called.
                      // Warn about these lifecycles if they are present.
                      // Don't warn about react-lifecycles-compat polyfilled methods though.
                      if (
                        typeof ctor.getDerivedStateFromProps === 'function' ||
                        typeof instance.getSnapshotBeforeUpdate === 'function'
                      ) {
                        var foundWillMountName = null
                        var foundWillReceivePropsName = null
                        var foundWillUpdateName = null
                        if (
                          typeof instance.componentWillMount === 'function' &&
                          instance.componentWillMount
                            .__suppressDeprecationWarning !== true
                        ) {
                          foundWillMountName = 'componentWillMount'
                        } else if (
                          typeof instance.UNSAFE_componentWillMount ===
                          'function'
                        ) {
                          foundWillMountName = 'UNSAFE_componentWillMount'
                        }
                        if (
                          typeof instance.componentWillReceiveProps ===
                            'function' &&
                          instance.componentWillReceiveProps
                            .__suppressDeprecationWarning !== true
                        ) {
                          foundWillReceivePropsName =
                            'componentWillReceiveProps'
                        } else if (
                          typeof instance.UNSAFE_componentWillReceiveProps ===
                          'function'
                        ) {
                          foundWillReceivePropsName =
                            'UNSAFE_componentWillReceiveProps'
                        }
                        if (
                          typeof instance.componentWillUpdate === 'function' &&
                          instance.componentWillUpdate
                            .__suppressDeprecationWarning !== true
                        ) {
                          foundWillUpdateName = 'componentWillUpdate'
                        } else if (
                          typeof instance.UNSAFE_componentWillUpdate ===
                          'function'
                        ) {
                          foundWillUpdateName = 'UNSAFE_componentWillUpdate'
                        }
                        if (
                          foundWillMountName !== null ||
                          foundWillReceivePropsName !== null ||
                          foundWillUpdateName !== null
                        ) {
                          var _componentName =
                            getComponentName(workInProgress) || 'Component'
                          var newApiName =
                            typeof ctor.getDerivedStateFromProps === 'function'
                              ? 'getDerivedStateFromProps()'
                              : 'getSnapshotBeforeUpdate()'
                          if (
                            !didWarnAboutLegacyLifecyclesAndDerivedState.has(
                              _componentName
                            )
                          ) {
                            didWarnAboutLegacyLifecyclesAndDerivedState.add(
                              _componentName
                            )
                            warning(
                              false,
                              'Unsafe legacy lifecycles will not be called for components using new component APIs.\n\n' +
                                '%s uses %s but also contains the following legacy lifecycles:%s%s%s\n\n' +
                                'The above lifecycles should be removed. Learn more about this warning here:\n' +
                                'https://fb.me/react-async-component-lifecycle-hooks',
                              _componentName,
                              newApiName,
                              foundWillMountName !== null
                                ? '\n  ' + foundWillMountName
                                : '',
                              foundWillReceivePropsName !== null
                                ? '\n  ' + foundWillReceivePropsName
                                : '',
                              foundWillUpdateName !== null
                                ? '\n  ' + foundWillUpdateName
                                : ''
                            )
                          }
                        }
                      }
                    }

                    workInProgress.memoizedState = state

                    var partialState = callGetDerivedStateFromProps(
                      workInProgress,
                      instance,
                      props,
                      state
                    )

                    if (partialState !== null && partialState !== undefined) {
                      // Render-phase updates (like this) should not be added to the update queue,
                      // So that multiple render passes do not enqueue multiple updates.
                      // Instead, just synchronously merge the returned state into the instance.
                      workInProgress.memoizedState = _assign(
                        {},
                        workInProgress.memoizedState,
                        partialState
                      )
                    }

                    // Cache unmasked context so we can avoid recreating masked context unless necessary.
                    // ReactFiberContext usually updates this cache but can't for newly-created instances.
                    if (needsContext) {
                      cacheContext(workInProgress, unmaskedContext, context)
                    }

                    return instance
                  }

                  function callComponentWillMount(workInProgress, instance) {
                    startPhaseTimer(workInProgress, 'componentWillMount')
                    var oldState = instance.state

                    if (typeof instance.componentWillMount === 'function') {
                      instance.componentWillMount()
                    }
                    if (
                      typeof instance.UNSAFE_componentWillMount === 'function'
                    ) {
                      instance.UNSAFE_componentWillMount()
                    }

                    stopPhaseTimer()

                    if (oldState !== instance.state) {
                      {
                        warning(
                          false,
                          '%s.componentWillMount(): Assigning directly to this.state is ' +
                            "deprecated (except inside a component's " +
                            'constructor). Use setState instead.',
                          getComponentName(workInProgress) || 'Component'
                        )
                      }
                      updater.enqueueReplaceState(
                        instance,
                        instance.state,
                        null
                      )
                    }
                  }

                  function callComponentWillReceiveProps(
                    workInProgress,
                    instance,
                    newProps,
                    newContext
                  ) {
                    var oldState = instance.state
                    startPhaseTimer(workInProgress, 'componentWillReceiveProps')
                    if (
                      typeof instance.componentWillReceiveProps === 'function'
                    ) {
                      instance.componentWillReceiveProps(newProps, newContext)
                    }
                    if (
                      typeof instance.UNSAFE_componentWillReceiveProps ===
                      'function'
                    ) {
                      instance.UNSAFE_componentWillReceiveProps(
                        newProps,
                        newContext
                      )
                    }
                    stopPhaseTimer()

                    if (instance.state !== oldState) {
                      {
                        var componentName =
                          getComponentName(workInProgress) || 'Component'
                        if (
                          !didWarnAboutStateAssignmentForComponent.has(
                            componentName
                          )
                        ) {
                          didWarnAboutStateAssignmentForComponent.add(
                            componentName
                          )
                          warning(
                            false,
                            '%s.componentWillReceiveProps(): Assigning directly to ' +
                              "this.state is deprecated (except inside a component's " +
                              'constructor). Use setState instead.',
                            componentName
                          )
                        }
                      }
                      updater.enqueueReplaceState(
                        instance,
                        instance.state,
                        null
                      )
                    }
                  }

                  function callGetDerivedStateFromProps(
                    workInProgress,
                    instance,
                    nextProps,
                    prevState
                  ) {
                    var type = workInProgress.type

                    if (typeof type.getDerivedStateFromProps === 'function') {
                      if (
                        debugRenderPhaseSideEffects ||
                        (debugRenderPhaseSideEffectsForStrictMode &&
                          workInProgress.mode & StrictMode)
                      ) {
                        // Invoke method an extra time to help detect side-effects.
                        type.getDerivedStateFromProps.call(
                          null,
                          nextProps,
                          prevState
                        )
                      }

                      var partialState = type.getDerivedStateFromProps.call(
                        null,
                        nextProps,
                        prevState
                      )

                      {
                        if (partialState === undefined) {
                          var componentName =
                            getComponentName(workInProgress) || 'Component'
                          if (
                            !didWarnAboutUndefinedDerivedState.has(
                              componentName
                            )
                          ) {
                            didWarnAboutUndefinedDerivedState.add(componentName)
                            warning(
                              false,
                              '%s.getDerivedStateFromProps(): A valid state object (or null) must be returned. ' +
                                'You have returned undefined.',
                              componentName
                            )
                          }
                        }
                      }

                      return partialState
                    }
                  }

                  // Invokes the mount life-cycles on a previously never rendered instance.
                  function mountClassInstance(
                    workInProgress,
                    renderExpirationTime
                  ) {
                    var ctor = workInProgress.type
                    var current = workInProgress.alternate

                    {
                      checkClassInstance(workInProgress)
                    }

                    var instance = workInProgress.stateNode
                    var props = workInProgress.pendingProps
                    var unmaskedContext = getUnmaskedContext(workInProgress)

                    instance.props = props
                    instance.state = workInProgress.memoizedState
                    instance.refs = emptyObject
                    instance.context = getMaskedContext(
                      workInProgress,
                      unmaskedContext
                    )

                    {
                      if (workInProgress.mode & StrictMode) {
                        ReactStrictModeWarnings.recordUnsafeLifecycleWarnings(
                          workInProgress,
                          instance
                        )
                      }

                      if (warnAboutDeprecatedLifecycles) {
                        ReactStrictModeWarnings.recordDeprecationWarnings(
                          workInProgress,
                          instance
                        )
                      }
                    }

                    // In order to support react-lifecycles-compat polyfilled components,
                    // Unsafe lifecycles should not be invoked for components using the new APIs.
                    if (
                      typeof ctor.getDerivedStateFromProps !== 'function' &&
                      typeof instance.getSnapshotBeforeUpdate !== 'function' &&
                      (typeof instance.UNSAFE_componentWillMount ===
                        'function' ||
                        typeof instance.componentWillMount === 'function')
                    ) {
                      callComponentWillMount(workInProgress, instance)
                      // If we had additional state updates during this life-cycle, let's
                      // process them now.
                      var updateQueue = workInProgress.updateQueue
                      if (updateQueue !== null) {
                        instance.state = processUpdateQueue(
                          current,
                          workInProgress,
                          updateQueue,
                          instance,
                          props,
                          renderExpirationTime
                        )
                      }
                    }
                    if (typeof instance.componentDidMount === 'function') {
                      workInProgress.effectTag |= Update
                    }
                  }

                  function resumeMountClassInstance(
                    workInProgress,
                    renderExpirationTime
                  ) {
                    var ctor = workInProgress.type
                    var instance = workInProgress.stateNode
                    resetInputPointers(workInProgress, instance)

                    var oldProps = workInProgress.memoizedProps
                    var newProps = workInProgress.pendingProps
                    var oldContext = instance.context
                    var newUnmaskedContext = getUnmaskedContext(workInProgress)
                    var newContext = getMaskedContext(
                      workInProgress,
                      newUnmaskedContext
                    )

                    var hasNewLifecycles =
                      typeof ctor.getDerivedStateFromProps === 'function' ||
                      typeof instance.getSnapshotBeforeUpdate === 'function'

                    // Note: During these life-cycles, instance.props/instance.state are what
                    // ever the previously attempted to render - not the "current". However,
                    // during componentDidUpdate we pass the "current" props.

                    // In order to support react-lifecycles-compat polyfilled components,
                    // Unsafe lifecycles should not be invoked for components using the new APIs.
                    if (
                      !hasNewLifecycles &&
                      (typeof instance.UNSAFE_componentWillReceiveProps ===
                        'function' ||
                        typeof instance.componentWillReceiveProps ===
                          'function')
                    ) {
                      if (oldProps !== newProps || oldContext !== newContext) {
                        callComponentWillReceiveProps(
                          workInProgress,
                          instance,
                          newProps,
                          newContext
                        )
                      }
                    }

                    // Compute the next state using the memoized state and the update queue.
                    var oldState = workInProgress.memoizedState
                    // TODO: Previous state can be null.
                    var newState = void 0
                    var derivedStateFromCatch = void 0
                    if (workInProgress.updateQueue !== null) {
                      newState = processUpdateQueue(
                        null,
                        workInProgress,
                        workInProgress.updateQueue,
                        instance,
                        newProps,
                        renderExpirationTime
                      )

                      var updateQueue = workInProgress.updateQueue
                      if (
                        updateQueue !== null &&
                        updateQueue.capturedValues !== null &&
                        enableGetDerivedStateFromCatch &&
                        typeof ctor.getDerivedStateFromCatch === 'function'
                      ) {
                        var capturedValues = updateQueue.capturedValues
                        // Don't remove these from the update queue yet. We need them in
                        // finishClassComponent. Do the reset there.
                        // TODO: This is awkward. Refactor class components.
                        // updateQueue.capturedValues = null;
                        derivedStateFromCatch = callGetDerivedStateFromCatch(
                          ctor,
                          capturedValues
                        )
                      }
                    } else {
                      newState = oldState
                    }

                    var derivedStateFromProps = void 0
                    if (oldProps !== newProps) {
                      // The prevState parameter should be the partially updated state.
                      // Otherwise, spreading state in return values could override updates.
                      derivedStateFromProps = callGetDerivedStateFromProps(
                        workInProgress,
                        instance,
                        newProps,
                        newState
                      )
                    }

                    if (
                      derivedStateFromProps !== null &&
                      derivedStateFromProps !== undefined
                    ) {
                      // Render-phase updates (like this) should not be added to the update queue,
                      // So that multiple render passes do not enqueue multiple updates.
                      // Instead, just synchronously merge the returned state into the instance.
                      newState =
                        newState === null || newState === undefined
                          ? derivedStateFromProps
                          : _assign({}, newState, derivedStateFromProps)

                      // Update the base state of the update queue.
                      // FIXME: This is getting ridiculous. Refactor plz!
                      var _updateQueue = workInProgress.updateQueue
                      if (_updateQueue !== null) {
                        _updateQueue.baseState = _assign(
                          {},
                          _updateQueue.baseState,
                          derivedStateFromProps
                        )
                      }
                    }
                    if (
                      derivedStateFromCatch !== null &&
                      derivedStateFromCatch !== undefined
                    ) {
                      // Render-phase updates (like this) should not be added to the update queue,
                      // So that multiple render passes do not enqueue multiple updates.
                      // Instead, just synchronously merge the returned state into the instance.
                      newState =
                        newState === null || newState === undefined
                          ? derivedStateFromCatch
                          : _assign({}, newState, derivedStateFromCatch)

                      // Update the base state of the update queue.
                      // FIXME: This is getting ridiculous. Refactor plz!
                      var _updateQueue2 = workInProgress.updateQueue
                      if (_updateQueue2 !== null) {
                        _updateQueue2.baseState = _assign(
                          {},
                          _updateQueue2.baseState,
                          derivedStateFromCatch
                        )
                      }
                    }

                    if (
                      oldProps === newProps &&
                      oldState === newState &&
                      !hasContextChanged() &&
                      !(
                        workInProgress.updateQueue !== null &&
                        workInProgress.updateQueue.hasForceUpdate
                      )
                    ) {
                      // If an update was already in progress, we should schedule an Update
                      // effect even though we're bailing out, so that cWU/cDU are called.
                      if (typeof instance.componentDidMount === 'function') {
                        workInProgress.effectTag |= Update
                      }
                      return false
                    }

                    var shouldUpdate = checkShouldComponentUpdate(
                      workInProgress,
                      oldProps,
                      newProps,
                      oldState,
                      newState,
                      newContext
                    )

                    if (shouldUpdate) {
                      // In order to support react-lifecycles-compat polyfilled components,
                      // Unsafe lifecycles should not be invoked for components using the new APIs.
                      if (
                        !hasNewLifecycles &&
                        (typeof instance.UNSAFE_componentWillMount ===
                          'function' ||
                          typeof instance.componentWillMount === 'function')
                      ) {
                        startPhaseTimer(workInProgress, 'componentWillMount')
                        if (typeof instance.componentWillMount === 'function') {
                          instance.componentWillMount()
                        }
                        if (
                          typeof instance.UNSAFE_componentWillMount ===
                          'function'
                        ) {
                          instance.UNSAFE_componentWillMount()
                        }
                        stopPhaseTimer()
                      }
                      if (typeof instance.componentDidMount === 'function') {
                        workInProgress.effectTag |= Update
                      }
                    } else {
                      // If an update was already in progress, we should schedule an Update
                      // effect even though we're bailing out, so that cWU/cDU are called.
                      if (typeof instance.componentDidMount === 'function') {
                        workInProgress.effectTag |= Update
                      }

                      // If shouldComponentUpdate returned false, we should still update the
                      // memoized props/state to indicate that this work can be reused.
                      memoizeProps(workInProgress, newProps)
                      memoizeState(workInProgress, newState)
                    }

                    // Update the existing instance's state, props, and context pointers even
                    // if shouldComponentUpdate returns false.
                    instance.props = newProps
                    instance.state = newState
                    instance.context = newContext

                    return shouldUpdate
                  }

                  // Invokes the update life-cycles and returns false if it shouldn't rerender.
                  function updateClassInstance(
                    current,
                    workInProgress,
                    renderExpirationTime
                  ) {
                    var ctor = workInProgress.type
                    var instance = workInProgress.stateNode
                    resetInputPointers(workInProgress, instance)

                    var oldProps = workInProgress.memoizedProps
                    var newProps = workInProgress.pendingProps
                    var oldContext = instance.context
                    var newUnmaskedContext = getUnmaskedContext(workInProgress)
                    var newContext = getMaskedContext(
                      workInProgress,
                      newUnmaskedContext
                    )

                    var hasNewLifecycles =
                      typeof ctor.getDerivedStateFromProps === 'function' ||
                      typeof instance.getSnapshotBeforeUpdate === 'function'

                    // Note: During these life-cycles, instance.props/instance.state are what
                    // ever the previously attempted to render - not the "current". However,
                    // during componentDidUpdate we pass the "current" props.

                    // In order to support react-lifecycles-compat polyfilled components,
                    // Unsafe lifecycles should not be invoked for components using the new APIs.
                    if (
                      !hasNewLifecycles &&
                      (typeof instance.UNSAFE_componentWillReceiveProps ===
                        'function' ||
                        typeof instance.componentWillReceiveProps ===
                          'function')
                    ) {
                      if (oldProps !== newProps || oldContext !== newContext) {
                        callComponentWillReceiveProps(
                          workInProgress,
                          instance,
                          newProps,
                          newContext
                        )
                      }
                    }

                    // Compute the next state using the memoized state and the update queue.
                    var oldState = workInProgress.memoizedState
                    // TODO: Previous state can be null.
                    var newState = void 0
                    var derivedStateFromCatch = void 0

                    if (workInProgress.updateQueue !== null) {
                      newState = processUpdateQueue(
                        current,
                        workInProgress,
                        workInProgress.updateQueue,
                        instance,
                        newProps,
                        renderExpirationTime
                      )

                      var updateQueue = workInProgress.updateQueue
                      if (
                        updateQueue !== null &&
                        updateQueue.capturedValues !== null &&
                        enableGetDerivedStateFromCatch &&
                        typeof ctor.getDerivedStateFromCatch === 'function'
                      ) {
                        var capturedValues = updateQueue.capturedValues
                        // Don't remove these from the update queue yet. We need them in
                        // finishClassComponent. Do the reset there.
                        // TODO: This is awkward. Refactor class components.
                        // updateQueue.capturedValues = null;
                        derivedStateFromCatch = callGetDerivedStateFromCatch(
                          ctor,
                          capturedValues
                        )
                      }
                    } else {
                      newState = oldState
                    }

                    var derivedStateFromProps = void 0
                    if (oldProps !== newProps) {
                      // The prevState parameter should be the partially updated state.
                      // Otherwise, spreading state in return values could override updates.
                      derivedStateFromProps = callGetDerivedStateFromProps(
                        workInProgress,
                        instance,
                        newProps,
                        newState
                      )
                    }

                    if (
                      derivedStateFromProps !== null &&
                      derivedStateFromProps !== undefined
                    ) {
                      // Render-phase updates (like this) should not be added to the update queue,
                      // So that multiple render passes do not enqueue multiple updates.
                      // Instead, just synchronously merge the returned state into the instance.
                      newState =
                        newState === null || newState === undefined
                          ? derivedStateFromProps
                          : _assign({}, newState, derivedStateFromProps)

                      // Update the base state of the update queue.
                      // FIXME: This is getting ridiculous. Refactor plz!
                      var _updateQueue3 = workInProgress.updateQueue
                      if (_updateQueue3 !== null) {
                        _updateQueue3.baseState = _assign(
                          {},
                          _updateQueue3.baseState,
                          derivedStateFromProps
                        )
                      }
                    }
                    if (
                      derivedStateFromCatch !== null &&
                      derivedStateFromCatch !== undefined
                    ) {
                      // Render-phase updates (like this) should not be added to the update queue,
                      // So that multiple render passes do not enqueue multiple updates.
                      // Instead, just synchronously merge the returned state into the instance.
                      newState =
                        newState === null || newState === undefined
                          ? derivedStateFromCatch
                          : _assign({}, newState, derivedStateFromCatch)

                      // Update the base state of the update queue.
                      // FIXME: This is getting ridiculous. Refactor plz!
                      var _updateQueue4 = workInProgress.updateQueue
                      if (_updateQueue4 !== null) {
                        _updateQueue4.baseState = _assign(
                          {},
                          _updateQueue4.baseState,
                          derivedStateFromCatch
                        )
                      }
                    }

                    if (
                      oldProps === newProps &&
                      oldState === newState &&
                      !hasContextChanged() &&
                      !(
                        workInProgress.updateQueue !== null &&
                        workInProgress.updateQueue.hasForceUpdate
                      )
                    ) {
                      // If an update was already in progress, we should schedule an Update
                      // effect even though we're bailing out, so that cWU/cDU are called.
                      if (typeof instance.componentDidUpdate === 'function') {
                        if (
                          oldProps !== current.memoizedProps ||
                          oldState !== current.memoizedState
                        ) {
                          workInProgress.effectTag |= Update
                        }
                      }
                      if (
                        typeof instance.getSnapshotBeforeUpdate === 'function'
                      ) {
                        if (
                          oldProps !== current.memoizedProps ||
                          oldState !== current.memoizedState
                        ) {
                          workInProgress.effectTag |= Snapshot
                        }
                      }
                      return false
                    }

                    var shouldUpdate = checkShouldComponentUpdate(
                      workInProgress,
                      oldProps,
                      newProps,
                      oldState,
                      newState,
                      newContext
                    )

                    if (shouldUpdate) {
                      // In order to support react-lifecycles-compat polyfilled components,
                      // Unsafe lifecycles should not be invoked for components using the new APIs.
                      if (
                        !hasNewLifecycles &&
                        (typeof instance.UNSAFE_componentWillUpdate ===
                          'function' ||
                          typeof instance.componentWillUpdate === 'function')
                      ) {
                        startPhaseTimer(workInProgress, 'componentWillUpdate')
                        if (
                          typeof instance.componentWillUpdate === 'function'
                        ) {
                          instance.componentWillUpdate(
                            newProps,
                            newState,
                            newContext
                          )
                        }
                        if (
                          typeof instance.UNSAFE_componentWillUpdate ===
                          'function'
                        ) {
                          instance.UNSAFE_componentWillUpdate(
                            newProps,
                            newState,
                            newContext
                          )
                        }
                        stopPhaseTimer()
                      }
                      if (typeof instance.componentDidUpdate === 'function') {
                        workInProgress.effectTag |= Update
                      }
                      if (
                        typeof instance.getSnapshotBeforeUpdate === 'function'
                      ) {
                        workInProgress.effectTag |= Snapshot
                      }
                    } else {
                      // If an update was already in progress, we should schedule an Update
                      // effect even though we're bailing out, so that cWU/cDU are called.
                      if (typeof instance.componentDidUpdate === 'function') {
                        if (
                          oldProps !== current.memoizedProps ||
                          oldState !== current.memoizedState
                        ) {
                          workInProgress.effectTag |= Update
                        }
                      }
                      if (
                        typeof instance.getSnapshotBeforeUpdate === 'function'
                      ) {
                        if (
                          oldProps !== current.memoizedProps ||
                          oldState !== current.memoizedState
                        ) {
                          workInProgress.effectTag |= Snapshot
                        }
                      }

                      // If shouldComponentUpdate returned false, we should still update the
                      // memoized props/state to indicate that this work can be reused.
                      memoizeProps(workInProgress, newProps)
                      memoizeState(workInProgress, newState)
                    }

                    // Update the existing instance's state, props, and context pointers even
                    // if shouldComponentUpdate returns false.
                    instance.props = newProps
                    instance.state = newState
                    instance.context = newContext

                    return shouldUpdate
                  }

                  return {
                    adoptClassInstance: adoptClassInstance,
                    callGetDerivedStateFromProps: callGetDerivedStateFromProps,
                    constructClassInstance: constructClassInstance,
                    mountClassInstance: mountClassInstance,
                    resumeMountClassInstance: resumeMountClassInstance,
                    updateClassInstance: updateClassInstance,
                  }
                }

                var getCurrentFiberStackAddendum$2 =
                  ReactDebugCurrentFiber.getCurrentFiberStackAddendum

                var didWarnAboutMaps = void 0
                var didWarnAboutStringRefInStrictMode = void 0
                var ownerHasKeyUseWarning = void 0
                var ownerHasFunctionTypeWarning = void 0
                var warnForMissingKey = function (child) {}

                {
                  didWarnAboutMaps = false
                  didWarnAboutStringRefInStrictMode = {}

                  /**
                   * Warn if there's no key explicitly set on dynamic arrays of children or
                   * object keys are not valid. This allows us to keep track of children between
                   * updates.
                   */
                  ownerHasKeyUseWarning = {}
                  ownerHasFunctionTypeWarning = {}

                  warnForMissingKey = function (child) {
                    if (child === null || typeof child !== 'object') {
                      return
                    }
                    if (
                      !child._store ||
                      child._store.validated ||
                      child.key != null
                    ) {
                      return
                    }
                    !(typeof child._store === 'object')
                      ? invariant(
                          false,
                          'React Component in warnForMissingKey should have a _store. This error is likely caused by a bug in React. Please file an issue.'
                        )
                      : void 0
                    child._store.validated = true

                    var currentComponentErrorInfo =
                      'Each child in an array or iterator should have a unique ' +
                      '"key" prop. See https://fb.me/react-warning-keys for ' +
                      'more information.' +
                      (getCurrentFiberStackAddendum$2() || '')
                    if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {
                      return
                    }
                    ownerHasKeyUseWarning[currentComponentErrorInfo] = true

                    warning(
                      false,
                      'Each child in an array or iterator should have a unique ' +
                        '"key" prop. See https://fb.me/react-warning-keys for ' +
                        'more information.%s',
                      getCurrentFiberStackAddendum$2()
                    )
                  }
                }

                var isArray$1 = Array.isArray

                function coerceRef(returnFiber, current, element) {
                  var mixedRef = element.ref
                  if (
                    mixedRef !== null &&
                    typeof mixedRef !== 'function' &&
                    typeof mixedRef !== 'object'
                  ) {
                    {
                      if (returnFiber.mode & StrictMode) {
                        var componentName =
                          getComponentName(returnFiber) || 'Component'
                        if (!didWarnAboutStringRefInStrictMode[componentName]) {
                          warning(
                            false,
                            'A string ref, "%s", has been found within a strict mode tree. ' +
                              'String refs are a source of potential bugs and should be avoided. ' +
                              'We recommend using createRef() instead.' +
                              '\n%s' +
                              '\n\nLearn more about using refs safely here:' +
                              '\nhttps://fb.me/react-strict-mode-string-ref',
                            mixedRef,
                            getStackAddendumByWorkInProgressFiber(returnFiber)
                          )
                          didWarnAboutStringRefInStrictMode[
                            componentName
                          ] = true
                        }
                      }
                    }

                    if (element._owner) {
                      var owner = element._owner
                      var inst = void 0
                      if (owner) {
                        var ownerFiber = owner
                        !(ownerFiber.tag === ClassComponent)
                          ? invariant(
                              false,
                              'Stateless function components cannot have refs.'
                            )
                          : void 0
                        inst = ownerFiber.stateNode
                      }
                      !inst
                        ? invariant(
                            false,
                            'Missing owner for string ref %s. This error is likely caused by a bug in React. Please file an issue.',
                            mixedRef
                          )
                        : void 0
                      var stringRef = '' + mixedRef
                      // Check if previous string ref matches new string ref
                      if (
                        current !== null &&
                        current.ref !== null &&
                        current.ref._stringRef === stringRef
                      ) {
                        return current.ref
                      }
                      var ref = function (value) {
                        var refs =
                          inst.refs === emptyObject
                            ? (inst.refs = {})
                            : inst.refs
                        if (value === null) {
                          delete refs[stringRef]
                        } else {
                          refs[stringRef] = value
                        }
                      }
                      ref._stringRef = stringRef
                      return ref
                    } else {
                      !(typeof mixedRef === 'string')
                        ? invariant(
                            false,
                            'Expected ref to be a function or a string.'
                          )
                        : void 0
                      !element._owner
                        ? invariant(
                            false,
                            "Element ref was specified as a string (%s) but no owner was set. This could happen for one of the following reasons:\n1. You may be adding a ref to a functional component\n2. You may be adding a ref to a component that was not created inside a component's render method\n3. You have multiple copies of React loaded\nSee https://fb.me/react-refs-must-have-owner for more information.",
                            mixedRef
                          )
                        : void 0
                    }
                  }
                  return mixedRef
                }

                function throwOnInvalidObjectType(returnFiber, newChild) {
                  if (returnFiber.type !== 'textarea') {
                    var addendum = ''
                    {
                      addendum =
                        ' If you meant to render a collection of children, use an array ' +
                        'instead.' +
                        (getCurrentFiberStackAddendum$2() || '')
                    }
                    invariant(
                      false,
                      'Objects are not valid as a React child (found: %s).%s',
                      Object.prototype.toString.call(newChild) ===
                        '[object Object]'
                        ? 'object with keys {' +
                            Object.keys(newChild).join(', ') +
                            '}'
                        : newChild,
                      addendum
                    )
                  }
                }

                function warnOnFunctionType() {
                  var currentComponentErrorInfo =
                    'Functions are not valid as a React child. This may happen if ' +
                    'you return a Component instead of <Component /> from render. ' +
                    'Or maybe you meant to call this function rather than return it.' +
                    (getCurrentFiberStackAddendum$2() || '')

                  if (ownerHasFunctionTypeWarning[currentComponentErrorInfo]) {
                    return
                  }
                  ownerHasFunctionTypeWarning[currentComponentErrorInfo] = true

                  warning(
                    false,
                    'Functions are not valid as a React child. This may happen if ' +
                      'you return a Component instead of <Component /> from render. ' +
                      'Or maybe you meant to call this function rather than return it.%s',
                    getCurrentFiberStackAddendum$2() || ''
                  )
                }

                // This wrapper function exists because I expect to clone the code in each path
                // to be able to optimize each path individually by branching early. This needs
                // a compiler or we can do it manually. Helpers that don't need this branching
                // live outside of this function.
                function ChildReconciler(shouldTrackSideEffects) {
                  function deleteChild(returnFiber, childToDelete) {
                    if (!shouldTrackSideEffects) {
                      // Noop.
                      return
                    }
                    // Deletions are added in reversed order so we add it to the front.
                    // At this point, the return fiber's effect list is empty except for
                    // deletions, so we can just append the deletion to the list. The remaining
                    // effects aren't added until the complete phase. Once we implement
                    // resuming, this may not be true.
                    var last = returnFiber.lastEffect
                    if (last !== null) {
                      last.nextEffect = childToDelete
                      returnFiber.lastEffect = childToDelete
                    } else {
                      returnFiber.firstEffect = returnFiber.lastEffect = childToDelete
                    }
                    childToDelete.nextEffect = null
                    childToDelete.effectTag = Deletion
                  }

                  function deleteRemainingChildren(
                    returnFiber,
                    currentFirstChild
                  ) {
                    if (!shouldTrackSideEffects) {
                      // Noop.
                      return null
                    }

                    // TODO: For the shouldClone case, this could be micro-optimized a bit by
                    // assuming that after the first child we've already added everything.
                    var childToDelete = currentFirstChild
                    while (childToDelete !== null) {
                      deleteChild(returnFiber, childToDelete)
                      childToDelete = childToDelete.sibling
                    }
                    return null
                  }

                  function mapRemainingChildren(
                    returnFiber,
                    currentFirstChild
                  ) {
                    // Add the remaining children to a temporary map so that we can find them by
                    // keys quickly. Implicit (null) keys get added to this set with their index
                    var existingChildren = new Map()

                    var existingChild = currentFirstChild
                    while (existingChild !== null) {
                      if (existingChild.key !== null) {
                        existingChildren.set(existingChild.key, existingChild)
                      } else {
                        existingChildren.set(existingChild.index, existingChild)
                      }
                      existingChild = existingChild.sibling
                    }
                    return existingChildren
                  }

                  function useFiber(fiber, pendingProps, expirationTime) {
                    // We currently set sibling to null and index to 0 here because it is easy
                    // to forget to do before returning it. E.g. for the single child case.
                    var clone = createWorkInProgress(
                      fiber,
                      pendingProps,
                      expirationTime
                    )
                    clone.index = 0
                    clone.sibling = null
                    return clone
                  }

                  function placeChild(newFiber, lastPlacedIndex, newIndex) {
                    newFiber.index = newIndex
                    if (!shouldTrackSideEffects) {
                      // Noop.
                      return lastPlacedIndex
                    }
                    var current = newFiber.alternate
                    if (current !== null) {
                      var oldIndex = current.index
                      if (oldIndex < lastPlacedIndex) {
                        // This is a move.
                        newFiber.effectTag = Placement
                        return lastPlacedIndex
                      } else {
                        // This item can stay in place.
                        return oldIndex
                      }
                    } else {
                      // This is an insertion.
                      newFiber.effectTag = Placement
                      return lastPlacedIndex
                    }
                  }

                  function placeSingleChild(newFiber) {
                    // This is simpler for the single child case. We only need to do a
                    // placement for inserting new children.
                    if (shouldTrackSideEffects && newFiber.alternate === null) {
                      newFiber.effectTag = Placement
                    }
                    return newFiber
                  }

                  function updateTextNode(
                    returnFiber,
                    current,
                    textContent,
                    expirationTime
                  ) {
                    if (current === null || current.tag !== HostText) {
                      // Insert
                      var created = createFiberFromText(
                        textContent,
                        returnFiber.mode,
                        expirationTime
                      )
                      created['return'] = returnFiber
                      return created
                    } else {
                      // Update
                      var existing = useFiber(
                        current,
                        textContent,
                        expirationTime
                      )
                      existing['return'] = returnFiber
                      return existing
                    }
                  }

                  function updateElement(
                    returnFiber,
                    current,
                    element,
                    expirationTime
                  ) {
                    if (current !== null && current.type === element.type) {
                      // Move based on index
                      var existing = useFiber(
                        current,
                        element.props,
                        expirationTime
                      )
                      existing.ref = coerceRef(returnFiber, current, element)
                      existing['return'] = returnFiber
                      {
                        existing._debugSource = element._source
                        existing._debugOwner = element._owner
                      }
                      return existing
                    } else {
                      // Insert
                      var created = createFiberFromElement(
                        element,
                        returnFiber.mode,
                        expirationTime
                      )
                      created.ref = coerceRef(returnFiber, current, element)
                      created['return'] = returnFiber
                      return created
                    }
                  }

                  function updatePortal(
                    returnFiber,
                    current,
                    portal,
                    expirationTime
                  ) {
                    if (
                      current === null ||
                      current.tag !== HostPortal ||
                      current.stateNode.containerInfo !==
                        portal.containerInfo ||
                      current.stateNode.implementation !== portal.implementation
                    ) {
                      // Insert
                      var created = createFiberFromPortal(
                        portal,
                        returnFiber.mode,
                        expirationTime
                      )
                      created['return'] = returnFiber
                      return created
                    } else {
                      // Update
                      var existing = useFiber(
                        current,
                        portal.children || [],
                        expirationTime
                      )
                      existing['return'] = returnFiber
                      return existing
                    }
                  }

                  function updateFragment(
                    returnFiber,
                    current,
                    fragment,
                    expirationTime,
                    key
                  ) {
                    if (current === null || current.tag !== Fragment) {
                      // Insert
                      var created = createFiberFromFragment(
                        fragment,
                        returnFiber.mode,
                        expirationTime,
                        key
                      )
                      created['return'] = returnFiber
                      return created
                    } else {
                      // Update
                      var existing = useFiber(current, fragment, expirationTime)
                      existing['return'] = returnFiber
                      return existing
                    }
                  }

                  function createChild(returnFiber, newChild, expirationTime) {
                    if (
                      typeof newChild === 'string' ||
                      typeof newChild === 'number'
                    ) {
                      // Text nodes don't have keys. If the previous node is implicitly keyed
                      // we can continue to replace it without aborting even if it is not a text
                      // node.
                      var created = createFiberFromText(
                        '' + newChild,
                        returnFiber.mode,
                        expirationTime
                      )
                      created['return'] = returnFiber
                      return created
                    }

                    if (typeof newChild === 'object' && newChild !== null) {
                      switch (newChild.$$typeof) {
                        case REACT_ELEMENT_TYPE: {
                          var _created = createFiberFromElement(
                            newChild,
                            returnFiber.mode,
                            expirationTime
                          )
                          _created.ref = coerceRef(returnFiber, null, newChild)
                          _created['return'] = returnFiber
                          return _created
                        }
                        case REACT_PORTAL_TYPE: {
                          var _created2 = createFiberFromPortal(
                            newChild,
                            returnFiber.mode,
                            expirationTime
                          )
                          _created2['return'] = returnFiber
                          return _created2
                        }
                      }

                      if (isArray$1(newChild) || getIteratorFn(newChild)) {
                        var _created3 = createFiberFromFragment(
                          newChild,
                          returnFiber.mode,
                          expirationTime,
                          null
                        )
                        _created3['return'] = returnFiber
                        return _created3
                      }

                      throwOnInvalidObjectType(returnFiber, newChild)
                    }

                    {
                      if (typeof newChild === 'function') {
                        warnOnFunctionType()
                      }
                    }

                    return null
                  }

                  function updateSlot(
                    returnFiber,
                    oldFiber,
                    newChild,
                    expirationTime
                  ) {
                    // Update the fiber if the keys match, otherwise return null.

                    var key = oldFiber !== null ? oldFiber.key : null

                    if (
                      typeof newChild === 'string' ||
                      typeof newChild === 'number'
                    ) {
                      // Text nodes don't have keys. If the previous node is implicitly keyed
                      // we can continue to replace it without aborting even if it is not a text
                      // node.
                      if (key !== null) {
                        return null
                      }
                      return updateTextNode(
                        returnFiber,
                        oldFiber,
                        '' + newChild,
                        expirationTime
                      )
                    }

                    if (typeof newChild === 'object' && newChild !== null) {
                      switch (newChild.$$typeof) {
                        case REACT_ELEMENT_TYPE: {
                          if (newChild.key === key) {
                            if (newChild.type === REACT_FRAGMENT_TYPE) {
                              return updateFragment(
                                returnFiber,
                                oldFiber,
                                newChild.props.children,
                                expirationTime,
                                key
                              )
                            }
                            return updateElement(
                              returnFiber,
                              oldFiber,
                              newChild,
                              expirationTime
                            )
                          } else {
                            return null
                          }
                        }
                        case REACT_PORTAL_TYPE: {
                          if (newChild.key === key) {
                            return updatePortal(
                              returnFiber,
                              oldFiber,
                              newChild,
                              expirationTime
                            )
                          } else {
                            return null
                          }
                        }
                      }

                      if (isArray$1(newChild) || getIteratorFn(newChild)) {
                        if (key !== null) {
                          return null
                        }

                        return updateFragment(
                          returnFiber,
                          oldFiber,
                          newChild,
                          expirationTime,
                          null
                        )
                      }

                      throwOnInvalidObjectType(returnFiber, newChild)
                    }

                    {
                      if (typeof newChild === 'function') {
                        warnOnFunctionType()
                      }
                    }

                    return null
                  }

                  function updateFromMap(
                    existingChildren,
                    returnFiber,
                    newIdx,
                    newChild,
                    expirationTime
                  ) {
                    if (
                      typeof newChild === 'string' ||
                      typeof newChild === 'number'
                    ) {
                      // Text nodes don't have keys, so we neither have to check the old nor
                      // new node for the key. If both are text nodes, they match.
                      var matchedFiber = existingChildren.get(newIdx) || null
                      return updateTextNode(
                        returnFiber,
                        matchedFiber,
                        '' + newChild,
                        expirationTime
                      )
                    }

                    if (typeof newChild === 'object' && newChild !== null) {
                      switch (newChild.$$typeof) {
                        case REACT_ELEMENT_TYPE: {
                          var _matchedFiber =
                            existingChildren.get(
                              newChild.key === null ? newIdx : newChild.key
                            ) || null
                          if (newChild.type === REACT_FRAGMENT_TYPE) {
                            return updateFragment(
                              returnFiber,
                              _matchedFiber,
                              newChild.props.children,
                              expirationTime,
                              newChild.key
                            )
                          }
                          return updateElement(
                            returnFiber,
                            _matchedFiber,
                            newChild,
                            expirationTime
                          )
                        }
                        case REACT_PORTAL_TYPE: {
                          var _matchedFiber2 =
                            existingChildren.get(
                              newChild.key === null ? newIdx : newChild.key
                            ) || null
                          return updatePortal(
                            returnFiber,
                            _matchedFiber2,
                            newChild,
                            expirationTime
                          )
                        }
                      }

                      if (isArray$1(newChild) || getIteratorFn(newChild)) {
                        var _matchedFiber3 =
                          existingChildren.get(newIdx) || null
                        return updateFragment(
                          returnFiber,
                          _matchedFiber3,
                          newChild,
                          expirationTime,
                          null
                        )
                      }

                      throwOnInvalidObjectType(returnFiber, newChild)
                    }

                    {
                      if (typeof newChild === 'function') {
                        warnOnFunctionType()
                      }
                    }

                    return null
                  }

                  /**
                   * Warns if there is a duplicate or missing key
                   */
                  function warnOnInvalidKey(child, knownKeys) {
                    {
                      if (typeof child !== 'object' || child === null) {
                        return knownKeys
                      }
                      switch (child.$$typeof) {
                        case REACT_ELEMENT_TYPE:
                        case REACT_PORTAL_TYPE:
                          warnForMissingKey(child)
                          var key = child.key
                          if (typeof key !== 'string') {
                            break
                          }
                          if (knownKeys === null) {
                            knownKeys = new Set()
                            knownKeys.add(key)
                            break
                          }
                          if (!knownKeys.has(key)) {
                            knownKeys.add(key)
                            break
                          }
                          warning(
                            false,
                            'Encountered two children with the same key, `%s`. ' +
                              'Keys should be unique so that components maintain their identity ' +
                              'across updates. Non-unique keys may cause children to be ' +
                              'duplicated and/or omitted — the behavior is unsupported and ' +
                              'could change in a future version.%s',
                            key,
                            getCurrentFiberStackAddendum$2()
                          )
                          break
                        default:
                          break
                      }
                    }
                    return knownKeys
                  }

                  function reconcileChildrenArray(
                    returnFiber,
                    currentFirstChild,
                    newChildren,
                    expirationTime
                  ) {
                    // This algorithm can't optimize by searching from boths ends since we
                    // don't have backpointers on fibers. I'm trying to see how far we can get
                    // with that model. If it ends up not being worth the tradeoffs, we can
                    // add it later.

                    // Even with a two ended optimization, we'd want to optimize for the case
                    // where there are few changes and brute force the comparison instead of
                    // going for the Map. It'd like to explore hitting that path first in
                    // forward-only mode and only go for the Map once we notice that we need
                    // lots of look ahead. This doesn't handle reversal as well as two ended
                    // search but that's unusual. Besides, for the two ended optimization to
                    // work on Iterables, we'd need to copy the whole set.

                    // In this first iteration, we'll just live with hitting the bad case
                    // (adding everything to a Map) in for every insert/move.

                    // If you change this code, also update reconcileChildrenIterator() which
                    // uses the same algorithm.

                    {
                      // First, validate keys.
                      var knownKeys = null
                      for (var i = 0; i < newChildren.length; i++) {
                        var child = newChildren[i]
                        knownKeys = warnOnInvalidKey(child, knownKeys)
                      }
                    }

                    var resultingFirstChild = null
                    var previousNewFiber = null

                    var oldFiber = currentFirstChild
                    var lastPlacedIndex = 0
                    var newIdx = 0
                    var nextOldFiber = null
                    for (
                      ;
                      oldFiber !== null && newIdx < newChildren.length;
                      newIdx++
                    ) {
                      if (oldFiber.index > newIdx) {
                        nextOldFiber = oldFiber
                        oldFiber = null
                      } else {
                        nextOldFiber = oldFiber.sibling
                      }
                      var newFiber = updateSlot(
                        returnFiber,
                        oldFiber,
                        newChildren[newIdx],
                        expirationTime
                      )
                      if (newFiber === null) {
                        // TODO: This breaks on empty slots like null children. That's
                        // unfortunate because it triggers the slow path all the time. We need
                        // a better way to communicate whether this was a miss or null,
                        // boolean, undefined, etc.
                        if (oldFiber === null) {
                          oldFiber = nextOldFiber
                        }
                        break
                      }
                      if (shouldTrackSideEffects) {
                        if (oldFiber && newFiber.alternate === null) {
                          // We matched the slot, but we didn't reuse the existing fiber, so we
                          // need to delete the existing child.
                          deleteChild(returnFiber, oldFiber)
                        }
                      }
                      lastPlacedIndex = placeChild(
                        newFiber,
                        lastPlacedIndex,
                        newIdx
                      )
                      if (previousNewFiber === null) {
                        // TODO: Move out of the loop. This only happens for the first run.
                        resultingFirstChild = newFiber
                      } else {
                        // TODO: Defer siblings if we're not at the right index for this slot.
                        // I.e. if we had null values before, then we want to defer this
                        // for each null value. However, we also don't want to call updateSlot
                        // with the previous one.
                        previousNewFiber.sibling = newFiber
                      }
                      previousNewFiber = newFiber
                      oldFiber = nextOldFiber
                    }

                    if (newIdx === newChildren.length) {
                      // We've reached the end of the new children. We can delete the rest.
                      deleteRemainingChildren(returnFiber, oldFiber)
                      return resultingFirstChild
                    }

                    if (oldFiber === null) {
                      // If we don't have any more existing children we can choose a fast path
                      // since the rest will all be insertions.
                      for (; newIdx < newChildren.length; newIdx++) {
                        var _newFiber = createChild(
                          returnFiber,
                          newChildren[newIdx],
                          expirationTime
                        )
                        if (!_newFiber) {
                          continue
                        }
                        lastPlacedIndex = placeChild(
                          _newFiber,
                          lastPlacedIndex,
                          newIdx
                        )
                        if (previousNewFiber === null) {
                          // TODO: Move out of the loop. This only happens for the first run.
                          resultingFirstChild = _newFiber
                        } else {
                          previousNewFiber.sibling = _newFiber
                        }
                        previousNewFiber = _newFiber
                      }
                      return resultingFirstChild
                    }

                    // Add all children to a key map for quick lookups.
                    var existingChildren = mapRemainingChildren(
                      returnFiber,
                      oldFiber
                    )

                    // Keep scanning and use the map to restore deleted items as moves.
                    for (; newIdx < newChildren.length; newIdx++) {
                      var _newFiber2 = updateFromMap(
                        existingChildren,
                        returnFiber,
                        newIdx,
                        newChildren[newIdx],
                        expirationTime
                      )
                      if (_newFiber2) {
                        if (shouldTrackSideEffects) {
                          if (_newFiber2.alternate !== null) {
                            // The new fiber is a work in progress, but if there exists a
                            // current, that means that we reused the fiber. We need to delete
                            // it from the child list so that we don't add it to the deletion
                            // list.
                            existingChildren['delete'](
                              _newFiber2.key === null ? newIdx : _newFiber2.key
                            )
                          }
                        }
                        lastPlacedIndex = placeChild(
                          _newFiber2,
                          lastPlacedIndex,
                          newIdx
                        )
                        if (previousNewFiber === null) {
                          resultingFirstChild = _newFiber2
                        } else {
                          previousNewFiber.sibling = _newFiber2
                        }
                        previousNewFiber = _newFiber2
                      }
                    }

                    if (shouldTrackSideEffects) {
                      // Any existing children that weren't consumed above were deleted. We need
                      // to add them to the deletion list.
                      existingChildren.forEach(function (child) {
                        return deleteChild(returnFiber, child)
                      })
                    }

                    return resultingFirstChild
                  }

                  function reconcileChildrenIterator(
                    returnFiber,
                    currentFirstChild,
                    newChildrenIterable,
                    expirationTime
                  ) {
                    // This is the same implementation as reconcileChildrenArray(),
                    // but using the iterator instead.

                    var iteratorFn = getIteratorFn(newChildrenIterable)
                    !(typeof iteratorFn === 'function')
                      ? invariant(
                          false,
                          'An object is not an iterable. This error is likely caused by a bug in React. Please file an issue.'
                        )
                      : void 0

                    {
                      // Warn about using Maps as children
                      if (typeof newChildrenIterable.entries === 'function') {
                        var possibleMap = newChildrenIterable
                        if (possibleMap.entries === iteratorFn) {
                          !didWarnAboutMaps
                            ? warning(
                                false,
                                'Using Maps as children is unsupported and will likely yield ' +
                                  'unexpected results. Convert it to a sequence/iterable of keyed ' +
                                  'ReactElements instead.%s',
                                getCurrentFiberStackAddendum$2()
                              )
                            : void 0
                          didWarnAboutMaps = true
                        }
                      }

                      // First, validate keys.
                      // We'll get a different iterator later for the main pass.
                      var _newChildren = iteratorFn.call(newChildrenIterable)
                      if (_newChildren) {
                        var knownKeys = null
                        var _step = _newChildren.next()
                        for (; !_step.done; _step = _newChildren.next()) {
                          var child = _step.value
                          knownKeys = warnOnInvalidKey(child, knownKeys)
                        }
                      }
                    }

                    var newChildren = iteratorFn.call(newChildrenIterable)
                    !(newChildren != null)
                      ? invariant(
                          false,
                          'An iterable object provided no iterator.'
                        )
                      : void 0

                    var resultingFirstChild = null
                    var previousNewFiber = null

                    var oldFiber = currentFirstChild
                    var lastPlacedIndex = 0
                    var newIdx = 0
                    var nextOldFiber = null

                    var step = newChildren.next()
                    for (
                      ;
                      oldFiber !== null && !step.done;
                      newIdx++, step = newChildren.next()
                    ) {
                      if (oldFiber.index > newIdx) {
                        nextOldFiber = oldFiber
                        oldFiber = null
                      } else {
                        nextOldFiber = oldFiber.sibling
                      }
                      var newFiber = updateSlot(
                        returnFiber,
                        oldFiber,
                        step.value,
                        expirationTime
                      )
                      if (newFiber === null) {
                        // TODO: This breaks on empty slots like null children. That's
                        // unfortunate because it triggers the slow path all the time. We need
                        // a better way to communicate whether this was a miss or null,
                        // boolean, undefined, etc.
                        if (!oldFiber) {
                          oldFiber = nextOldFiber
                        }
                        break
                      }
                      if (shouldTrackSideEffects) {
                        if (oldFiber && newFiber.alternate === null) {
                          // We matched the slot, but we didn't reuse the existing fiber, so we
                          // need to delete the existing child.
                          deleteChild(returnFiber, oldFiber)
                        }
                      }
                      lastPlacedIndex = placeChild(
                        newFiber,
                        lastPlacedIndex,
                        newIdx
                      )
                      if (previousNewFiber === null) {
                        // TODO: Move out of the loop. This only happens for the first run.
                        resultingFirstChild = newFiber
                      } else {
                        // TODO: Defer siblings if we're not at the right index for this slot.
                        // I.e. if we had null values before, then we want to defer this
                        // for each null value. However, we also don't want to call updateSlot
                        // with the previous one.
                        previousNewFiber.sibling = newFiber
                      }
                      previousNewFiber = newFiber
                      oldFiber = nextOldFiber
                    }

                    if (step.done) {
                      // We've reached the end of the new children. We can delete the rest.
                      deleteRemainingChildren(returnFiber, oldFiber)
                      return resultingFirstChild
                    }

                    if (oldFiber === null) {
                      // If we don't have any more existing children we can choose a fast path
                      // since the rest will all be insertions.
                      for (; !step.done; newIdx++, step = newChildren.next()) {
                        var _newFiber3 = createChild(
                          returnFiber,
                          step.value,
                          expirationTime
                        )
                        if (_newFiber3 === null) {
                          continue
                        }
                        lastPlacedIndex = placeChild(
                          _newFiber3,
                          lastPlacedIndex,
                          newIdx
                        )
                        if (previousNewFiber === null) {
                          // TODO: Move out of the loop. This only happens for the first run.
                          resultingFirstChild = _newFiber3
                        } else {
                          previousNewFiber.sibling = _newFiber3
                        }
                        previousNewFiber = _newFiber3
                      }
                      return resultingFirstChild
                    }

                    // Add all children to a key map for quick lookups.
                    var existingChildren = mapRemainingChildren(
                      returnFiber,
                      oldFiber
                    )

                    // Keep scanning and use the map to restore deleted items as moves.
                    for (; !step.done; newIdx++, step = newChildren.next()) {
                      var _newFiber4 = updateFromMap(
                        existingChildren,
                        returnFiber,
                        newIdx,
                        step.value,
                        expirationTime
                      )
                      if (_newFiber4 !== null) {
                        if (shouldTrackSideEffects) {
                          if (_newFiber4.alternate !== null) {
                            // The new fiber is a work in progress, but if there exists a
                            // current, that means that we reused the fiber. We need to delete
                            // it from the child list so that we don't add it to the deletion
                            // list.
                            existingChildren['delete'](
                              _newFiber4.key === null ? newIdx : _newFiber4.key
                            )
                          }
                        }
                        lastPlacedIndex = placeChild(
                          _newFiber4,
                          lastPlacedIndex,
                          newIdx
                        )
                        if (previousNewFiber === null) {
                          resultingFirstChild = _newFiber4
                        } else {
                          previousNewFiber.sibling = _newFiber4
                        }
                        previousNewFiber = _newFiber4
                      }
                    }

                    if (shouldTrackSideEffects) {
                      // Any existing children that weren't consumed above were deleted. We need
                      // to add them to the deletion list.
                      existingChildren.forEach(function (child) {
                        return deleteChild(returnFiber, child)
                      })
                    }

                    return resultingFirstChild
                  }

                  function reconcileSingleTextNode(
                    returnFiber,
                    currentFirstChild,
                    textContent,
                    expirationTime
                  ) {
                    // There's no need to check for keys on text nodes since we don't have a
                    // way to define them.
                    if (
                      currentFirstChild !== null &&
                      currentFirstChild.tag === HostText
                    ) {
                      // We already have an existing node so let's just update it and delete
                      // the rest.
                      deleteRemainingChildren(
                        returnFiber,
                        currentFirstChild.sibling
                      )
                      var existing = useFiber(
                        currentFirstChild,
                        textContent,
                        expirationTime
                      )
                      existing['return'] = returnFiber
                      return existing
                    }
                    // The existing first child is not a text node so we need to create one
                    // and delete the existing ones.
                    deleteRemainingChildren(returnFiber, currentFirstChild)
                    var created = createFiberFromText(
                      textContent,
                      returnFiber.mode,
                      expirationTime
                    )
                    created['return'] = returnFiber
                    return created
                  }

                  function reconcileSingleElement(
                    returnFiber,
                    currentFirstChild,
                    element,
                    expirationTime
                  ) {
                    var key = element.key
                    var child = currentFirstChild
                    while (child !== null) {
                      // TODO: If key === null and child.key === null, then this only applies to
                      // the first item in the list.
                      if (child.key === key) {
                        if (
                          child.tag === Fragment
                            ? element.type === REACT_FRAGMENT_TYPE
                            : child.type === element.type
                        ) {
                          deleteRemainingChildren(returnFiber, child.sibling)
                          var existing = useFiber(
                            child,
                            element.type === REACT_FRAGMENT_TYPE
                              ? element.props.children
                              : element.props,
                            expirationTime
                          )
                          existing.ref = coerceRef(returnFiber, child, element)
                          existing['return'] = returnFiber
                          {
                            existing._debugSource = element._source
                            existing._debugOwner = element._owner
                          }
                          return existing
                        } else {
                          deleteRemainingChildren(returnFiber, child)
                          break
                        }
                      } else {
                        deleteChild(returnFiber, child)
                      }
                      child = child.sibling
                    }

                    if (element.type === REACT_FRAGMENT_TYPE) {
                      var created = createFiberFromFragment(
                        element.props.children,
                        returnFiber.mode,
                        expirationTime,
                        element.key
                      )
                      created['return'] = returnFiber
                      return created
                    } else {
                      var _created4 = createFiberFromElement(
                        element,
                        returnFiber.mode,
                        expirationTime
                      )
                      _created4.ref = coerceRef(
                        returnFiber,
                        currentFirstChild,
                        element
                      )
                      _created4['return'] = returnFiber
                      return _created4
                    }
                  }

                  function reconcileSinglePortal(
                    returnFiber,
                    currentFirstChild,
                    portal,
                    expirationTime
                  ) {
                    var key = portal.key
                    var child = currentFirstChild
                    while (child !== null) {
                      // TODO: If key === null and child.key === null, then this only applies to
                      // the first item in the list.
                      if (child.key === key) {
                        if (
                          child.tag === HostPortal &&
                          child.stateNode.containerInfo ===
                            portal.containerInfo &&
                          child.stateNode.implementation ===
                            portal.implementation
                        ) {
                          deleteRemainingChildren(returnFiber, child.sibling)
                          var existing = useFiber(
                            child,
                            portal.children || [],
                            expirationTime
                          )
                          existing['return'] = returnFiber
                          return existing
                        } else {
                          deleteRemainingChildren(returnFiber, child)
                          break
                        }
                      } else {
                        deleteChild(returnFiber, child)
                      }
                      child = child.sibling
                    }

                    var created = createFiberFromPortal(
                      portal,
                      returnFiber.mode,
                      expirationTime
                    )
                    created['return'] = returnFiber
                    return created
                  }

                  // This API will tag the children with the side-effect of the reconciliation
                  // itself. They will be added to the side-effect list as we pass through the
                  // children and the parent.
                  function reconcileChildFibers(
                    returnFiber,
                    currentFirstChild,
                    newChild,
                    expirationTime
                  ) {
                    // This function is not recursive.
                    // If the top level item is an array, we treat it as a set of children,
                    // not as a fragment. Nested arrays on the other hand will be treated as
                    // fragment nodes. Recursion happens at the normal flow.

                    // Handle top level unkeyed fragments as if they were arrays.
                    // This leads to an ambiguity between <>{[...]}</> and <>...</>.
                    // We treat the ambiguous cases above the same.
                    if (
                      typeof newChild === 'object' &&
                      newChild !== null &&
                      newChild.type === REACT_FRAGMENT_TYPE &&
                      newChild.key === null
                    ) {
                      newChild = newChild.props.children
                    }

                    // Handle object types
                    var isObject =
                      typeof newChild === 'object' && newChild !== null

                    if (isObject) {
                      switch (newChild.$$typeof) {
                        case REACT_ELEMENT_TYPE:
                          return placeSingleChild(
                            reconcileSingleElement(
                              returnFiber,
                              currentFirstChild,
                              newChild,
                              expirationTime
                            )
                          )
                        case REACT_PORTAL_TYPE:
                          return placeSingleChild(
                            reconcileSinglePortal(
                              returnFiber,
                              currentFirstChild,
                              newChild,
                              expirationTime
                            )
                          )
                      }
                    }

                    if (
                      typeof newChild === 'string' ||
                      typeof newChild === 'number'
                    ) {
                      return placeSingleChild(
                        reconcileSingleTextNode(
                          returnFiber,
                          currentFirstChild,
                          '' + newChild,
                          expirationTime
                        )
                      )
                    }

                    if (isArray$1(newChild)) {
                      return reconcileChildrenArray(
                        returnFiber,
                        currentFirstChild,
                        newChild,
                        expirationTime
                      )
                    }

                    if (getIteratorFn(newChild)) {
                      return reconcileChildrenIterator(
                        returnFiber,
                        currentFirstChild,
                        newChild,
                        expirationTime
                      )
                    }

                    if (isObject) {
                      throwOnInvalidObjectType(returnFiber, newChild)
                    }

                    {
                      if (typeof newChild === 'function') {
                        warnOnFunctionType()
                      }
                    }
                    if (typeof newChild === 'undefined') {
                      // If the new child is undefined, and the return fiber is a composite
                      // component, throw an error. If Fiber return types are disabled,
                      // we already threw above.
                      switch (returnFiber.tag) {
                        case ClassComponent: {
                          {
                            var instance = returnFiber.stateNode
                            if (instance.render._isMockFunction) {
                              // We allow auto-mocks to proceed as if they're returning null.
                              break
                            }
                          }
                        }
                        // Intentionally fall through to the next case, which handles both
                        // functions and classes
                        // eslint-disable-next-lined no-fallthrough
                        case FunctionalComponent: {
                          var Component = returnFiber.type
                          invariant(
                            false,
                            '%s(...): Nothing was returned from render. This usually means a return statement is missing. Or, to render nothing, return null.',
                            Component.displayName ||
                              Component.name ||
                              'Component'
                          )
                        }
                      }
                    }

                    // Remaining cases are all treated as empty.
                    return deleteRemainingChildren(
                      returnFiber,
                      currentFirstChild
                    )
                  }

                  return reconcileChildFibers
                }

                var reconcileChildFibers = ChildReconciler(true)
                var mountChildFibers = ChildReconciler(false)

                function cloneChildFibers(current, workInProgress) {
                  !(current === null || workInProgress.child === current.child)
                    ? invariant(false, 'Resuming work not yet implemented.')
                    : void 0

                  if (workInProgress.child === null) {
                    return
                  }

                  var currentChild = workInProgress.child
                  var newChild = createWorkInProgress(
                    currentChild,
                    currentChild.pendingProps,
                    currentChild.expirationTime
                  )
                  workInProgress.child = newChild

                  newChild['return'] = workInProgress
                  while (currentChild.sibling !== null) {
                    currentChild = currentChild.sibling
                    newChild = newChild.sibling = createWorkInProgress(
                      currentChild,
                      currentChild.pendingProps,
                      currentChild.expirationTime
                    )
                    newChild['return'] = workInProgress
                  }
                  newChild.sibling = null
                }

                var didWarnAboutBadClass = void 0
                var didWarnAboutGetDerivedStateOnFunctionalComponent = void 0
                var didWarnAboutStatelessRefs = void 0

                {
                  didWarnAboutBadClass = {}
                  didWarnAboutGetDerivedStateOnFunctionalComponent = {}
                  didWarnAboutStatelessRefs = {}
                }

                var ReactFiberBeginWork = function (
                  config,
                  hostContext,
                  legacyContext,
                  newContext,
                  hydrationContext,
                  scheduleWork,
                  computeExpirationForFiber
                ) {
                  var shouldSetTextContent = config.shouldSetTextContent,
                    shouldDeprioritizeSubtree = config.shouldDeprioritizeSubtree
                  var pushHostContext = hostContext.pushHostContext,
                    pushHostContainer = hostContext.pushHostContainer
                  var pushProvider = newContext.pushProvider
                  var getMaskedContext = legacyContext.getMaskedContext,
                    getUnmaskedContext = legacyContext.getUnmaskedContext,
                    hasLegacyContextChanged = legacyContext.hasContextChanged,
                    pushLegacyContextProvider =
                      legacyContext.pushContextProvider,
                    pushTopLevelContextObject =
                      legacyContext.pushTopLevelContextObject,
                    invalidateContextProvider =
                      legacyContext.invalidateContextProvider
                  var enterHydrationState =
                      hydrationContext.enterHydrationState,
                    resetHydrationState = hydrationContext.resetHydrationState,
                    tryToClaimNextHydratableInstance =
                      hydrationContext.tryToClaimNextHydratableInstance

                  var _ReactFiberClassCompo = ReactFiberClassComponent(
                      legacyContext,
                      scheduleWork,
                      computeExpirationForFiber,
                      memoizeProps,
                      memoizeState
                    ),
                    adoptClassInstance =
                      _ReactFiberClassCompo.adoptClassInstance,
                    callGetDerivedStateFromProps =
                      _ReactFiberClassCompo.callGetDerivedStateFromProps,
                    constructClassInstance =
                      _ReactFiberClassCompo.constructClassInstance,
                    mountClassInstance =
                      _ReactFiberClassCompo.mountClassInstance,
                    resumeMountClassInstance =
                      _ReactFiberClassCompo.resumeMountClassInstance,
                    updateClassInstance =
                      _ReactFiberClassCompo.updateClassInstance

                  // TODO: Remove this and use reconcileChildrenAtExpirationTime directly.

                  function reconcileChildren(
                    current,
                    workInProgress,
                    nextChildren
                  ) {
                    reconcileChildrenAtExpirationTime(
                      current,
                      workInProgress,
                      nextChildren,
                      workInProgress.expirationTime
                    )
                  }

                  function reconcileChildrenAtExpirationTime(
                    current,
                    workInProgress,
                    nextChildren,
                    renderExpirationTime
                  ) {
                    if (current === null) {
                      // If this is a fresh new component that hasn't been rendered yet, we
                      // won't update its child set by applying minimal side-effects. Instead,
                      // we will add them all to the child before it gets rendered. That means
                      // we can optimize this reconciliation pass by not tracking side-effects.
                      workInProgress.child = mountChildFibers(
                        workInProgress,
                        null,
                        nextChildren,
                        renderExpirationTime
                      )
                    } else {
                      // If the current child is the same as the work in progress, it means that
                      // we haven't yet started any work on these children. Therefore, we use
                      // the clone algorithm to create a copy of all the current children.

                      // If we had any progressed work already, that is invalid at this point so
                      // let's throw it out.
                      workInProgress.child = reconcileChildFibers(
                        workInProgress,
                        current.child,
                        nextChildren,
                        renderExpirationTime
                      )
                    }
                  }

                  function updateForwardRef(current, workInProgress) {
                    var render = workInProgress.type.render
                    var nextChildren = render(
                      workInProgress.pendingProps,
                      workInProgress.ref
                    )
                    reconcileChildren(current, workInProgress, nextChildren)
                    memoizeProps(workInProgress, nextChildren)
                    return workInProgress.child
                  }

                  function updateFragment(current, workInProgress) {
                    var nextChildren = workInProgress.pendingProps
                    if (hasLegacyContextChanged()) {
                      // Normally we can bail out on props equality but if context has changed
                      // we don't do the bailout and we have to reuse existing props instead.
                    } else if (workInProgress.memoizedProps === nextChildren) {
                      return bailoutOnAlreadyFinishedWork(
                        current,
                        workInProgress
                      )
                    }
                    reconcileChildren(current, workInProgress, nextChildren)
                    memoizeProps(workInProgress, nextChildren)
                    return workInProgress.child
                  }

                  function updateMode(current, workInProgress) {
                    var nextChildren = workInProgress.pendingProps.children
                    if (hasLegacyContextChanged()) {
                      // Normally we can bail out on props equality but if context has changed
                      // we don't do the bailout and we have to reuse existing props instead.
                    } else if (
                      nextChildren === null ||
                      workInProgress.memoizedProps === nextChildren
                    ) {
                      return bailoutOnAlreadyFinishedWork(
                        current,
                        workInProgress
                      )
                    }
                    reconcileChildren(current, workInProgress, nextChildren)
                    memoizeProps(workInProgress, nextChildren)
                    return workInProgress.child
                  }

                  function markRef(current, workInProgress) {
                    var ref = workInProgress.ref
                    if (
                      (current === null && ref !== null) ||
                      (current !== null && current.ref !== ref)
                    ) {
                      // Schedule a Ref effect
                      workInProgress.effectTag |= Ref
                    }
                  }

                  function updateFunctionalComponent(current, workInProgress) {
                    var fn = workInProgress.type
                    var nextProps = workInProgress.pendingProps

                    if (hasLegacyContextChanged()) {
                      // Normally we can bail out on props equality but if context has changed
                      // we don't do the bailout and we have to reuse existing props instead.
                    } else {
                      if (workInProgress.memoizedProps === nextProps) {
                        return bailoutOnAlreadyFinishedWork(
                          current,
                          workInProgress
                        )
                      }
                      // TODO: consider bringing fn.shouldComponentUpdate() back.
                      // It used to be here.
                    }

                    var unmaskedContext = getUnmaskedContext(workInProgress)
                    var context = getMaskedContext(
                      workInProgress,
                      unmaskedContext
                    )

                    var nextChildren = void 0

                    {
                      ReactCurrentOwner.current = workInProgress
                      ReactDebugCurrentFiber.setCurrentPhase('render')
                      nextChildren = fn(nextProps, context)
                      ReactDebugCurrentFiber.setCurrentPhase(null)
                    }
                    // React DevTools reads this flag.
                    workInProgress.effectTag |= PerformedWork
                    reconcileChildren(current, workInProgress, nextChildren)
                    memoizeProps(workInProgress, nextProps)
                    return workInProgress.child
                  }

                  function updateClassComponent(
                    current,
                    workInProgress,
                    renderExpirationTime
                  ) {
                    // Push context providers early to prevent context stack mismatches.
                    // During mounting we don't know the child context yet as the instance doesn't exist.
                    // We will invalidate the child context in finishClassComponent() right after rendering.
                    var hasContext = pushLegacyContextProvider(workInProgress)
                    var shouldUpdate = void 0
                    if (current === null) {
                      if (workInProgress.stateNode === null) {
                        // In the initial pass we might need to construct the instance.
                        constructClassInstance(
                          workInProgress,
                          workInProgress.pendingProps
                        )
                        mountClassInstance(workInProgress, renderExpirationTime)

                        shouldUpdate = true
                      } else {
                        // In a resume, we'll already have an instance we can reuse.
                        shouldUpdate = resumeMountClassInstance(
                          workInProgress,
                          renderExpirationTime
                        )
                      }
                    } else {
                      shouldUpdate = updateClassInstance(
                        current,
                        workInProgress,
                        renderExpirationTime
                      )
                    }

                    // We processed the update queue inside updateClassInstance. It may have
                    // included some errors that were dispatched during the commit phase.
                    // TODO: Refactor class components so this is less awkward.
                    var didCaptureError = false
                    var updateQueue = workInProgress.updateQueue
                    if (
                      updateQueue !== null &&
                      updateQueue.capturedValues !== null
                    ) {
                      shouldUpdate = true
                      didCaptureError = true
                    }
                    return finishClassComponent(
                      current,
                      workInProgress,
                      shouldUpdate,
                      hasContext,
                      didCaptureError,
                      renderExpirationTime
                    )
                  }

                  function finishClassComponent(
                    current,
                    workInProgress,
                    shouldUpdate,
                    hasContext,
                    didCaptureError,
                    renderExpirationTime
                  ) {
                    // Refs should update even if shouldComponentUpdate returns false
                    markRef(current, workInProgress)

                    if (!shouldUpdate && !didCaptureError) {
                      // Context providers should defer to sCU for rendering
                      if (hasContext) {
                        invalidateContextProvider(workInProgress, false)
                      }

                      return bailoutOnAlreadyFinishedWork(
                        current,
                        workInProgress
                      )
                    }

                    var ctor = workInProgress.type
                    var instance = workInProgress.stateNode

                    // Rerender
                    ReactCurrentOwner.current = workInProgress
                    var nextChildren = void 0
                    if (
                      didCaptureError &&
                      (!enableGetDerivedStateFromCatch ||
                        typeof ctor.getDerivedStateFromCatch !== 'function')
                    ) {
                      // If we captured an error, but getDerivedStateFrom catch is not defined,
                      // unmount all the children. componentDidCatch will schedule an update to
                      // re-render a fallback. This is temporary until we migrate everyone to
                      // the new API.
                      // TODO: Warn in a future release.
                      nextChildren = null
                    } else {
                      {
                        ReactDebugCurrentFiber.setCurrentPhase('render')
                        nextChildren = instance.render()
                        if (
                          debugRenderPhaseSideEffects ||
                          (debugRenderPhaseSideEffectsForStrictMode &&
                            workInProgress.mode & StrictMode)
                        ) {
                          instance.render()
                        }
                        ReactDebugCurrentFiber.setCurrentPhase(null)
                      }
                    }

                    // React DevTools reads this flag.
                    workInProgress.effectTag |= PerformedWork
                    if (didCaptureError) {
                      // If we're recovering from an error, reconcile twice: first to delete
                      // all the existing children.
                      reconcileChildrenAtExpirationTime(
                        current,
                        workInProgress,
                        null,
                        renderExpirationTime
                      )
                      workInProgress.child = null
                      // Now we can continue reconciling like normal. This has the effect of
                      // remounting all children regardless of whether their their
                      // identity matches.
                    }
                    reconcileChildrenAtExpirationTime(
                      current,
                      workInProgress,
                      nextChildren,
                      renderExpirationTime
                    )
                    // Memoize props and state using the values we just used to render.
                    // TODO: Restructure so we never read values from the instance.
                    memoizeState(workInProgress, instance.state)
                    memoizeProps(workInProgress, instance.props)

                    // The context might have changed so we need to recalculate it.
                    if (hasContext) {
                      invalidateContextProvider(workInProgress, true)
                    }

                    return workInProgress.child
                  }

                  function pushHostRootContext(workInProgress) {
                    var root = workInProgress.stateNode
                    if (root.pendingContext) {
                      pushTopLevelContextObject(
                        workInProgress,
                        root.pendingContext,
                        root.pendingContext !== root.context
                      )
                    } else if (root.context) {
                      // Should always be set
                      pushTopLevelContextObject(
                        workInProgress,
                        root.context,
                        false
                      )
                    }
                    pushHostContainer(workInProgress, root.containerInfo)
                  }

                  function updateHostRoot(
                    current,
                    workInProgress,
                    renderExpirationTime
                  ) {
                    pushHostRootContext(workInProgress)
                    var updateQueue = workInProgress.updateQueue
                    if (updateQueue !== null) {
                      var prevState = workInProgress.memoizedState
                      var state = processUpdateQueue(
                        current,
                        workInProgress,
                        updateQueue,
                        null,
                        null,
                        renderExpirationTime
                      )
                      memoizeState(workInProgress, state)
                      updateQueue = workInProgress.updateQueue

                      var element = void 0
                      if (
                        updateQueue !== null &&
                        updateQueue.capturedValues !== null
                      ) {
                        // There's an uncaught error. Unmount the whole root.
                        element = null
                      } else if (prevState === state) {
                        // If the state is the same as before, that's a bailout because we had
                        // no work that expires at this time.
                        resetHydrationState()
                        return bailoutOnAlreadyFinishedWork(
                          current,
                          workInProgress
                        )
                      } else {
                        element = state.element
                      }
                      var root = workInProgress.stateNode
                      if (
                        (current === null || current.child === null) &&
                        root.hydrate &&
                        enterHydrationState(workInProgress)
                      ) {
                        // If we don't have any current children this might be the first pass.
                        // We always try to hydrate. If this isn't a hydration pass there won't
                        // be any children to hydrate which is effectively the same thing as
                        // not hydrating.

                        // This is a bit of a hack. We track the host root as a placement to
                        // know that we're currently in a mounting state. That way isMounted
                        // works as expected. We must reset this before committing.
                        // TODO: Delete this when we delete isMounted and findDOMNode.
                        workInProgress.effectTag |= Placement

                        // Ensure that children mount into this root without tracking
                        // side-effects. This ensures that we don't store Placement effects on
                        // nodes that will be hydrated.
                        workInProgress.child = mountChildFibers(
                          workInProgress,
                          null,
                          element,
                          renderExpirationTime
                        )
                      } else {
                        // Otherwise reset hydration state in case we aborted and resumed another
                        // root.
                        resetHydrationState()
                        reconcileChildren(current, workInProgress, element)
                      }
                      memoizeState(workInProgress, state)
                      return workInProgress.child
                    }
                    resetHydrationState()
                    // If there is no update queue, that's a bailout because the root has no props.
                    return bailoutOnAlreadyFinishedWork(current, workInProgress)
                  }

                  function updateHostComponent(
                    current,
                    workInProgress,
                    renderExpirationTime
                  ) {
                    pushHostContext(workInProgress)

                    if (current === null) {
                      tryToClaimNextHydratableInstance(workInProgress)
                    }

                    var type = workInProgress.type
                    var memoizedProps = workInProgress.memoizedProps
                    var nextProps = workInProgress.pendingProps
                    var prevProps =
                      current !== null ? current.memoizedProps : null

                    if (hasLegacyContextChanged()) {
                      // Normally we can bail out on props equality but if context has changed
                      // we don't do the bailout and we have to reuse existing props instead.
                    } else if (memoizedProps === nextProps) {
                      var isHidden =
                        workInProgress.mode & AsyncMode &&
                        shouldDeprioritizeSubtree(type, nextProps)
                      if (isHidden) {
                        // Before bailing out, make sure we've deprioritized a hidden component.
                        workInProgress.expirationTime = Never
                      }
                      if (!isHidden || renderExpirationTime !== Never) {
                        return bailoutOnAlreadyFinishedWork(
                          current,
                          workInProgress
                        )
                      }
                      // If we're rendering a hidden node at hidden priority, don't bailout. The
                      // parent is complete, but the children may not be.
                    }

                    var nextChildren = nextProps.children
                    var isDirectTextChild = shouldSetTextContent(
                      type,
                      nextProps
                    )

                    if (isDirectTextChild) {
                      // We special case a direct text child of a host node. This is a common
                      // case. We won't handle it as a reified child. We will instead handle
                      // this in the host environment that also have access to this prop. That
                      // avoids allocating another HostText fiber and traversing it.
                      nextChildren = null
                    } else if (
                      prevProps &&
                      shouldSetTextContent(type, prevProps)
                    ) {
                      // If we're switching from a direct text child to a normal child, or to
                      // empty, we need to schedule the text content to be reset.
                      workInProgress.effectTag |= ContentReset
                    }

                    markRef(current, workInProgress)

                    // Check the host config to see if the children are offscreen/hidden.
                    if (
                      renderExpirationTime !== Never &&
                      workInProgress.mode & AsyncMode &&
                      shouldDeprioritizeSubtree(type, nextProps)
                    ) {
                      // Down-prioritize the children.
                      workInProgress.expirationTime = Never
                      // Bailout and come back to this fiber later.
                      workInProgress.memoizedProps = nextProps
                      return null
                    }

                    reconcileChildren(current, workInProgress, nextChildren)
                    memoizeProps(workInProgress, nextProps)
                    return workInProgress.child
                  }

                  function updateHostText(current, workInProgress) {
                    if (current === null) {
                      tryToClaimNextHydratableInstance(workInProgress)
                    }
                    var nextProps = workInProgress.pendingProps
                    memoizeProps(workInProgress, nextProps)
                    // Nothing to do here. This is terminal. We'll do the completion step
                    // immediately after.
                    return null
                  }

                  function mountIndeterminateComponent(
                    current,
                    workInProgress,
                    renderExpirationTime
                  ) {
                    !(current === null)
                      ? invariant(
                          false,
                          'An indeterminate component should never have mounted. This error is likely caused by a bug in React. Please file an issue.'
                        )
                      : void 0
                    var fn = workInProgress.type
                    var props = workInProgress.pendingProps
                    var unmaskedContext = getUnmaskedContext(workInProgress)
                    var context = getMaskedContext(
                      workInProgress,
                      unmaskedContext
                    )

                    var value = void 0

                    {
                      if (
                        fn.prototype &&
                        typeof fn.prototype.render === 'function'
                      ) {
                        var componentName =
                          getComponentName(workInProgress) || 'Unknown'

                        if (!didWarnAboutBadClass[componentName]) {
                          warning(
                            false,
                            "The <%s /> component appears to have a render method, but doesn't extend React.Component. " +
                              'This is likely to cause errors. Change %s to extend React.Component instead.',
                            componentName,
                            componentName
                          )
                          didWarnAboutBadClass[componentName] = true
                        }
                      }
                      ReactCurrentOwner.current = workInProgress
                      value = fn(props, context)
                    }
                    // React DevTools reads this flag.
                    workInProgress.effectTag |= PerformedWork

                    if (
                      typeof value === 'object' &&
                      value !== null &&
                      typeof value.render === 'function' &&
                      value.$$typeof === undefined
                    ) {
                      var Component = workInProgress.type

                      // Proceed under the assumption that this is a class instance
                      workInProgress.tag = ClassComponent

                      workInProgress.memoizedState =
                        value.state !== null && value.state !== undefined
                          ? value.state
                          : null

                      if (
                        typeof Component.getDerivedStateFromProps === 'function'
                      ) {
                        var partialState = callGetDerivedStateFromProps(
                          workInProgress,
                          value,
                          props,
                          workInProgress.memoizedState
                        )

                        if (
                          partialState !== null &&
                          partialState !== undefined
                        ) {
                          workInProgress.memoizedState = _assign(
                            {},
                            workInProgress.memoizedState,
                            partialState
                          )
                        }
                      }

                      // Push context providers early to prevent context stack mismatches.
                      // During mounting we don't know the child context yet as the instance doesn't exist.
                      // We will invalidate the child context in finishClassComponent() right after rendering.
                      var hasContext = pushLegacyContextProvider(workInProgress)
                      adoptClassInstance(workInProgress, value)
                      mountClassInstance(workInProgress, renderExpirationTime)
                      return finishClassComponent(
                        current,
                        workInProgress,
                        true,
                        hasContext,
                        false,
                        renderExpirationTime
                      )
                    } else {
                      // Proceed under the assumption that this is a functional component
                      workInProgress.tag = FunctionalComponent
                      {
                        var _Component = workInProgress.type

                        if (_Component) {
                          !!_Component.childContextTypes
                            ? warning(
                                false,
                                '%s(...): childContextTypes cannot be defined on a functional component.',
                                _Component.displayName ||
                                  _Component.name ||
                                  'Component'
                              )
                            : void 0
                        }
                        if (workInProgress.ref !== null) {
                          var info = ''
                          var ownerName = ReactDebugCurrentFiber.getCurrentFiberOwnerName()
                          if (ownerName) {
                            info +=
                              '\n\nCheck the render method of `' +
                              ownerName +
                              '`.'
                          }

                          var warningKey =
                            ownerName || workInProgress._debugID || ''
                          var debugSource = workInProgress._debugSource
                          if (debugSource) {
                            warningKey =
                              debugSource.fileName +
                              ':' +
                              debugSource.lineNumber
                          }
                          if (!didWarnAboutStatelessRefs[warningKey]) {
                            didWarnAboutStatelessRefs[warningKey] = true
                            warning(
                              false,
                              'Stateless function components cannot be given refs. ' +
                                'Attempts to access this ref will fail.%s%s',
                              info,
                              ReactDebugCurrentFiber.getCurrentFiberStackAddendum()
                            )
                          }
                        }

                        if (typeof fn.getDerivedStateFromProps === 'function') {
                          var _componentName =
                            getComponentName(workInProgress) || 'Unknown'

                          if (
                            !didWarnAboutGetDerivedStateOnFunctionalComponent[
                              _componentName
                            ]
                          ) {
                            warning(
                              false,
                              '%s: Stateless functional components do not support getDerivedStateFromProps.',
                              _componentName
                            )
                            didWarnAboutGetDerivedStateOnFunctionalComponent[
                              _componentName
                            ] = true
                          }
                        }
                      }
                      reconcileChildren(current, workInProgress, value)
                      memoizeProps(workInProgress, props)
                      return workInProgress.child
                    }
                  }

                  function updateCallComponent(
                    current,
                    workInProgress,
                    renderExpirationTime
                  ) {
                    var nextProps = workInProgress.pendingProps
                    if (hasLegacyContextChanged()) {
                      // Normally we can bail out on props equality but if context has changed
                      // we don't do the bailout and we have to reuse existing props instead.
                    } else if (workInProgress.memoizedProps === nextProps) {
                      nextProps = workInProgress.memoizedProps
                      // TODO: When bailing out, we might need to return the stateNode instead
                      // of the child. To check it for work.
                      // return bailoutOnAlreadyFinishedWork(current, workInProgress);
                    }

                    var nextChildren = nextProps.children

                    // The following is a fork of reconcileChildrenAtExpirationTime but using
                    // stateNode to store the child.
                    if (current === null) {
                      workInProgress.stateNode = mountChildFibers(
                        workInProgress,
                        workInProgress.stateNode,
                        nextChildren,
                        renderExpirationTime
                      )
                    } else {
                      workInProgress.stateNode = reconcileChildFibers(
                        workInProgress,
                        current.stateNode,
                        nextChildren,
                        renderExpirationTime
                      )
                    }

                    memoizeProps(workInProgress, nextProps)
                    // This doesn't take arbitrary time so we could synchronously just begin
                    // eagerly do the work of workInProgress.child as an optimization.
                    return workInProgress.stateNode
                  }

                  function updatePortalComponent(
                    current,
                    workInProgress,
                    renderExpirationTime
                  ) {
                    pushHostContainer(
                      workInProgress,
                      workInProgress.stateNode.containerInfo
                    )
                    var nextChildren = workInProgress.pendingProps
                    if (hasLegacyContextChanged()) {
                      // Normally we can bail out on props equality but if context has changed
                      // we don't do the bailout and we have to reuse existing props instead.
                    } else if (workInProgress.memoizedProps === nextChildren) {
                      return bailoutOnAlreadyFinishedWork(
                        current,
                        workInProgress
                      )
                    }

                    if (current === null) {
                      // Portals are special because we don't append the children during mount
                      // but at commit. Therefore we need to track insertions which the normal
                      // flow doesn't do during mount. This doesn't happen at the root because
                      // the root always starts with a "current" with a null child.
                      // TODO: Consider unifying this with how the root works.
                      workInProgress.child = reconcileChildFibers(
                        workInProgress,
                        null,
                        nextChildren,
                        renderExpirationTime
                      )
                      memoizeProps(workInProgress, nextChildren)
                    } else {
                      reconcileChildren(current, workInProgress, nextChildren)
                      memoizeProps(workInProgress, nextChildren)
                    }
                    return workInProgress.child
                  }

                  function propagateContextChange(
                    workInProgress,
                    context,
                    changedBits,
                    renderExpirationTime
                  ) {
                    var fiber = workInProgress.child
                    if (fiber !== null) {
                      // Set the return pointer of the child to the work-in-progress fiber.
                      fiber['return'] = workInProgress
                    }
                    while (fiber !== null) {
                      var nextFiber = void 0
                      // Visit this fiber.
                      switch (fiber.tag) {
                        case ContextConsumer:
                          // Check if the context matches.
                          var observedBits = fiber.stateNode | 0
                          if (
                            fiber.type === context &&
                            (observedBits & changedBits) !== 0
                          ) {
                            // Update the expiration time of all the ancestors, including
                            // the alternates.
                            var node = fiber
                            while (node !== null) {
                              var alternate = node.alternate
                              if (
                                node.expirationTime === NoWork ||
                                node.expirationTime > renderExpirationTime
                              ) {
                                node.expirationTime = renderExpirationTime
                                if (
                                  alternate !== null &&
                                  (alternate.expirationTime === NoWork ||
                                    alternate.expirationTime >
                                      renderExpirationTime)
                                ) {
                                  alternate.expirationTime = renderExpirationTime
                                }
                              } else if (
                                alternate !== null &&
                                (alternate.expirationTime === NoWork ||
                                  alternate.expirationTime >
                                    renderExpirationTime)
                              ) {
                                alternate.expirationTime = renderExpirationTime
                              } else {
                                // Neither alternate was updated, which means the rest of the
                                // ancestor path already has sufficient priority.
                                break
                              }
                              node = node['return']
                            }
                            // Don't scan deeper than a matching consumer. When we render the
                            // consumer, we'll continue scanning from that point. This way the
                            // scanning work is time-sliced.
                            nextFiber = null
                          } else {
                            // Traverse down.
                            nextFiber = fiber.child
                          }
                          break
                        case ContextProvider:
                          // Don't scan deeper if this is a matching provider
                          nextFiber =
                            fiber.type === workInProgress.type
                              ? null
                              : fiber.child
                          break
                        default:
                          // Traverse down.
                          nextFiber = fiber.child
                          break
                      }
                      if (nextFiber !== null) {
                        // Set the return pointer of the child to the work-in-progress fiber.
                        nextFiber['return'] = fiber
                      } else {
                        // No child. Traverse to next sibling.
                        nextFiber = fiber
                        while (nextFiber !== null) {
                          if (nextFiber === workInProgress) {
                            // We're back to the root of this subtree. Exit.
                            nextFiber = null
                            break
                          }
                          var sibling = nextFiber.sibling
                          if (sibling !== null) {
                            nextFiber = sibling
                            break
                          }
                          // No more siblings. Traverse up.
                          nextFiber = nextFiber['return']
                        }
                      }
                      fiber = nextFiber
                    }
                  }

                  function updateContextProvider(
                    current,
                    workInProgress,
                    renderExpirationTime
                  ) {
                    var providerType = workInProgress.type
                    var context = providerType._context

                    var newProps = workInProgress.pendingProps
                    var oldProps = workInProgress.memoizedProps

                    if (hasLegacyContextChanged()) {
                      // Normally we can bail out on props equality but if context has changed
                      // we don't do the bailout and we have to reuse existing props instead.
                    } else if (oldProps === newProps) {
                      workInProgress.stateNode = 0
                      pushProvider(workInProgress)
                      return bailoutOnAlreadyFinishedWork(
                        current,
                        workInProgress
                      )
                    }

                    var newValue = newProps.value
                    workInProgress.memoizedProps = newProps

                    var changedBits = void 0
                    if (oldProps === null) {
                      // Initial render
                      changedBits = MAX_SIGNED_31_BIT_INT
                    } else {
                      if (oldProps.value === newProps.value) {
                        // No change. Bailout early if children are the same.
                        if (oldProps.children === newProps.children) {
                          workInProgress.stateNode = 0
                          pushProvider(workInProgress)
                          return bailoutOnAlreadyFinishedWork(
                            current,
                            workInProgress
                          )
                        }
                        changedBits = 0
                      } else {
                        var oldValue = oldProps.value
                        // Use Object.is to compare the new context value to the old value.
                        // Inlined Object.is polyfill.
                        // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is
                        if (
                          (oldValue === newValue &&
                            (oldValue !== 0 ||
                              1 / oldValue === 1 / newValue)) ||
                          (oldValue !== oldValue && newValue !== newValue) // eslint-disable-line no-self-compare
                        ) {
                          // No change. Bailout early if children are the same.
                          if (oldProps.children === newProps.children) {
                            workInProgress.stateNode = 0
                            pushProvider(workInProgress)
                            return bailoutOnAlreadyFinishedWork(
                              current,
                              workInProgress
                            )
                          }
                          changedBits = 0
                        } else {
                          changedBits =
                            typeof context._calculateChangedBits === 'function'
                              ? context._calculateChangedBits(
                                  oldValue,
                                  newValue
                                )
                              : MAX_SIGNED_31_BIT_INT
                          {
                            !(
                              (changedBits & MAX_SIGNED_31_BIT_INT) ===
                              changedBits
                            )
                              ? warning(
                                  false,
                                  'calculateChangedBits: Expected the return value to be a ' +
                                    '31-bit integer. Instead received: %s',
                                  changedBits
                                )
                              : void 0
                          }
                          changedBits |= 0

                          if (changedBits === 0) {
                            // No change. Bailout early if children are the same.
                            if (oldProps.children === newProps.children) {
                              workInProgress.stateNode = 0
                              pushProvider(workInProgress)
                              return bailoutOnAlreadyFinishedWork(
                                current,
                                workInProgress
                              )
                            }
                          } else {
                            propagateContextChange(
                              workInProgress,
                              context,
                              changedBits,
                              renderExpirationTime
                            )
                          }
                        }
                      }
                    }

                    workInProgress.stateNode = changedBits
                    pushProvider(workInProgress)

                    var newChildren = newProps.children
                    reconcileChildren(current, workInProgress, newChildren)
                    return workInProgress.child
                  }

                  function updateContextConsumer(
                    current,
                    workInProgress,
                    renderExpirationTime
                  ) {
                    var context = workInProgress.type
                    var newProps = workInProgress.pendingProps
                    var oldProps = workInProgress.memoizedProps

                    var newValue = context._currentValue
                    var changedBits = context._changedBits

                    if (hasLegacyContextChanged()) {
                      // Normally we can bail out on props equality but if context has changed
                      // we don't do the bailout and we have to reuse existing props instead.
                    } else if (changedBits === 0 && oldProps === newProps) {
                      return bailoutOnAlreadyFinishedWork(
                        current,
                        workInProgress
                      )
                    }
                    workInProgress.memoizedProps = newProps

                    var observedBits = newProps.unstable_observedBits
                    if (observedBits === undefined || observedBits === null) {
                      // Subscribe to all changes by default
                      observedBits = MAX_SIGNED_31_BIT_INT
                    }
                    // Store the observedBits on the fiber's stateNode for quick access.
                    workInProgress.stateNode = observedBits

                    if ((changedBits & observedBits) !== 0) {
                      // Context change propagation stops at matching consumers, for time-
                      // slicing. Continue the propagation here.
                      propagateContextChange(
                        workInProgress,
                        context,
                        changedBits,
                        renderExpirationTime
                      )
                    } else if (oldProps === newProps) {
                      // Skip over a memoized parent with a bitmask bailout even
                      // if we began working on it because of a deeper matching child.
                      return bailoutOnAlreadyFinishedWork(
                        current,
                        workInProgress
                      )
                    }
                    // There is no bailout on `children` equality because we expect people
                    // to often pass a bound method as a child, but it may reference
                    // `this.state` or `this.props` (and thus needs to re-render on `setState`).

                    var render = newProps.children

                    {
                      !(typeof render === 'function')
                        ? warning(
                            false,
                            'A context consumer was rendered with multiple children, or a child ' +
                              "that isn't a function. A context consumer expects a single child " +
                              'that is a function. If you did pass a function, make sure there ' +
                              'is no trailing or leading whitespace around it.'
                          )
                        : void 0
                    }

                    var newChildren = render(newValue)
                    reconcileChildren(current, workInProgress, newChildren)
                    return workInProgress.child
                  }

                  /*
  function reuseChildrenEffects(returnFiber : Fiber, firstChild : Fiber) {
    let child = firstChild;
    do {
      // Ensure that the first and last effect of the parent corresponds
      // to the children's first and last effect.
      if (!returnFiber.firstEffect) {
        returnFiber.firstEffect = child.firstEffect;
      }
      if (child.lastEffect) {
        if (returnFiber.lastEffect) {
          returnFiber.lastEffect.nextEffect = child.firstEffect;
        }
        returnFiber.lastEffect = child.lastEffect;
      }
    } while (child = child.sibling);
  }
  */

                  function bailoutOnAlreadyFinishedWork(
                    current,
                    workInProgress
                  ) {
                    cancelWorkTimer(workInProgress)

                    // TODO: We should ideally be able to bail out early if the children have no
                    // more work to do. However, since we don't have a separation of this
                    // Fiber's priority and its children yet - we don't know without doing lots
                    // of the same work we do anyway. Once we have that separation we can just
                    // bail out here if the children has no more work at this priority level.
                    // if (workInProgress.priorityOfChildren <= priorityLevel) {
                    //   // If there are side-effects in these children that have not yet been
                    //   // committed we need to ensure that they get properly transferred up.
                    //   if (current && current.child !== workInProgress.child) {
                    //     reuseChildrenEffects(workInProgress, child);
                    //   }
                    //   return null;
                    // }

                    cloneChildFibers(current, workInProgress)
                    return workInProgress.child
                  }

                  function bailoutOnLowPriority(current, workInProgress) {
                    cancelWorkTimer(workInProgress)

                    // TODO: Handle HostComponent tags here as well and call pushHostContext()?
                    // See PR 8590 discussion for context
                    switch (workInProgress.tag) {
                      case HostRoot:
                        pushHostRootContext(workInProgress)
                        break
                      case ClassComponent:
                        pushLegacyContextProvider(workInProgress)
                        break
                      case HostPortal:
                        pushHostContainer(
                          workInProgress,
                          workInProgress.stateNode.containerInfo
                        )
                        break
                      case ContextProvider:
                        pushProvider(workInProgress)
                        break
                    }
                    // TODO: What if this is currently in progress?
                    // How can that happen? How is this not being cloned?
                    return null
                  }

                  // TODO: Delete memoizeProps/State and move to reconcile/bailout instead
                  function memoizeProps(workInProgress, nextProps) {
                    workInProgress.memoizedProps = nextProps
                  }

                  function memoizeState(workInProgress, nextState) {
                    workInProgress.memoizedState = nextState
                    // Don't reset the updateQueue, in case there are pending updates. Resetting
                    // is handled by processUpdateQueue.
                  }

                  function beginWork(
                    current,
                    workInProgress,
                    renderExpirationTime
                  ) {
                    if (
                      workInProgress.expirationTime === NoWork ||
                      workInProgress.expirationTime > renderExpirationTime
                    ) {
                      return bailoutOnLowPriority(current, workInProgress)
                    }

                    switch (workInProgress.tag) {
                      case IndeterminateComponent:
                        return mountIndeterminateComponent(
                          current,
                          workInProgress,
                          renderExpirationTime
                        )
                      case FunctionalComponent:
                        return updateFunctionalComponent(
                          current,
                          workInProgress
                        )
                      case ClassComponent:
                        return updateClassComponent(
                          current,
                          workInProgress,
                          renderExpirationTime
                        )
                      case HostRoot:
                        return updateHostRoot(
                          current,
                          workInProgress,
                          renderExpirationTime
                        )
                      case HostComponent:
                        return updateHostComponent(
                          current,
                          workInProgress,
                          renderExpirationTime
                        )
                      case HostText:
                        return updateHostText(current, workInProgress)
                      case CallHandlerPhase:
                        // This is a restart. Reset the tag to the initial phase.
                        workInProgress.tag = CallComponent
                      // Intentionally fall through since this is now the same.
                      case CallComponent:
                        return updateCallComponent(
                          current,
                          workInProgress,
                          renderExpirationTime
                        )
                      case ReturnComponent:
                        // A return component is just a placeholder, we can just run through the
                        // next one immediately.
                        return null
                      case HostPortal:
                        return updatePortalComponent(
                          current,
                          workInProgress,
                          renderExpirationTime
                        )
                      case ForwardRef:
                        return updateForwardRef(current, workInProgress)
                      case Fragment:
                        return updateFragment(current, workInProgress)
                      case Mode:
                        return updateMode(current, workInProgress)
                      case ContextProvider:
                        return updateContextProvider(
                          current,
                          workInProgress,
                          renderExpirationTime
                        )
                      case ContextConsumer:
                        return updateContextConsumer(
                          current,
                          workInProgress,
                          renderExpirationTime
                        )
                      default:
                        invariant(
                          false,
                          'Unknown unit of work tag. This error is likely caused by a bug in React. Please file an issue.'
                        )
                    }
                  }

                  return {
                    beginWork: beginWork,
                  }
                }

                var ReactFiberCompleteWork = function (
                  config,
                  hostContext,
                  legacyContext,
                  newContext,
                  hydrationContext
                ) {
                  var createInstance = config.createInstance,
                    createTextInstance = config.createTextInstance,
                    appendInitialChild = config.appendInitialChild,
                    finalizeInitialChildren = config.finalizeInitialChildren,
                    prepareUpdate = config.prepareUpdate,
                    mutation = config.mutation,
                    persistence = config.persistence
                  var getRootHostContainer = hostContext.getRootHostContainer,
                    popHostContext = hostContext.popHostContext,
                    getHostContext = hostContext.getHostContext,
                    popHostContainer = hostContext.popHostContainer
                  var popLegacyContextProvider =
                      legacyContext.popContextProvider,
                    popTopLevelLegacyContextObject =
                      legacyContext.popTopLevelContextObject
                  var popProvider = newContext.popProvider
                  var prepareToHydrateHostInstance =
                      hydrationContext.prepareToHydrateHostInstance,
                    prepareToHydrateHostTextInstance =
                      hydrationContext.prepareToHydrateHostTextInstance,
                    popHydrationState = hydrationContext.popHydrationState

                  function markUpdate(workInProgress) {
                    // Tag the fiber with an update effect. This turns a Placement into
                    // a PlacementAndUpdate.
                    workInProgress.effectTag |= Update
                  }

                  function markRef(workInProgress) {
                    workInProgress.effectTag |= Ref
                  }

                  function appendAllReturns(returns, workInProgress) {
                    var node = workInProgress.stateNode
                    if (node) {
                      node['return'] = workInProgress
                    }
                    while (node !== null) {
                      if (
                        node.tag === HostComponent ||
                        node.tag === HostText ||
                        node.tag === HostPortal
                      ) {
                        invariant(
                          false,
                          'A call cannot have host component children.'
                        )
                      } else if (node.tag === ReturnComponent) {
                        returns.push(node.pendingProps.value)
                      } else if (node.child !== null) {
                        node.child['return'] = node
                        node = node.child
                        continue
                      }
                      while (node.sibling === null) {
                        if (
                          node['return'] === null ||
                          node['return'] === workInProgress
                        ) {
                          return
                        }
                        node = node['return']
                      }
                      node.sibling['return'] = node['return']
                      node = node.sibling
                    }
                  }

                  function moveCallToHandlerPhase(
                    current,
                    workInProgress,
                    renderExpirationTime
                  ) {
                    var props = workInProgress.memoizedProps
                    !props
                      ? invariant(
                          false,
                          'Should be resolved by now. This error is likely caused by a bug in React. Please file an issue.'
                        )
                      : void 0

                    // First step of the call has completed. Now we need to do the second.
                    // TODO: It would be nice to have a multi stage call represented by a
                    // single component, or at least tail call optimize nested ones. Currently
                    // that requires additional fields that we don't want to add to the fiber.
                    // So this requires nested handlers.
                    // Note: This doesn't mutate the alternate node. I don't think it needs to
                    // since this stage is reset for every pass.
                    workInProgress.tag = CallHandlerPhase

                    // Build up the returns.
                    // TODO: Compare this to a generator or opaque helpers like Children.
                    var returns = []
                    appendAllReturns(returns, workInProgress)
                    var fn = props.handler
                    var childProps = props.props
                    var nextChildren = fn(childProps, returns)

                    var currentFirstChild =
                      current !== null ? current.child : null
                    workInProgress.child = reconcileChildFibers(
                      workInProgress,
                      currentFirstChild,
                      nextChildren,
                      renderExpirationTime
                    )
                    return workInProgress.child
                  }

                  function appendAllChildren(parent, workInProgress) {
                    // We only have the top Fiber that was created but we need recurse down its
                    // children to find all the terminal nodes.
                    var node = workInProgress.child
                    while (node !== null) {
                      if (node.tag === HostComponent || node.tag === HostText) {
                        appendInitialChild(parent, node.stateNode)
                      } else if (node.tag === HostPortal) {
                        // If we have a portal child, then we don't want to traverse
                        // down its children. Instead, we'll get insertions from each child in
                        // the portal directly.
                      } else if (node.child !== null) {
                        node.child['return'] = node
                        node = node.child
                        continue
                      }
                      if (node === workInProgress) {
                        return
                      }
                      while (node.sibling === null) {
                        if (
                          node['return'] === null ||
                          node['return'] === workInProgress
                        ) {
                          return
                        }
                        node = node['return']
                      }
                      node.sibling['return'] = node['return']
                      node = node.sibling
                    }
                  }

                  var updateHostContainer = void 0
                  var updateHostComponent = void 0
                  var updateHostText = void 0
                  if (mutation) {
                    if (enableMutatingReconciler) {
                      // Mutation mode
                      updateHostContainer = function (workInProgress) {
                        // Noop
                      }
                      updateHostComponent = function (
                        current,
                        workInProgress,
                        updatePayload,
                        type,
                        oldProps,
                        newProps,
                        rootContainerInstance,
                        currentHostContext
                      ) {
                        // TODO: Type this specific to this type of component.
                        workInProgress.updateQueue = updatePayload
                        // If the update payload indicates that there is a change or if there
                        // is a new ref we mark this as an update. All the work is done in commitWork.
                        if (updatePayload) {
                          markUpdate(workInProgress)
                        }
                      }
                      updateHostText = function (
                        current,
                        workInProgress,
                        oldText,
                        newText
                      ) {
                        // If the text differs, mark it as an update. All the work in done in commitWork.
                        if (oldText !== newText) {
                          markUpdate(workInProgress)
                        }
                      }
                    } else {
                      invariant(false, 'Mutating reconciler is disabled.')
                    }
                  } else if (persistence) {
                    if (enablePersistentReconciler) {
                      // Persistent host tree mode
                      var cloneInstance = persistence.cloneInstance,
                        createContainerChildSet =
                          persistence.createContainerChildSet,
                        appendChildToContainerChildSet =
                          persistence.appendChildToContainerChildSet,
                        finalizeContainerChildren =
                          persistence.finalizeContainerChildren

                      // An unfortunate fork of appendAllChildren because we have two different parent types.

                      var appendAllChildrenToContainer = function (
                        containerChildSet,
                        workInProgress
                      ) {
                        // We only have the top Fiber that was created but we need recurse down its
                        // children to find all the terminal nodes.
                        var node = workInProgress.child
                        while (node !== null) {
                          if (
                            node.tag === HostComponent ||
                            node.tag === HostText
                          ) {
                            appendChildToContainerChildSet(
                              containerChildSet,
                              node.stateNode
                            )
                          } else if (node.tag === HostPortal) {
                            // If we have a portal child, then we don't want to traverse
                            // down its children. Instead, we'll get insertions from each child in
                            // the portal directly.
                          } else if (node.child !== null) {
                            node.child['return'] = node
                            node = node.child
                            continue
                          }
                          if (node === workInProgress) {
                            return
                          }
                          while (node.sibling === null) {
                            if (
                              node['return'] === null ||
                              node['return'] === workInProgress
                            ) {
                              return
                            }
                            node = node['return']
                          }
                          node.sibling['return'] = node['return']
                          node = node.sibling
                        }
                      }
                      updateHostContainer = function (workInProgress) {
                        var portalOrRoot = workInProgress.stateNode
                        var childrenUnchanged =
                          workInProgress.firstEffect === null
                        if (childrenUnchanged) {
                          // No changes, just reuse the existing instance.
                        } else {
                          var container = portalOrRoot.containerInfo
                          var newChildSet = createContainerChildSet(container)
                          // If children might have changed, we have to add them all to the set.
                          appendAllChildrenToContainer(
                            newChildSet,
                            workInProgress
                          )
                          portalOrRoot.pendingChildren = newChildSet
                          // Schedule an update on the container to swap out the container.
                          markUpdate(workInProgress)
                          finalizeContainerChildren(container, newChildSet)
                        }
                      }
                      updateHostComponent = function (
                        current,
                        workInProgress,
                        updatePayload,
                        type,
                        oldProps,
                        newProps,
                        rootContainerInstance,
                        currentHostContext
                      ) {
                        // If there are no effects associated with this node, then none of our children had any updates.
                        // This guarantees that we can reuse all of them.
                        var childrenUnchanged =
                          workInProgress.firstEffect === null
                        var currentInstance = current.stateNode
                        if (childrenUnchanged && updatePayload === null) {
                          // No changes, just reuse the existing instance.
                          // Note that this might release a previous clone.
                          workInProgress.stateNode = currentInstance
                        } else {
                          var recyclableInstance = workInProgress.stateNode
                          var newInstance = cloneInstance(
                            currentInstance,
                            updatePayload,
                            type,
                            oldProps,
                            newProps,
                            workInProgress,
                            childrenUnchanged,
                            recyclableInstance
                          )
                          if (
                            finalizeInitialChildren(
                              newInstance,
                              type,
                              newProps,
                              rootContainerInstance,
                              currentHostContext
                            )
                          ) {
                            markUpdate(workInProgress)
                          }
                          workInProgress.stateNode = newInstance
                          if (childrenUnchanged) {
                            // If there are no other effects in this tree, we need to flag this node as having one.
                            // Even though we're not going to use it for anything.
                            // Otherwise parents won't know that there are new children to propagate upwards.
                            markUpdate(workInProgress)
                          } else {
                            // If children might have changed, we have to add them all to the set.
                            appendAllChildren(newInstance, workInProgress)
                          }
                        }
                      }
                      updateHostText = function (
                        current,
                        workInProgress,
                        oldText,
                        newText
                      ) {
                        if (oldText !== newText) {
                          // If the text content differs, we'll create a new text instance for it.
                          var rootContainerInstance = getRootHostContainer()
                          var currentHostContext = getHostContext()
                          workInProgress.stateNode = createTextInstance(
                            newText,
                            rootContainerInstance,
                            currentHostContext,
                            workInProgress
                          )
                          // We'll have to mark it as having an effect, even though we won't use the effect for anything.
                          // This lets the parents know that at least one of their children has changed.
                          markUpdate(workInProgress)
                        }
                      }
                    } else {
                      invariant(false, 'Persistent reconciler is disabled.')
                    }
                  } else {
                    if (enableNoopReconciler) {
                      // No host operations
                      updateHostContainer = function (workInProgress) {
                        // Noop
                      }
                      updateHostComponent = function (
                        current,
                        workInProgress,
                        updatePayload,
                        type,
                        oldProps,
                        newProps,
                        rootContainerInstance,
                        currentHostContext
                      ) {
                        // Noop
                      }
                      updateHostText = function (
                        current,
                        workInProgress,
                        oldText,
                        newText
                      ) {
                        // Noop
                      }
                    } else {
                      invariant(false, 'Noop reconciler is disabled.')
                    }
                  }

                  function completeWork(
                    current,
                    workInProgress,
                    renderExpirationTime
                  ) {
                    var newProps = workInProgress.pendingProps
                    switch (workInProgress.tag) {
                      case FunctionalComponent:
                        return null
                      case ClassComponent: {
                        // We are leaving this subtree, so pop context if any.
                        popLegacyContextProvider(workInProgress)

                        // If this component caught an error, schedule an error log effect.
                        var instance = workInProgress.stateNode
                        var updateQueue = workInProgress.updateQueue
                        if (
                          updateQueue !== null &&
                          updateQueue.capturedValues !== null
                        ) {
                          workInProgress.effectTag &= ~DidCapture
                          if (
                            typeof instance.componentDidCatch === 'function'
                          ) {
                            workInProgress.effectTag |= ErrLog
                          } else {
                            // Normally we clear this in the commit phase, but since we did not
                            // schedule an effect, we need to reset it here.
                            updateQueue.capturedValues = null
                          }
                        }
                        return null
                      }
                      case HostRoot: {
                        popHostContainer(workInProgress)
                        popTopLevelLegacyContextObject(workInProgress)
                        var fiberRoot = workInProgress.stateNode
                        if (fiberRoot.pendingContext) {
                          fiberRoot.context = fiberRoot.pendingContext
                          fiberRoot.pendingContext = null
                        }
                        if (current === null || current.child === null) {
                          // If we hydrated, pop so that we can delete any remaining children
                          // that weren't hydrated.
                          popHydrationState(workInProgress)
                          // This resets the hacky state to fix isMounted before committing.
                          // TODO: Delete this when we delete isMounted and findDOMNode.
                          workInProgress.effectTag &= ~Placement
                        }
                        updateHostContainer(workInProgress)

                        var _updateQueue = workInProgress.updateQueue
                        if (
                          _updateQueue !== null &&
                          _updateQueue.capturedValues !== null
                        ) {
                          workInProgress.effectTag |= ErrLog
                        }
                        return null
                      }
                      case HostComponent: {
                        popHostContext(workInProgress)
                        var rootContainerInstance = getRootHostContainer()
                        var type = workInProgress.type
                        if (
                          current !== null &&
                          workInProgress.stateNode != null
                        ) {
                          // If we have an alternate, that means this is an update and we need to
                          // schedule a side-effect to do the updates.
                          var oldProps = current.memoizedProps
                          // If we get updated because one of our children updated, we don't
                          // have newProps so we'll have to reuse them.
                          // TODO: Split the update API as separate for the props vs. children.
                          // Even better would be if children weren't special cased at all tho.
                          var _instance = workInProgress.stateNode
                          var currentHostContext = getHostContext()
                          // TODO: Experiencing an error where oldProps is null. Suggests a host
                          // component is hitting the resume path. Figure out why. Possibly
                          // related to `hidden`.
                          var updatePayload = prepareUpdate(
                            _instance,
                            type,
                            oldProps,
                            newProps,
                            rootContainerInstance,
                            currentHostContext
                          )

                          updateHostComponent(
                            current,
                            workInProgress,
                            updatePayload,
                            type,
                            oldProps,
                            newProps,
                            rootContainerInstance,
                            currentHostContext
                          )

                          if (current.ref !== workInProgress.ref) {
                            markRef(workInProgress)
                          }
                        } else {
                          if (!newProps) {
                            !(workInProgress.stateNode !== null)
                              ? invariant(
                                  false,
                                  'We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.'
                                )
                              : void 0
                            // This can happen when we abort work.
                            return null
                          }

                          var _currentHostContext = getHostContext()
                          // TODO: Move createInstance to beginWork and keep it on a context
                          // "stack" as the parent. Then append children as we go in beginWork
                          // or completeWork depending on we want to add then top->down or
                          // bottom->up. Top->down is faster in IE11.
                          var wasHydrated = popHydrationState(workInProgress)
                          if (wasHydrated) {
                            // TODO: Move this and createInstance step into the beginPhase
                            // to consolidate.
                            if (
                              prepareToHydrateHostInstance(
                                workInProgress,
                                rootContainerInstance,
                                _currentHostContext
                              )
                            ) {
                              // If changes to the hydrated node needs to be applied at the
                              // commit-phase we mark this as such.
                              markUpdate(workInProgress)
                            }
                          } else {
                            var _instance2 = createInstance(
                              type,
                              newProps,
                              rootContainerInstance,
                              _currentHostContext,
                              workInProgress
                            )

                            appendAllChildren(_instance2, workInProgress)

                            // Certain renderers require commit-time effects for initial mount.
                            // (eg DOM renderer supports auto-focus for certain elements).
                            // Make sure such renderers get scheduled for later work.
                            if (
                              finalizeInitialChildren(
                                _instance2,
                                type,
                                newProps,
                                rootContainerInstance,
                                _currentHostContext
                              )
                            ) {
                              markUpdate(workInProgress)
                            }
                            workInProgress.stateNode = _instance2
                          }

                          if (workInProgress.ref !== null) {
                            // If there is a ref on a host node we need to schedule a callback
                            markRef(workInProgress)
                          }
                        }
                        return null
                      }
                      case HostText: {
                        var newText = newProps
                        if (current && workInProgress.stateNode != null) {
                          var oldText = current.memoizedProps
                          // If we have an alternate, that means this is an update and we need
                          // to schedule a side-effect to do the updates.
                          updateHostText(
                            current,
                            workInProgress,
                            oldText,
                            newText
                          )
                        } else {
                          if (typeof newText !== 'string') {
                            !(workInProgress.stateNode !== null)
                              ? invariant(
                                  false,
                                  'We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.'
                                )
                              : void 0
                            // This can happen when we abort work.
                            return null
                          }
                          var _rootContainerInstance = getRootHostContainer()
                          var _currentHostContext2 = getHostContext()
                          var _wasHydrated = popHydrationState(workInProgress)
                          if (_wasHydrated) {
                            if (
                              prepareToHydrateHostTextInstance(workInProgress)
                            ) {
                              markUpdate(workInProgress)
                            }
                          } else {
                            workInProgress.stateNode = createTextInstance(
                              newText,
                              _rootContainerInstance,
                              _currentHostContext2,
                              workInProgress
                            )
                          }
                        }
                        return null
                      }
                      case CallComponent:
                        return moveCallToHandlerPhase(
                          current,
                          workInProgress,
                          renderExpirationTime
                        )
                      case CallHandlerPhase:
                        // Reset the tag to now be a first phase call.
                        workInProgress.tag = CallComponent
                        return null
                      case ReturnComponent:
                        // Does nothing.
                        return null
                      case ForwardRef:
                        return null
                      case Fragment:
                        return null
                      case Mode:
                        return null
                      case HostPortal:
                        popHostContainer(workInProgress)
                        updateHostContainer(workInProgress)
                        return null
                      case ContextProvider:
                        // Pop provider fiber
                        popProvider(workInProgress)
                        return null
                      case ContextConsumer:
                        return null
                      // Error cases
                      case IndeterminateComponent:
                        invariant(
                          false,
                          'An indeterminate component should have become determinate before completing. This error is likely caused by a bug in React. Please file an issue.'
                        )
                      // eslint-disable-next-line no-fallthrough
                      default:
                        invariant(
                          false,
                          'Unknown unit of work tag. This error is likely caused by a bug in React. Please file an issue.'
                        )
                    }
                  }

                  return {
                    completeWork: completeWork,
                  }
                }

                function createCapturedValue(value, source) {
                  // If the value is an error, call this function immediately after it is thrown
                  // so the stack is accurate.
                  return {
                    value: value,
                    source: source,
                    stack: getStackAddendumByWorkInProgressFiber(source),
                  }
                }

                var ReactFiberUnwindWork = function (
                  hostContext,
                  legacyContext,
                  newContext,
                  scheduleWork,
                  isAlreadyFailedLegacyErrorBoundary
                ) {
                  var popHostContainer = hostContext.popHostContainer,
                    popHostContext = hostContext.popHostContext
                  var popLegacyContextProvider =
                      legacyContext.popContextProvider,
                    popTopLevelLegacyContextObject =
                      legacyContext.popTopLevelContextObject
                  var popProvider = newContext.popProvider

                  function throwException(returnFiber, sourceFiber, rawValue) {
                    // The source fiber did not complete.
                    sourceFiber.effectTag |= Incomplete
                    // Its effect list is no longer valid.
                    sourceFiber.firstEffect = sourceFiber.lastEffect = null

                    var value = createCapturedValue(rawValue, sourceFiber)

                    var workInProgress = returnFiber
                    do {
                      switch (workInProgress.tag) {
                        case HostRoot: {
                          // Uncaught error
                          var errorInfo = value
                          ensureUpdateQueues(workInProgress)
                          var updateQueue = workInProgress.updateQueue
                          updateQueue.capturedValues = [errorInfo]
                          workInProgress.effectTag |= ShouldCapture
                          return
                        }
                        case ClassComponent:
                          // Capture and retry
                          var ctor = workInProgress.type
                          var _instance = workInProgress.stateNode
                          if (
                            (workInProgress.effectTag & DidCapture) ===
                              NoEffect &&
                            ((typeof ctor.getDerivedStateFromCatch ===
                              'function' &&
                              enableGetDerivedStateFromCatch) ||
                              (_instance !== null &&
                                typeof _instance.componentDidCatch ===
                                  'function' &&
                                !isAlreadyFailedLegacyErrorBoundary(_instance)))
                          ) {
                            ensureUpdateQueues(workInProgress)
                            var _updateQueue = workInProgress.updateQueue
                            var capturedValues = _updateQueue.capturedValues
                            if (capturedValues === null) {
                              _updateQueue.capturedValues = [value]
                            } else {
                              capturedValues.push(value)
                            }
                            workInProgress.effectTag |= ShouldCapture
                            return
                          }
                          break
                        default:
                          break
                      }
                      workInProgress = workInProgress['return']
                    } while (workInProgress !== null)
                  }

                  function unwindWork(workInProgress) {
                    switch (workInProgress.tag) {
                      case ClassComponent: {
                        popLegacyContextProvider(workInProgress)
                        var effectTag = workInProgress.effectTag
                        if (effectTag & ShouldCapture) {
                          workInProgress.effectTag =
                            (effectTag & ~ShouldCapture) | DidCapture
                          return workInProgress
                        }
                        return null
                      }
                      case HostRoot: {
                        popHostContainer(workInProgress)
                        popTopLevelLegacyContextObject(workInProgress)
                        var _effectTag = workInProgress.effectTag
                        if (_effectTag & ShouldCapture) {
                          workInProgress.effectTag =
                            (_effectTag & ~ShouldCapture) | DidCapture
                          return workInProgress
                        }
                        return null
                      }
                      case HostComponent: {
                        popHostContext(workInProgress)
                        return null
                      }
                      case HostPortal:
                        popHostContainer(workInProgress)
                        return null
                      case ContextProvider:
                        popProvider(workInProgress)
                        return null
                      default:
                        return null
                    }
                  }

                  function unwindInterruptedWork(interruptedWork) {
                    switch (interruptedWork.tag) {
                      case ClassComponent: {
                        popLegacyContextProvider(interruptedWork)
                        break
                      }
                      case HostRoot: {
                        popHostContainer(interruptedWork)
                        popTopLevelLegacyContextObject(interruptedWork)
                        break
                      }
                      case HostComponent: {
                        popHostContext(interruptedWork)
                        break
                      }
                      case HostPortal:
                        popHostContainer(interruptedWork)
                        break
                      case ContextProvider:
                        popProvider(interruptedWork)
                        break
                      default:
                        break
                    }
                  }

                  return {
                    throwException: throwException,
                    unwindWork: unwindWork,
                    unwindInterruptedWork: unwindInterruptedWork,
                  }
                }

                // This module is forked in different environments.
                // By default, return `true` to log errors to the console.
                // Forks can return `false` if this isn't desirable.
                function showErrorDialog(capturedError) {
                  return true
                }

                function logCapturedError(capturedError) {
                  var logError = showErrorDialog(capturedError)

                  // Allow injected showErrorDialog() to prevent default console.error logging.
                  // This enables renderers like ReactNative to better manage redbox behavior.
                  if (logError === false) {
                    return
                  }

                  var error = capturedError.error
                  var suppressLogging = error && error.suppressReactErrorLogging
                  if (suppressLogging) {
                    return
                  }

                  {
                    var componentName = capturedError.componentName,
                      componentStack = capturedError.componentStack,
                      errorBoundaryName = capturedError.errorBoundaryName,
                      errorBoundaryFound = capturedError.errorBoundaryFound,
                      willRetry = capturedError.willRetry

                    var componentNameMessage = componentName
                      ? 'The above error occurred in the <' +
                        componentName +
                        '> component:'
                      : 'The above error occurred in one of your React components:'

                    var errorBoundaryMessage = void 0
                    // errorBoundaryFound check is sufficient; errorBoundaryName check is to satisfy Flow.
                    if (errorBoundaryFound && errorBoundaryName) {
                      if (willRetry) {
                        errorBoundaryMessage =
                          'React will try to recreate this component tree from scratch ' +
                          ('using the error boundary you provided, ' +
                            errorBoundaryName +
                            '.')
                      } else {
                        errorBoundaryMessage =
                          'This error was initially handled by the error boundary ' +
                          errorBoundaryName +
                          '.\n' +
                          'Recreating the tree from scratch failed so React will unmount the tree.'
                      }
                    } else {
                      errorBoundaryMessage =
                        'Consider adding an error boundary to your tree to customize error handling behavior.\n' +
                        'Visit https://fb.me/react-error-boundaries to learn more about error boundaries.'
                    }
                    var combinedMessage =
                      '' +
                      componentNameMessage +
                      componentStack +
                      '\n\n' +
                      ('' + errorBoundaryMessage)

                    // In development, we provide our own message with just the component stack.
                    // We don't include the original error message and JS stack because the browser
                    // has already printed it. Even if the application swallows the error, it is still
                    // displayed by the browser thanks to the DEV-only fake event trick in ReactErrorUtils.
                    console.error(combinedMessage)
                  }
                }

                var invokeGuardedCallback$3 =
                  ReactErrorUtils.invokeGuardedCallback
                var hasCaughtError$1 = ReactErrorUtils.hasCaughtError
                var clearCaughtError$1 = ReactErrorUtils.clearCaughtError

                var didWarnAboutUndefinedSnapshotBeforeUpdate = null
                {
                  didWarnAboutUndefinedSnapshotBeforeUpdate = new Set()
                }

                function logError(boundary, errorInfo) {
                  var source = errorInfo.source
                  var stack = errorInfo.stack
                  if (stack === null) {
                    stack = getStackAddendumByWorkInProgressFiber(source)
                  }

                  var capturedError = {
                    componentName:
                      source !== null ? getComponentName(source) : null,
                    componentStack: stack !== null ? stack : '',
                    error: errorInfo.value,
                    errorBoundary: null,
                    errorBoundaryName: null,
                    errorBoundaryFound: false,
                    willRetry: false,
                  }

                  if (boundary !== null && boundary.tag === ClassComponent) {
                    capturedError.errorBoundary = boundary.stateNode
                    capturedError.errorBoundaryName = getComponentName(boundary)
                    capturedError.errorBoundaryFound = true
                    capturedError.willRetry = true
                  }

                  try {
                    logCapturedError(capturedError)
                  } catch (e) {
                    // Prevent cycle if logCapturedError() throws.
                    // A cycle may still occur if logCapturedError renders a component that throws.
                    var suppressLogging = e && e.suppressReactErrorLogging
                    if (!suppressLogging) {
                      console.error(e)
                    }
                  }
                }

                var ReactFiberCommitWork = function (
                  config,
                  captureError,
                  scheduleWork,
                  computeExpirationForFiber,
                  markLegacyErrorBoundaryAsFailed,
                  recalculateCurrentTime
                ) {
                  var getPublicInstance = config.getPublicInstance,
                    mutation = config.mutation,
                    persistence = config.persistence

                  var callComponentWillUnmountWithTimer = function (
                    current,
                    instance
                  ) {
                    startPhaseTimer(current, 'componentWillUnmount')
                    instance.props = current.memoizedProps
                    instance.state = current.memoizedState
                    instance.componentWillUnmount()
                    stopPhaseTimer()
                  }

                  // Capture errors so they don't interrupt unmounting.
                  function safelyCallComponentWillUnmount(current, instance) {
                    {
                      invokeGuardedCallback$3(
                        null,
                        callComponentWillUnmountWithTimer,
                        null,
                        current,
                        instance
                      )
                      if (hasCaughtError$1()) {
                        var unmountError = clearCaughtError$1()
                        captureError(current, unmountError)
                      }
                    }
                  }

                  function safelyDetachRef(current) {
                    var ref = current.ref
                    if (ref !== null) {
                      if (typeof ref === 'function') {
                        {
                          invokeGuardedCallback$3(null, ref, null, null)
                          if (hasCaughtError$1()) {
                            var refError = clearCaughtError$1()
                            captureError(current, refError)
                          }
                        }
                      } else {
                        ref.current = null
                      }
                    }
                  }

                  function commitBeforeMutationLifeCycles(
                    current,
                    finishedWork
                  ) {
                    switch (finishedWork.tag) {
                      case ClassComponent: {
                        if (finishedWork.effectTag & Snapshot) {
                          if (current !== null) {
                            var prevProps = current.memoizedProps
                            var prevState = current.memoizedState
                            startPhaseTimer(
                              finishedWork,
                              'getSnapshotBeforeUpdate'
                            )
                            var _instance = finishedWork.stateNode
                            _instance.props = finishedWork.memoizedProps
                            _instance.state = finishedWork.memoizedState
                            var snapshot = _instance.getSnapshotBeforeUpdate(
                              prevProps,
                              prevState
                            )
                            {
                              var didWarnSet = didWarnAboutUndefinedSnapshotBeforeUpdate
                              if (
                                snapshot === undefined &&
                                !didWarnSet.has(finishedWork.type)
                              ) {
                                didWarnSet.add(finishedWork.type)
                                warning(
                                  false,
                                  '%s.getSnapshotBeforeUpdate(): A snapshot value (or null) ' +
                                    'must be returned. You have returned undefined.',
                                  getComponentName(finishedWork)
                                )
                              }
                            }
                            _instance.__reactInternalSnapshotBeforeUpdate = snapshot
                            stopPhaseTimer()
                          }
                        }
                        return
                      }
                      case HostRoot:
                      case HostComponent:
                      case HostText:
                      case HostPortal:
                        // Nothing to do for these component types
                        return
                      default: {
                        invariant(
                          false,
                          'This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.'
                        )
                      }
                    }
                  }

                  function commitLifeCycles(
                    finishedRoot,
                    current,
                    finishedWork,
                    currentTime,
                    committedExpirationTime
                  ) {
                    switch (finishedWork.tag) {
                      case ClassComponent: {
                        var _instance2 = finishedWork.stateNode
                        if (finishedWork.effectTag & Update) {
                          if (current === null) {
                            startPhaseTimer(finishedWork, 'componentDidMount')
                            _instance2.props = finishedWork.memoizedProps
                            _instance2.state = finishedWork.memoizedState
                            _instance2.componentDidMount()
                            stopPhaseTimer()
                          } else {
                            var prevProps = current.memoizedProps
                            var prevState = current.memoizedState
                            startPhaseTimer(finishedWork, 'componentDidUpdate')
                            _instance2.props = finishedWork.memoizedProps
                            _instance2.state = finishedWork.memoizedState
                            _instance2.componentDidUpdate(
                              prevProps,
                              prevState,
                              _instance2.__reactInternalSnapshotBeforeUpdate
                            )
                            stopPhaseTimer()
                          }
                        }
                        var updateQueue = finishedWork.updateQueue
                        if (updateQueue !== null) {
                          commitCallbacks(updateQueue, _instance2)
                        }
                        return
                      }
                      case HostRoot: {
                        var _updateQueue = finishedWork.updateQueue
                        if (_updateQueue !== null) {
                          var _instance3 = null
                          if (finishedWork.child !== null) {
                            switch (finishedWork.child.tag) {
                              case HostComponent:
                                _instance3 = getPublicInstance(
                                  finishedWork.child.stateNode
                                )
                                break
                              case ClassComponent:
                                _instance3 = finishedWork.child.stateNode
                                break
                            }
                          }
                          commitCallbacks(_updateQueue, _instance3)
                        }
                        return
                      }
                      case HostComponent: {
                        var _instance4 = finishedWork.stateNode

                        // Renderers may schedule work to be done after host components are mounted
                        // (eg DOM renderer may schedule auto-focus for inputs and form controls).
                        // These effects should only be committed when components are first mounted,
                        // aka when there is no current/alternate.
                        if (
                          current === null &&
                          finishedWork.effectTag & Update
                        ) {
                          var type = finishedWork.type
                          var props = finishedWork.memoizedProps
                          commitMount(_instance4, type, props, finishedWork)
                        }

                        return
                      }
                      case HostText: {
                        // We have no life-cycles associated with text.
                        return
                      }
                      case HostPortal: {
                        // We have no life-cycles associated with portals.
                        return
                      }
                      default: {
                        invariant(
                          false,
                          'This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.'
                        )
                      }
                    }
                  }

                  function commitErrorLogging(finishedWork, onUncaughtError) {
                    switch (finishedWork.tag) {
                      case ClassComponent:
                        {
                          var ctor = finishedWork.type
                          var _instance5 = finishedWork.stateNode
                          var updateQueue = finishedWork.updateQueue
                          !(
                            updateQueue !== null &&
                            updateQueue.capturedValues !== null
                          )
                            ? invariant(
                                false,
                                'An error logging effect should not have been scheduled if no errors were captured. This error is likely caused by a bug in React. Please file an issue.'
                              )
                            : void 0
                          var capturedErrors = updateQueue.capturedValues
                          updateQueue.capturedValues = null

                          if (
                            typeof ctor.getDerivedStateFromCatch !== 'function'
                          ) {
                            // To preserve the preexisting retry behavior of error boundaries,
                            // we keep track of which ones already failed during this batch.
                            // This gets reset before we yield back to the browser.
                            // TODO: Warn in strict mode if getDerivedStateFromCatch is
                            // not defined.
                            markLegacyErrorBoundaryAsFailed(_instance5)
                          }

                          _instance5.props = finishedWork.memoizedProps
                          _instance5.state = finishedWork.memoizedState
                          for (var i = 0; i < capturedErrors.length; i++) {
                            var errorInfo = capturedErrors[i]
                            var _error = errorInfo.value
                            var stack = errorInfo.stack
                            logError(finishedWork, errorInfo)
                            _instance5.componentDidCatch(_error, {
                              componentStack: stack !== null ? stack : '',
                            })
                          }
                        }
                        break
                      case HostRoot: {
                        var _updateQueue2 = finishedWork.updateQueue
                        !(
                          _updateQueue2 !== null &&
                          _updateQueue2.capturedValues !== null
                        )
                          ? invariant(
                              false,
                              'An error logging effect should not have been scheduled if no errors were captured. This error is likely caused by a bug in React. Please file an issue.'
                            )
                          : void 0
                        var _capturedErrors = _updateQueue2.capturedValues
                        _updateQueue2.capturedValues = null
                        for (var _i = 0; _i < _capturedErrors.length; _i++) {
                          var _errorInfo = _capturedErrors[_i]
                          logError(finishedWork, _errorInfo)
                          onUncaughtError(_errorInfo.value)
                        }
                        break
                      }
                      default:
                        invariant(
                          false,
                          'This unit of work tag cannot capture errors.  This error is likely caused by a bug in React. Please file an issue.'
                        )
                    }
                  }

                  function commitAttachRef(finishedWork) {
                    var ref = finishedWork.ref
                    if (ref !== null) {
                      var _instance6 = finishedWork.stateNode
                      var instanceToUse = void 0
                      switch (finishedWork.tag) {
                        case HostComponent:
                          instanceToUse = getPublicInstance(_instance6)
                          break
                        default:
                          instanceToUse = _instance6
                      }
                      if (typeof ref === 'function') {
                        ref(instanceToUse)
                      } else {
                        {
                          if (!ref.hasOwnProperty('current')) {
                            warning(
                              false,
                              'Unexpected ref object provided for %s. ' +
                                'Use either a ref-setter function or React.createRef().%s',
                              getComponentName(finishedWork),
                              getStackAddendumByWorkInProgressFiber(
                                finishedWork
                              )
                            )
                          }
                        }

                        ref.current = instanceToUse
                      }
                    }
                  }

                  function commitDetachRef(current) {
                    var currentRef = current.ref
                    if (currentRef !== null) {
                      if (typeof currentRef === 'function') {
                        currentRef(null)
                      } else {
                        currentRef.current = null
                      }
                    }
                  }

                  // User-originating errors (lifecycles and refs) should not interrupt
                  // deletion, so don't let them throw. Host-originating errors should
                  // interrupt deletion, so it's okay
                  function commitUnmount(current) {
                    if (typeof onCommitUnmount === 'function') {
                      onCommitUnmount(current)
                    }

                    switch (current.tag) {
                      case ClassComponent: {
                        safelyDetachRef(current)
                        var _instance7 = current.stateNode
                        if (
                          typeof _instance7.componentWillUnmount === 'function'
                        ) {
                          safelyCallComponentWillUnmount(current, _instance7)
                        }
                        return
                      }
                      case HostComponent: {
                        safelyDetachRef(current)
                        return
                      }
                      case CallComponent: {
                        commitNestedUnmounts(current.stateNode)
                        return
                      }
                      case HostPortal: {
                        // TODO: this is recursive.
                        // We are also not using this parent because
                        // the portal will get pushed immediately.
                        if (enableMutatingReconciler && mutation) {
                          unmountHostComponents(current)
                        } else if (enablePersistentReconciler && persistence) {
                          emptyPortalContainer(current)
                        }
                        return
                      }
                    }
                  }

                  function commitNestedUnmounts(root) {
                    // While we're inside a removed host node we don't want to call
                    // removeChild on the inner nodes because they're removed by the top
                    // call anyway. We also want to call componentWillUnmount on all
                    // composites before this host node is removed from the tree. Therefore
                    var node = root
                    while (true) {
                      commitUnmount(node)
                      // Visit children because they may contain more composite or host nodes.
                      // Skip portals because commitUnmount() currently visits them recursively.
                      if (
                        node.child !== null &&
                        // If we use mutation we drill down into portals using commitUnmount above.
                        // If we don't use mutation we drill down into portals here instead.
                        (!mutation || node.tag !== HostPortal)
                      ) {
                        node.child['return'] = node
                        node = node.child
                        continue
                      }
                      if (node === root) {
                        return
                      }
                      while (node.sibling === null) {
                        if (
                          node['return'] === null ||
                          node['return'] === root
                        ) {
                          return
                        }
                        node = node['return']
                      }
                      node.sibling['return'] = node['return']
                      node = node.sibling
                    }
                  }

                  function detachFiber(current) {
                    // Cut off the return pointers to disconnect it from the tree. Ideally, we
                    // should clear the child pointer of the parent alternate to let this
                    // get GC:ed but we don't know which for sure which parent is the current
                    // one so we'll settle for GC:ing the subtree of this child. This child
                    // itself will be GC:ed when the parent updates the next time.
                    current['return'] = null
                    current.child = null
                    if (current.alternate) {
                      current.alternate.child = null
                      current.alternate['return'] = null
                    }
                  }

                  var emptyPortalContainer = void 0

                  if (!mutation) {
                    var commitContainer = void 0
                    if (persistence) {
                      var replaceContainerChildren =
                          persistence.replaceContainerChildren,
                        createContainerChildSet =
                          persistence.createContainerChildSet

                      emptyPortalContainer = function (current) {
                        var portal = current.stateNode
                        var containerInfo = portal.containerInfo

                        var emptyChildSet = createContainerChildSet(
                          containerInfo
                        )
                        replaceContainerChildren(containerInfo, emptyChildSet)
                      }
                      commitContainer = function (finishedWork) {
                        switch (finishedWork.tag) {
                          case ClassComponent: {
                            return
                          }
                          case HostComponent: {
                            return
                          }
                          case HostText: {
                            return
                          }
                          case HostRoot:
                          case HostPortal: {
                            var portalOrRoot = finishedWork.stateNode
                            var containerInfo = portalOrRoot.containerInfo,
                              _pendingChildren = portalOrRoot.pendingChildren

                            replaceContainerChildren(
                              containerInfo,
                              _pendingChildren
                            )
                            return
                          }
                          default: {
                            invariant(
                              false,
                              'This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.'
                            )
                          }
                        }
                      }
                    } else {
                      commitContainer = function (finishedWork) {
                        // Noop
                      }
                    }
                    if (enablePersistentReconciler || enableNoopReconciler) {
                      return {
                        commitResetTextContent: function (finishedWork) {},
                        commitPlacement: function (finishedWork) {},
                        commitDeletion: function (current) {
                          // Detach refs and call componentWillUnmount() on the whole subtree.
                          commitNestedUnmounts(current)
                          detachFiber(current)
                        },
                        commitWork: function (current, finishedWork) {
                          commitContainer(finishedWork)
                        },

                        commitLifeCycles: commitLifeCycles,
                        commitBeforeMutationLifeCycles: commitBeforeMutationLifeCycles,
                        commitErrorLogging: commitErrorLogging,
                        commitAttachRef: commitAttachRef,
                        commitDetachRef: commitDetachRef,
                      }
                    } else if (persistence) {
                      invariant(false, 'Persistent reconciler is disabled.')
                    } else {
                      invariant(false, 'Noop reconciler is disabled.')
                    }
                  }
                  var commitMount = mutation.commitMount,
                    commitUpdate = mutation.commitUpdate,
                    resetTextContent = mutation.resetTextContent,
                    commitTextUpdate = mutation.commitTextUpdate,
                    appendChild = mutation.appendChild,
                    appendChildToContainer = mutation.appendChildToContainer,
                    insertBefore = mutation.insertBefore,
                    insertInContainerBefore = mutation.insertInContainerBefore,
                    removeChild = mutation.removeChild,
                    removeChildFromContainer = mutation.removeChildFromContainer

                  function getHostParentFiber(fiber) {
                    var parent = fiber['return']
                    while (parent !== null) {
                      if (isHostParent(parent)) {
                        return parent
                      }
                      parent = parent['return']
                    }
                    invariant(
                      false,
                      'Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.'
                    )
                  }

                  function isHostParent(fiber) {
                    return (
                      fiber.tag === HostComponent ||
                      fiber.tag === HostRoot ||
                      fiber.tag === HostPortal
                    )
                  }

                  function getHostSibling(fiber) {
                    // We're going to search forward into the tree until we find a sibling host
                    // node. Unfortunately, if multiple insertions are done in a row we have to
                    // search past them. This leads to exponential search for the next sibling.
                    var node = fiber
                    siblings: while (true) {
                      // If we didn't find anything, let's try the next sibling.
                      while (node.sibling === null) {
                        if (
                          node['return'] === null ||
                          isHostParent(node['return'])
                        ) {
                          // If we pop out of the root or hit the parent the fiber we are the
                          // last sibling.
                          return null
                        }
                        node = node['return']
                      }
                      node.sibling['return'] = node['return']
                      node = node.sibling
                      while (
                        node.tag !== HostComponent &&
                        node.tag !== HostText
                      ) {
                        // If it is not host node and, we might have a host node inside it.
                        // Try to search down until we find one.
                        if (node.effectTag & Placement) {
                          // If we don't have a child, try the siblings instead.
                          continue siblings
                        }
                        // If we don't have a child, try the siblings instead.
                        // We also skip portals because they are not part of this host tree.
                        if (node.child === null || node.tag === HostPortal) {
                          continue siblings
                        } else {
                          node.child['return'] = node
                          node = node.child
                        }
                      }
                      // Check if this host node is stable or about to be placed.
                      if (!(node.effectTag & Placement)) {
                        // Found it!
                        return node.stateNode
                      }
                    }
                  }

                  function commitPlacement(finishedWork) {
                    // Recursively insert all host nodes into the parent.
                    var parentFiber = getHostParentFiber(finishedWork)
                    var parent = void 0
                    var isContainer = void 0
                    switch (parentFiber.tag) {
                      case HostComponent:
                        parent = parentFiber.stateNode
                        isContainer = false
                        break
                      case HostRoot:
                        parent = parentFiber.stateNode.containerInfo
                        isContainer = true
                        break
                      case HostPortal:
                        parent = parentFiber.stateNode.containerInfo
                        isContainer = true
                        break
                      default:
                        invariant(
                          false,
                          'Invalid host parent fiber. This error is likely caused by a bug in React. Please file an issue.'
                        )
                    }
                    if (parentFiber.effectTag & ContentReset) {
                      // Reset the text content of the parent before doing any insertions
                      resetTextContent(parent)
                      // Clear ContentReset from the effect tag
                      parentFiber.effectTag &= ~ContentReset
                    }

                    var before = getHostSibling(finishedWork)
                    // We only have the top Fiber that was inserted but we need recurse down its
                    // children to find all the terminal nodes.
                    var node = finishedWork
                    while (true) {
                      if (node.tag === HostComponent || node.tag === HostText) {
                        if (before) {
                          if (isContainer) {
                            insertInContainerBefore(
                              parent,
                              node.stateNode,
                              before
                            )
                          } else {
                            insertBefore(parent, node.stateNode, before)
                          }
                        } else {
                          if (isContainer) {
                            appendChildToContainer(parent, node.stateNode)
                          } else {
                            appendChild(parent, node.stateNode)
                          }
                        }
                      } else if (node.tag === HostPortal) {
                        // If the insertion itself is a portal, then we don't want to traverse
                        // down its children. Instead, we'll get insertions from each child in
                        // the portal directly.
                      } else if (node.child !== null) {
                        node.child['return'] = node
                        node = node.child
                        continue
                      }
                      if (node === finishedWork) {
                        return
                      }
                      while (node.sibling === null) {
                        if (
                          node['return'] === null ||
                          node['return'] === finishedWork
                        ) {
                          return
                        }
                        node = node['return']
                      }
                      node.sibling['return'] = node['return']
                      node = node.sibling
                    }
                  }

                  function unmountHostComponents(current) {
                    // We only have the top Fiber that was inserted but we need recurse down its
                    var node = current

                    // Each iteration, currentParent is populated with node's host parent if not
                    // currentParentIsValid.
                    var currentParentIsValid = false
                    var currentParent = void 0
                    var currentParentIsContainer = void 0

                    while (true) {
                      if (!currentParentIsValid) {
                        var parent = node['return']
                        findParent: while (true) {
                          !(parent !== null)
                            ? invariant(
                                false,
                                'Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.'
                              )
                            : void 0
                          switch (parent.tag) {
                            case HostComponent:
                              currentParent = parent.stateNode
                              currentParentIsContainer = false
                              break findParent
                            case HostRoot:
                              currentParent = parent.stateNode.containerInfo
                              currentParentIsContainer = true
                              break findParent
                            case HostPortal:
                              currentParent = parent.stateNode.containerInfo
                              currentParentIsContainer = true
                              break findParent
                          }
                          parent = parent['return']
                        }
                        currentParentIsValid = true
                      }

                      if (node.tag === HostComponent || node.tag === HostText) {
                        commitNestedUnmounts(node)
                        // After all the children have unmounted, it is now safe to remove the
                        // node from the tree.
                        if (currentParentIsContainer) {
                          removeChildFromContainer(
                            currentParent,
                            node.stateNode
                          )
                        } else {
                          removeChild(currentParent, node.stateNode)
                        }
                        // Don't visit children because we already visited them.
                      } else if (node.tag === HostPortal) {
                        // When we go into a portal, it becomes the parent to remove from.
                        // We will reassign it back when we pop the portal on the way up.
                        currentParent = node.stateNode.containerInfo
                        // Visit children because portals might contain host components.
                        if (node.child !== null) {
                          node.child['return'] = node
                          node = node.child
                          continue
                        }
                      } else {
                        commitUnmount(node)
                        // Visit children because we may find more host components below.
                        if (node.child !== null) {
                          node.child['return'] = node
                          node = node.child
                          continue
                        }
                      }
                      if (node === current) {
                        return
                      }
                      while (node.sibling === null) {
                        if (
                          node['return'] === null ||
                          node['return'] === current
                        ) {
                          return
                        }
                        node = node['return']
                        if (node.tag === HostPortal) {
                          // When we go out of the portal, we need to restore the parent.
                          // Since we don't keep a stack of them, we will search for it.
                          currentParentIsValid = false
                        }
                      }
                      node.sibling['return'] = node['return']
                      node = node.sibling
                    }
                  }

                  function commitDeletion(current) {
                    // Recursively delete all host nodes from the parent.
                    // Detach refs and call componentWillUnmount() on the whole subtree.
                    unmountHostComponents(current)
                    detachFiber(current)
                  }

                  function commitWork(current, finishedWork) {
                    switch (finishedWork.tag) {
                      case ClassComponent: {
                        return
                      }
                      case HostComponent: {
                        var _instance8 = finishedWork.stateNode
                        if (_instance8 != null) {
                          // Commit the work prepared earlier.
                          var newProps = finishedWork.memoizedProps
                          // For hydration we reuse the update path but we treat the oldProps
                          // as the newProps. The updatePayload will contain the real change in
                          // this case.
                          var oldProps =
                            current !== null ? current.memoizedProps : newProps
                          var type = finishedWork.type
                          // TODO: Type the updateQueue to be specific to host components.
                          var updatePayload = finishedWork.updateQueue
                          finishedWork.updateQueue = null
                          if (updatePayload !== null) {
                            commitUpdate(
                              _instance8,
                              updatePayload,
                              type,
                              oldProps,
                              newProps,
                              finishedWork
                            )
                          }
                        }
                        return
                      }
                      case HostText: {
                        !(finishedWork.stateNode !== null)
                          ? invariant(
                              false,
                              'This should have a text node initialized. This error is likely caused by a bug in React. Please file an issue.'
                            )
                          : void 0
                        var textInstance = finishedWork.stateNode
                        var newText = finishedWork.memoizedProps
                        // For hydration we reuse the update path but we treat the oldProps
                        // as the newProps. The updatePayload will contain the real change in
                        // this case.
                        var oldText =
                          current !== null ? current.memoizedProps : newText
                        commitTextUpdate(textInstance, oldText, newText)
                        return
                      }
                      case HostRoot: {
                        return
                      }
                      default: {
                        invariant(
                          false,
                          'This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.'
                        )
                      }
                    }
                  }

                  function commitResetTextContent(current) {
                    resetTextContent(current.stateNode)
                  }

                  if (enableMutatingReconciler) {
                    return {
                      commitBeforeMutationLifeCycles: commitBeforeMutationLifeCycles,
                      commitResetTextContent: commitResetTextContent,
                      commitPlacement: commitPlacement,
                      commitDeletion: commitDeletion,
                      commitWork: commitWork,
                      commitLifeCycles: commitLifeCycles,
                      commitErrorLogging: commitErrorLogging,
                      commitAttachRef: commitAttachRef,
                      commitDetachRef: commitDetachRef,
                    }
                  } else {
                    invariant(false, 'Mutating reconciler is disabled.')
                  }
                }

                var NO_CONTEXT = {}

                var ReactFiberHostContext = function (config, stack) {
                  var getChildHostContext = config.getChildHostContext,
                    getRootHostContext = config.getRootHostContext
                  var createCursor = stack.createCursor,
                    push = stack.push,
                    pop = stack.pop

                  var contextStackCursor = createCursor(NO_CONTEXT)
                  var contextFiberStackCursor = createCursor(NO_CONTEXT)
                  var rootInstanceStackCursor = createCursor(NO_CONTEXT)

                  function requiredContext(c) {
                    !(c !== NO_CONTEXT)
                      ? invariant(
                          false,
                          'Expected host context to exist. This error is likely caused by a bug in React. Please file an issue.'
                        )
                      : void 0
                    return c
                  }

                  function getRootHostContainer() {
                    var rootInstance = requiredContext(
                      rootInstanceStackCursor.current
                    )
                    return rootInstance
                  }

                  function pushHostContainer(fiber, nextRootInstance) {
                    // Push current root instance onto the stack;
                    // This allows us to reset root when portals are popped.
                    push(rootInstanceStackCursor, nextRootInstance, fiber)
                    // Track the context and the Fiber that provided it.
                    // This enables us to pop only Fibers that provide unique contexts.
                    push(contextFiberStackCursor, fiber, fiber)

                    // Finally, we need to push the host context to the stack.
                    // However, we can't just call getRootHostContext() and push it because
                    // we'd have a different number of entries on the stack depending on
                    // whether getRootHostContext() throws somewhere in renderer code or not.
                    // So we push an empty value first. This lets us safely unwind on errors.
                    push(contextStackCursor, NO_CONTEXT, fiber)
                    var nextRootContext = getRootHostContext(nextRootInstance)
                    // Now that we know this function doesn't throw, replace it.
                    pop(contextStackCursor, fiber)
                    push(contextStackCursor, nextRootContext, fiber)
                  }

                  function popHostContainer(fiber) {
                    pop(contextStackCursor, fiber)
                    pop(contextFiberStackCursor, fiber)
                    pop(rootInstanceStackCursor, fiber)
                  }

                  function getHostContext() {
                    var context = requiredContext(contextStackCursor.current)
                    return context
                  }

                  function pushHostContext(fiber) {
                    var rootInstance = requiredContext(
                      rootInstanceStackCursor.current
                    )
                    var context = requiredContext(contextStackCursor.current)
                    var nextContext = getChildHostContext(
                      context,
                      fiber.type,
                      rootInstance
                    )

                    // Don't push this Fiber's context unless it's unique.
                    if (context === nextContext) {
                      return
                    }

                    // Track the context and the Fiber that provided it.
                    // This enables us to pop only Fibers that provide unique contexts.
                    push(contextFiberStackCursor, fiber, fiber)
                    push(contextStackCursor, nextContext, fiber)
                  }

                  function popHostContext(fiber) {
                    // Do not pop unless this Fiber provided the current context.
                    // pushHostContext() only pushes Fibers that provide unique contexts.
                    if (contextFiberStackCursor.current !== fiber) {
                      return
                    }

                    pop(contextStackCursor, fiber)
                    pop(contextFiberStackCursor, fiber)
                  }

                  return {
                    getHostContext: getHostContext,
                    getRootHostContainer: getRootHostContainer,
                    popHostContainer: popHostContainer,
                    popHostContext: popHostContext,
                    pushHostContainer: pushHostContainer,
                    pushHostContext: pushHostContext,
                  }
                }

                var ReactFiberHydrationContext = function (config) {
                  var shouldSetTextContent = config.shouldSetTextContent,
                    hydration = config.hydration

                  // If this doesn't have hydration mode.

                  if (!hydration) {
                    return {
                      enterHydrationState: function () {
                        return false
                      },
                      resetHydrationState: function () {},
                      tryToClaimNextHydratableInstance: function () {},
                      prepareToHydrateHostInstance: function () {
                        invariant(
                          false,
                          'Expected prepareToHydrateHostInstance() to never be called. This error is likely caused by a bug in React. Please file an issue.'
                        )
                      },
                      prepareToHydrateHostTextInstance: function () {
                        invariant(
                          false,
                          'Expected prepareToHydrateHostTextInstance() to never be called. This error is likely caused by a bug in React. Please file an issue.'
                        )
                      },
                      popHydrationState: function (fiber) {
                        return false
                      },
                    }
                  }

                  var canHydrateInstance = hydration.canHydrateInstance,
                    canHydrateTextInstance = hydration.canHydrateTextInstance,
                    getNextHydratableSibling =
                      hydration.getNextHydratableSibling,
                    getFirstHydratableChild = hydration.getFirstHydratableChild,
                    hydrateInstance = hydration.hydrateInstance,
                    hydrateTextInstance = hydration.hydrateTextInstance,
                    didNotMatchHydratedContainerTextInstance =
                      hydration.didNotMatchHydratedContainerTextInstance,
                    didNotMatchHydratedTextInstance =
                      hydration.didNotMatchHydratedTextInstance,
                    didNotHydrateContainerInstance =
                      hydration.didNotHydrateContainerInstance,
                    didNotHydrateInstance = hydration.didNotHydrateInstance,
                    didNotFindHydratableContainerInstance =
                      hydration.didNotFindHydratableContainerInstance,
                    didNotFindHydratableContainerTextInstance =
                      hydration.didNotFindHydratableContainerTextInstance,
                    didNotFindHydratableInstance =
                      hydration.didNotFindHydratableInstance,
                    didNotFindHydratableTextInstance =
                      hydration.didNotFindHydratableTextInstance

                  // The deepest Fiber on the stack involved in a hydration context.
                  // This may have been an insertion or a hydration.

                  var hydrationParentFiber = null
                  var nextHydratableInstance = null
                  var isHydrating = false

                  function enterHydrationState(fiber) {
                    var parentInstance = fiber.stateNode.containerInfo
                    nextHydratableInstance = getFirstHydratableChild(
                      parentInstance
                    )
                    hydrationParentFiber = fiber
                    isHydrating = true
                    return true
                  }

                  function deleteHydratableInstance(returnFiber, instance) {
                    {
                      switch (returnFiber.tag) {
                        case HostRoot:
                          didNotHydrateContainerInstance(
                            returnFiber.stateNode.containerInfo,
                            instance
                          )
                          break
                        case HostComponent:
                          didNotHydrateInstance(
                            returnFiber.type,
                            returnFiber.memoizedProps,
                            returnFiber.stateNode,
                            instance
                          )
                          break
                      }
                    }

                    var childToDelete = createFiberFromHostInstanceForDeletion()
                    childToDelete.stateNode = instance
                    childToDelete['return'] = returnFiber
                    childToDelete.effectTag = Deletion

                    // This might seem like it belongs on progressedFirstDeletion. However,
                    // these children are not part of the reconciliation list of children.
                    // Even if we abort and rereconcile the children, that will try to hydrate
                    // again and the nodes are still in the host tree so these will be
                    // recreated.
                    if (returnFiber.lastEffect !== null) {
                      returnFiber.lastEffect.nextEffect = childToDelete
                      returnFiber.lastEffect = childToDelete
                    } else {
                      returnFiber.firstEffect = returnFiber.lastEffect = childToDelete
                    }
                  }

                  function insertNonHydratedInstance(returnFiber, fiber) {
                    fiber.effectTag |= Placement
                    {
                      switch (returnFiber.tag) {
                        case HostRoot: {
                          var parentContainer =
                            returnFiber.stateNode.containerInfo
                          switch (fiber.tag) {
                            case HostComponent:
                              var type = fiber.type
                              var props = fiber.pendingProps
                              didNotFindHydratableContainerInstance(
                                parentContainer,
                                type,
                                props
                              )
                              break
                            case HostText:
                              var text = fiber.pendingProps
                              didNotFindHydratableContainerTextInstance(
                                parentContainer,
                                text
                              )
                              break
                          }
                          break
                        }
                        case HostComponent: {
                          var parentType = returnFiber.type
                          var parentProps = returnFiber.memoizedProps
                          var parentInstance = returnFiber.stateNode
                          switch (fiber.tag) {
                            case HostComponent:
                              var _type = fiber.type
                              var _props = fiber.pendingProps
                              didNotFindHydratableInstance(
                                parentType,
                                parentProps,
                                parentInstance,
                                _type,
                                _props
                              )
                              break
                            case HostText:
                              var _text = fiber.pendingProps
                              didNotFindHydratableTextInstance(
                                parentType,
                                parentProps,
                                parentInstance,
                                _text
                              )
                              break
                          }
                          break
                        }
                        default:
                          return
                      }
                    }
                  }

                  function tryHydrate(fiber, nextInstance) {
                    switch (fiber.tag) {
                      case HostComponent: {
                        var type = fiber.type
                        var props = fiber.pendingProps
                        var instance = canHydrateInstance(
                          nextInstance,
                          type,
                          props
                        )
                        if (instance !== null) {
                          fiber.stateNode = instance
                          return true
                        }
                        return false
                      }
                      case HostText: {
                        var text = fiber.pendingProps
                        var textInstance = canHydrateTextInstance(
                          nextInstance,
                          text
                        )
                        if (textInstance !== null) {
                          fiber.stateNode = textInstance
                          return true
                        }
                        return false
                      }
                      default:
                        return false
                    }
                  }

                  function tryToClaimNextHydratableInstance(fiber) {
                    if (!isHydrating) {
                      return
                    }
                    var nextInstance = nextHydratableInstance
                    if (!nextInstance) {
                      // Nothing to hydrate. Make it an insertion.
                      insertNonHydratedInstance(hydrationParentFiber, fiber)
                      isHydrating = false
                      hydrationParentFiber = fiber
                      return
                    }
                    if (!tryHydrate(fiber, nextInstance)) {
                      // If we can't hydrate this instance let's try the next one.
                      // We use this as a heuristic. It's based on intuition and not data so it
                      // might be flawed or unnecessary.
                      nextInstance = getNextHydratableSibling(nextInstance)
                      if (!nextInstance || !tryHydrate(fiber, nextInstance)) {
                        // Nothing to hydrate. Make it an insertion.
                        insertNonHydratedInstance(hydrationParentFiber, fiber)
                        isHydrating = false
                        hydrationParentFiber = fiber
                        return
                      }
                      // We matched the next one, we'll now assume that the first one was
                      // superfluous and we'll delete it. Since we can't eagerly delete it
                      // we'll have to schedule a deletion. To do that, this node needs a dummy
                      // fiber associated with it.
                      deleteHydratableInstance(
                        hydrationParentFiber,
                        nextHydratableInstance
                      )
                    }
                    hydrationParentFiber = fiber
                    nextHydratableInstance = getFirstHydratableChild(
                      nextInstance
                    )
                  }

                  function prepareToHydrateHostInstance(
                    fiber,
                    rootContainerInstance,
                    hostContext
                  ) {
                    var instance = fiber.stateNode
                    var updatePayload = hydrateInstance(
                      instance,
                      fiber.type,
                      fiber.memoizedProps,
                      rootContainerInstance,
                      hostContext,
                      fiber
                    )
                    // TODO: Type this specific to this type of component.
                    fiber.updateQueue = updatePayload
                    // If the update payload indicates that there is a change or if there
                    // is a new ref we mark this as an update.
                    if (updatePayload !== null) {
                      return true
                    }
                    return false
                  }

                  function prepareToHydrateHostTextInstance(fiber) {
                    var textInstance = fiber.stateNode
                    var textContent = fiber.memoizedProps
                    var shouldUpdate = hydrateTextInstance(
                      textInstance,
                      textContent,
                      fiber
                    )
                    {
                      if (shouldUpdate) {
                        // We assume that prepareToHydrateHostTextInstance is called in a context where the
                        // hydration parent is the parent host component of this host text.
                        var returnFiber = hydrationParentFiber
                        if (returnFiber !== null) {
                          switch (returnFiber.tag) {
                            case HostRoot: {
                              var parentContainer =
                                returnFiber.stateNode.containerInfo
                              didNotMatchHydratedContainerTextInstance(
                                parentContainer,
                                textInstance,
                                textContent
                              )
                              break
                            }
                            case HostComponent: {
                              var parentType = returnFiber.type
                              var parentProps = returnFiber.memoizedProps
                              var parentInstance = returnFiber.stateNode
                              didNotMatchHydratedTextInstance(
                                parentType,
                                parentProps,
                                parentInstance,
                                textInstance,
                                textContent
                              )
                              break
                            }
                          }
                        }
                      }
                    }
                    return shouldUpdate
                  }

                  function popToNextHostParent(fiber) {
                    var parent = fiber['return']
                    while (
                      parent !== null &&
                      parent.tag !== HostComponent &&
                      parent.tag !== HostRoot
                    ) {
                      parent = parent['return']
                    }
                    hydrationParentFiber = parent
                  }

                  function popHydrationState(fiber) {
                    if (fiber !== hydrationParentFiber) {
                      // We're deeper than the current hydration context, inside an inserted
                      // tree.
                      return false
                    }
                    if (!isHydrating) {
                      // If we're not currently hydrating but we're in a hydration context, then
                      // we were an insertion and now need to pop up reenter hydration of our
                      // siblings.
                      popToNextHostParent(fiber)
                      isHydrating = true
                      return false
                    }

                    var type = fiber.type

                    // If we have any remaining hydratable nodes, we need to delete them now.
                    // We only do this deeper than head and body since they tend to have random
                    // other nodes in them. We also ignore components with pure text content in
                    // side of them.
                    // TODO: Better heuristic.
                    if (
                      fiber.tag !== HostComponent ||
                      (type !== 'head' &&
                        type !== 'body' &&
                        !shouldSetTextContent(type, fiber.memoizedProps))
                    ) {
                      var nextInstance = nextHydratableInstance
                      while (nextInstance) {
                        deleteHydratableInstance(fiber, nextInstance)
                        nextInstance = getNextHydratableSibling(nextInstance)
                      }
                    }

                    popToNextHostParent(fiber)
                    nextHydratableInstance = hydrationParentFiber
                      ? getNextHydratableSibling(fiber.stateNode)
                      : null
                    return true
                  }

                  function resetHydrationState() {
                    hydrationParentFiber = null
                    nextHydratableInstance = null
                    isHydrating = false
                  }

                  return {
                    enterHydrationState: enterHydrationState,
                    resetHydrationState: resetHydrationState,
                    tryToClaimNextHydratableInstance: tryToClaimNextHydratableInstance,
                    prepareToHydrateHostInstance: prepareToHydrateHostInstance,
                    prepareToHydrateHostTextInstance: prepareToHydrateHostTextInstance,
                    popHydrationState: popHydrationState,
                  }
                }

                // This lets us hook into Fiber to debug what it's doing.
                // See https://github.com/facebook/react/pull/8033.
                // This is not part of the public API, not even for React DevTools.
                // You may only inject a debugTool if you work on React Fiber itself.
                var ReactFiberInstrumentation = {
                  debugTool: null,
                }

                var ReactFiberInstrumentation_1 = ReactFiberInstrumentation

                var warnedAboutMissingGetChildContext = void 0

                {
                  warnedAboutMissingGetChildContext = {}
                }

                var ReactFiberLegacyContext = function (stack) {
                  var createCursor = stack.createCursor,
                    push = stack.push,
                    pop = stack.pop

                  // A cursor to the current merged context object on the stack.

                  var contextStackCursor = createCursor(emptyObject)
                  // A cursor to a boolean indicating whether the context has changed.
                  var didPerformWorkStackCursor = createCursor(false)
                  // Keep track of the previous context object that was on the stack.
                  // We use this to get access to the parent context after we have already
                  // pushed the next context provider, and now need to merge their contexts.
                  var previousContext = emptyObject

                  function getUnmaskedContext(workInProgress) {
                    var hasOwnContext = isContextProvider(workInProgress)
                    if (hasOwnContext) {
                      // If the fiber is a context provider itself, when we read its context
                      // we have already pushed its own child context on the stack. A context
                      // provider should not "see" its own child context. Therefore we read the
                      // previous (parent) context instead for a context provider.
                      return previousContext
                    }
                    return contextStackCursor.current
                  }

                  function cacheContext(
                    workInProgress,
                    unmaskedContext,
                    maskedContext
                  ) {
                    var instance = workInProgress.stateNode
                    instance.__reactInternalMemoizedUnmaskedChildContext = unmaskedContext
                    instance.__reactInternalMemoizedMaskedChildContext = maskedContext
                  }

                  function getMaskedContext(workInProgress, unmaskedContext) {
                    var type = workInProgress.type
                    var contextTypes = type.contextTypes
                    if (!contextTypes) {
                      return emptyObject
                    }

                    // Avoid recreating masked context unless unmasked context has changed.
                    // Failing to do this will result in unnecessary calls to componentWillReceiveProps.
                    // This may trigger infinite loops if componentWillReceiveProps calls setState.
                    var instance = workInProgress.stateNode
                    if (
                      instance &&
                      instance.__reactInternalMemoizedUnmaskedChildContext ===
                        unmaskedContext
                    ) {
                      return instance.__reactInternalMemoizedMaskedChildContext
                    }

                    var context = {}
                    for (var key in contextTypes) {
                      context[key] = unmaskedContext[key]
                    }

                    {
                      var name = getComponentName(workInProgress) || 'Unknown'
                      checkPropTypes(
                        contextTypes,
                        context,
                        'context',
                        name,
                        ReactDebugCurrentFiber.getCurrentFiberStackAddendum
                      )
                    }

                    // Cache unmasked context so we can avoid recreating masked context unless necessary.
                    // Context is created before the class component is instantiated so check for instance.
                    if (instance) {
                      cacheContext(workInProgress, unmaskedContext, context)
                    }

                    return context
                  }

                  function hasContextChanged() {
                    return didPerformWorkStackCursor.current
                  }

                  function isContextConsumer(fiber) {
                    return (
                      fiber.tag === ClassComponent &&
                      fiber.type.contextTypes != null
                    )
                  }

                  function isContextProvider(fiber) {
                    return (
                      fiber.tag === ClassComponent &&
                      fiber.type.childContextTypes != null
                    )
                  }

                  function popContextProvider(fiber) {
                    if (!isContextProvider(fiber)) {
                      return
                    }

                    pop(didPerformWorkStackCursor, fiber)
                    pop(contextStackCursor, fiber)
                  }

                  function popTopLevelContextObject(fiber) {
                    pop(didPerformWorkStackCursor, fiber)
                    pop(contextStackCursor, fiber)
                  }

                  function pushTopLevelContextObject(
                    fiber,
                    context,
                    didChange
                  ) {
                    !(contextStackCursor.cursor == null)
                      ? invariant(
                          false,
                          'Unexpected context found on stack. This error is likely caused by a bug in React. Please file an issue.'
                        )
                      : void 0

                    push(contextStackCursor, context, fiber)
                    push(didPerformWorkStackCursor, didChange, fiber)
                  }

                  function processChildContext(fiber, parentContext) {
                    var instance = fiber.stateNode
                    var childContextTypes = fiber.type.childContextTypes

                    // TODO (bvaughn) Replace this behavior with an invariant() in the future.
                    // It has only been added in Fiber to match the (unintentional) behavior in Stack.
                    if (typeof instance.getChildContext !== 'function') {
                      {
                        var componentName = getComponentName(fiber) || 'Unknown'

                        if (!warnedAboutMissingGetChildContext[componentName]) {
                          warnedAboutMissingGetChildContext[
                            componentName
                          ] = true
                          warning(
                            false,
                            '%s.childContextTypes is specified but there is no getChildContext() method ' +
                              'on the instance. You can either define getChildContext() on %s or remove ' +
                              'childContextTypes from it.',
                            componentName,
                            componentName
                          )
                        }
                      }
                      return parentContext
                    }

                    var childContext = void 0
                    {
                      ReactDebugCurrentFiber.setCurrentPhase('getChildContext')
                    }
                    startPhaseTimer(fiber, 'getChildContext')
                    childContext = instance.getChildContext()
                    stopPhaseTimer()
                    {
                      ReactDebugCurrentFiber.setCurrentPhase(null)
                    }
                    for (var contextKey in childContext) {
                      !(contextKey in childContextTypes)
                        ? invariant(
                            false,
                            '%s.getChildContext(): key "%s" is not defined in childContextTypes.',
                            getComponentName(fiber) || 'Unknown',
                            contextKey
                          )
                        : void 0
                    }
                    {
                      var name = getComponentName(fiber) || 'Unknown'
                      checkPropTypes(
                        childContextTypes,
                        childContext,
                        'child context',
                        name,
                        // In practice, there is one case in which we won't get a stack. It's when
                        // somebody calls unstable_renderSubtreeIntoContainer() and we process
                        // context from the parent component instance. The stack will be missing
                        // because it's outside of the reconciliation, and so the pointer has not
                        // been set. This is rare and doesn't matter. We'll also remove that API.
                        ReactDebugCurrentFiber.getCurrentFiberStackAddendum
                      )
                    }

                    return _assign({}, parentContext, childContext)
                  }

                  function pushContextProvider(workInProgress) {
                    if (!isContextProvider(workInProgress)) {
                      return false
                    }

                    var instance = workInProgress.stateNode
                    // We push the context as early as possible to ensure stack integrity.
                    // If the instance does not exist yet, we will push null at first,
                    // and replace it on the stack later when invalidating the context.
                    var memoizedMergedChildContext =
                      (instance &&
                        instance.__reactInternalMemoizedMergedChildContext) ||
                      emptyObject

                    // Remember the parent context so we can merge with it later.
                    // Inherit the parent's did-perform-work value to avoid inadvertently blocking updates.
                    previousContext = contextStackCursor.current
                    push(
                      contextStackCursor,
                      memoizedMergedChildContext,
                      workInProgress
                    )
                    push(
                      didPerformWorkStackCursor,
                      didPerformWorkStackCursor.current,
                      workInProgress
                    )

                    return true
                  }

                  function invalidateContextProvider(
                    workInProgress,
                    didChange
                  ) {
                    var instance = workInProgress.stateNode
                    !instance
                      ? invariant(
                          false,
                          'Expected to have an instance by this point. This error is likely caused by a bug in React. Please file an issue.'
                        )
                      : void 0

                    if (didChange) {
                      // Merge parent and own context.
                      // Skip this if we're not updating due to sCU.
                      // This avoids unnecessarily recomputing memoized values.
                      var mergedContext = processChildContext(
                        workInProgress,
                        previousContext
                      )
                      instance.__reactInternalMemoizedMergedChildContext = mergedContext

                      // Replace the old (or empty) context with the new one.
                      // It is important to unwind the context in the reverse order.
                      pop(didPerformWorkStackCursor, workInProgress)
                      pop(contextStackCursor, workInProgress)
                      // Now push the new context and mark that it has changed.
                      push(contextStackCursor, mergedContext, workInProgress)
                      push(didPerformWorkStackCursor, didChange, workInProgress)
                    } else {
                      pop(didPerformWorkStackCursor, workInProgress)
                      push(didPerformWorkStackCursor, didChange, workInProgress)
                    }
                  }

                  function findCurrentUnmaskedContext(fiber) {
                    // Currently this is only used with renderSubtreeIntoContainer; not sure if it
                    // makes sense elsewhere
                    !(isFiberMounted(fiber) && fiber.tag === ClassComponent)
                      ? invariant(
                          false,
                          'Expected subtree parent to be a mounted class component. This error is likely caused by a bug in React. Please file an issue.'
                        )
                      : void 0

                    var node = fiber
                    while (node.tag !== HostRoot) {
                      if (isContextProvider(node)) {
                        return node.stateNode
                          .__reactInternalMemoizedMergedChildContext
                      }
                      var parent = node['return']
                      !parent
                        ? invariant(
                            false,
                            'Found unexpected detached subtree parent. This error is likely caused by a bug in React. Please file an issue.'
                          )
                        : void 0
                      node = parent
                    }
                    return node.stateNode.context
                  }

                  return {
                    getUnmaskedContext: getUnmaskedContext,
                    cacheContext: cacheContext,
                    getMaskedContext: getMaskedContext,
                    hasContextChanged: hasContextChanged,
                    isContextConsumer: isContextConsumer,
                    isContextProvider: isContextProvider,
                    popContextProvider: popContextProvider,
                    popTopLevelContextObject: popTopLevelContextObject,
                    pushTopLevelContextObject: pushTopLevelContextObject,
                    processChildContext: processChildContext,
                    pushContextProvider: pushContextProvider,
                    invalidateContextProvider: invalidateContextProvider,
                    findCurrentUnmaskedContext: findCurrentUnmaskedContext,
                  }
                }

                var ReactFiberNewContext = function (stack) {
                  var createCursor = stack.createCursor,
                    push = stack.push,
                    pop = stack.pop

                  var providerCursor = createCursor(null)
                  var valueCursor = createCursor(null)
                  var changedBitsCursor = createCursor(0)

                  var rendererSigil = void 0
                  {
                    // Use this to detect multiple renderers using the same context
                    rendererSigil = {}
                  }

                  function pushProvider(providerFiber) {
                    var context = providerFiber.type._context

                    push(changedBitsCursor, context._changedBits, providerFiber)
                    push(valueCursor, context._currentValue, providerFiber)
                    push(providerCursor, providerFiber, providerFiber)

                    context._currentValue = providerFiber.pendingProps.value
                    context._changedBits = providerFiber.stateNode

                    {
                      !(
                        context._currentRenderer === null ||
                        context._currentRenderer === rendererSigil
                      )
                        ? warning(
                            false,
                            'Detected multiple renderers concurrently rendering the ' +
                              'same context provider. This is currently unsupported.'
                          )
                        : void 0
                      context._currentRenderer = rendererSigil
                    }
                  }

                  function popProvider(providerFiber) {
                    var changedBits = changedBitsCursor.current
                    var currentValue = valueCursor.current

                    pop(providerCursor, providerFiber)
                    pop(valueCursor, providerFiber)
                    pop(changedBitsCursor, providerFiber)

                    var context = providerFiber.type._context
                    context._currentValue = currentValue
                    context._changedBits = changedBits
                  }

                  return {
                    pushProvider: pushProvider,
                    popProvider: popProvider,
                  }
                }

                var ReactFiberStack = function () {
                  var valueStack = []

                  var fiberStack = void 0

                  {
                    fiberStack = []
                  }

                  var index = -1

                  function createCursor(defaultValue) {
                    return {
                      current: defaultValue,
                    }
                  }

                  function isEmpty() {
                    return index === -1
                  }

                  function pop(cursor, fiber) {
                    if (index < 0) {
                      {
                        warning(false, 'Unexpected pop.')
                      }
                      return
                    }

                    {
                      if (fiber !== fiberStack[index]) {
                        warning(false, 'Unexpected Fiber popped.')
                      }
                    }

                    cursor.current = valueStack[index]

                    valueStack[index] = null

                    {
                      fiberStack[index] = null
                    }

                    index--
                  }

                  function push(cursor, value, fiber) {
                    index++

                    valueStack[index] = cursor.current

                    {
                      fiberStack[index] = fiber
                    }

                    cursor.current = value
                  }

                  function checkThatStackIsEmpty() {
                    {
                      if (index !== -1) {
                        warning(
                          false,
                          'Expected an empty stack. Something was not reset properly.'
                        )
                      }
                    }
                  }

                  function resetStackAfterFatalErrorInDev() {
                    {
                      index = -1
                      valueStack.length = 0
                      fiberStack.length = 0
                    }
                  }

                  return {
                    createCursor: createCursor,
                    isEmpty: isEmpty,
                    pop: pop,
                    push: push,
                    checkThatStackIsEmpty: checkThatStackIsEmpty,
                    resetStackAfterFatalErrorInDev: resetStackAfterFatalErrorInDev,
                  }
                }

                var invokeGuardedCallback$2 =
                  ReactErrorUtils.invokeGuardedCallback
                var hasCaughtError = ReactErrorUtils.hasCaughtError
                var clearCaughtError = ReactErrorUtils.clearCaughtError

                var didWarnAboutStateTransition = void 0
                var didWarnSetStateChildContext = void 0
                var warnAboutUpdateOnUnmounted = void 0
                var warnAboutInvalidUpdates = void 0

                {
                  didWarnAboutStateTransition = false
                  didWarnSetStateChildContext = false
                  var didWarnStateUpdateForUnmountedComponent = {}

                  warnAboutUpdateOnUnmounted = function (fiber) {
                    // We show the whole stack but dedupe on the top component's name because
                    // the problematic code almost always lies inside that component.
                    var componentName = getComponentName(fiber) || 'ReactClass'
                    if (
                      didWarnStateUpdateForUnmountedComponent[componentName]
                    ) {
                      return
                    }
                    warning(
                      false,
                      "Can't call setState (or forceUpdate) on an unmounted component. This " +
                        'is a no-op, but it indicates a memory leak in your application. To ' +
                        'fix, cancel all subscriptions and asynchronous tasks in the ' +
                        'componentWillUnmount method.%s',
                      getStackAddendumByWorkInProgressFiber(fiber)
                    )
                    didWarnStateUpdateForUnmountedComponent[
                      componentName
                    ] = true
                  }

                  warnAboutInvalidUpdates = function (instance) {
                    switch (ReactDebugCurrentFiber.phase) {
                      case 'getChildContext':
                        if (didWarnSetStateChildContext) {
                          return
                        }
                        warning(
                          false,
                          'setState(...): Cannot call setState() inside getChildContext()'
                        )
                        didWarnSetStateChildContext = true
                        break
                      case 'render':
                        if (didWarnAboutStateTransition) {
                          return
                        }
                        warning(
                          false,
                          'Cannot update during an existing state transition (such as within ' +
                            "`render` or another component's constructor). Render methods should " +
                            'be a pure function of props and state; constructor side-effects are ' +
                            'an anti-pattern, but can be moved to `componentWillMount`.'
                        )
                        didWarnAboutStateTransition = true
                        break
                    }
                  }
                }

                var ReactFiberScheduler = function (config) {
                  var stack = ReactFiberStack()
                  var hostContext = ReactFiberHostContext(config, stack)
                  var legacyContext = ReactFiberLegacyContext(stack)
                  var newContext = ReactFiberNewContext(stack)
                  var popHostContext = hostContext.popHostContext,
                    popHostContainer = hostContext.popHostContainer
                  var popTopLevelLegacyContextObject =
                      legacyContext.popTopLevelContextObject,
                    popLegacyContextProvider = legacyContext.popContextProvider
                  var popProvider = newContext.popProvider

                  var hydrationContext = ReactFiberHydrationContext(config)

                  var _ReactFiberBeginWork = ReactFiberBeginWork(
                      config,
                      hostContext,
                      legacyContext,
                      newContext,
                      hydrationContext,
                      scheduleWork,
                      computeExpirationForFiber
                    ),
                    beginWork = _ReactFiberBeginWork.beginWork

                  var _ReactFiberCompleteWo = ReactFiberCompleteWork(
                      config,
                      hostContext,
                      legacyContext,
                      newContext,
                      hydrationContext
                    ),
                    completeWork = _ReactFiberCompleteWo.completeWork

                  var _ReactFiberUnwindWork = ReactFiberUnwindWork(
                      hostContext,
                      legacyContext,
                      newContext,
                      scheduleWork,
                      isAlreadyFailedLegacyErrorBoundary
                    ),
                    throwException = _ReactFiberUnwindWork.throwException,
                    unwindWork = _ReactFiberUnwindWork.unwindWork,
                    unwindInterruptedWork =
                      _ReactFiberUnwindWork.unwindInterruptedWork

                  var _ReactFiberCommitWork = ReactFiberCommitWork(
                      config,
                      onCommitPhaseError,
                      scheduleWork,
                      computeExpirationForFiber,
                      markLegacyErrorBoundaryAsFailed,
                      recalculateCurrentTime
                    ),
                    commitBeforeMutationLifeCycles =
                      _ReactFiberCommitWork.commitBeforeMutationLifeCycles,
                    commitResetTextContent =
                      _ReactFiberCommitWork.commitResetTextContent,
                    commitPlacement = _ReactFiberCommitWork.commitPlacement,
                    commitDeletion = _ReactFiberCommitWork.commitDeletion,
                    commitWork = _ReactFiberCommitWork.commitWork,
                    commitLifeCycles = _ReactFiberCommitWork.commitLifeCycles,
                    commitErrorLogging =
                      _ReactFiberCommitWork.commitErrorLogging,
                    commitAttachRef = _ReactFiberCommitWork.commitAttachRef,
                    commitDetachRef = _ReactFiberCommitWork.commitDetachRef

                  var now = config.now,
                    scheduleDeferredCallback = config.scheduleDeferredCallback,
                    cancelDeferredCallback = config.cancelDeferredCallback,
                    prepareForCommit = config.prepareForCommit,
                    resetAfterCommit = config.resetAfterCommit

                  // Represents the current time in ms.

                  var originalStartTimeMs = now()
                  var mostRecentCurrentTime = msToExpirationTime(0)
                  var mostRecentCurrentTimeMs = originalStartTimeMs

                  // Used to ensure computeUniqueAsyncExpiration is monotonically increases.
                  var lastUniqueAsyncExpiration = 0

                  // Represents the expiration time that incoming updates should use. (If this
                  // is NoWork, use the default strategy: async updates in async mode, sync
                  // updates in sync mode.)
                  var expirationContext = NoWork

                  var isWorking = false

                  // The next work in progress fiber that we're currently working on.
                  var nextUnitOfWork = null
                  var nextRoot = null
                  // The time at which we're currently rendering work.
                  var nextRenderExpirationTime = NoWork

                  // The next fiber with an effect that we're currently committing.
                  var nextEffect = null

                  var isCommitting = false

                  var isRootReadyForCommit = false

                  var legacyErrorBoundariesThatAlreadyFailed = null

                  // Used for performance tracking.
                  var interruptedBy = null

                  var stashedWorkInProgressProperties = void 0
                  var replayUnitOfWork = void 0
                  var isReplayingFailedUnitOfWork = void 0
                  var originalReplayError = void 0
                  var rethrowOriginalError = void 0
                  if (true && replayFailedUnitOfWorkWithInvokeGuardedCallback) {
                    stashedWorkInProgressProperties = null
                    isReplayingFailedUnitOfWork = false
                    originalReplayError = null
                    replayUnitOfWork = function (
                      failedUnitOfWork,
                      error,
                      isAsync
                    ) {
                      // Restore the original state of the work-in-progress
                      assignFiberPropertiesInDEV(
                        failedUnitOfWork,
                        stashedWorkInProgressProperties
                      )
                      switch (failedUnitOfWork.tag) {
                        case HostRoot:
                          popHostContainer(failedUnitOfWork)
                          popTopLevelLegacyContextObject(failedUnitOfWork)
                          break
                        case HostComponent:
                          popHostContext(failedUnitOfWork)
                          break
                        case ClassComponent:
                          popLegacyContextProvider(failedUnitOfWork)
                          break
                        case HostPortal:
                          popHostContainer(failedUnitOfWork)
                          break
                        case ContextProvider:
                          popProvider(failedUnitOfWork)
                          break
                      }
                      // Replay the begin phase.
                      isReplayingFailedUnitOfWork = true
                      originalReplayError = error
                      invokeGuardedCallback$2(null, workLoop, null, isAsync)
                      isReplayingFailedUnitOfWork = false
                      originalReplayError = null
                      if (hasCaughtError()) {
                        clearCaughtError()
                      } else {
                        // If the begin phase did not fail the second time, set this pointer
                        // back to the original value.
                        nextUnitOfWork = failedUnitOfWork
                      }
                    }
                    rethrowOriginalError = function () {
                      throw originalReplayError
                    }
                  }

                  function resetStack() {
                    if (nextUnitOfWork !== null) {
                      var interruptedWork = nextUnitOfWork['return']
                      while (interruptedWork !== null) {
                        unwindInterruptedWork(interruptedWork)
                        interruptedWork = interruptedWork['return']
                      }
                    }

                    {
                      ReactStrictModeWarnings.discardPendingWarnings()
                      stack.checkThatStackIsEmpty()
                    }

                    nextRoot = null
                    nextRenderExpirationTime = NoWork
                    nextUnitOfWork = null

                    isRootReadyForCommit = false
                  }

                  function commitAllHostEffects() {
                    while (nextEffect !== null) {
                      {
                        ReactDebugCurrentFiber.setCurrentFiber(nextEffect)
                      }
                      recordEffect()

                      var effectTag = nextEffect.effectTag

                      if (effectTag & ContentReset) {
                        commitResetTextContent(nextEffect)
                      }

                      if (effectTag & Ref) {
                        var current = nextEffect.alternate
                        if (current !== null) {
                          commitDetachRef(current)
                        }
                      }

                      // The following switch statement is only concerned about placement,
                      // updates, and deletions. To avoid needing to add a case for every
                      // possible bitmap value, we remove the secondary effects from the
                      // effect tag and switch on that value.
                      var primaryEffectTag =
                        effectTag & (Placement | Update | Deletion)
                      switch (primaryEffectTag) {
                        case Placement: {
                          commitPlacement(nextEffect)
                          // Clear the "placement" from effect tag so that we know that this is inserted, before
                          // any life-cycles like componentDidMount gets called.
                          // TODO: findDOMNode doesn't rely on this any more but isMounted
                          // does and isMounted is deprecated anyway so we should be able
                          // to kill this.
                          nextEffect.effectTag &= ~Placement
                          break
                        }
                        case PlacementAndUpdate: {
                          // Placement
                          commitPlacement(nextEffect)
                          // Clear the "placement" from effect tag so that we know that this is inserted, before
                          // any life-cycles like componentDidMount gets called.
                          nextEffect.effectTag &= ~Placement

                          // Update
                          var _current = nextEffect.alternate
                          commitWork(_current, nextEffect)
                          break
                        }
                        case Update: {
                          var _current2 = nextEffect.alternate
                          commitWork(_current2, nextEffect)
                          break
                        }
                        case Deletion: {
                          commitDeletion(nextEffect)
                          break
                        }
                      }
                      nextEffect = nextEffect.nextEffect
                    }

                    {
                      ReactDebugCurrentFiber.resetCurrentFiber()
                    }
                  }

                  function commitBeforeMutationLifecycles() {
                    while (nextEffect !== null) {
                      var effectTag = nextEffect.effectTag

                      if (effectTag & Snapshot) {
                        recordEffect()
                        var current = nextEffect.alternate
                        commitBeforeMutationLifeCycles(current, nextEffect)
                      }

                      // Don't cleanup effects yet;
                      // This will be done by commitAllLifeCycles()
                      nextEffect = nextEffect.nextEffect
                    }
                  }

                  function commitAllLifeCycles(
                    finishedRoot,
                    currentTime,
                    committedExpirationTime
                  ) {
                    {
                      ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings()

                      if (warnAboutDeprecatedLifecycles) {
                        ReactStrictModeWarnings.flushPendingDeprecationWarnings()
                      }
                    }
                    while (nextEffect !== null) {
                      var effectTag = nextEffect.effectTag

                      if (effectTag & (Update | Callback)) {
                        recordEffect()
                        var current = nextEffect.alternate
                        commitLifeCycles(
                          finishedRoot,
                          current,
                          nextEffect,
                          currentTime,
                          committedExpirationTime
                        )
                      }

                      if (effectTag & ErrLog) {
                        commitErrorLogging(nextEffect, onUncaughtError)
                      }

                      if (effectTag & Ref) {
                        recordEffect()
                        commitAttachRef(nextEffect)
                      }

                      var next = nextEffect.nextEffect
                      // Ensure that we clean these up so that we don't accidentally keep them.
                      // I'm not actually sure this matters because we can't reset firstEffect
                      // and lastEffect since they're on every node, not just the effectful
                      // ones. So we have to clean everything as we reuse nodes anyway.
                      nextEffect.nextEffect = null
                      // Ensure that we reset the effectTag here so that we can rely on effect
                      // tags to reason about the current life-cycle.
                      nextEffect = next
                    }
                  }

                  function isAlreadyFailedLegacyErrorBoundary(instance) {
                    return (
                      legacyErrorBoundariesThatAlreadyFailed !== null &&
                      legacyErrorBoundariesThatAlreadyFailed.has(instance)
                    )
                  }

                  function markLegacyErrorBoundaryAsFailed(instance) {
                    if (legacyErrorBoundariesThatAlreadyFailed === null) {
                      legacyErrorBoundariesThatAlreadyFailed = new Set([
                        instance,
                      ])
                    } else {
                      legacyErrorBoundariesThatAlreadyFailed.add(instance)
                    }
                  }

                  function commitRoot(finishedWork) {
                    isWorking = true
                    isCommitting = true
                    startCommitTimer()

                    var root = finishedWork.stateNode
                    !(root.current !== finishedWork)
                      ? invariant(
                          false,
                          'Cannot commit the same tree as before. This is probably a bug related to the return field. This error is likely caused by a bug in React. Please file an issue.'
                        )
                      : void 0
                    var committedExpirationTime =
                      root.pendingCommitExpirationTime
                    !(committedExpirationTime !== NoWork)
                      ? invariant(
                          false,
                          'Cannot commit an incomplete root. This error is likely caused by a bug in React. Please file an issue.'
                        )
                      : void 0
                    root.pendingCommitExpirationTime = NoWork

                    var currentTime = recalculateCurrentTime()

                    // Reset this to null before calling lifecycles
                    ReactCurrentOwner.current = null

                    var firstEffect = void 0
                    if (finishedWork.effectTag > PerformedWork) {
                      // A fiber's effect list consists only of its children, not itself. So if
                      // the root has an effect, we need to add it to the end of the list. The
                      // resulting list is the set that would belong to the root's parent, if
                      // it had one; that is, all the effects in the tree including the root.
                      if (finishedWork.lastEffect !== null) {
                        finishedWork.lastEffect.nextEffect = finishedWork
                        firstEffect = finishedWork.firstEffect
                      } else {
                        firstEffect = finishedWork
                      }
                    } else {
                      // There is no effect on the root.
                      firstEffect = finishedWork.firstEffect
                    }

                    prepareForCommit(root.containerInfo)

                    // Invoke instances of getSnapshotBeforeUpdate before mutation.
                    nextEffect = firstEffect
                    startCommitSnapshotEffectsTimer()
                    while (nextEffect !== null) {
                      var didError = false
                      var error = void 0
                      {
                        invokeGuardedCallback$2(
                          null,
                          commitBeforeMutationLifecycles,
                          null
                        )
                        if (hasCaughtError()) {
                          didError = true
                          error = clearCaughtError()
                        }
                      }
                      if (didError) {
                        !(nextEffect !== null)
                          ? invariant(
                              false,
                              'Should have next effect. This error is likely caused by a bug in React. Please file an issue.'
                            )
                          : void 0
                        onCommitPhaseError(nextEffect, error)
                        // Clean-up
                        if (nextEffect !== null) {
                          nextEffect = nextEffect.nextEffect
                        }
                      }
                    }
                    stopCommitSnapshotEffectsTimer()

                    // Commit all the side-effects within a tree. We'll do this in two passes.
                    // The first pass performs all the host insertions, updates, deletions and
                    // ref unmounts.
                    nextEffect = firstEffect
                    startCommitHostEffectsTimer()
                    while (nextEffect !== null) {
                      var _didError = false
                      var _error = void 0
                      {
                        invokeGuardedCallback$2(
                          null,
                          commitAllHostEffects,
                          null
                        )
                        if (hasCaughtError()) {
                          _didError = true
                          _error = clearCaughtError()
                        }
                      }
                      if (_didError) {
                        !(nextEffect !== null)
                          ? invariant(
                              false,
                              'Should have next effect. This error is likely caused by a bug in React. Please file an issue.'
                            )
                          : void 0
                        onCommitPhaseError(nextEffect, _error)
                        // Clean-up
                        if (nextEffect !== null) {
                          nextEffect = nextEffect.nextEffect
                        }
                      }
                    }
                    stopCommitHostEffectsTimer()

                    resetAfterCommit(root.containerInfo)

                    // The work-in-progress tree is now the current tree. This must come after
                    // the first pass of the commit phase, so that the previous tree is still
                    // current during componentWillUnmount, but before the second pass, so that
                    // the finished work is current during componentDidMount/Update.
                    root.current = finishedWork

                    // In the second pass we'll perform all life-cycles and ref callbacks.
                    // Life-cycles happen as a separate pass so that all placements, updates,
                    // and deletions in the entire tree have already been invoked.
                    // This pass also triggers any renderer-specific initial effects.
                    nextEffect = firstEffect
                    startCommitLifeCyclesTimer()
                    while (nextEffect !== null) {
                      var _didError2 = false
                      var _error2 = void 0
                      {
                        invokeGuardedCallback$2(
                          null,
                          commitAllLifeCycles,
                          null,
                          root,
                          currentTime,
                          committedExpirationTime
                        )
                        if (hasCaughtError()) {
                          _didError2 = true
                          _error2 = clearCaughtError()
                        }
                      }
                      if (_didError2) {
                        !(nextEffect !== null)
                          ? invariant(
                              false,
                              'Should have next effect. This error is likely caused by a bug in React. Please file an issue.'
                            )
                          : void 0
                        onCommitPhaseError(nextEffect, _error2)
                        if (nextEffect !== null) {
                          nextEffect = nextEffect.nextEffect
                        }
                      }
                    }

                    isCommitting = false
                    isWorking = false
                    stopCommitLifeCyclesTimer()
                    stopCommitTimer()
                    if (typeof onCommitRoot === 'function') {
                      onCommitRoot(finishedWork.stateNode)
                    }
                    if (true && ReactFiberInstrumentation_1.debugTool) {
                      ReactFiberInstrumentation_1.debugTool.onCommitWork(
                        finishedWork
                      )
                    }

                    var remainingTime = root.current.expirationTime
                    if (remainingTime === NoWork) {
                      // If there's no remaining work, we can clear the set of already failed
                      // error boundaries.
                      legacyErrorBoundariesThatAlreadyFailed = null
                    }
                    return remainingTime
                  }

                  function resetExpirationTime(workInProgress, renderTime) {
                    if (
                      renderTime !== Never &&
                      workInProgress.expirationTime === Never
                    ) {
                      // The children of this component are hidden. Don't bubble their
                      // expiration times.
                      return
                    }

                    // Check for pending updates.
                    var newExpirationTime = getUpdateExpirationTime(
                      workInProgress
                    )

                    // TODO: Calls need to visit stateNode

                    // Bubble up the earliest expiration time.
                    var child = workInProgress.child
                    while (child !== null) {
                      if (
                        child.expirationTime !== NoWork &&
                        (newExpirationTime === NoWork ||
                          newExpirationTime > child.expirationTime)
                      ) {
                        newExpirationTime = child.expirationTime
                      }
                      child = child.sibling
                    }
                    workInProgress.expirationTime = newExpirationTime
                  }

                  function completeUnitOfWork(workInProgress) {
                    // Attempt to complete the current unit of work, then move to the
                    // next sibling. If there are no more siblings, return to the
                    // parent fiber.
                    while (true) {
                      // The current, flushed, state of this fiber is the alternate.
                      // Ideally nothing should rely on this, but relying on it here
                      // means that we don't need an additional field on the work in
                      // progress.
                      var current = workInProgress.alternate
                      {
                        ReactDebugCurrentFiber.setCurrentFiber(workInProgress)
                      }

                      var returnFiber = workInProgress['return']
                      var siblingFiber = workInProgress.sibling

                      if (
                        (workInProgress.effectTag & Incomplete) ===
                        NoEffect
                      ) {
                        // This fiber completed.
                        var next = completeWork(
                          current,
                          workInProgress,
                          nextRenderExpirationTime
                        )
                        stopWorkTimer(workInProgress)
                        resetExpirationTime(
                          workInProgress,
                          nextRenderExpirationTime
                        )
                        {
                          ReactDebugCurrentFiber.resetCurrentFiber()
                        }

                        if (next !== null) {
                          stopWorkTimer(workInProgress)
                          if (true && ReactFiberInstrumentation_1.debugTool) {
                            ReactFiberInstrumentation_1.debugTool.onCompleteWork(
                              workInProgress
                            )
                          }
                          // If completing this work spawned new work, do that next. We'll come
                          // back here again.
                          return next
                        }

                        if (
                          returnFiber !== null &&
                          // Do not append effects to parents if a sibling failed to complete
                          (returnFiber.effectTag & Incomplete) === NoEffect
                        ) {
                          // Append all the effects of the subtree and this fiber onto the effect
                          // list of the parent. The completion order of the children affects the
                          // side-effect order.
                          if (returnFiber.firstEffect === null) {
                            returnFiber.firstEffect = workInProgress.firstEffect
                          }
                          if (workInProgress.lastEffect !== null) {
                            if (returnFiber.lastEffect !== null) {
                              returnFiber.lastEffect.nextEffect =
                                workInProgress.firstEffect
                            }
                            returnFiber.lastEffect = workInProgress.lastEffect
                          }

                          // If this fiber had side-effects, we append it AFTER the children's
                          // side-effects. We can perform certain side-effects earlier if
                          // needed, by doing multiple passes over the effect list. We don't want
                          // to schedule our own side-effect on our own list because if end up
                          // reusing children we'll schedule this effect onto itself since we're
                          // at the end.
                          var effectTag = workInProgress.effectTag
                          // Skip both NoWork and PerformedWork tags when creating the effect list.
                          // PerformedWork effect is read by React DevTools but shouldn't be committed.
                          if (effectTag > PerformedWork) {
                            if (returnFiber.lastEffect !== null) {
                              returnFiber.lastEffect.nextEffect = workInProgress
                            } else {
                              returnFiber.firstEffect = workInProgress
                            }
                            returnFiber.lastEffect = workInProgress
                          }
                        }

                        if (true && ReactFiberInstrumentation_1.debugTool) {
                          ReactFiberInstrumentation_1.debugTool.onCompleteWork(
                            workInProgress
                          )
                        }

                        if (siblingFiber !== null) {
                          // If there is more work to do in this returnFiber, do that next.
                          return siblingFiber
                        } else if (returnFiber !== null) {
                          // If there's no more work in this returnFiber. Complete the returnFiber.
                          workInProgress = returnFiber
                          continue
                        } else {
                          // We've reached the root.
                          isRootReadyForCommit = true
                          return null
                        }
                      } else {
                        // This fiber did not complete because something threw. Pop values off
                        // the stack without entering the complete phase. If this is a boundary,
                        // capture values if possible.
                        var _next = unwindWork(workInProgress)
                        // Because this fiber did not complete, don't reset its expiration time.
                        if (workInProgress.effectTag & DidCapture) {
                          // Restarting an error boundary
                          stopFailedWorkTimer(workInProgress)
                        } else {
                          stopWorkTimer(workInProgress)
                        }

                        {
                          ReactDebugCurrentFiber.resetCurrentFiber()
                        }

                        if (_next !== null) {
                          stopWorkTimer(workInProgress)
                          if (true && ReactFiberInstrumentation_1.debugTool) {
                            ReactFiberInstrumentation_1.debugTool.onCompleteWork(
                              workInProgress
                            )
                          }
                          // If completing this work spawned new work, do that next. We'll come
                          // back here again.
                          // Since we're restarting, remove anything that is not a host effect
                          // from the effect tag.
                          _next.effectTag &= HostEffectMask
                          return _next
                        }

                        if (returnFiber !== null) {
                          // Mark the parent fiber as incomplete and clear its effect list.
                          returnFiber.firstEffect = returnFiber.lastEffect = null
                          returnFiber.effectTag |= Incomplete
                        }

                        if (true && ReactFiberInstrumentation_1.debugTool) {
                          ReactFiberInstrumentation_1.debugTool.onCompleteWork(
                            workInProgress
                          )
                        }

                        if (siblingFiber !== null) {
                          // If there is more work to do in this returnFiber, do that next.
                          return siblingFiber
                        } else if (returnFiber !== null) {
                          // If there's no more work in this returnFiber. Complete the returnFiber.
                          workInProgress = returnFiber
                          continue
                        } else {
                          return null
                        }
                      }
                    }

                    // Without this explicit null return Flow complains of invalid return type
                    // TODO Remove the above while(true) loop
                    // eslint-disable-next-line no-unreachable
                    return null
                  }

                  function performUnitOfWork(workInProgress) {
                    // The current, flushed, state of this fiber is the alternate.
                    // Ideally nothing should rely on this, but relying on it here
                    // means that we don't need an additional field on the work in
                    // progress.
                    var current = workInProgress.alternate

                    // See if beginning this work spawns more work.
                    startWorkTimer(workInProgress)
                    {
                      ReactDebugCurrentFiber.setCurrentFiber(workInProgress)
                    }

                    if (
                      true &&
                      replayFailedUnitOfWorkWithInvokeGuardedCallback
                    ) {
                      stashedWorkInProgressProperties = assignFiberPropertiesInDEV(
                        stashedWorkInProgressProperties,
                        workInProgress
                      )
                    }
                    var next = beginWork(
                      current,
                      workInProgress,
                      nextRenderExpirationTime
                    )
                    {
                      ReactDebugCurrentFiber.resetCurrentFiber()
                      if (isReplayingFailedUnitOfWork) {
                        // Currently replaying a failed unit of work. This should be unreachable,
                        // because the render phase is meant to be idempotent, and it should
                        // have thrown again. Since it didn't, rethrow the original error, so
                        // React's internal stack is not misaligned.
                        rethrowOriginalError()
                      }
                    }
                    if (true && ReactFiberInstrumentation_1.debugTool) {
                      ReactFiberInstrumentation_1.debugTool.onBeginWork(
                        workInProgress
                      )
                    }

                    if (next === null) {
                      // If this doesn't spawn new work, complete the current work.
                      next = completeUnitOfWork(workInProgress)
                    }

                    ReactCurrentOwner.current = null

                    return next
                  }

                  function workLoop(isAsync) {
                    if (!isAsync) {
                      // Flush all expired work.
                      while (nextUnitOfWork !== null) {
                        nextUnitOfWork = performUnitOfWork(nextUnitOfWork)
                      }
                    } else {
                      // Flush asynchronous work until the deadline runs out of time.
                      while (nextUnitOfWork !== null && !shouldYield()) {
                        nextUnitOfWork = performUnitOfWork(nextUnitOfWork)
                      }
                    }
                  }

                  function renderRoot(root, expirationTime, isAsync) {
                    !!isWorking
                      ? invariant(
                          false,
                          'renderRoot was called recursively. This error is likely caused by a bug in React. Please file an issue.'
                        )
                      : void 0
                    isWorking = true

                    // Check if we're starting from a fresh stack, or if we're resuming from
                    // previously yielded work.
                    if (
                      expirationTime !== nextRenderExpirationTime ||
                      root !== nextRoot ||
                      nextUnitOfWork === null
                    ) {
                      // Reset the stack and start working from the root.
                      resetStack()
                      nextRoot = root
                      nextRenderExpirationTime = expirationTime
                      nextUnitOfWork = createWorkInProgress(
                        nextRoot.current,
                        null,
                        nextRenderExpirationTime
                      )
                      root.pendingCommitExpirationTime = NoWork
                    }

                    var didFatal = false

                    startWorkLoopTimer(nextUnitOfWork)

                    do {
                      try {
                        workLoop(isAsync)
                      } catch (thrownValue) {
                        if (nextUnitOfWork === null) {
                          // This is a fatal error.
                          didFatal = true
                          onUncaughtError(thrownValue)
                          break
                        }

                        if (
                          true &&
                          replayFailedUnitOfWorkWithInvokeGuardedCallback
                        ) {
                          var failedUnitOfWork = nextUnitOfWork
                          replayUnitOfWork(
                            failedUnitOfWork,
                            thrownValue,
                            isAsync
                          )
                        }

                        var sourceFiber = nextUnitOfWork
                        var returnFiber = sourceFiber['return']
                        if (returnFiber === null) {
                          // This is the root. The root could capture its own errors. However,
                          // we don't know if it errors before or after we pushed the host
                          // context. This information is needed to avoid a stack mismatch.
                          // Because we're not sure, treat this as a fatal error. We could track
                          // which phase it fails in, but doesn't seem worth it. At least
                          // for now.
                          didFatal = true
                          onUncaughtError(thrownValue)
                          break
                        }
                        throwException(returnFiber, sourceFiber, thrownValue)
                        nextUnitOfWork = completeUnitOfWork(sourceFiber)
                      }
                      break
                    } while (true)

                    // We're done performing work. Time to clean up.
                    var didCompleteRoot = false
                    isWorking = false

                    // Yield back to main thread.
                    if (didFatal) {
                      stopWorkLoopTimer(interruptedBy, didCompleteRoot)
                      interruptedBy = null
                      // There was a fatal error.
                      {
                        stack.resetStackAfterFatalErrorInDev()
                      }
                      return null
                    } else if (nextUnitOfWork === null) {
                      // We reached the root.
                      if (isRootReadyForCommit) {
                        didCompleteRoot = true
                        stopWorkLoopTimer(interruptedBy, didCompleteRoot)
                        interruptedBy = null
                        // The root successfully completed. It's ready for commit.
                        root.pendingCommitExpirationTime = expirationTime
                        var finishedWork = root.current.alternate
                        return finishedWork
                      } else {
                        // The root did not complete.
                        stopWorkLoopTimer(interruptedBy, didCompleteRoot)
                        interruptedBy = null
                        invariant(
                          false,
                          'Expired work should have completed. This error is likely caused by a bug in React. Please file an issue.'
                        )
                      }
                    } else {
                      stopWorkLoopTimer(interruptedBy, didCompleteRoot)
                      interruptedBy = null
                      // There's more work to do, but we ran out of time. Yield back to
                      // the renderer.
                      return null
                    }
                  }

                  function scheduleCapture(
                    sourceFiber,
                    boundaryFiber,
                    value,
                    expirationTime
                  ) {
                    // TODO: We only support dispatching errors.
                    var capturedValue = createCapturedValue(value, sourceFiber)
                    var update = {
                      expirationTime: expirationTime,
                      partialState: null,
                      callback: null,
                      isReplace: false,
                      isForced: false,
                      capturedValue: capturedValue,
                      next: null,
                    }
                    insertUpdateIntoFiber(boundaryFiber, update)
                    scheduleWork(boundaryFiber, expirationTime)
                  }

                  function dispatch(sourceFiber, value, expirationTime) {
                    !(!isWorking || isCommitting)
                      ? invariant(
                          false,
                          'dispatch: Cannot dispatch during the render phase.'
                        )
                      : void 0

                    // TODO: Handle arrays

                    var fiber = sourceFiber['return']
                    while (fiber !== null) {
                      switch (fiber.tag) {
                        case ClassComponent:
                          var ctor = fiber.type
                          var instance = fiber.stateNode
                          if (
                            typeof ctor.getDerivedStateFromCatch ===
                              'function' ||
                            (typeof instance.componentDidCatch === 'function' &&
                              !isAlreadyFailedLegacyErrorBoundary(instance))
                          ) {
                            scheduleCapture(
                              sourceFiber,
                              fiber,
                              value,
                              expirationTime
                            )
                            return
                          }
                          break
                        // TODO: Handle async boundaries
                        case HostRoot:
                          scheduleCapture(
                            sourceFiber,
                            fiber,
                            value,
                            expirationTime
                          )
                          return
                      }
                      fiber = fiber['return']
                    }

                    if (sourceFiber.tag === HostRoot) {
                      // Error was thrown at the root. There is no parent, so the root
                      // itself should capture it.
                      scheduleCapture(
                        sourceFiber,
                        sourceFiber,
                        value,
                        expirationTime
                      )
                    }
                  }

                  function onCommitPhaseError(fiber, error) {
                    return dispatch(fiber, error, Sync)
                  }

                  function computeAsyncExpiration(currentTime) {
                    // Given the current clock time, returns an expiration time. We use rounding
                    // to batch like updates together.
                    // Should complete within ~1000ms. 1200ms max.
                    var expirationMs = 5000
                    var bucketSizeMs = 250
                    return computeExpirationBucket(
                      currentTime,
                      expirationMs,
                      bucketSizeMs
                    )
                  }

                  function computeInteractiveExpiration(currentTime) {
                    var expirationMs = void 0
                    // We intentionally set a higher expiration time for interactive updates in
                    // dev than in production.
                    // If the main thread is being blocked so long that you hit the expiration,
                    // it's a problem that could be solved with better scheduling.
                    // People will be more likely to notice this and fix it with the long
                    // expiration time in development.
                    // In production we opt for better UX at the risk of masking scheduling
                    // problems, by expiring fast.
                    {
                      // Should complete within ~500ms. 600ms max.
                      expirationMs = 500
                    }
                    var bucketSizeMs = 100
                    return computeExpirationBucket(
                      currentTime,
                      expirationMs,
                      bucketSizeMs
                    )
                  }

                  // Creates a unique async expiration time.
                  function computeUniqueAsyncExpiration() {
                    var currentTime = recalculateCurrentTime()
                    var result = computeAsyncExpiration(currentTime)
                    if (result <= lastUniqueAsyncExpiration) {
                      // Since we assume the current time monotonically increases, we only hit
                      // this branch when computeUniqueAsyncExpiration is fired multiple times
                      // within a 200ms window (or whatever the async bucket size is).
                      result = lastUniqueAsyncExpiration + 1
                    }
                    lastUniqueAsyncExpiration = result
                    return lastUniqueAsyncExpiration
                  }

                  function computeExpirationForFiber(fiber) {
                    var expirationTime = void 0
                    if (expirationContext !== NoWork) {
                      // An explicit expiration context was set;
                      expirationTime = expirationContext
                    } else if (isWorking) {
                      if (isCommitting) {
                        // Updates that occur during the commit phase should have sync priority
                        // by default.
                        expirationTime = Sync
                      } else {
                        // Updates during the render phase should expire at the same time as
                        // the work that is being rendered.
                        expirationTime = nextRenderExpirationTime
                      }
                    } else {
                      // No explicit expiration context was set, and we're not currently
                      // performing work. Calculate a new expiration time.
                      if (fiber.mode & AsyncMode) {
                        if (isBatchingInteractiveUpdates) {
                          // This is an interactive update
                          var currentTime = recalculateCurrentTime()
                          expirationTime = computeInteractiveExpiration(
                            currentTime
                          )
                        } else {
                          // This is an async update
                          var _currentTime = recalculateCurrentTime()
                          expirationTime = computeAsyncExpiration(_currentTime)
                        }
                      } else {
                        // This is a sync update
                        expirationTime = Sync
                      }
                    }
                    if (isBatchingInteractiveUpdates) {
                      // This is an interactive update. Keep track of the lowest pending
                      // interactive expiration time. This allows us to synchronously flush
                      // all interactive updates when needed.
                      if (
                        lowestPendingInteractiveExpirationTime === NoWork ||
                        expirationTime > lowestPendingInteractiveExpirationTime
                      ) {
                        lowestPendingInteractiveExpirationTime = expirationTime
                      }
                    }
                    return expirationTime
                  }

                  function scheduleWork(fiber, expirationTime) {
                    return scheduleWorkImpl(fiber, expirationTime, false)
                  }

                  function scheduleWorkImpl(
                    fiber,
                    expirationTime,
                    isErrorRecovery
                  ) {
                    recordScheduleUpdate()

                    {
                      if (!isErrorRecovery && fiber.tag === ClassComponent) {
                        var instance = fiber.stateNode
                        warnAboutInvalidUpdates(instance)
                      }
                    }

                    var node = fiber
                    while (node !== null) {
                      // Walk the parent path to the root and update each node's
                      // expiration time.
                      if (
                        node.expirationTime === NoWork ||
                        node.expirationTime > expirationTime
                      ) {
                        node.expirationTime = expirationTime
                      }
                      if (node.alternate !== null) {
                        if (
                          node.alternate.expirationTime === NoWork ||
                          node.alternate.expirationTime > expirationTime
                        ) {
                          node.alternate.expirationTime = expirationTime
                        }
                      }
                      if (node['return'] === null) {
                        if (node.tag === HostRoot) {
                          var root = node.stateNode
                          if (
                            !isWorking &&
                            nextRenderExpirationTime !== NoWork &&
                            expirationTime < nextRenderExpirationTime
                          ) {
                            // This is an interruption. (Used for performance tracking.)
                            interruptedBy = fiber
                            resetStack()
                          }
                          if (
                            // If we're in the render phase, we don't need to schedule this root
                            // for an update, because we'll do it before we exit...
                            !isWorking ||
                            isCommitting ||
                            // ...unless this is a different root than the one we're rendering.
                            nextRoot !== root
                          ) {
                            // Add this root to the root schedule.
                            requestWork(root, expirationTime)
                          }
                          if (nestedUpdateCount > NESTED_UPDATE_LIMIT) {
                            invariant(
                              false,
                              'Maximum update depth exceeded. This can happen when a component repeatedly calls setState inside componentWillUpdate or componentDidUpdate. React limits the number of nested updates to prevent infinite loops.'
                            )
                          }
                        } else {
                          {
                            if (
                              !isErrorRecovery &&
                              fiber.tag === ClassComponent
                            ) {
                              warnAboutUpdateOnUnmounted(fiber)
                            }
                          }
                          return
                        }
                      }
                      node = node['return']
                    }
                  }

                  function recalculateCurrentTime() {
                    // Subtract initial time so it fits inside 32bits
                    mostRecentCurrentTimeMs = now() - originalStartTimeMs
                    mostRecentCurrentTime = msToExpirationTime(
                      mostRecentCurrentTimeMs
                    )
                    return mostRecentCurrentTime
                  }

                  function deferredUpdates(fn) {
                    var previousExpirationContext = expirationContext
                    var currentTime = recalculateCurrentTime()
                    expirationContext = computeAsyncExpiration(currentTime)
                    try {
                      return fn()
                    } finally {
                      expirationContext = previousExpirationContext
                    }
                  }
                  function syncUpdates(fn, a, b, c, d) {
                    var previousExpirationContext = expirationContext
                    expirationContext = Sync
                    try {
                      return fn(a, b, c, d)
                    } finally {
                      expirationContext = previousExpirationContext
                    }
                  }

                  // TODO: Everything below this is written as if it has been lifted to the
                  // renderers. I'll do this in a follow-up.

                  // Linked-list of roots
                  var firstScheduledRoot = null
                  var lastScheduledRoot = null

                  var callbackExpirationTime = NoWork
                  var callbackID = -1
                  var isRendering = false
                  var nextFlushedRoot = null
                  var nextFlushedExpirationTime = NoWork
                  var lowestPendingInteractiveExpirationTime = NoWork
                  var deadlineDidExpire = false
                  var hasUnhandledError = false
                  var unhandledError = null
                  var deadline = null

                  var isBatchingUpdates = false
                  var isUnbatchingUpdates = false
                  var isBatchingInteractiveUpdates = false

                  var completedBatches = null

                  // Use these to prevent an infinite loop of nested updates
                  var NESTED_UPDATE_LIMIT = 1000
                  var nestedUpdateCount = 0

                  var timeHeuristicForUnitOfWork = 1

                  function scheduleCallbackWithExpiration(expirationTime) {
                    if (callbackExpirationTime !== NoWork) {
                      // A callback is already scheduled. Check its expiration time (timeout).
                      if (expirationTime > callbackExpirationTime) {
                        // Existing callback has sufficient timeout. Exit.
                        return
                      } else {
                        // Existing callback has insufficient timeout. Cancel and schedule a
                        // new one.
                        cancelDeferredCallback(callbackID)
                      }
                      // The request callback timer is already running. Don't start a new one.
                    } else {
                      startRequestCallbackTimer()
                    }

                    // Compute a timeout for the given expiration time.
                    var currentMs = now() - originalStartTimeMs
                    var expirationMs = expirationTimeToMs(expirationTime)
                    var timeout = expirationMs - currentMs

                    callbackExpirationTime = expirationTime
                    callbackID = scheduleDeferredCallback(performAsyncWork, {
                      timeout: timeout,
                    })
                  }

                  // requestWork is called by the scheduler whenever a root receives an update.
                  // It's up to the renderer to call renderRoot at some point in the future.
                  function requestWork(root, expirationTime) {
                    addRootToSchedule(root, expirationTime)

                    if (isRendering) {
                      // Prevent reentrancy. Remaining work will be scheduled at the end of
                      // the currently rendering batch.
                      return
                    }

                    if (isBatchingUpdates) {
                      // Flush work at the end of the batch.
                      if (isUnbatchingUpdates) {
                        // ...unless we're inside unbatchedUpdates, in which case we should
                        // flush it now.
                        nextFlushedRoot = root
                        nextFlushedExpirationTime = Sync
                        performWorkOnRoot(root, Sync, false)
                      }
                      return
                    }

                    // TODO: Get rid of Sync and use current time?
                    if (expirationTime === Sync) {
                      performSyncWork()
                    } else {
                      scheduleCallbackWithExpiration(expirationTime)
                    }
                  }

                  function addRootToSchedule(root, expirationTime) {
                    // Add the root to the schedule.
                    // Check if this root is already part of the schedule.
                    if (root.nextScheduledRoot === null) {
                      // This root is not already scheduled. Add it.
                      root.remainingExpirationTime = expirationTime
                      if (lastScheduledRoot === null) {
                        firstScheduledRoot = lastScheduledRoot = root
                        root.nextScheduledRoot = root
                      } else {
                        lastScheduledRoot.nextScheduledRoot = root
                        lastScheduledRoot = root
                        lastScheduledRoot.nextScheduledRoot = firstScheduledRoot
                      }
                    } else {
                      // This root is already scheduled, but its priority may have increased.
                      var remainingExpirationTime = root.remainingExpirationTime
                      if (
                        remainingExpirationTime === NoWork ||
                        expirationTime < remainingExpirationTime
                      ) {
                        // Update the priority.
                        root.remainingExpirationTime = expirationTime
                      }
                    }
                  }

                  function findHighestPriorityRoot() {
                    var highestPriorityWork = NoWork
                    var highestPriorityRoot = null
                    if (lastScheduledRoot !== null) {
                      var previousScheduledRoot = lastScheduledRoot
                      var root = firstScheduledRoot
                      while (root !== null) {
                        var remainingExpirationTime =
                          root.remainingExpirationTime
                        if (remainingExpirationTime === NoWork) {
                          // This root no longer has work. Remove it from the scheduler.

                          // TODO: This check is redudant, but Flow is confused by the branch
                          // below where we set lastScheduledRoot to null, even though we break
                          // from the loop right after.
                          !(
                            previousScheduledRoot !== null &&
                            lastScheduledRoot !== null
                          )
                            ? invariant(
                                false,
                                'Should have a previous and last root. This error is likely caused by a bug in React. Please file an issue.'
                              )
                            : void 0
                          if (root === root.nextScheduledRoot) {
                            // This is the only root in the list.
                            root.nextScheduledRoot = null
                            firstScheduledRoot = lastScheduledRoot = null
                            break
                          } else if (root === firstScheduledRoot) {
                            // This is the first root in the list.
                            var next = root.nextScheduledRoot
                            firstScheduledRoot = next
                            lastScheduledRoot.nextScheduledRoot = next
                            root.nextScheduledRoot = null
                          } else if (root === lastScheduledRoot) {
                            // This is the last root in the list.
                            lastScheduledRoot = previousScheduledRoot
                            lastScheduledRoot.nextScheduledRoot = firstScheduledRoot
                            root.nextScheduledRoot = null
                            break
                          } else {
                            previousScheduledRoot.nextScheduledRoot =
                              root.nextScheduledRoot
                            root.nextScheduledRoot = null
                          }
                          root = previousScheduledRoot.nextScheduledRoot
                        } else {
                          if (
                            highestPriorityWork === NoWork ||
                            remainingExpirationTime < highestPriorityWork
                          ) {
                            // Update the priority, if it's higher
                            highestPriorityWork = remainingExpirationTime
                            highestPriorityRoot = root
                          }
                          if (root === lastScheduledRoot) {
                            break
                          }
                          previousScheduledRoot = root
                          root = root.nextScheduledRoot
                        }
                      }
                    }

                    // If the next root is the same as the previous root, this is a nested
                    // update. To prevent an infinite loop, increment the nested update count.
                    var previousFlushedRoot = nextFlushedRoot
                    if (
                      previousFlushedRoot !== null &&
                      previousFlushedRoot === highestPriorityRoot &&
                      highestPriorityWork === Sync
                    ) {
                      nestedUpdateCount++
                    } else {
                      // Reset whenever we switch roots.
                      nestedUpdateCount = 0
                    }
                    nextFlushedRoot = highestPriorityRoot
                    nextFlushedExpirationTime = highestPriorityWork
                  }

                  function performAsyncWork(dl) {
                    performWork(NoWork, true, dl)
                  }

                  function performSyncWork() {
                    performWork(Sync, false, null)
                  }

                  function performWork(minExpirationTime, isAsync, dl) {
                    deadline = dl

                    // Keep working on roots until there's no more work, or until the we reach
                    // the deadline.
                    findHighestPriorityRoot()

                    if (enableUserTimingAPI && deadline !== null) {
                      var didExpire =
                        nextFlushedExpirationTime < recalculateCurrentTime()
                      var timeout = expirationTimeToMs(
                        nextFlushedExpirationTime
                      )
                      stopRequestCallbackTimer(didExpire, timeout)
                    }

                    if (isAsync) {
                      while (
                        nextFlushedRoot !== null &&
                        nextFlushedExpirationTime !== NoWork &&
                        (minExpirationTime === NoWork ||
                          minExpirationTime >= nextFlushedExpirationTime) &&
                        (!deadlineDidExpire ||
                          recalculateCurrentTime() >= nextFlushedExpirationTime)
                      ) {
                        performWorkOnRoot(
                          nextFlushedRoot,
                          nextFlushedExpirationTime,
                          !deadlineDidExpire
                        )
                        findHighestPriorityRoot()
                      }
                    } else {
                      while (
                        nextFlushedRoot !== null &&
                        nextFlushedExpirationTime !== NoWork &&
                        (minExpirationTime === NoWork ||
                          minExpirationTime >= nextFlushedExpirationTime)
                      ) {
                        performWorkOnRoot(
                          nextFlushedRoot,
                          nextFlushedExpirationTime,
                          false
                        )
                        findHighestPriorityRoot()
                      }
                    }

                    // We're done flushing work. Either we ran out of time in this callback,
                    // or there's no more work left with sufficient priority.

                    // If we're inside a callback, set this to false since we just completed it.
                    if (deadline !== null) {
                      callbackExpirationTime = NoWork
                      callbackID = -1
                    }
                    // If there's work left over, schedule a new callback.
                    if (nextFlushedExpirationTime !== NoWork) {
                      scheduleCallbackWithExpiration(nextFlushedExpirationTime)
                    }

                    // Clean-up.
                    deadline = null
                    deadlineDidExpire = false

                    finishRendering()
                  }

                  function flushRoot(root, expirationTime) {
                    !!isRendering
                      ? invariant(
                          false,
                          'work.commit(): Cannot commit while already rendering. This likely means you attempted to commit from inside a lifecycle method.'
                        )
                      : void 0
                    // Perform work on root as if the given expiration time is the current time.
                    // This has the effect of synchronously flushing all work up to and
                    // including the given time.
                    nextFlushedRoot = root
                    nextFlushedExpirationTime = expirationTime
                    performWorkOnRoot(root, expirationTime, false)
                    // Flush any sync work that was scheduled by lifecycles
                    performSyncWork()
                    finishRendering()
                  }

                  function finishRendering() {
                    nestedUpdateCount = 0

                    if (completedBatches !== null) {
                      var batches = completedBatches
                      completedBatches = null
                      for (var i = 0; i < batches.length; i++) {
                        var batch = batches[i]
                        try {
                          batch._onComplete()
                        } catch (error) {
                          if (!hasUnhandledError) {
                            hasUnhandledError = true
                            unhandledError = error
                          }
                        }
                      }
                    }

                    if (hasUnhandledError) {
                      var error = unhandledError
                      unhandledError = null
                      hasUnhandledError = false
                      throw error
                    }
                  }

                  function performWorkOnRoot(root, expirationTime, isAsync) {
                    !!isRendering
                      ? invariant(
                          false,
                          'performWorkOnRoot was called recursively. This error is likely caused by a bug in React. Please file an issue.'
                        )
                      : void 0

                    isRendering = true

                    // Check if this is async work or sync/expired work.
                    if (!isAsync) {
                      // Flush sync work.
                      var finishedWork = root.finishedWork
                      if (finishedWork !== null) {
                        // This root is already complete. We can commit it.
                        completeRoot(root, finishedWork, expirationTime)
                      } else {
                        root.finishedWork = null
                        finishedWork = renderRoot(root, expirationTime, false)
                        if (finishedWork !== null) {
                          // We've completed the root. Commit it.
                          completeRoot(root, finishedWork, expirationTime)
                        }
                      }
                    } else {
                      // Flush async work.
                      var _finishedWork = root.finishedWork
                      if (_finishedWork !== null) {
                        // This root is already complete. We can commit it.
                        completeRoot(root, _finishedWork, expirationTime)
                      } else {
                        root.finishedWork = null
                        _finishedWork = renderRoot(root, expirationTime, true)
                        if (_finishedWork !== null) {
                          // We've completed the root. Check the deadline one more time
                          // before committing.
                          if (!shouldYield()) {
                            // Still time left. Commit the root.
                            completeRoot(root, _finishedWork, expirationTime)
                          } else {
                            // There's no time left. Mark this root as complete. We'll come
                            // back and commit it later.
                            root.finishedWork = _finishedWork
                          }
                        }
                      }
                    }

                    isRendering = false
                  }

                  function completeRoot(root, finishedWork, expirationTime) {
                    // Check if there's a batch that matches this expiration time.
                    var firstBatch = root.firstBatch
                    if (
                      firstBatch !== null &&
                      firstBatch._expirationTime <= expirationTime
                    ) {
                      if (completedBatches === null) {
                        completedBatches = [firstBatch]
                      } else {
                        completedBatches.push(firstBatch)
                      }
                      if (firstBatch._defer) {
                        // This root is blocked from committing by a batch. Unschedule it until
                        // we receive another update.
                        root.finishedWork = finishedWork
                        root.remainingExpirationTime = NoWork
                        return
                      }
                    }

                    // Commit the root.
                    root.finishedWork = null
                    root.remainingExpirationTime = commitRoot(finishedWork)
                  }

                  // When working on async work, the reconciler asks the renderer if it should
                  // yield execution. For DOM, we implement this with requestIdleCallback.
                  function shouldYield() {
                    if (deadline === null) {
                      return false
                    }
                    if (deadline.timeRemaining() > timeHeuristicForUnitOfWork) {
                      // Disregard deadline.didTimeout. Only expired work should be flushed
                      // during a timeout. This path is only hit for non-expired work.
                      return false
                    }
                    deadlineDidExpire = true
                    return true
                  }

                  function onUncaughtError(error) {
                    !(nextFlushedRoot !== null)
                      ? invariant(
                          false,
                          'Should be working on a root. This error is likely caused by a bug in React. Please file an issue.'
                        )
                      : void 0
                    // Unschedule this root so we don't work on it again until there's
                    // another update.
                    nextFlushedRoot.remainingExpirationTime = NoWork
                    if (!hasUnhandledError) {
                      hasUnhandledError = true
                      unhandledError = error
                    }
                  }

                  // TODO: Batching should be implemented at the renderer level, not inside
                  // the reconciler.
                  function batchedUpdates(fn, a) {
                    var previousIsBatchingUpdates = isBatchingUpdates
                    isBatchingUpdates = true
                    try {
                      return fn(a)
                    } finally {
                      isBatchingUpdates = previousIsBatchingUpdates
                      if (!isBatchingUpdates && !isRendering) {
                        performSyncWork()
                      }
                    }
                  }

                  // TODO: Batching should be implemented at the renderer level, not inside
                  // the reconciler.
                  function unbatchedUpdates(fn, a) {
                    if (isBatchingUpdates && !isUnbatchingUpdates) {
                      isUnbatchingUpdates = true
                      try {
                        return fn(a)
                      } finally {
                        isUnbatchingUpdates = false
                      }
                    }
                    return fn(a)
                  }

                  // TODO: Batching should be implemented at the renderer level, not within
                  // the reconciler.
                  function flushSync(fn, a) {
                    !!isRendering
                      ? invariant(
                          false,
                          'flushSync was called from inside a lifecycle method. It cannot be called when React is already rendering.'
                        )
                      : void 0
                    var previousIsBatchingUpdates = isBatchingUpdates
                    isBatchingUpdates = true
                    try {
                      return syncUpdates(fn, a)
                    } finally {
                      isBatchingUpdates = previousIsBatchingUpdates
                      performSyncWork()
                    }
                  }

                  function interactiveUpdates(fn, a, b) {
                    if (isBatchingInteractiveUpdates) {
                      return fn(a, b)
                    }
                    // If there are any pending interactive updates, synchronously flush them.
                    // This needs to happen before we read any handlers, because the effect of
                    // the previous event may influence which handlers are called during
                    // this event.
                    if (
                      !isBatchingUpdates &&
                      !isRendering &&
                      lowestPendingInteractiveExpirationTime !== NoWork
                    ) {
                      // Synchronously flush pending interactive updates.
                      performWork(
                        lowestPendingInteractiveExpirationTime,
                        false,
                        null
                      )
                      lowestPendingInteractiveExpirationTime = NoWork
                    }
                    var previousIsBatchingInteractiveUpdates = isBatchingInteractiveUpdates
                    var previousIsBatchingUpdates = isBatchingUpdates
                    isBatchingInteractiveUpdates = true
                    isBatchingUpdates = true
                    try {
                      return fn(a, b)
                    } finally {
                      isBatchingInteractiveUpdates = previousIsBatchingInteractiveUpdates
                      isBatchingUpdates = previousIsBatchingUpdates
                      if (!isBatchingUpdates && !isRendering) {
                        performSyncWork()
                      }
                    }
                  }

                  function flushInteractiveUpdates() {
                    if (
                      !isRendering &&
                      lowestPendingInteractiveExpirationTime !== NoWork
                    ) {
                      // Synchronously flush pending interactive updates.
                      performWork(
                        lowestPendingInteractiveExpirationTime,
                        false,
                        null
                      )
                      lowestPendingInteractiveExpirationTime = NoWork
                    }
                  }

                  function flushControlled(fn) {
                    var previousIsBatchingUpdates = isBatchingUpdates
                    isBatchingUpdates = true
                    try {
                      syncUpdates(fn)
                    } finally {
                      isBatchingUpdates = previousIsBatchingUpdates
                      if (!isBatchingUpdates && !isRendering) {
                        performWork(Sync, false, null)
                      }
                    }
                  }

                  return {
                    recalculateCurrentTime: recalculateCurrentTime,
                    computeExpirationForFiber: computeExpirationForFiber,
                    scheduleWork: scheduleWork,
                    requestWork: requestWork,
                    flushRoot: flushRoot,
                    batchedUpdates: batchedUpdates,
                    unbatchedUpdates: unbatchedUpdates,
                    flushSync: flushSync,
                    flushControlled: flushControlled,
                    deferredUpdates: deferredUpdates,
                    syncUpdates: syncUpdates,
                    interactiveUpdates: interactiveUpdates,
                    flushInteractiveUpdates: flushInteractiveUpdates,
                    computeUniqueAsyncExpiration: computeUniqueAsyncExpiration,
                    legacyContext: legacyContext,
                  }
                }

                var didWarnAboutNestedUpdates = void 0

                {
                  didWarnAboutNestedUpdates = false
                }

                // 0 is PROD, 1 is DEV.
                // Might add PROFILE later.

                var ReactFiberReconciler$1 = function (config) {
                  var getPublicInstance = config.getPublicInstance

                  var _ReactFiberScheduler = ReactFiberScheduler(config),
                    computeUniqueAsyncExpiration =
                      _ReactFiberScheduler.computeUniqueAsyncExpiration,
                    recalculateCurrentTime =
                      _ReactFiberScheduler.recalculateCurrentTime,
                    computeExpirationForFiber =
                      _ReactFiberScheduler.computeExpirationForFiber,
                    scheduleWork = _ReactFiberScheduler.scheduleWork,
                    requestWork = _ReactFiberScheduler.requestWork,
                    flushRoot = _ReactFiberScheduler.flushRoot,
                    batchedUpdates = _ReactFiberScheduler.batchedUpdates,
                    unbatchedUpdates = _ReactFiberScheduler.unbatchedUpdates,
                    flushSync = _ReactFiberScheduler.flushSync,
                    flushControlled = _ReactFiberScheduler.flushControlled,
                    deferredUpdates = _ReactFiberScheduler.deferredUpdates,
                    syncUpdates = _ReactFiberScheduler.syncUpdates,
                    interactiveUpdates =
                      _ReactFiberScheduler.interactiveUpdates,
                    flushInteractiveUpdates =
                      _ReactFiberScheduler.flushInteractiveUpdates,
                    legacyContext = _ReactFiberScheduler.legacyContext

                  var findCurrentUnmaskedContext =
                      legacyContext.findCurrentUnmaskedContext,
                    isContextProvider = legacyContext.isContextProvider,
                    processChildContext = legacyContext.processChildContext

                  function getContextForSubtree(parentComponent) {
                    if (!parentComponent) {
                      return emptyObject
                    }

                    var fiber = get(parentComponent)
                    var parentContext = findCurrentUnmaskedContext(fiber)
                    return isContextProvider(fiber)
                      ? processChildContext(fiber, parentContext)
                      : parentContext
                  }

                  function scheduleRootUpdate(
                    current,
                    element,
                    currentTime,
                    expirationTime,
                    callback
                  ) {
                    {
                      if (
                        ReactDebugCurrentFiber.phase === 'render' &&
                        ReactDebugCurrentFiber.current !== null &&
                        !didWarnAboutNestedUpdates
                      ) {
                        didWarnAboutNestedUpdates = true
                        warning(
                          false,
                          'Render methods should be a pure function of props and state; ' +
                            'triggering nested component updates from render is not allowed. ' +
                            'If necessary, trigger nested updates in componentDidUpdate.\n\n' +
                            'Check the render method of %s.',
                          getComponentName(ReactDebugCurrentFiber.current) ||
                            'Unknown'
                        )
                      }
                    }

                    callback = callback === undefined ? null : callback
                    {
                      !(callback === null || typeof callback === 'function')
                        ? warning(
                            false,
                            'render(...): Expected the last optional `callback` argument to be a ' +
                              'function. Instead received: %s.',
                            callback
                          )
                        : void 0
                    }

                    var update = {
                      expirationTime: expirationTime,
                      partialState: { element: element },
                      callback: callback,
                      isReplace: false,
                      isForced: false,
                      capturedValue: null,
                      next: null,
                    }
                    insertUpdateIntoFiber(current, update)
                    scheduleWork(current, expirationTime)

                    return expirationTime
                  }

                  function updateContainerAtExpirationTime(
                    element,
                    container,
                    parentComponent,
                    currentTime,
                    expirationTime,
                    callback
                  ) {
                    // TODO: If this is a nested container, this won't be the root.
                    var current = container.current

                    {
                      if (ReactFiberInstrumentation_1.debugTool) {
                        if (current.alternate === null) {
                          ReactFiberInstrumentation_1.debugTool.onMountContainer(
                            container
                          )
                        } else if (element === null) {
                          ReactFiberInstrumentation_1.debugTool.onUnmountContainer(
                            container
                          )
                        } else {
                          ReactFiberInstrumentation_1.debugTool.onUpdateContainer(
                            container
                          )
                        }
                      }
                    }

                    var context = getContextForSubtree(parentComponent)
                    if (container.context === null) {
                      container.context = context
                    } else {
                      container.pendingContext = context
                    }

                    return scheduleRootUpdate(
                      current,
                      element,
                      currentTime,
                      expirationTime,
                      callback
                    )
                  }

                  function findHostInstance(component) {
                    var fiber = get(component)
                    if (fiber === undefined) {
                      if (typeof component.render === 'function') {
                        invariant(
                          false,
                          'Unable to find node on an unmounted component.'
                        )
                      } else {
                        invariant(
                          false,
                          'Argument appears to not be a ReactComponent. Keys: %s',
                          Object.keys(component)
                        )
                      }
                    }
                    var hostFiber = findCurrentHostFiber(fiber)
                    if (hostFiber === null) {
                      return null
                    }
                    return hostFiber.stateNode
                  }

                  return {
                    createContainer: function (
                      containerInfo,
                      isAsync,
                      hydrate
                    ) {
                      return createFiberRoot(containerInfo, isAsync, hydrate)
                    },
                    updateContainer: function (
                      element,
                      container,
                      parentComponent,
                      callback
                    ) {
                      var current = container.current
                      var currentTime = recalculateCurrentTime()
                      var expirationTime = computeExpirationForFiber(current)
                      return updateContainerAtExpirationTime(
                        element,
                        container,
                        parentComponent,
                        currentTime,
                        expirationTime,
                        callback
                      )
                    },
                    updateContainerAtExpirationTime: function (
                      element,
                      container,
                      parentComponent,
                      expirationTime,
                      callback
                    ) {
                      var currentTime = recalculateCurrentTime()
                      return updateContainerAtExpirationTime(
                        element,
                        container,
                        parentComponent,
                        currentTime,
                        expirationTime,
                        callback
                      )
                    },

                    flushRoot: flushRoot,

                    requestWork: requestWork,

                    computeUniqueAsyncExpiration: computeUniqueAsyncExpiration,

                    batchedUpdates: batchedUpdates,

                    unbatchedUpdates: unbatchedUpdates,

                    deferredUpdates: deferredUpdates,

                    syncUpdates: syncUpdates,

                    interactiveUpdates: interactiveUpdates,

                    flushInteractiveUpdates: flushInteractiveUpdates,

                    flushControlled: flushControlled,

                    flushSync: flushSync,

                    getPublicRootInstance: function (container) {
                      var containerFiber = container.current
                      if (!containerFiber.child) {
                        return null
                      }
                      switch (containerFiber.child.tag) {
                        case HostComponent:
                          return getPublicInstance(
                            containerFiber.child.stateNode
                          )
                        default:
                          return containerFiber.child.stateNode
                      }
                    },

                    findHostInstance: findHostInstance,

                    findHostInstanceWithNoPortals: function (fiber) {
                      var hostFiber = findCurrentHostFiberWithNoPortals(fiber)
                      if (hostFiber === null) {
                        return null
                      }
                      return hostFiber.stateNode
                    },
                    injectIntoDevTools: function (devToolsConfig) {
                      var findFiberByHostInstance =
                        devToolsConfig.findFiberByHostInstance

                      return injectInternals(
                        _assign({}, devToolsConfig, {
                          findHostInstanceByFiber: function (fiber) {
                            var hostFiber = findCurrentHostFiber(fiber)
                            if (hostFiber === null) {
                              return null
                            }
                            return hostFiber.stateNode
                          },
                          findFiberByHostInstance: function (instance) {
                            if (!findFiberByHostInstance) {
                              // Might not be implemented by the renderer.
                              return null
                            }
                            return findFiberByHostInstance(instance)
                          },
                        })
                      )
                    },
                  }
                }

                var ReactFiberReconciler$2 = Object.freeze({
                  default: ReactFiberReconciler$1,
                })

                var ReactFiberReconciler$3 =
                  (ReactFiberReconciler$2 && ReactFiberReconciler$1) ||
                  ReactFiberReconciler$2

                // TODO: bundle Flow types with the package.

                // TODO: decide on the top-level export form.
                // This is hacky but makes it work with both Rollup and Jest.
                var reactReconciler = ReactFiberReconciler$3['default']
                  ? ReactFiberReconciler$3['default']
                  : ReactFiberReconciler$3

                function createPortal$1(
                  children,
                  containerInfo,
                  // TODO: figure out the API for cross-renderer implementation.
                  implementation
                ) {
                  var key =
                    arguments.length > 3 && arguments[3] !== undefined
                      ? arguments[3]
                      : null

                  return {
                    // This tag allow us to uniquely identify this as a React Portal
                    $$typeof: REACT_PORTAL_TYPE,
                    key: key == null ? null : '' + key,
                    children: children,
                    containerInfo: containerInfo,
                    implementation: implementation,
                  }
                }

                // TODO: this is special because it gets imported during build.

                var ReactVersion = '16.3.3'

                // a requestAnimationFrame, storing the time for the start of the frame, then
                // scheduling a postMessage which gets scheduled after paint. Within the
                // postMessage handler do as much work as possible until time + frame rate.
                // By separating the idle call into a separate event tick we ensure that
                // layout, paint and other browser work is counted against the available time.
                // The frame rate is dynamically adjusted.

                {
                  if (
                    ExecutionEnvironment.canUseDOM &&
                    typeof requestAnimationFrame !== 'function'
                  ) {
                    warning(
                      false,
                      'React depends on requestAnimationFrame. Make sure that you load a ' +
                        'polyfill in older browsers. https://fb.me/react-polyfills'
                    )
                  }
                }

                var hasNativePerformanceNow =
                  typeof performance === 'object' &&
                  typeof performance.now === 'function'

                var now = void 0
                if (hasNativePerformanceNow) {
                  now = function () {
                    return performance.now()
                  }
                } else {
                  now = function () {
                    return Date.now()
                  }
                }

                // TODO: There's no way to cancel, because Fiber doesn't atm.
                var rIC = void 0
                var cIC = void 0

                if (!ExecutionEnvironment.canUseDOM) {
                  rIC = function (frameCallback) {
                    return setTimeout(function () {
                      frameCallback({
                        timeRemaining: function () {
                          return Infinity
                        },

                        didTimeout: false,
                      })
                    })
                  }
                  cIC = function (timeoutID) {
                    clearTimeout(timeoutID)
                  }
                } else if (
                  alwaysUseRequestIdleCallbackPolyfill ||
                  typeof requestIdleCallback !== 'function' ||
                  typeof cancelIdleCallback !== 'function'
                ) {
                  // Polyfill requestIdleCallback and cancelIdleCallback

                  var scheduledRICCallback = null
                  var isIdleScheduled = false
                  var timeoutTime = -1

                  var isAnimationFrameScheduled = false

                  var frameDeadline = 0
                  // We start out assuming that we run at 30fps but then the heuristic tracking
                  // will adjust this value to a faster fps if we get more frequent animation
                  // frames.
                  var previousFrameTime = 33
                  var activeFrameTime = 33

                  var frameDeadlineObject = void 0
                  if (hasNativePerformanceNow) {
                    frameDeadlineObject = {
                      didTimeout: false,
                      timeRemaining: function () {
                        // We assume that if we have a performance timer that the rAF callback
                        // gets a performance timer value. Not sure if this is always true.
                        var remaining = frameDeadline - performance.now()
                        return remaining > 0 ? remaining : 0
                      },
                    }
                  } else {
                    frameDeadlineObject = {
                      didTimeout: false,
                      timeRemaining: function () {
                        // Fallback to Date.now()
                        var remaining = frameDeadline - Date.now()
                        return remaining > 0 ? remaining : 0
                      },
                    }
                  }

                  // We use the postMessage trick to defer idle work until after the repaint.
                  var messageKey =
                    '__reactIdleCallback$' + Math.random().toString(36).slice(2)
                  var idleTick = function (event) {
                    if (event.source !== window || event.data !== messageKey) {
                      return
                    }

                    isIdleScheduled = false

                    var currentTime = now()
                    if (frameDeadline - currentTime <= 0) {
                      // There's no time left in this idle period. Check if the callback has
                      // a timeout and whether it's been exceeded.
                      if (timeoutTime !== -1 && timeoutTime <= currentTime) {
                        // Exceeded the timeout. Invoke the callback even though there's no
                        // time left.
                        frameDeadlineObject.didTimeout = true
                      } else {
                        // No timeout.
                        if (!isAnimationFrameScheduled) {
                          // Schedule another animation callback so we retry later.
                          isAnimationFrameScheduled = true
                          requestAnimationFrame(animationTick)
                        }
                        // Exit without invoking the callback.
                        return
                      }
                    } else {
                      // There's still time left in this idle period.
                      frameDeadlineObject.didTimeout = false
                    }

                    timeoutTime = -1
                    var callback = scheduledRICCallback
                    scheduledRICCallback = null
                    if (callback !== null) {
                      callback(frameDeadlineObject)
                    }
                  }
                  // Assumes that we have addEventListener in this environment. Might need
                  // something better for old IE.
                  window.addEventListener('message', idleTick, false)

                  var animationTick = function (rafTime) {
                    isAnimationFrameScheduled = false
                    var nextFrameTime =
                      rafTime - frameDeadline + activeFrameTime
                    if (
                      nextFrameTime < activeFrameTime &&
                      previousFrameTime < activeFrameTime
                    ) {
                      if (nextFrameTime < 8) {
                        // Defensive coding. We don't support higher frame rates than 120hz.
                        // If we get lower than that, it is probably a bug.
                        nextFrameTime = 8
                      }
                      // If one frame goes long, then the next one can be short to catch up.
                      // If two frames are short in a row, then that's an indication that we
                      // actually have a higher frame rate than what we're currently optimizing.
                      // We adjust our heuristic dynamically accordingly. For example, if we're
                      // running on 120hz display or 90hz VR display.
                      // Take the max of the two in case one of them was an anomaly due to
                      // missed frame deadlines.
                      activeFrameTime =
                        nextFrameTime < previousFrameTime
                          ? previousFrameTime
                          : nextFrameTime
                    } else {
                      previousFrameTime = nextFrameTime
                    }
                    frameDeadline = rafTime + activeFrameTime
                    if (!isIdleScheduled) {
                      isIdleScheduled = true
                      window.postMessage(messageKey, '*')
                    }
                  }

                  rIC = function (callback, options) {
                    // This assumes that we only schedule one callback at a time because that's
                    // how Fiber uses it.
                    scheduledRICCallback = callback
                    if (
                      options != null &&
                      typeof options.timeout === 'number'
                    ) {
                      timeoutTime = now() + options.timeout
                    }
                    if (!isAnimationFrameScheduled) {
                      // If rAF didn't already schedule one, we need to schedule a frame.
                      // TODO: If this rAF doesn't materialize because the browser throttles, we
                      // might want to still have setTimeout trigger rIC as a backup to ensure
                      // that we keep performing work.
                      isAnimationFrameScheduled = true
                      requestAnimationFrame(animationTick)
                    }
                    return 0
                  }

                  cIC = function () {
                    scheduledRICCallback = null
                    isIdleScheduled = false
                    timeoutTime = -1
                  }
                } else {
                  rIC = window.requestIdleCallback
                  cIC = window.cancelIdleCallback
                }

                var didWarnSelectedSetOnOption = false

                function flattenChildren(children) {
                  var content = ''

                  // Flatten children and warn if they aren't strings or numbers;
                  // invalid types are ignored.
                  // We can silently skip them because invalid DOM nesting warning
                  // catches these cases in Fiber.
                  React.Children.forEach(children, function (child) {
                    if (child == null) {
                      return
                    }
                    if (
                      typeof child === 'string' ||
                      typeof child === 'number'
                    ) {
                      content += child
                    }
                  })

                  return content
                }

                /**
                 * Implements an <option> host component that warns when `selected` is set.
                 */

                function validateProps(element, props) {
                  // TODO (yungsters): Remove support for `selected` in <option>.
                  {
                    if (props.selected != null && !didWarnSelectedSetOnOption) {
                      warning(
                        false,
                        'Use the `defaultValue` or `value` props on <select> instead of ' +
                          'setting `selected` on <option>.'
                      )
                      didWarnSelectedSetOnOption = true
                    }
                  }
                }

                function postMountWrapper$1(element, props) {
                  // value="" should make a value attribute (#6219)
                  if (props.value != null) {
                    element.setAttribute('value', props.value)
                  }
                }

                function getHostProps$1(element, props) {
                  var hostProps = _assign({ children: undefined }, props)
                  var content = flattenChildren(props.children)

                  if (content) {
                    hostProps.children = content
                  }

                  return hostProps
                }

                // TODO: direct imports like some-package/src/* are bad. Fix me.
                var getCurrentFiberOwnerName$3 =
                  ReactDebugCurrentFiber.getCurrentFiberOwnerName
                var getCurrentFiberStackAddendum$4 =
                  ReactDebugCurrentFiber.getCurrentFiberStackAddendum

                var didWarnValueDefaultValue$1 = void 0

                {
                  didWarnValueDefaultValue$1 = false
                }

                function getDeclarationErrorAddendum() {
                  var ownerName = getCurrentFiberOwnerName$3()
                  if (ownerName) {
                    return '\n\nCheck the render method of `' + ownerName + '`.'
                  }
                  return ''
                }

                var valuePropNames = ['value', 'defaultValue']

                /**
                 * Validation function for `value` and `defaultValue`.
                 */
                function checkSelectPropTypes(props) {
                  ReactControlledValuePropTypes.checkPropTypes(
                    'select',
                    props,
                    getCurrentFiberStackAddendum$4
                  )

                  for (var i = 0; i < valuePropNames.length; i++) {
                    var propName = valuePropNames[i]
                    if (props[propName] == null) {
                      continue
                    }
                    var isArray = Array.isArray(props[propName])
                    if (props.multiple && !isArray) {
                      warning(
                        false,
                        'The `%s` prop supplied to <select> must be an array if ' +
                          '`multiple` is true.%s',
                        propName,
                        getDeclarationErrorAddendum()
                      )
                    } else if (!props.multiple && isArray) {
                      warning(
                        false,
                        'The `%s` prop supplied to <select> must be a scalar ' +
                          'value if `multiple` is false.%s',
                        propName,
                        getDeclarationErrorAddendum()
                      )
                    }
                  }
                }

                function updateOptions(
                  node,
                  multiple,
                  propValue,
                  setDefaultSelected
                ) {
                  var options = node.options

                  if (multiple) {
                    var selectedValues = propValue
                    var selectedValue = {}
                    for (var i = 0; i < selectedValues.length; i++) {
                      // Prefix to avoid chaos with special keys.
                      selectedValue['$' + selectedValues[i]] = true
                    }
                    for (var _i = 0; _i < options.length; _i++) {
                      var selected = selectedValue.hasOwnProperty(
                        '$' + options[_i].value
                      )
                      if (options[_i].selected !== selected) {
                        options[_i].selected = selected
                      }
                      if (selected && setDefaultSelected) {
                        options[_i].defaultSelected = true
                      }
                    }
                  } else {
                    // Do not set `select.value` as exact behavior isn't consistent across all
                    // browsers for all cases.
                    var _selectedValue = '' + propValue
                    var defaultSelected = null
                    for (var _i2 = 0; _i2 < options.length; _i2++) {
                      if (options[_i2].value === _selectedValue) {
                        options[_i2].selected = true
                        if (setDefaultSelected) {
                          options[_i2].defaultSelected = true
                        }
                        return
                      }
                      if (defaultSelected === null && !options[_i2].disabled) {
                        defaultSelected = options[_i2]
                      }
                    }
                    if (defaultSelected !== null) {
                      defaultSelected.selected = true
                    }
                  }
                }

                /**
                 * Implements a <select> host component that allows optionally setting the
                 * props `value` and `defaultValue`. If `multiple` is false, the prop must be a
                 * stringable. If `multiple` is true, the prop must be an array of stringables.
                 *
                 * If `value` is not supplied (or null/undefined), user actions that change the
                 * selected option will trigger updates to the rendered options.
                 *
                 * If it is supplied (and not null/undefined), the rendered options will not
                 * update in response to user actions. Instead, the `value` prop must change in
                 * order for the rendered options to update.
                 *
                 * If `defaultValue` is provided, any options with the supplied values will be
                 * selected.
                 */

                function getHostProps$2(element, props) {
                  return _assign({}, props, {
                    value: undefined,
                  })
                }

                function initWrapperState$1(element, props) {
                  var node = element
                  {
                    checkSelectPropTypes(props)
                  }

                  var value = props.value
                  node._wrapperState = {
                    initialValue: value != null ? value : props.defaultValue,
                    wasMultiple: !!props.multiple,
                  }

                  {
                    if (
                      props.value !== undefined &&
                      props.defaultValue !== undefined &&
                      !didWarnValueDefaultValue$1
                    ) {
                      warning(
                        false,
                        'Select elements must be either controlled or uncontrolled ' +
                          '(specify either the value prop, or the defaultValue prop, but not ' +
                          'both). Decide between using a controlled or uncontrolled select ' +
                          'element and remove one of these props. More info: ' +
                          'https://fb.me/react-controlled-components'
                      )
                      didWarnValueDefaultValue$1 = true
                    }
                  }
                }

                function postMountWrapper$2(element, props) {
                  var node = element
                  node.multiple = !!props.multiple
                  var value = props.value
                  if (value != null) {
                    updateOptions(node, !!props.multiple, value, false)
                  } else if (props.defaultValue != null) {
                    updateOptions(
                      node,
                      !!props.multiple,
                      props.defaultValue,
                      true
                    )
                  }
                }

                function postUpdateWrapper(element, props) {
                  var node = element
                  // After the initial mount, we control selected-ness manually so don't pass
                  // this value down
                  node._wrapperState.initialValue = undefined

                  var wasMultiple = node._wrapperState.wasMultiple
                  node._wrapperState.wasMultiple = !!props.multiple

                  var value = props.value
                  if (value != null) {
                    updateOptions(node, !!props.multiple, value, false)
                  } else if (wasMultiple !== !!props.multiple) {
                    // For simplicity, reapply `defaultValue` if `multiple` is toggled.
                    if (props.defaultValue != null) {
                      updateOptions(
                        node,
                        !!props.multiple,
                        props.defaultValue,
                        true
                      )
                    } else {
                      // Revert the select back to its default unselected state.
                      updateOptions(
                        node,
                        !!props.multiple,
                        props.multiple ? [] : '',
                        false
                      )
                    }
                  }
                }

                function restoreControlledState$2(element, props) {
                  var node = element
                  var value = props.value

                  if (value != null) {
                    updateOptions(node, !!props.multiple, value, false)
                  }
                }

                // TODO: direct imports like some-package/src/* are bad. Fix me.
                var getCurrentFiberStackAddendum$5 =
                  ReactDebugCurrentFiber.getCurrentFiberStackAddendum

                var didWarnValDefaultVal = false

                /**
                 * Implements a <textarea> host component that allows setting `value`, and
                 * `defaultValue`. This differs from the traditional DOM API because value is
                 * usually set as PCDATA children.
                 *
                 * If `value` is not supplied (or null/undefined), user actions that affect the
                 * value will trigger updates to the element.
                 *
                 * If `value` is supplied (and not null/undefined), the rendered element will
                 * not trigger updates to the element. Instead, the `value` prop must change in
                 * order for the rendered element to be updated.
                 *
                 * The rendered element will be initialized with an empty value, the prop
                 * `defaultValue` if specified, or the children content (deprecated).
                 */

                function getHostProps$3(element, props) {
                  var node = element
                  !(props.dangerouslySetInnerHTML == null)
                    ? invariant(
                        false,
                        '`dangerouslySetInnerHTML` does not make sense on <textarea>.'
                      )
                    : void 0

                  // Always set children to the same thing. In IE9, the selection range will
                  // get reset if `textContent` is mutated.  We could add a check in setTextContent
                  // to only set the value if/when the value differs from the node value (which would
                  // completely solve this IE9 bug), but Sebastian+Sophie seemed to like this
                  // solution. The value can be a boolean or object so that's why it's forced
                  // to be a string.
                  var hostProps = _assign({}, props, {
                    value: undefined,
                    defaultValue: undefined,
                    children: '' + node._wrapperState.initialValue,
                  })

                  return hostProps
                }

                function initWrapperState$2(element, props) {
                  var node = element
                  {
                    ReactControlledValuePropTypes.checkPropTypes(
                      'textarea',
                      props,
                      getCurrentFiberStackAddendum$5
                    )
                    if (
                      props.value !== undefined &&
                      props.defaultValue !== undefined &&
                      !didWarnValDefaultVal
                    ) {
                      warning(
                        false,
                        'Textarea elements must be either controlled or uncontrolled ' +
                          '(specify either the value prop, or the defaultValue prop, but not ' +
                          'both). Decide between using a controlled or uncontrolled textarea ' +
                          'and remove one of these props. More info: ' +
                          'https://fb.me/react-controlled-components'
                      )
                      didWarnValDefaultVal = true
                    }
                  }

                  var initialValue = props.value

                  // Only bother fetching default value if we're going to use it
                  if (initialValue == null) {
                    var defaultValue = props.defaultValue
                    // TODO (yungsters): Remove support for children content in <textarea>.
                    var children = props.children
                    if (children != null) {
                      {
                        warning(
                          false,
                          'Use the `defaultValue` or `value` props instead of setting ' +
                            'children on <textarea>.'
                        )
                      }
                      !(defaultValue == null)
                        ? invariant(
                            false,
                            'If you supply `defaultValue` on a <textarea>, do not pass children.'
                          )
                        : void 0
                      if (Array.isArray(children)) {
                        !(children.length <= 1)
                          ? invariant(
                              false,
                              '<textarea> can only have at most one child.'
                            )
                          : void 0
                        children = children[0]
                      }

                      defaultValue = '' + children
                    }
                    if (defaultValue == null) {
                      defaultValue = ''
                    }
                    initialValue = defaultValue
                  }

                  node._wrapperState = {
                    initialValue: '' + initialValue,
                  }
                }

                function updateWrapper$1(element, props) {
                  var node = element
                  var value = props.value
                  if (value != null) {
                    // Cast `value` to a string to ensure the value is set correctly. While
                    // browsers typically do this as necessary, jsdom doesn't.
                    var newValue = '' + value

                    // To avoid side effects (such as losing text selection), only set value if changed
                    if (newValue !== node.value) {
                      node.value = newValue
                    }
                    if (props.defaultValue == null) {
                      node.defaultValue = newValue
                    }
                  }
                  if (props.defaultValue != null) {
                    node.defaultValue = props.defaultValue
                  }
                }

                function postMountWrapper$3(element, props) {
                  var node = element
                  // This is in postMount because we need access to the DOM node, which is not
                  // available until after the component has mounted.
                  var textContent = node.textContent

                  // Only set node.value if textContent is equal to the expected
                  // initial value. In IE10/IE11 there is a bug where the placeholder attribute
                  // will populate textContent as well.
                  // https://developer.microsoft.com/microsoft-edge/platform/issues/101525/
                  if (textContent === node._wrapperState.initialValue) {
                    node.value = textContent
                  }
                }

                function restoreControlledState$3(element, props) {
                  // DOM component is still mounted; update
                  updateWrapper$1(element, props)
                }

                var HTML_NAMESPACE$1 = 'http://www.w3.org/1999/xhtml'
                var MATH_NAMESPACE = 'http://www.w3.org/1998/Math/MathML'
                var SVG_NAMESPACE = 'http://www.w3.org/2000/svg'

                var Namespaces = {
                  html: HTML_NAMESPACE$1,
                  mathml: MATH_NAMESPACE,
                  svg: SVG_NAMESPACE,
                }

                // Assumes there is no parent namespace.
                function getIntrinsicNamespace(type) {
                  switch (type) {
                    case 'svg':
                      return SVG_NAMESPACE
                    case 'math':
                      return MATH_NAMESPACE
                    default:
                      return HTML_NAMESPACE$1
                  }
                }

                function getChildNamespace(parentNamespace, type) {
                  if (
                    parentNamespace == null ||
                    parentNamespace === HTML_NAMESPACE$1
                  ) {
                    // No (or default) parent namespace: potential entry point.
                    return getIntrinsicNamespace(type)
                  }
                  if (
                    parentNamespace === SVG_NAMESPACE &&
                    type === 'foreignObject'
                  ) {
                    // We're leaving SVG.
                    return HTML_NAMESPACE$1
                  }
                  // By default, pass namespace below.
                  return parentNamespace
                }

                /* globals MSApp */

                /**
                 * Create a function which has 'unsafe' privileges (required by windows8 apps)
                 */
                var createMicrosoftUnsafeLocalFunction = function (func) {
                  if (
                    typeof MSApp !== 'undefined' &&
                    MSApp.execUnsafeLocalFunction
                  ) {
                    return function (arg0, arg1, arg2, arg3) {
                      MSApp.execUnsafeLocalFunction(function () {
                        return func(arg0, arg1, arg2, arg3)
                      })
                    }
                  } else {
                    return func
                  }
                }

                // SVG temp container for IE lacking innerHTML
                var reusableSVGContainer = void 0

                /**
                 * Set the innerHTML property of a node
                 *
                 * @param {DOMElement} node
                 * @param {string} html
                 * @internal
                 */
                var setInnerHTML = createMicrosoftUnsafeLocalFunction(function (
                  node,
                  html
                ) {
                  // IE does not have innerHTML for SVG nodes, so instead we inject the
                  // new markup in a temp node and then move the child nodes across into
                  // the target node

                  if (
                    node.namespaceURI === Namespaces.svg &&
                    !('innerHTML' in node)
                  ) {
                    reusableSVGContainer =
                      reusableSVGContainer || document.createElement('div')
                    reusableSVGContainer.innerHTML = '<svg>' + html + '</svg>'
                    var svgNode = reusableSVGContainer.firstChild
                    while (node.firstChild) {
                      node.removeChild(node.firstChild)
                    }
                    while (svgNode.firstChild) {
                      node.appendChild(svgNode.firstChild)
                    }
                  } else {
                    node.innerHTML = html
                  }
                })

                /**
                 * Set the textContent property of a node. For text updates, it's faster
                 * to set the `nodeValue` of the Text node directly instead of using
                 * `.textContent` which will remove the existing node and create a new one.
                 *
                 * @param {DOMElement} node
                 * @param {string} text
                 * @internal
                 */
                var setTextContent = function (node, text) {
                  if (text) {
                    var firstChild = node.firstChild

                    if (
                      firstChild &&
                      firstChild === node.lastChild &&
                      firstChild.nodeType === TEXT_NODE
                    ) {
                      firstChild.nodeValue = text
                      return
                    }
                  }
                  node.textContent = text
                }

                /**
                 * CSS properties which accept numbers but are not in units of "px".
                 */
                var isUnitlessNumber = {
                  animationIterationCount: true,
                  borderImageOutset: true,
                  borderImageSlice: true,
                  borderImageWidth: true,
                  boxFlex: true,
                  boxFlexGroup: true,
                  boxOrdinalGroup: true,
                  columnCount: true,
                  columns: true,
                  flex: true,
                  flexGrow: true,
                  flexPositive: true,
                  flexShrink: true,
                  flexNegative: true,
                  flexOrder: true,
                  gridRow: true,
                  gridRowEnd: true,
                  gridRowSpan: true,
                  gridRowStart: true,
                  gridColumn: true,
                  gridColumnEnd: true,
                  gridColumnSpan: true,
                  gridColumnStart: true,
                  fontWeight: true,
                  lineClamp: true,
                  lineHeight: true,
                  opacity: true,
                  order: true,
                  orphans: true,
                  tabSize: true,
                  widows: true,
                  zIndex: true,
                  zoom: true,

                  // SVG-related properties
                  fillOpacity: true,
                  floodOpacity: true,
                  stopOpacity: true,
                  strokeDasharray: true,
                  strokeDashoffset: true,
                  strokeMiterlimit: true,
                  strokeOpacity: true,
                  strokeWidth: true,
                }

                /**
                 * @param {string} prefix vendor-specific prefix, eg: Webkit
                 * @param {string} key style name, eg: transitionDuration
                 * @return {string} style name prefixed with `prefix`, properly camelCased, eg:
                 * WebkitTransitionDuration
                 */
                function prefixKey(prefix, key) {
                  return prefix + key.charAt(0).toUpperCase() + key.substring(1)
                }

                /**
                 * Support style names that may come passed in prefixed by adding permutations
                 * of vendor prefixes.
                 */
                var prefixes = ['Webkit', 'ms', 'Moz', 'O']

                // Using Object.keys here, or else the vanilla for-in loop makes IE8 go into an
                // infinite loop, because it iterates over the newly added props too.
                Object.keys(isUnitlessNumber).forEach(function (prop) {
                  prefixes.forEach(function (prefix) {
                    isUnitlessNumber[prefixKey(prefix, prop)] =
                      isUnitlessNumber[prop]
                  })
                })

                /**
                 * Convert a value into the proper css writable value. The style name `name`
                 * should be logical (no hyphens), as specified
                 * in `CSSProperty.isUnitlessNumber`.
                 *
                 * @param {string} name CSS property name such as `topMargin`.
                 * @param {*} value CSS property value such as `10px`.
                 * @return {string} Normalized style value with dimensions applied.
                 */
                function dangerousStyleValue(name, value, isCustomProperty) {
                  // Note that we've removed escapeTextForBrowser() calls here since the
                  // whole string will be escaped when the attribute is injected into
                  // the markup. If you provide unsafe user data here they can inject
                  // arbitrary CSS which may be problematic (I couldn't repro this):
                  // https://www.owasp.org/index.php/XSS_Filter_Evasion_Cheat_Sheet
                  // http://www.thespanner.co.uk/2007/11/26/ultimate-xss-css-injection/
                  // This is not an XSS hole but instead a potential CSS injection issue
                  // which has lead to a greater discussion about how we're going to
                  // trust URLs moving forward. See #2115901

                  var isEmpty =
                    value == null || typeof value === 'boolean' || value === ''
                  if (isEmpty) {
                    return ''
                  }

                  if (
                    !isCustomProperty &&
                    typeof value === 'number' &&
                    value !== 0 &&
                    !(
                      isUnitlessNumber.hasOwnProperty(name) &&
                      isUnitlessNumber[name]
                    )
                  ) {
                    return value + 'px' // Presumes implicit 'px' suffix for unitless numbers
                  }

                  return ('' + value).trim()
                }

                var warnValidStyle = emptyFunction

                {
                  // 'msTransform' is correct, but the other prefixes should be capitalized
                  var badVendoredStyleNamePattern = /^(?:webkit|moz|o)[A-Z]/

                  // style values shouldn't contain a semicolon
                  var badStyleValueWithSemicolonPattern = /;\s*$/

                  var warnedStyleNames = {}
                  var warnedStyleValues = {}
                  var warnedForNaNValue = false
                  var warnedForInfinityValue = false

                  var warnHyphenatedStyleName = function (name, getStack) {
                    if (
                      warnedStyleNames.hasOwnProperty(name) &&
                      warnedStyleNames[name]
                    ) {
                      return
                    }

                    warnedStyleNames[name] = true
                    warning(
                      false,
                      'Unsupported style property %s. Did you mean %s?%s',
                      name,
                      camelizeStyleName(name),
                      getStack()
                    )
                  }

                  var warnBadVendoredStyleName = function (name, getStack) {
                    if (
                      warnedStyleNames.hasOwnProperty(name) &&
                      warnedStyleNames[name]
                    ) {
                      return
                    }

                    warnedStyleNames[name] = true
                    warning(
                      false,
                      'Unsupported vendor-prefixed style property %s. Did you mean %s?%s',
                      name,
                      name.charAt(0).toUpperCase() + name.slice(1),
                      getStack()
                    )
                  }

                  var warnStyleValueWithSemicolon = function (
                    name,
                    value,
                    getStack
                  ) {
                    if (
                      warnedStyleValues.hasOwnProperty(value) &&
                      warnedStyleValues[value]
                    ) {
                      return
                    }

                    warnedStyleValues[value] = true
                    warning(
                      false,
                      "Style property values shouldn't contain a semicolon. " +
                        'Try "%s: %s" instead.%s',
                      name,
                      value.replace(badStyleValueWithSemicolonPattern, ''),
                      getStack()
                    )
                  }

                  var warnStyleValueIsNaN = function (name, value, getStack) {
                    if (warnedForNaNValue) {
                      return
                    }

                    warnedForNaNValue = true
                    warning(
                      false,
                      '`NaN` is an invalid value for the `%s` css style property.%s',
                      name,
                      getStack()
                    )
                  }

                  var warnStyleValueIsInfinity = function (
                    name,
                    value,
                    getStack
                  ) {
                    if (warnedForInfinityValue) {
                      return
                    }

                    warnedForInfinityValue = true
                    warning(
                      false,
                      '`Infinity` is an invalid value for the `%s` css style property.%s',
                      name,
                      getStack()
                    )
                  }

                  warnValidStyle = function (name, value, getStack) {
                    if (name.indexOf('-') > -1) {
                      warnHyphenatedStyleName(name, getStack)
                    } else if (badVendoredStyleNamePattern.test(name)) {
                      warnBadVendoredStyleName(name, getStack)
                    } else if (badStyleValueWithSemicolonPattern.test(value)) {
                      warnStyleValueWithSemicolon(name, value, getStack)
                    }

                    if (typeof value === 'number') {
                      if (isNaN(value)) {
                        warnStyleValueIsNaN(name, value, getStack)
                      } else if (!isFinite(value)) {
                        warnStyleValueIsInfinity(name, value, getStack)
                      }
                    }
                  }
                }

                var warnValidStyle$1 = warnValidStyle

                /**
                 * Operations for dealing with CSS properties.
                 */

                /**
                 * This creates a string that is expected to be equivalent to the style
                 * attribute generated by server-side rendering. It by-passes warnings and
                 * security checks so it's not safe to use this value for anything other than
                 * comparison. It is only used in DEV for SSR validation.
                 */
                function createDangerousStringForStyles(styles) {
                  {
                    var serialized = ''
                    var delimiter = ''
                    for (var styleName in styles) {
                      if (!styles.hasOwnProperty(styleName)) {
                        continue
                      }
                      var styleValue = styles[styleName]
                      if (styleValue != null) {
                        var isCustomProperty = styleName.indexOf('--') === 0
                        serialized +=
                          delimiter + hyphenateStyleName(styleName) + ':'
                        serialized += dangerousStyleValue(
                          styleName,
                          styleValue,
                          isCustomProperty
                        )

                        delimiter = ';'
                      }
                    }
                    return serialized || null
                  }
                }

                /**
                 * Sets the value for multiple styles on a node.  If a value is specified as
                 * '' (empty string), the corresponding style property will be unset.
                 *
                 * @param {DOMElement} node
                 * @param {object} styles
                 */
                function setValueForStyles(node, styles, getStack) {
                  var style = node.style
                  for (var styleName in styles) {
                    if (!styles.hasOwnProperty(styleName)) {
                      continue
                    }
                    var isCustomProperty = styleName.indexOf('--') === 0
                    {
                      if (!isCustomProperty) {
                        warnValidStyle$1(styleName, styles[styleName], getStack)
                      }
                    }
                    var styleValue = dangerousStyleValue(
                      styleName,
                      styles[styleName],
                      isCustomProperty
                    )
                    if (styleName === 'float') {
                      styleName = 'cssFloat'
                    }
                    if (isCustomProperty) {
                      style.setProperty(styleName, styleValue)
                    } else {
                      style[styleName] = styleValue
                    }
                  }
                }

                // For HTML, certain tags should omit their close tag. We keep a whitelist for
                // those special-case tags.

                var omittedCloseTags = {
                  area: true,
                  base: true,
                  br: true,
                  col: true,
                  embed: true,
                  hr: true,
                  img: true,
                  input: true,
                  keygen: true,
                  link: true,
                  meta: true,
                  param: true,
                  source: true,
                  track: true,
                  wbr: true,
                }

                // For HTML, certain tags cannot have children. This has the same purpose as
                // `omittedCloseTags` except that `menuitem` should still have its closing tag.

                var voidElementTags = _assign(
                  {
                    menuitem: true,
                  },
                  omittedCloseTags
                )

                var HTML$1 = '__html'

                function assertValidProps(tag, props, getStack) {
                  if (!props) {
                    return
                  }
                  // Note the use of `==` which checks for null or undefined.
                  if (voidElementTags[tag]) {
                    !(
                      props.children == null &&
                      props.dangerouslySetInnerHTML == null
                    )
                      ? invariant(
                          false,
                          '%s is a void element tag and must neither have `children` nor use `dangerouslySetInnerHTML`.%s',
                          tag,
                          getStack()
                        )
                      : void 0
                  }
                  if (props.dangerouslySetInnerHTML != null) {
                    !(props.children == null)
                      ? invariant(
                          false,
                          'Can only set one of `children` or `props.dangerouslySetInnerHTML`.'
                        )
                      : void 0
                    !(
                      typeof props.dangerouslySetInnerHTML === 'object' &&
                      HTML$1 in props.dangerouslySetInnerHTML
                    )
                      ? invariant(
                          false,
                          '`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. Please visit https://fb.me/react-invariant-dangerously-set-inner-html for more information.'
                        )
                      : void 0
                  }
                  {
                    !(
                      props.suppressContentEditableWarning ||
                      !props.contentEditable ||
                      props.children == null
                    )
                      ? warning(
                          false,
                          'A component is `contentEditable` and contains `children` managed by ' +
                            'React. It is now your responsibility to guarantee that none of ' +
                            'those nodes are unexpectedly modified or duplicated. This is ' +
                            'probably not intentional.%s',
                          getStack()
                        )
                      : void 0
                  }
                  !(props.style == null || typeof props.style === 'object')
                    ? invariant(
                        false,
                        "The `style` prop expects a mapping from style properties to values, not a string. For example, style={{marginRight: spacing + 'em'}} when using JSX.%s",
                        getStack()
                      )
                    : void 0
                }

                function isCustomComponent(tagName, props) {
                  if (tagName.indexOf('-') === -1) {
                    return typeof props.is === 'string'
                  }
                  switch (tagName) {
                    // These are reserved SVG and MathML elements.
                    // We don't mind this whitelist too much because we expect it to never grow.
                    // The alternative is to track the namespace in a few places which is convoluted.
                    // https://w3c.github.io/webcomponents/spec/custom/#custom-elements-core-concepts
                    case 'annotation-xml':
                    case 'color-profile':
                    case 'font-face':
                    case 'font-face-src':
                    case 'font-face-uri':
                    case 'font-face-format':
                    case 'font-face-name':
                    case 'missing-glyph':
                      return false
                    default:
                      return true
                  }
                }

                // When adding attributes to the HTML or SVG whitelist, be sure to
                // also add them to this module to ensure casing and incorrect name
                // warnings.
                var possibleStandardNames = {
                  // HTML
                  accept: 'accept',
                  acceptcharset: 'acceptCharset',
                  'accept-charset': 'acceptCharset',
                  accesskey: 'accessKey',
                  action: 'action',
                  allowfullscreen: 'allowFullScreen',
                  alt: 'alt',
                  as: 'as',
                  async: 'async',
                  autocapitalize: 'autoCapitalize',
                  autocomplete: 'autoComplete',
                  autocorrect: 'autoCorrect',
                  autofocus: 'autoFocus',
                  autoplay: 'autoPlay',
                  autosave: 'autoSave',
                  capture: 'capture',
                  cellpadding: 'cellPadding',
                  cellspacing: 'cellSpacing',
                  challenge: 'challenge',
                  charset: 'charSet',
                  checked: 'checked',
                  children: 'children',
                  cite: 'cite',
                  class: 'className',
                  classid: 'classID',
                  classname: 'className',
                  cols: 'cols',
                  colspan: 'colSpan',
                  content: 'content',
                  contenteditable: 'contentEditable',
                  contextmenu: 'contextMenu',
                  controls: 'controls',
                  controlslist: 'controlsList',
                  coords: 'coords',
                  crossorigin: 'crossOrigin',
                  dangerouslysetinnerhtml: 'dangerouslySetInnerHTML',
                  data: 'data',
                  datetime: 'dateTime',
                  default: 'default',
                  defaultchecked: 'defaultChecked',
                  defaultvalue: 'defaultValue',
                  defer: 'defer',
                  dir: 'dir',
                  disabled: 'disabled',
                  download: 'download',
                  draggable: 'draggable',
                  enctype: 'encType',
                  for: 'htmlFor',
                  form: 'form',
                  formmethod: 'formMethod',
                  formaction: 'formAction',
                  formenctype: 'formEncType',
                  formnovalidate: 'formNoValidate',
                  formtarget: 'formTarget',
                  frameborder: 'frameBorder',
                  headers: 'headers',
                  height: 'height',
                  hidden: 'hidden',
                  high: 'high',
                  href: 'href',
                  hreflang: 'hrefLang',
                  htmlfor: 'htmlFor',
                  httpequiv: 'httpEquiv',
                  'http-equiv': 'httpEquiv',
                  icon: 'icon',
                  id: 'id',
                  innerhtml: 'innerHTML',
                  inputmode: 'inputMode',
                  integrity: 'integrity',
                  is: 'is',
                  itemid: 'itemID',
                  itemprop: 'itemProp',
                  itemref: 'itemRef',
                  itemscope: 'itemScope',
                  itemtype: 'itemType',
                  keyparams: 'keyParams',
                  keytype: 'keyType',
                  kind: 'kind',
                  label: 'label',
                  lang: 'lang',
                  list: 'list',
                  loop: 'loop',
                  low: 'low',
                  manifest: 'manifest',
                  marginwidth: 'marginWidth',
                  marginheight: 'marginHeight',
                  max: 'max',
                  maxlength: 'maxLength',
                  media: 'media',
                  mediagroup: 'mediaGroup',
                  method: 'method',
                  min: 'min',
                  minlength: 'minLength',
                  multiple: 'multiple',
                  muted: 'muted',
                  name: 'name',
                  nomodule: 'noModule',
                  nonce: 'nonce',
                  novalidate: 'noValidate',
                  open: 'open',
                  optimum: 'optimum',
                  pattern: 'pattern',
                  placeholder: 'placeholder',
                  playsinline: 'playsInline',
                  poster: 'poster',
                  preload: 'preload',
                  profile: 'profile',
                  radiogroup: 'radioGroup',
                  readonly: 'readOnly',
                  referrerpolicy: 'referrerPolicy',
                  rel: 'rel',
                  required: 'required',
                  reversed: 'reversed',
                  role: 'role',
                  rows: 'rows',
                  rowspan: 'rowSpan',
                  sandbox: 'sandbox',
                  scope: 'scope',
                  scoped: 'scoped',
                  scrolling: 'scrolling',
                  seamless: 'seamless',
                  selected: 'selected',
                  shape: 'shape',
                  size: 'size',
                  sizes: 'sizes',
                  span: 'span',
                  spellcheck: 'spellCheck',
                  src: 'src',
                  srcdoc: 'srcDoc',
                  srclang: 'srcLang',
                  srcset: 'srcSet',
                  start: 'start',
                  step: 'step',
                  style: 'style',
                  summary: 'summary',
                  tabindex: 'tabIndex',
                  target: 'target',
                  title: 'title',
                  type: 'type',
                  usemap: 'useMap',
                  value: 'value',
                  width: 'width',
                  wmode: 'wmode',
                  wrap: 'wrap',

                  // SVG
                  about: 'about',
                  accentheight: 'accentHeight',
                  'accent-height': 'accentHeight',
                  accumulate: 'accumulate',
                  additive: 'additive',
                  alignmentbaseline: 'alignmentBaseline',
                  'alignment-baseline': 'alignmentBaseline',
                  allowreorder: 'allowReorder',
                  alphabetic: 'alphabetic',
                  amplitude: 'amplitude',
                  arabicform: 'arabicForm',
                  'arabic-form': 'arabicForm',
                  ascent: 'ascent',
                  attributename: 'attributeName',
                  attributetype: 'attributeType',
                  autoreverse: 'autoReverse',
                  azimuth: 'azimuth',
                  basefrequency: 'baseFrequency',
                  baselineshift: 'baselineShift',
                  'baseline-shift': 'baselineShift',
                  baseprofile: 'baseProfile',
                  bbox: 'bbox',
                  begin: 'begin',
                  bias: 'bias',
                  by: 'by',
                  calcmode: 'calcMode',
                  capheight: 'capHeight',
                  'cap-height': 'capHeight',
                  clip: 'clip',
                  clippath: 'clipPath',
                  'clip-path': 'clipPath',
                  clippathunits: 'clipPathUnits',
                  cliprule: 'clipRule',
                  'clip-rule': 'clipRule',
                  color: 'color',
                  colorinterpolation: 'colorInterpolation',
                  'color-interpolation': 'colorInterpolation',
                  colorinterpolationfilters: 'colorInterpolationFilters',
                  'color-interpolation-filters': 'colorInterpolationFilters',
                  colorprofile: 'colorProfile',
                  'color-profile': 'colorProfile',
                  colorrendering: 'colorRendering',
                  'color-rendering': 'colorRendering',
                  contentscripttype: 'contentScriptType',
                  contentstyletype: 'contentStyleType',
                  cursor: 'cursor',
                  cx: 'cx',
                  cy: 'cy',
                  d: 'd',
                  datatype: 'datatype',
                  decelerate: 'decelerate',
                  descent: 'descent',
                  diffuseconstant: 'diffuseConstant',
                  direction: 'direction',
                  display: 'display',
                  divisor: 'divisor',
                  dominantbaseline: 'dominantBaseline',
                  'dominant-baseline': 'dominantBaseline',
                  dur: 'dur',
                  dx: 'dx',
                  dy: 'dy',
                  edgemode: 'edgeMode',
                  elevation: 'elevation',
                  enablebackground: 'enableBackground',
                  'enable-background': 'enableBackground',
                  end: 'end',
                  exponent: 'exponent',
                  externalresourcesrequired: 'externalResourcesRequired',
                  fill: 'fill',
                  fillopacity: 'fillOpacity',
                  'fill-opacity': 'fillOpacity',
                  fillrule: 'fillRule',
                  'fill-rule': 'fillRule',
                  filter: 'filter',
                  filterres: 'filterRes',
                  filterunits: 'filterUnits',
                  floodopacity: 'floodOpacity',
                  'flood-opacity': 'floodOpacity',
                  floodcolor: 'floodColor',
                  'flood-color': 'floodColor',
                  focusable: 'focusable',
                  fontfamily: 'fontFamily',
                  'font-family': 'fontFamily',
                  fontsize: 'fontSize',
                  'font-size': 'fontSize',
                  fontsizeadjust: 'fontSizeAdjust',
                  'font-size-adjust': 'fontSizeAdjust',
                  fontstretch: 'fontStretch',
                  'font-stretch': 'fontStretch',
                  fontstyle: 'fontStyle',
                  'font-style': 'fontStyle',
                  fontvariant: 'fontVariant',
                  'font-variant': 'fontVariant',
                  fontweight: 'fontWeight',
                  'font-weight': 'fontWeight',
                  format: 'format',
                  from: 'from',
                  fx: 'fx',
                  fy: 'fy',
                  g1: 'g1',
                  g2: 'g2',
                  glyphname: 'glyphName',
                  'glyph-name': 'glyphName',
                  glyphorientationhorizontal: 'glyphOrientationHorizontal',
                  'glyph-orientation-horizontal': 'glyphOrientationHorizontal',
                  glyphorientationvertical: 'glyphOrientationVertical',
                  'glyph-orientation-vertical': 'glyphOrientationVertical',
                  glyphref: 'glyphRef',
                  gradienttransform: 'gradientTransform',
                  gradientunits: 'gradientUnits',
                  hanging: 'hanging',
                  horizadvx: 'horizAdvX',
                  'horiz-adv-x': 'horizAdvX',
                  horizoriginx: 'horizOriginX',
                  'horiz-origin-x': 'horizOriginX',
                  ideographic: 'ideographic',
                  imagerendering: 'imageRendering',
                  'image-rendering': 'imageRendering',
                  in2: 'in2',
                  in: 'in',
                  inlist: 'inlist',
                  intercept: 'intercept',
                  k1: 'k1',
                  k2: 'k2',
                  k3: 'k3',
                  k4: 'k4',
                  k: 'k',
                  kernelmatrix: 'kernelMatrix',
                  kernelunitlength: 'kernelUnitLength',
                  kerning: 'kerning',
                  keypoints: 'keyPoints',
                  keysplines: 'keySplines',
                  keytimes: 'keyTimes',
                  lengthadjust: 'lengthAdjust',
                  letterspacing: 'letterSpacing',
                  'letter-spacing': 'letterSpacing',
                  lightingcolor: 'lightingColor',
                  'lighting-color': 'lightingColor',
                  limitingconeangle: 'limitingConeAngle',
                  local: 'local',
                  markerend: 'markerEnd',
                  'marker-end': 'markerEnd',
                  markerheight: 'markerHeight',
                  markermid: 'markerMid',
                  'marker-mid': 'markerMid',
                  markerstart: 'markerStart',
                  'marker-start': 'markerStart',
                  markerunits: 'markerUnits',
                  markerwidth: 'markerWidth',
                  mask: 'mask',
                  maskcontentunits: 'maskContentUnits',
                  maskunits: 'maskUnits',
                  mathematical: 'mathematical',
                  mode: 'mode',
                  numoctaves: 'numOctaves',
                  offset: 'offset',
                  opacity: 'opacity',
                  operator: 'operator',
                  order: 'order',
                  orient: 'orient',
                  orientation: 'orientation',
                  origin: 'origin',
                  overflow: 'overflow',
                  overlineposition: 'overlinePosition',
                  'overline-position': 'overlinePosition',
                  overlinethickness: 'overlineThickness',
                  'overline-thickness': 'overlineThickness',
                  paintorder: 'paintOrder',
                  'paint-order': 'paintOrder',
                  panose1: 'panose1',
                  'panose-1': 'panose1',
                  pathlength: 'pathLength',
                  patterncontentunits: 'patternContentUnits',
                  patterntransform: 'patternTransform',
                  patternunits: 'patternUnits',
                  pointerevents: 'pointerEvents',
                  'pointer-events': 'pointerEvents',
                  points: 'points',
                  pointsatx: 'pointsAtX',
                  pointsaty: 'pointsAtY',
                  pointsatz: 'pointsAtZ',
                  prefix: 'prefix',
                  preservealpha: 'preserveAlpha',
                  preserveaspectratio: 'preserveAspectRatio',
                  primitiveunits: 'primitiveUnits',
                  property: 'property',
                  r: 'r',
                  radius: 'radius',
                  refx: 'refX',
                  refy: 'refY',
                  renderingintent: 'renderingIntent',
                  'rendering-intent': 'renderingIntent',
                  repeatcount: 'repeatCount',
                  repeatdur: 'repeatDur',
                  requiredextensions: 'requiredExtensions',
                  requiredfeatures: 'requiredFeatures',
                  resource: 'resource',
                  restart: 'restart',
                  result: 'result',
                  results: 'results',
                  rotate: 'rotate',
                  rx: 'rx',
                  ry: 'ry',
                  scale: 'scale',
                  security: 'security',
                  seed: 'seed',
                  shaperendering: 'shapeRendering',
                  'shape-rendering': 'shapeRendering',
                  slope: 'slope',
                  spacing: 'spacing',
                  specularconstant: 'specularConstant',
                  specularexponent: 'specularExponent',
                  speed: 'speed',
                  spreadmethod: 'spreadMethod',
                  startoffset: 'startOffset',
                  stddeviation: 'stdDeviation',
                  stemh: 'stemh',
                  stemv: 'stemv',
                  stitchtiles: 'stitchTiles',
                  stopcolor: 'stopColor',
                  'stop-color': 'stopColor',
                  stopopacity: 'stopOpacity',
                  'stop-opacity': 'stopOpacity',
                  strikethroughposition: 'strikethroughPosition',
                  'strikethrough-position': 'strikethroughPosition',
                  strikethroughthickness: 'strikethroughThickness',
                  'strikethrough-thickness': 'strikethroughThickness',
                  string: 'string',
                  stroke: 'stroke',
                  strokedasharray: 'strokeDasharray',
                  'stroke-dasharray': 'strokeDasharray',
                  strokedashoffset: 'strokeDashoffset',
                  'stroke-dashoffset': 'strokeDashoffset',
                  strokelinecap: 'strokeLinecap',
                  'stroke-linecap': 'strokeLinecap',
                  strokelinejoin: 'strokeLinejoin',
                  'stroke-linejoin': 'strokeLinejoin',
                  strokemiterlimit: 'strokeMiterlimit',
                  'stroke-miterlimit': 'strokeMiterlimit',
                  strokewidth: 'strokeWidth',
                  'stroke-width': 'strokeWidth',
                  strokeopacity: 'strokeOpacity',
                  'stroke-opacity': 'strokeOpacity',
                  suppresscontenteditablewarning:
                    'suppressContentEditableWarning',
                  suppresshydrationwarning: 'suppressHydrationWarning',
                  surfacescale: 'surfaceScale',
                  systemlanguage: 'systemLanguage',
                  tablevalues: 'tableValues',
                  targetx: 'targetX',
                  targety: 'targetY',
                  textanchor: 'textAnchor',
                  'text-anchor': 'textAnchor',
                  textdecoration: 'textDecoration',
                  'text-decoration': 'textDecoration',
                  textlength: 'textLength',
                  textrendering: 'textRendering',
                  'text-rendering': 'textRendering',
                  to: 'to',
                  transform: 'transform',
                  typeof: 'typeof',
                  u1: 'u1',
                  u2: 'u2',
                  underlineposition: 'underlinePosition',
                  'underline-position': 'underlinePosition',
                  underlinethickness: 'underlineThickness',
                  'underline-thickness': 'underlineThickness',
                  unicode: 'unicode',
                  unicodebidi: 'unicodeBidi',
                  'unicode-bidi': 'unicodeBidi',
                  unicoderange: 'unicodeRange',
                  'unicode-range': 'unicodeRange',
                  unitsperem: 'unitsPerEm',
                  'units-per-em': 'unitsPerEm',
                  unselectable: 'unselectable',
                  valphabetic: 'vAlphabetic',
                  'v-alphabetic': 'vAlphabetic',
                  values: 'values',
                  vectoreffect: 'vectorEffect',
                  'vector-effect': 'vectorEffect',
                  version: 'version',
                  vertadvy: 'vertAdvY',
                  'vert-adv-y': 'vertAdvY',
                  vertoriginx: 'vertOriginX',
                  'vert-origin-x': 'vertOriginX',
                  vertoriginy: 'vertOriginY',
                  'vert-origin-y': 'vertOriginY',
                  vhanging: 'vHanging',
                  'v-hanging': 'vHanging',
                  videographic: 'vIdeographic',
                  'v-ideographic': 'vIdeographic',
                  viewbox: 'viewBox',
                  viewtarget: 'viewTarget',
                  visibility: 'visibility',
                  vmathematical: 'vMathematical',
                  'v-mathematical': 'vMathematical',
                  vocab: 'vocab',
                  widths: 'widths',
                  wordspacing: 'wordSpacing',
                  'word-spacing': 'wordSpacing',
                  writingmode: 'writingMode',
                  'writing-mode': 'writingMode',
                  x1: 'x1',
                  x2: 'x2',
                  x: 'x',
                  xchannelselector: 'xChannelSelector',
                  xheight: 'xHeight',
                  'x-height': 'xHeight',
                  xlinkactuate: 'xlinkActuate',
                  'xlink:actuate': 'xlinkActuate',
                  xlinkarcrole: 'xlinkArcrole',
                  'xlink:arcrole': 'xlinkArcrole',
                  xlinkhref: 'xlinkHref',
                  'xlink:href': 'xlinkHref',
                  xlinkrole: 'xlinkRole',
                  'xlink:role': 'xlinkRole',
                  xlinkshow: 'xlinkShow',
                  'xlink:show': 'xlinkShow',
                  xlinktitle: 'xlinkTitle',
                  'xlink:title': 'xlinkTitle',
                  xlinktype: 'xlinkType',
                  'xlink:type': 'xlinkType',
                  xmlbase: 'xmlBase',
                  'xml:base': 'xmlBase',
                  xmllang: 'xmlLang',
                  'xml:lang': 'xmlLang',
                  xmlns: 'xmlns',
                  'xml:space': 'xmlSpace',
                  xmlnsxlink: 'xmlnsXlink',
                  'xmlns:xlink': 'xmlnsXlink',
                  xmlspace: 'xmlSpace',
                  y1: 'y1',
                  y2: 'y2',
                  y: 'y',
                  ychannelselector: 'yChannelSelector',
                  z: 'z',
                  zoomandpan: 'zoomAndPan',
                }

                var ariaProperties = {
                  'aria-current': 0, // state
                  'aria-details': 0,
                  'aria-disabled': 0, // state
                  'aria-hidden': 0, // state
                  'aria-invalid': 0, // state
                  'aria-keyshortcuts': 0,
                  'aria-label': 0,
                  'aria-roledescription': 0,
                  // Widget Attributes
                  'aria-autocomplete': 0,
                  'aria-checked': 0,
                  'aria-expanded': 0,
                  'aria-haspopup': 0,
                  'aria-level': 0,
                  'aria-modal': 0,
                  'aria-multiline': 0,
                  'aria-multiselectable': 0,
                  'aria-orientation': 0,
                  'aria-placeholder': 0,
                  'aria-pressed': 0,
                  'aria-readonly': 0,
                  'aria-required': 0,
                  'aria-selected': 0,
                  'aria-sort': 0,
                  'aria-valuemax': 0,
                  'aria-valuemin': 0,
                  'aria-valuenow': 0,
                  'aria-valuetext': 0,
                  // Live Region Attributes
                  'aria-atomic': 0,
                  'aria-busy': 0,
                  'aria-live': 0,
                  'aria-relevant': 0,
                  // Drag-and-Drop Attributes
                  'aria-dropeffect': 0,
                  'aria-grabbed': 0,
                  // Relationship Attributes
                  'aria-activedescendant': 0,
                  'aria-colcount': 0,
                  'aria-colindex': 0,
                  'aria-colspan': 0,
                  'aria-controls': 0,
                  'aria-describedby': 0,
                  'aria-errormessage': 0,
                  'aria-flowto': 0,
                  'aria-labelledby': 0,
                  'aria-owns': 0,
                  'aria-posinset': 0,
                  'aria-rowcount': 0,
                  'aria-rowindex': 0,
                  'aria-rowspan': 0,
                  'aria-setsize': 0,
                }

                var warnedProperties = {}
                var rARIA = new RegExp(
                  '^(aria)-[' + ATTRIBUTE_NAME_CHAR + ']*$'
                )
                var rARIACamel = new RegExp(
                  '^(aria)[A-Z][' + ATTRIBUTE_NAME_CHAR + ']*$'
                )

                var hasOwnProperty = Object.prototype.hasOwnProperty

                function getStackAddendum() {
                  var stack = ReactDebugCurrentFrame.getStackAddendum()
                  return stack != null ? stack : ''
                }

                function validateProperty(tagName, name) {
                  if (
                    hasOwnProperty.call(warnedProperties, name) &&
                    warnedProperties[name]
                  ) {
                    return true
                  }

                  if (rARIACamel.test(name)) {
                    var ariaName = 'aria-' + name.slice(4).toLowerCase()
                    var correctName = ariaProperties.hasOwnProperty(ariaName)
                      ? ariaName
                      : null

                    // If this is an aria-* attribute, but is not listed in the known DOM
                    // DOM properties, then it is an invalid aria-* attribute.
                    if (correctName == null) {
                      warning(
                        false,
                        'Invalid ARIA attribute `%s`. ARIA attributes follow the pattern aria-* and must be lowercase.%s',
                        name,
                        getStackAddendum()
                      )
                      warnedProperties[name] = true
                      return true
                    }
                    // aria-* attributes should be lowercase; suggest the lowercase version.
                    if (name !== correctName) {
                      warning(
                        false,
                        'Invalid ARIA attribute `%s`. Did you mean `%s`?%s',
                        name,
                        correctName,
                        getStackAddendum()
                      )
                      warnedProperties[name] = true
                      return true
                    }
                  }

                  if (rARIA.test(name)) {
                    var lowerCasedName = name.toLowerCase()
                    var standardName = ariaProperties.hasOwnProperty(
                      lowerCasedName
                    )
                      ? lowerCasedName
                      : null

                    // If this is an aria-* attribute, but is not listed in the known DOM
                    // DOM properties, then it is an invalid aria-* attribute.
                    if (standardName == null) {
                      warnedProperties[name] = true
                      return false
                    }
                    // aria-* attributes should be lowercase; suggest the lowercase version.
                    if (name !== standardName) {
                      warning(
                        false,
                        'Unknown ARIA attribute `%s`. Did you mean `%s`?%s',
                        name,
                        standardName,
                        getStackAddendum()
                      )
                      warnedProperties[name] = true
                      return true
                    }
                  }

                  return true
                }

                function warnInvalidARIAProps(type, props) {
                  var invalidProps = []

                  for (var key in props) {
                    var isValid = validateProperty(type, key)
                    if (!isValid) {
                      invalidProps.push(key)
                    }
                  }

                  var unknownPropString = invalidProps
                    .map(function (prop) {
                      return '`' + prop + '`'
                    })
                    .join(', ')

                  if (invalidProps.length === 1) {
                    warning(
                      false,
                      'Invalid aria prop %s on <%s> tag. ' +
                        'For details, see https://fb.me/invalid-aria-prop%s',
                      unknownPropString,
                      type,
                      getStackAddendum()
                    )
                  } else if (invalidProps.length > 1) {
                    warning(
                      false,
                      'Invalid aria props %s on <%s> tag. ' +
                        'For details, see https://fb.me/invalid-aria-prop%s',
                      unknownPropString,
                      type,
                      getStackAddendum()
                    )
                  }
                }

                function validateProperties(type, props) {
                  if (isCustomComponent(type, props)) {
                    return
                  }
                  warnInvalidARIAProps(type, props)
                }

                var didWarnValueNull = false

                function getStackAddendum$1() {
                  var stack = ReactDebugCurrentFrame.getStackAddendum()
                  return stack != null ? stack : ''
                }

                function validateProperties$1(type, props) {
                  if (
                    type !== 'input' &&
                    type !== 'textarea' &&
                    type !== 'select'
                  ) {
                    return
                  }

                  if (
                    props != null &&
                    props.value === null &&
                    !didWarnValueNull
                  ) {
                    didWarnValueNull = true
                    if (type === 'select' && props.multiple) {
                      warning(
                        false,
                        '`value` prop on `%s` should not be null. ' +
                          'Consider using an empty array when `multiple` is set to `true` ' +
                          'to clear the component or `undefined` for uncontrolled components.%s',
                        type,
                        getStackAddendum$1()
                      )
                    } else {
                      warning(
                        false,
                        '`value` prop on `%s` should not be null. ' +
                          'Consider using an empty string to clear the component or `undefined` ' +
                          'for uncontrolled components.%s',
                        type,
                        getStackAddendum$1()
                      )
                    }
                  }
                }

                function getStackAddendum$2() {
                  var stack = ReactDebugCurrentFrame.getStackAddendum()
                  return stack != null ? stack : ''
                }

                var validateProperty$1 = function () {}

                {
                  var warnedProperties$1 = {}
                  var _hasOwnProperty = Object.prototype.hasOwnProperty
                  var EVENT_NAME_REGEX = /^on./
                  var INVALID_EVENT_NAME_REGEX = /^on[^A-Z]/
                  var rARIA$1 = new RegExp(
                    '^(aria)-[' + ATTRIBUTE_NAME_CHAR + ']*$'
                  )
                  var rARIACamel$1 = new RegExp(
                    '^(aria)[A-Z][' + ATTRIBUTE_NAME_CHAR + ']*$'
                  )

                  validateProperty$1 = function (
                    tagName,
                    name,
                    value,
                    canUseEventSystem
                  ) {
                    if (
                      _hasOwnProperty.call(warnedProperties$1, name) &&
                      warnedProperties$1[name]
                    ) {
                      return true
                    }

                    var lowerCasedName = name.toLowerCase()
                    if (
                      lowerCasedName === 'onfocusin' ||
                      lowerCasedName === 'onfocusout'
                    ) {
                      warning(
                        false,
                        'React uses onFocus and onBlur instead of onFocusIn and onFocusOut. ' +
                          'All React events are normalized to bubble, so onFocusIn and onFocusOut ' +
                          'are not needed/supported by React.'
                      )
                      warnedProperties$1[name] = true
                      return true
                    }

                    // We can't rely on the event system being injected on the server.
                    if (canUseEventSystem) {
                      if (registrationNameModules.hasOwnProperty(name)) {
                        return true
                      }
                      var registrationName = possibleRegistrationNames.hasOwnProperty(
                        lowerCasedName
                      )
                        ? possibleRegistrationNames[lowerCasedName]
                        : null
                      if (registrationName != null) {
                        warning(
                          false,
                          'Invalid event handler property `%s`. Did you mean `%s`?%s',
                          name,
                          registrationName,
                          getStackAddendum$2()
                        )
                        warnedProperties$1[name] = true
                        return true
                      }
                      if (EVENT_NAME_REGEX.test(name)) {
                        warning(
                          false,
                          'Unknown event handler property `%s`. It will be ignored.%s',
                          name,
                          getStackAddendum$2()
                        )
                        warnedProperties$1[name] = true
                        return true
                      }
                    } else if (EVENT_NAME_REGEX.test(name)) {
                      // If no event plugins have been injected, we are in a server environment.
                      // So we can't tell if the event name is correct for sure, but we can filter
                      // out known bad ones like `onclick`. We can't suggest a specific replacement though.
                      if (INVALID_EVENT_NAME_REGEX.test(name)) {
                        warning(
                          false,
                          'Invalid event handler property `%s`. ' +
                            'React events use the camelCase naming convention, for example `onClick`.%s',
                          name,
                          getStackAddendum$2()
                        )
                      }
                      warnedProperties$1[name] = true
                      return true
                    }

                    // Let the ARIA attribute hook validate ARIA attributes
                    if (rARIA$1.test(name) || rARIACamel$1.test(name)) {
                      return true
                    }

                    if (lowerCasedName === 'innerhtml') {
                      warning(
                        false,
                        'Directly setting property `innerHTML` is not permitted. ' +
                          'For more information, lookup documentation on `dangerouslySetInnerHTML`.'
                      )
                      warnedProperties$1[name] = true
                      return true
                    }

                    if (lowerCasedName === 'aria') {
                      warning(
                        false,
                        'The `aria` attribute is reserved for future use in React. ' +
                          'Pass individual `aria-` attributes instead.'
                      )
                      warnedProperties$1[name] = true
                      return true
                    }

                    if (
                      lowerCasedName === 'is' &&
                      value !== null &&
                      value !== undefined &&
                      typeof value !== 'string'
                    ) {
                      warning(
                        false,
                        'Received a `%s` for a string attribute `is`. If this is expected, cast ' +
                          'the value to a string.%s',
                        typeof value,
                        getStackAddendum$2()
                      )
                      warnedProperties$1[name] = true
                      return true
                    }

                    if (typeof value === 'number' && isNaN(value)) {
                      warning(
                        false,
                        'Received NaN for the `%s` attribute. If this is expected, cast ' +
                          'the value to a string.%s',
                        name,
                        getStackAddendum$2()
                      )
                      warnedProperties$1[name] = true
                      return true
                    }

                    var propertyInfo = getPropertyInfo(name)
                    var isReserved =
                      propertyInfo !== null && propertyInfo.type === RESERVED

                    // Known attributes should match the casing specified in the property config.
                    if (possibleStandardNames.hasOwnProperty(lowerCasedName)) {
                      var standardName = possibleStandardNames[lowerCasedName]
                      if (standardName !== name) {
                        warning(
                          false,
                          'Invalid DOM property `%s`. Did you mean `%s`?%s',
                          name,
                          standardName,
                          getStackAddendum$2()
                        )
                        warnedProperties$1[name] = true
                        return true
                      }
                    } else if (!isReserved && name !== lowerCasedName) {
                      // Unknown attributes should have lowercase casing since that's how they
                      // will be cased anyway with server rendering.
                      warning(
                        false,
                        'React does not recognize the `%s` prop on a DOM element. If you ' +
                          'intentionally want it to appear in the DOM as a custom ' +
                          'attribute, spell it as lowercase `%s` instead. ' +
                          'If you accidentally passed it from a parent component, remove ' +
                          'it from the DOM element.%s',
                        name,
                        lowerCasedName,
                        getStackAddendum$2()
                      )
                      warnedProperties$1[name] = true
                      return true
                    }

                    if (
                      typeof value === 'boolean' &&
                      shouldRemoveAttributeWithWarning(
                        name,
                        value,
                        propertyInfo,
                        false
                      )
                    ) {
                      if (value) {
                        warning(
                          false,
                          'Received `%s` for a non-boolean attribute `%s`.\n\n' +
                            'If you want to write it to the DOM, pass a string instead: ' +
                            '%s="%s" or %s={value.toString()}.%s',
                          value,
                          name,
                          name,
                          value,
                          name,
                          getStackAddendum$2()
                        )
                      } else {
                        warning(
                          false,
                          'Received `%s` for a non-boolean attribute `%s`.\n\n' +
                            'If you want to write it to the DOM, pass a string instead: ' +
                            '%s="%s" or %s={value.toString()}.\n\n' +
                            'If you used to conditionally omit it with %s={condition && value}, ' +
                            'pass %s={condition ? value : undefined} instead.%s',
                          value,
                          name,
                          name,
                          value,
                          name,
                          name,
                          name,
                          getStackAddendum$2()
                        )
                      }
                      warnedProperties$1[name] = true
                      return true
                    }

                    // Now that we've validated casing, do not validate
                    // data types for reserved props
                    if (isReserved) {
                      return true
                    }

                    // Warn when a known attribute is a bad type
                    if (
                      shouldRemoveAttributeWithWarning(
                        name,
                        value,
                        propertyInfo,
                        false
                      )
                    ) {
                      warnedProperties$1[name] = true
                      return false
                    }

                    return true
                  }
                }

                var warnUnknownProperties = function (
                  type,
                  props,
                  canUseEventSystem
                ) {
                  var unknownProps = []
                  for (var key in props) {
                    var isValid = validateProperty$1(
                      type,
                      key,
                      props[key],
                      canUseEventSystem
                    )
                    if (!isValid) {
                      unknownProps.push(key)
                    }
                  }

                  var unknownPropString = unknownProps
                    .map(function (prop) {
                      return '`' + prop + '`'
                    })
                    .join(', ')
                  if (unknownProps.length === 1) {
                    warning(
                      false,
                      'Invalid value for prop %s on <%s> tag. Either remove it from the element, ' +
                        'or pass a string or number value to keep it in the DOM. ' +
                        'For details, see https://fb.me/react-attribute-behavior%s',
                      unknownPropString,
                      type,
                      getStackAddendum$2()
                    )
                  } else if (unknownProps.length > 1) {
                    warning(
                      false,
                      'Invalid values for props %s on <%s> tag. Either remove them from the element, ' +
                        'or pass a string or number value to keep them in the DOM. ' +
                        'For details, see https://fb.me/react-attribute-behavior%s',
                      unknownPropString,
                      type,
                      getStackAddendum$2()
                    )
                  }
                }

                function validateProperties$2(type, props, canUseEventSystem) {
                  if (isCustomComponent(type, props)) {
                    return
                  }
                  warnUnknownProperties(type, props, canUseEventSystem)
                }

                // TODO: direct imports like some-package/src/* are bad. Fix me.
                var getCurrentFiberOwnerName$2 =
                  ReactDebugCurrentFiber.getCurrentFiberOwnerName
                var getCurrentFiberStackAddendum$3 =
                  ReactDebugCurrentFiber.getCurrentFiberStackAddendum

                var didWarnInvalidHydration = false
                var didWarnShadyDOM = false

                var DANGEROUSLY_SET_INNER_HTML = 'dangerouslySetInnerHTML'
                var SUPPRESS_CONTENT_EDITABLE_WARNING =
                  'suppressContentEditableWarning'
                var SUPPRESS_HYDRATION_WARNING$1 = 'suppressHydrationWarning'
                var AUTOFOCUS = 'autoFocus'
                var CHILDREN = 'children'
                var STYLE = 'style'
                var HTML = '__html'

                var HTML_NAMESPACE = Namespaces.html

                var getStack = emptyFunction.thatReturns('')

                var warnedUnknownTags = void 0
                var suppressHydrationWarning = void 0

                var validatePropertiesInDevelopment = void 0
                var warnForTextDifference = void 0
                var warnForPropDifference = void 0
                var warnForExtraAttributes = void 0
                var warnForInvalidEventListener = void 0

                var normalizeMarkupForTextOrAttribute = void 0
                var normalizeHTML = void 0

                {
                  getStack = getCurrentFiberStackAddendum$3

                  warnedUnknownTags = {
                    // Chrome is the only major browser not shipping <time>. But as of July
                    // 2017 it intends to ship it due to widespread usage. We intentionally
                    // *don't* warn for <time> even if it's unrecognized by Chrome because
                    // it soon will be, and many apps have been using it anyway.
                    time: true,
                    // There are working polyfills for <dialog>. Let people use it.
                    dialog: true,
                  }

                  validatePropertiesInDevelopment = function (type, props) {
                    validateProperties(type, props)
                    validateProperties$1(type, props)
                    validateProperties$2(
                      type,
                      props,
                      /* canUseEventSystem */ true
                    )
                  }

                  // HTML parsing normalizes CR and CRLF to LF.
                  // It also can turn \u0000 into \uFFFD inside attributes.
                  // https://www.w3.org/TR/html5/single-page.html#preprocessing-the-input-stream
                  // If we have a mismatch, it might be caused by that.
                  // We will still patch up in this case but not fire the warning.
                  var NORMALIZE_NEWLINES_REGEX = /\r\n?/g
                  var NORMALIZE_NULL_AND_REPLACEMENT_REGEX = /\u0000|\uFFFD/g

                  normalizeMarkupForTextOrAttribute = function (markup) {
                    var markupString =
                      typeof markup === 'string' ? markup : '' + markup
                    return markupString
                      .replace(NORMALIZE_NEWLINES_REGEX, '\n')
                      .replace(NORMALIZE_NULL_AND_REPLACEMENT_REGEX, '')
                  }

                  warnForTextDifference = function (serverText, clientText) {
                    if (didWarnInvalidHydration) {
                      return
                    }
                    var normalizedClientText = normalizeMarkupForTextOrAttribute(
                      clientText
                    )
                    var normalizedServerText = normalizeMarkupForTextOrAttribute(
                      serverText
                    )
                    if (normalizedServerText === normalizedClientText) {
                      return
                    }
                    didWarnInvalidHydration = true
                    warning(
                      false,
                      'Text content did not match. Server: "%s" Client: "%s"',
                      normalizedServerText,
                      normalizedClientText
                    )
                  }

                  warnForPropDifference = function (
                    propName,
                    serverValue,
                    clientValue
                  ) {
                    if (didWarnInvalidHydration) {
                      return
                    }
                    var normalizedClientValue = normalizeMarkupForTextOrAttribute(
                      clientValue
                    )
                    var normalizedServerValue = normalizeMarkupForTextOrAttribute(
                      serverValue
                    )
                    if (normalizedServerValue === normalizedClientValue) {
                      return
                    }
                    didWarnInvalidHydration = true
                    warning(
                      false,
                      'Prop `%s` did not match. Server: %s Client: %s',
                      propName,
                      JSON.stringify(normalizedServerValue),
                      JSON.stringify(normalizedClientValue)
                    )
                  }

                  warnForExtraAttributes = function (attributeNames) {
                    if (didWarnInvalidHydration) {
                      return
                    }
                    didWarnInvalidHydration = true
                    var names = []
                    attributeNames.forEach(function (name) {
                      names.push(name)
                    })
                    warning(
                      false,
                      'Extra attributes from the server: %s',
                      names
                    )
                  }

                  warnForInvalidEventListener = function (
                    registrationName,
                    listener
                  ) {
                    if (listener === false) {
                      warning(
                        false,
                        'Expected `%s` listener to be a function, instead got `false`.\n\n' +
                          'If you used to conditionally omit it with %s={condition && value}, ' +
                          'pass %s={condition ? value : undefined} instead.%s',
                        registrationName,
                        registrationName,
                        registrationName,
                        getCurrentFiberStackAddendum$3()
                      )
                    } else {
                      warning(
                        false,
                        'Expected `%s` listener to be a function, instead got a value of `%s` type.%s',
                        registrationName,
                        typeof listener,
                        getCurrentFiberStackAddendum$3()
                      )
                    }
                  }

                  // Parse the HTML and read it back to normalize the HTML string so that it
                  // can be used for comparison.
                  normalizeHTML = function (parent, html) {
                    // We could have created a separate document here to avoid
                    // re-initializing custom elements if they exist. But this breaks
                    // how <noscript> is being handled. So we use the same document.
                    // See the discussion in https://github.com/facebook/react/pull/11157.
                    var testElement =
                      parent.namespaceURI === HTML_NAMESPACE
                        ? parent.ownerDocument.createElement(parent.tagName)
                        : parent.ownerDocument.createElementNS(
                            parent.namespaceURI,
                            parent.tagName
                          )
                    testElement.innerHTML = html
                    return testElement.innerHTML
                  }
                }

                function ensureListeningTo(
                  rootContainerElement,
                  registrationName
                ) {
                  var isDocumentOrFragment =
                    rootContainerElement.nodeType === DOCUMENT_NODE ||
                    rootContainerElement.nodeType === DOCUMENT_FRAGMENT_NODE
                  var doc = isDocumentOrFragment
                    ? rootContainerElement
                    : rootContainerElement.ownerDocument
                  listenTo(registrationName, doc)
                }

                function getOwnerDocumentFromRootContainer(
                  rootContainerElement
                ) {
                  return rootContainerElement.nodeType === DOCUMENT_NODE
                    ? rootContainerElement
                    : rootContainerElement.ownerDocument
                }

                function trapClickOnNonInteractiveElement(node) {
                  // Mobile Safari does not fire properly bubble click events on
                  // non-interactive elements, which means delegated click listeners do not
                  // fire. The workaround for this bug involves attaching an empty click
                  // listener on the target node.
                  // http://www.quirksmode.org/blog/archives/2010/09/click_event_del.html
                  // Just set it using the onclick property so that we don't have to manage any
                  // bookkeeping for it. Not sure if we need to clear it when the listener is
                  // removed.
                  // TODO: Only do this for the relevant Safaris maybe?
                  node.onclick = emptyFunction
                }

                function setInitialDOMProperties(
                  tag,
                  domElement,
                  rootContainerElement,
                  nextProps,
                  isCustomComponentTag
                ) {
                  for (var propKey in nextProps) {
                    if (!nextProps.hasOwnProperty(propKey)) {
                      continue
                    }
                    var nextProp = nextProps[propKey]
                    if (propKey === STYLE) {
                      {
                        if (nextProp) {
                          // Freeze the next style object so that we can assume it won't be
                          // mutated. We have already warned for this in the past.
                          Object.freeze(nextProp)
                        }
                      }
                      // Relies on `updateStylesByID` not mutating `styleUpdates`.
                      setValueForStyles(domElement, nextProp, getStack)
                    } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
                      var nextHtml = nextProp ? nextProp[HTML] : undefined
                      if (nextHtml != null) {
                        setInnerHTML(domElement, nextHtml)
                      }
                    } else if (propKey === CHILDREN) {
                      if (typeof nextProp === 'string') {
                        // Avoid setting initial textContent when the text is empty. In IE11 setting
                        // textContent on a <textarea> will cause the placeholder to not
                        // show within the <textarea> until it has been focused and blurred again.
                        // https://github.com/facebook/react/issues/6731#issuecomment-254874553
                        var canSetTextContent =
                          tag !== 'textarea' || nextProp !== ''
                        if (canSetTextContent) {
                          setTextContent(domElement, nextProp)
                        }
                      } else if (typeof nextProp === 'number') {
                        setTextContent(domElement, '' + nextProp)
                      }
                    } else if (
                      propKey === SUPPRESS_CONTENT_EDITABLE_WARNING ||
                      propKey === SUPPRESS_HYDRATION_WARNING$1
                    ) {
                      // Noop
                    } else if (propKey === AUTOFOCUS) {
                      // We polyfill it separately on the client during commit.
                      // We blacklist it here rather than in the property list because we emit it in SSR.
                    } else if (
                      registrationNameModules.hasOwnProperty(propKey)
                    ) {
                      if (nextProp != null) {
                        if (true && typeof nextProp !== 'function') {
                          warnForInvalidEventListener(propKey, nextProp)
                        }
                        ensureListeningTo(rootContainerElement, propKey)
                      }
                    } else if (nextProp != null) {
                      setValueForProperty(
                        domElement,
                        propKey,
                        nextProp,
                        isCustomComponentTag
                      )
                    }
                  }
                }

                function updateDOMProperties(
                  domElement,
                  updatePayload,
                  wasCustomComponentTag,
                  isCustomComponentTag
                ) {
                  // TODO: Handle wasCustomComponentTag
                  for (var i = 0; i < updatePayload.length; i += 2) {
                    var propKey = updatePayload[i]
                    var propValue = updatePayload[i + 1]
                    if (propKey === STYLE) {
                      setValueForStyles(domElement, propValue, getStack)
                    } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
                      setInnerHTML(domElement, propValue)
                    } else if (propKey === CHILDREN) {
                      setTextContent(domElement, propValue)
                    } else {
                      setValueForProperty(
                        domElement,
                        propKey,
                        propValue,
                        isCustomComponentTag
                      )
                    }
                  }
                }

                function createElement$1(
                  type,
                  props,
                  rootContainerElement,
                  parentNamespace
                ) {
                  var isCustomComponentTag = void 0

                  // We create tags in the namespace of their parent container, except HTML
                  // tags get no namespace.
                  var ownerDocument = getOwnerDocumentFromRootContainer(
                    rootContainerElement
                  )
                  var domElement = void 0
                  var namespaceURI = parentNamespace
                  if (namespaceURI === HTML_NAMESPACE) {
                    namespaceURI = getIntrinsicNamespace(type)
                  }
                  if (namespaceURI === HTML_NAMESPACE) {
                    {
                      isCustomComponentTag = isCustomComponent(type, props)
                      // Should this check be gated by parent namespace? Not sure we want to
                      // allow <SVG> or <mATH>.
                      !(isCustomComponentTag || type === type.toLowerCase())
                        ? warning(
                            false,
                            '<%s /> is using incorrect casing. ' +
                              'Use PascalCase for React components, ' +
                              'or lowercase for HTML elements.',
                            type
                          )
                        : void 0
                    }

                    if (type === 'script') {
                      // Create the script via .innerHTML so its "parser-inserted" flag is
                      // set to true and it does not execute
                      var div = ownerDocument.createElement('div')
                      div.innerHTML = '<script><' + '/script>' // eslint-disable-line
                      // This is guaranteed to yield a script element.
                      var firstChild = div.firstChild
                      domElement = div.removeChild(firstChild)
                    } else if (typeof props.is === 'string') {
                      // $FlowIssue `createElement` should be updated for Web Components
                      domElement = ownerDocument.createElement(type, {
                        is: props.is,
                      })
                    } else {
                      // Separate else branch instead of using `props.is || undefined` above because of a Firefox bug.
                      // See discussion in https://github.com/facebook/react/pull/6896
                      // and discussion in https://bugzilla.mozilla.org/show_bug.cgi?id=1276240
                      domElement = ownerDocument.createElement(type)
                    }
                  } else {
                    domElement = ownerDocument.createElementNS(
                      namespaceURI,
                      type
                    )
                  }

                  {
                    if (namespaceURI === HTML_NAMESPACE) {
                      if (
                        !isCustomComponentTag &&
                        Object.prototype.toString.call(domElement) ===
                          '[object HTMLUnknownElement]' &&
                        !Object.prototype.hasOwnProperty.call(
                          warnedUnknownTags,
                          type
                        )
                      ) {
                        warnedUnknownTags[type] = true
                        warning(
                          false,
                          'The tag <%s> is unrecognized in this browser. ' +
                            'If you meant to render a React component, start its name with ' +
                            'an uppercase letter.',
                          type
                        )
                      }
                    }
                  }

                  return domElement
                }

                function createTextNode$1(text, rootContainerElement) {
                  return getOwnerDocumentFromRootContainer(
                    rootContainerElement
                  ).createTextNode(text)
                }

                function setInitialProperties$1(
                  domElement,
                  tag,
                  rawProps,
                  rootContainerElement
                ) {
                  var isCustomComponentTag = isCustomComponent(tag, rawProps)
                  {
                    validatePropertiesInDevelopment(tag, rawProps)
                    if (
                      isCustomComponentTag &&
                      !didWarnShadyDOM &&
                      domElement.shadyRoot
                    ) {
                      warning(
                        false,
                        '%s is using shady DOM. Using shady DOM with React can ' +
                          'cause things to break subtly.',
                        getCurrentFiberOwnerName$2() || 'A component'
                      )
                      didWarnShadyDOM = true
                    }
                  }

                  // TODO: Make sure that we check isMounted before firing any of these events.
                  var props = void 0
                  switch (tag) {
                    case 'iframe':
                    case 'object':
                      trapBubbledEvent('topLoad', 'load', domElement)
                      props = rawProps
                      break
                    case 'video':
                    case 'audio':
                      // Create listener for each media event
                      for (var event in mediaEventTypes) {
                        if (mediaEventTypes.hasOwnProperty(event)) {
                          trapBubbledEvent(
                            event,
                            mediaEventTypes[event],
                            domElement
                          )
                        }
                      }
                      props = rawProps
                      break
                    case 'source':
                      trapBubbledEvent('topError', 'error', domElement)
                      props = rawProps
                      break
                    case 'img':
                    case 'image':
                    case 'link':
                      trapBubbledEvent('topError', 'error', domElement)
                      trapBubbledEvent('topLoad', 'load', domElement)
                      props = rawProps
                      break
                    case 'form':
                      trapBubbledEvent('topReset', 'reset', domElement)
                      trapBubbledEvent('topSubmit', 'submit', domElement)
                      props = rawProps
                      break
                    case 'details':
                      trapBubbledEvent('topToggle', 'toggle', domElement)
                      props = rawProps
                      break
                    case 'input':
                      initWrapperState(domElement, rawProps)
                      props = getHostProps(domElement, rawProps)
                      trapBubbledEvent('topInvalid', 'invalid', domElement)
                      // For controlled components we always need to ensure we're listening
                      // to onChange. Even if there is no listener.
                      ensureListeningTo(rootContainerElement, 'onChange')
                      break
                    case 'option':
                      validateProps(domElement, rawProps)
                      props = getHostProps$1(domElement, rawProps)
                      break
                    case 'select':
                      initWrapperState$1(domElement, rawProps)
                      props = getHostProps$2(domElement, rawProps)
                      trapBubbledEvent('topInvalid', 'invalid', domElement)
                      // For controlled components we always need to ensure we're listening
                      // to onChange. Even if there is no listener.
                      ensureListeningTo(rootContainerElement, 'onChange')
                      break
                    case 'textarea':
                      initWrapperState$2(domElement, rawProps)
                      props = getHostProps$3(domElement, rawProps)
                      trapBubbledEvent('topInvalid', 'invalid', domElement)
                      // For controlled components we always need to ensure we're listening
                      // to onChange. Even if there is no listener.
                      ensureListeningTo(rootContainerElement, 'onChange')
                      break
                    default:
                      props = rawProps
                  }

                  assertValidProps(tag, props, getStack)

                  setInitialDOMProperties(
                    tag,
                    domElement,
                    rootContainerElement,
                    props,
                    isCustomComponentTag
                  )

                  switch (tag) {
                    case 'input':
                      // TODO: Make sure we check if this is still unmounted or do any clean
                      // up necessary since we never stop tracking anymore.
                      track(domElement)
                      postMountWrapper(domElement, rawProps)
                      break
                    case 'textarea':
                      // TODO: Make sure we check if this is still unmounted or do any clean
                      // up necessary since we never stop tracking anymore.
                      track(domElement)
                      postMountWrapper$3(domElement, rawProps)
                      break
                    case 'option':
                      postMountWrapper$1(domElement, rawProps)
                      break
                    case 'select':
                      postMountWrapper$2(domElement, rawProps)
                      break
                    default:
                      if (typeof props.onClick === 'function') {
                        // TODO: This cast may not be sound for SVG, MathML or custom elements.
                        trapClickOnNonInteractiveElement(domElement)
                      }
                      break
                  }
                }

                // Calculate the diff between the two objects.
                function diffProperties$1(
                  domElement,
                  tag,
                  lastRawProps,
                  nextRawProps,
                  rootContainerElement
                ) {
                  {
                    validatePropertiesInDevelopment(tag, nextRawProps)
                  }

                  var updatePayload = null

                  var lastProps = void 0
                  var nextProps = void 0
                  switch (tag) {
                    case 'input':
                      lastProps = getHostProps(domElement, lastRawProps)
                      nextProps = getHostProps(domElement, nextRawProps)
                      updatePayload = []
                      break
                    case 'option':
                      lastProps = getHostProps$1(domElement, lastRawProps)
                      nextProps = getHostProps$1(domElement, nextRawProps)
                      updatePayload = []
                      break
                    case 'select':
                      lastProps = getHostProps$2(domElement, lastRawProps)
                      nextProps = getHostProps$2(domElement, nextRawProps)
                      updatePayload = []
                      break
                    case 'textarea':
                      lastProps = getHostProps$3(domElement, lastRawProps)
                      nextProps = getHostProps$3(domElement, nextRawProps)
                      updatePayload = []
                      break
                    default:
                      lastProps = lastRawProps
                      nextProps = nextRawProps
                      if (
                        typeof lastProps.onClick !== 'function' &&
                        typeof nextProps.onClick === 'function'
                      ) {
                        // TODO: This cast may not be sound for SVG, MathML or custom elements.
                        trapClickOnNonInteractiveElement(domElement)
                      }
                      break
                  }

                  assertValidProps(tag, nextProps, getStack)

                  var propKey = void 0
                  var styleName = void 0
                  var styleUpdates = null
                  for (propKey in lastProps) {
                    if (
                      nextProps.hasOwnProperty(propKey) ||
                      !lastProps.hasOwnProperty(propKey) ||
                      lastProps[propKey] == null
                    ) {
                      continue
                    }
                    if (propKey === STYLE) {
                      var lastStyle = lastProps[propKey]
                      for (styleName in lastStyle) {
                        if (lastStyle.hasOwnProperty(styleName)) {
                          if (!styleUpdates) {
                            styleUpdates = {}
                          }
                          styleUpdates[styleName] = ''
                        }
                      }
                    } else if (
                      propKey === DANGEROUSLY_SET_INNER_HTML ||
                      propKey === CHILDREN
                    ) {
                      // Noop. This is handled by the clear text mechanism.
                    } else if (
                      propKey === SUPPRESS_CONTENT_EDITABLE_WARNING ||
                      propKey === SUPPRESS_HYDRATION_WARNING$1
                    ) {
                      // Noop
                    } else if (propKey === AUTOFOCUS) {
                      // Noop. It doesn't work on updates anyway.
                    } else if (
                      registrationNameModules.hasOwnProperty(propKey)
                    ) {
                      // This is a special case. If any listener updates we need to ensure
                      // that the "current" fiber pointer gets updated so we need a commit
                      // to update this element.
                      if (!updatePayload) {
                        updatePayload = []
                      }
                    } else {
                      // For all other deleted properties we add it to the queue. We use
                      // the whitelist in the commit phase instead.
                      ;(updatePayload = updatePayload || []).push(propKey, null)
                    }
                  }
                  for (propKey in nextProps) {
                    var nextProp = nextProps[propKey]
                    var lastProp =
                      lastProps != null ? lastProps[propKey] : undefined
                    if (
                      !nextProps.hasOwnProperty(propKey) ||
                      nextProp === lastProp ||
                      (nextProp == null && lastProp == null)
                    ) {
                      continue
                    }
                    if (propKey === STYLE) {
                      {
                        if (nextProp) {
                          // Freeze the next style object so that we can assume it won't be
                          // mutated. We have already warned for this in the past.
                          Object.freeze(nextProp)
                        }
                      }
                      if (lastProp) {
                        // Unset styles on `lastProp` but not on `nextProp`.
                        for (styleName in lastProp) {
                          if (
                            lastProp.hasOwnProperty(styleName) &&
                            (!nextProp || !nextProp.hasOwnProperty(styleName))
                          ) {
                            if (!styleUpdates) {
                              styleUpdates = {}
                            }
                            styleUpdates[styleName] = ''
                          }
                        }
                        // Update styles that changed since `lastProp`.
                        for (styleName in nextProp) {
                          if (
                            nextProp.hasOwnProperty(styleName) &&
                            lastProp[styleName] !== nextProp[styleName]
                          ) {
                            if (!styleUpdates) {
                              styleUpdates = {}
                            }
                            styleUpdates[styleName] = nextProp[styleName]
                          }
                        }
                      } else {
                        // Relies on `updateStylesByID` not mutating `styleUpdates`.
                        if (!styleUpdates) {
                          if (!updatePayload) {
                            updatePayload = []
                          }
                          updatePayload.push(propKey, styleUpdates)
                        }
                        styleUpdates = nextProp
                      }
                    } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
                      var nextHtml = nextProp ? nextProp[HTML] : undefined
                      var lastHtml = lastProp ? lastProp[HTML] : undefined
                      if (nextHtml != null) {
                        if (lastHtml !== nextHtml) {
                          ;(updatePayload = updatePayload || []).push(
                            propKey,
                            '' + nextHtml
                          )
                        }
                      } else {
                        // TODO: It might be too late to clear this if we have children
                        // inserted already.
                      }
                    } else if (propKey === CHILDREN) {
                      if (
                        lastProp !== nextProp &&
                        (typeof nextProp === 'string' ||
                          typeof nextProp === 'number')
                      ) {
                        ;(updatePayload = updatePayload || []).push(
                          propKey,
                          '' + nextProp
                        )
                      }
                    } else if (
                      propKey === SUPPRESS_CONTENT_EDITABLE_WARNING ||
                      propKey === SUPPRESS_HYDRATION_WARNING$1
                    ) {
                      // Noop
                    } else if (
                      registrationNameModules.hasOwnProperty(propKey)
                    ) {
                      if (nextProp != null) {
                        // We eagerly listen to this even though we haven't committed yet.
                        if (true && typeof nextProp !== 'function') {
                          warnForInvalidEventListener(propKey, nextProp)
                        }
                        ensureListeningTo(rootContainerElement, propKey)
                      }
                      if (!updatePayload && lastProp !== nextProp) {
                        // This is a special case. If any listener updates we need to ensure
                        // that the "current" props pointer gets updated so we need a commit
                        // to update this element.
                        updatePayload = []
                      }
                    } else {
                      // For any other property we always add it to the queue and then we
                      // filter it out using the whitelist during the commit.
                      ;(updatePayload = updatePayload || []).push(
                        propKey,
                        nextProp
                      )
                    }
                  }
                  if (styleUpdates) {
                    ;(updatePayload = updatePayload || []).push(
                      STYLE,
                      styleUpdates
                    )
                  }
                  return updatePayload
                }

                // Apply the diff.
                function updateProperties$1(
                  domElement,
                  updatePayload,
                  tag,
                  lastRawProps,
                  nextRawProps
                ) {
                  // Update checked *before* name.
                  // In the middle of an update, it is possible to have multiple checked.
                  // When a checked radio tries to change name, browser makes another radio's checked false.
                  if (
                    tag === 'input' &&
                    nextRawProps.type === 'radio' &&
                    nextRawProps.name != null
                  ) {
                    updateChecked(domElement, nextRawProps)
                  }

                  var wasCustomComponentTag = isCustomComponent(
                    tag,
                    lastRawProps
                  )
                  var isCustomComponentTag = isCustomComponent(
                    tag,
                    nextRawProps
                  )
                  // Apply the diff.
                  updateDOMProperties(
                    domElement,
                    updatePayload,
                    wasCustomComponentTag,
                    isCustomComponentTag
                  )

                  // TODO: Ensure that an update gets scheduled if any of the special props
                  // changed.
                  switch (tag) {
                    case 'input':
                      // Update the wrapper around inputs *after* updating props. This has to
                      // happen after `updateDOMProperties`. Otherwise HTML5 input validations
                      // raise warnings and prevent the new value from being assigned.
                      updateWrapper(domElement, nextRawProps)
                      break
                    case 'textarea':
                      updateWrapper$1(domElement, nextRawProps)
                      break
                    case 'select':
                      // <select> value update needs to occur after <option> children
                      // reconciliation
                      postUpdateWrapper(domElement, nextRawProps)
                      break
                  }
                }

                function getPossibleStandardName(propName) {
                  {
                    var lowerCasedName = propName.toLowerCase()
                    if (!possibleStandardNames.hasOwnProperty(lowerCasedName)) {
                      return null
                    }
                    return possibleStandardNames[lowerCasedName] || null
                  }
                  return null
                }

                function diffHydratedProperties$1(
                  domElement,
                  tag,
                  rawProps,
                  parentNamespace,
                  rootContainerElement
                ) {
                  var isCustomComponentTag = void 0
                  var extraAttributeNames = void 0

                  {
                    suppressHydrationWarning =
                      rawProps[SUPPRESS_HYDRATION_WARNING$1] === true
                    isCustomComponentTag = isCustomComponent(tag, rawProps)
                    validatePropertiesInDevelopment(tag, rawProps)
                    if (
                      isCustomComponentTag &&
                      !didWarnShadyDOM &&
                      domElement.shadyRoot
                    ) {
                      warning(
                        false,
                        '%s is using shady DOM. Using shady DOM with React can ' +
                          'cause things to break subtly.',
                        getCurrentFiberOwnerName$2() || 'A component'
                      )
                      didWarnShadyDOM = true
                    }
                  }

                  // TODO: Make sure that we check isMounted before firing any of these events.
                  switch (tag) {
                    case 'iframe':
                    case 'object':
                      trapBubbledEvent('topLoad', 'load', domElement)
                      break
                    case 'video':
                    case 'audio':
                      // Create listener for each media event
                      for (var event in mediaEventTypes) {
                        if (mediaEventTypes.hasOwnProperty(event)) {
                          trapBubbledEvent(
                            event,
                            mediaEventTypes[event],
                            domElement
                          )
                        }
                      }
                      break
                    case 'source':
                      trapBubbledEvent('topError', 'error', domElement)
                      break
                    case 'img':
                    case 'image':
                    case 'link':
                      trapBubbledEvent('topError', 'error', domElement)
                      trapBubbledEvent('topLoad', 'load', domElement)
                      break
                    case 'form':
                      trapBubbledEvent('topReset', 'reset', domElement)
                      trapBubbledEvent('topSubmit', 'submit', domElement)
                      break
                    case 'details':
                      trapBubbledEvent('topToggle', 'toggle', domElement)
                      break
                    case 'input':
                      initWrapperState(domElement, rawProps)
                      trapBubbledEvent('topInvalid', 'invalid', domElement)
                      // For controlled components we always need to ensure we're listening
                      // to onChange. Even if there is no listener.
                      ensureListeningTo(rootContainerElement, 'onChange')
                      break
                    case 'option':
                      validateProps(domElement, rawProps)
                      break
                    case 'select':
                      initWrapperState$1(domElement, rawProps)
                      trapBubbledEvent('topInvalid', 'invalid', domElement)
                      // For controlled components we always need to ensure we're listening
                      // to onChange. Even if there is no listener.
                      ensureListeningTo(rootContainerElement, 'onChange')
                      break
                    case 'textarea':
                      initWrapperState$2(domElement, rawProps)
                      trapBubbledEvent('topInvalid', 'invalid', domElement)
                      // For controlled components we always need to ensure we're listening
                      // to onChange. Even if there is no listener.
                      ensureListeningTo(rootContainerElement, 'onChange')
                      break
                  }

                  assertValidProps(tag, rawProps, getStack)

                  {
                    extraAttributeNames = new Set()
                    var attributes = domElement.attributes
                    for (var i = 0; i < attributes.length; i++) {
                      var name = attributes[i].name.toLowerCase()
                      switch (name) {
                        // Built-in SSR attribute is whitelisted
                        case 'data-reactroot':
                          break
                        // Controlled attributes are not validated
                        // TODO: Only ignore them on controlled tags.
                        case 'value':
                          break
                        case 'checked':
                          break
                        case 'selected':
                          break
                        default:
                          // Intentionally use the original name.
                          // See discussion in https://github.com/facebook/react/pull/10676.
                          extraAttributeNames.add(attributes[i].name)
                      }
                    }
                  }

                  var updatePayload = null
                  for (var propKey in rawProps) {
                    if (!rawProps.hasOwnProperty(propKey)) {
                      continue
                    }
                    var nextProp = rawProps[propKey]
                    if (propKey === CHILDREN) {
                      // For text content children we compare against textContent. This
                      // might match additional HTML that is hidden when we read it using
                      // textContent. E.g. "foo" will match "f<span>oo</span>" but that still
                      // satisfies our requirement. Our requirement is not to produce perfect
                      // HTML and attributes. Ideally we should preserve structure but it's
                      // ok not to if the visible content is still enough to indicate what
                      // even listeners these nodes might be wired up to.
                      // TODO: Warn if there is more than a single textNode as a child.
                      // TODO: Should we use domElement.firstChild.nodeValue to compare?
                      if (typeof nextProp === 'string') {
                        if (domElement.textContent !== nextProp) {
                          if (true && !suppressHydrationWarning) {
                            warnForTextDifference(
                              domElement.textContent,
                              nextProp
                            )
                          }
                          updatePayload = [CHILDREN, nextProp]
                        }
                      } else if (typeof nextProp === 'number') {
                        if (domElement.textContent !== '' + nextProp) {
                          if (true && !suppressHydrationWarning) {
                            warnForTextDifference(
                              domElement.textContent,
                              nextProp
                            )
                          }
                          updatePayload = [CHILDREN, '' + nextProp]
                        }
                      }
                    } else if (
                      registrationNameModules.hasOwnProperty(propKey)
                    ) {
                      if (nextProp != null) {
                        if (true && typeof nextProp !== 'function') {
                          warnForInvalidEventListener(propKey, nextProp)
                        }
                        ensureListeningTo(rootContainerElement, propKey)
                      }
                    } else if (
                      true &&
                      // Convince Flow we've calculated it (it's DEV-only in this method.)
                      typeof isCustomComponentTag === 'boolean'
                    ) {
                      // Validate that the properties correspond to their expected values.
                      var serverValue = void 0
                      var propertyInfo = getPropertyInfo(propKey)
                      if (suppressHydrationWarning) {
                        // Don't bother comparing. We're ignoring all these warnings.
                      } else if (
                        propKey === SUPPRESS_CONTENT_EDITABLE_WARNING ||
                        propKey === SUPPRESS_HYDRATION_WARNING$1 ||
                        // Controlled attributes are not validated
                        // TODO: Only ignore them on controlled tags.
                        propKey === 'value' ||
                        propKey === 'checked' ||
                        propKey === 'selected'
                      ) {
                        // Noop
                      } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
                        var rawHtml = nextProp ? nextProp[HTML] || '' : ''
                        var serverHTML = domElement.innerHTML
                        var expectedHTML = normalizeHTML(domElement, rawHtml)
                        if (expectedHTML !== serverHTML) {
                          warnForPropDifference(
                            propKey,
                            serverHTML,
                            expectedHTML
                          )
                        }
                      } else if (propKey === STYLE) {
                        // $FlowFixMe - Should be inferred as not undefined.
                        extraAttributeNames['delete'](propKey)
                        var expectedStyle = createDangerousStringForStyles(
                          nextProp
                        )
                        serverValue = domElement.getAttribute('style')
                        if (expectedStyle !== serverValue) {
                          warnForPropDifference(
                            propKey,
                            serverValue,
                            expectedStyle
                          )
                        }
                      } else if (isCustomComponentTag) {
                        // $FlowFixMe - Should be inferred as not undefined.
                        extraAttributeNames['delete'](propKey.toLowerCase())
                        serverValue = getValueForAttribute(
                          domElement,
                          propKey,
                          nextProp
                        )

                        if (nextProp !== serverValue) {
                          warnForPropDifference(propKey, serverValue, nextProp)
                        }
                      } else if (
                        !shouldIgnoreAttribute(
                          propKey,
                          propertyInfo,
                          isCustomComponentTag
                        ) &&
                        !shouldRemoveAttribute(
                          propKey,
                          nextProp,
                          propertyInfo,
                          isCustomComponentTag
                        )
                      ) {
                        var isMismatchDueToBadCasing = false
                        if (propertyInfo !== null) {
                          // $FlowFixMe - Should be inferred as not undefined.
                          extraAttributeNames['delete'](
                            propertyInfo.attributeName
                          )
                          serverValue = getValueForProperty(
                            domElement,
                            propKey,
                            nextProp,
                            propertyInfo
                          )
                        } else {
                          var ownNamespace = parentNamespace
                          if (ownNamespace === HTML_NAMESPACE) {
                            ownNamespace = getIntrinsicNamespace(tag)
                          }
                          if (ownNamespace === HTML_NAMESPACE) {
                            // $FlowFixMe - Should be inferred as not undefined.
                            extraAttributeNames['delete'](propKey.toLowerCase())
                          } else {
                            var standardName = getPossibleStandardName(propKey)
                            if (
                              standardName !== null &&
                              standardName !== propKey
                            ) {
                              // If an SVG prop is supplied with bad casing, it will
                              // be successfully parsed from HTML, but will produce a mismatch
                              // (and would be incorrectly rendered on the client).
                              // However, we already warn about bad casing elsewhere.
                              // So we'll skip the misleading extra mismatch warning in this case.
                              isMismatchDueToBadCasing = true
                              // $FlowFixMe - Should be inferred as not undefined.
                              extraAttributeNames['delete'](standardName)
                            }
                            // $FlowFixMe - Should be inferred as not undefined.
                            extraAttributeNames['delete'](propKey)
                          }
                          serverValue = getValueForAttribute(
                            domElement,
                            propKey,
                            nextProp
                          )
                        }

                        if (
                          nextProp !== serverValue &&
                          !isMismatchDueToBadCasing
                        ) {
                          warnForPropDifference(propKey, serverValue, nextProp)
                        }
                      }
                    }
                  }

                  {
                    // $FlowFixMe - Should be inferred as not undefined.
                    if (
                      extraAttributeNames.size > 0 &&
                      !suppressHydrationWarning
                    ) {
                      // $FlowFixMe - Should be inferred as not undefined.
                      warnForExtraAttributes(extraAttributeNames)
                    }
                  }

                  switch (tag) {
                    case 'input':
                      // TODO: Make sure we check if this is still unmounted or do any clean
                      // up necessary since we never stop tracking anymore.
                      track(domElement)
                      postMountWrapper(domElement, rawProps)
                      break
                    case 'textarea':
                      // TODO: Make sure we check if this is still unmounted or do any clean
                      // up necessary since we never stop tracking anymore.
                      track(domElement)
                      postMountWrapper$3(domElement, rawProps)
                      break
                    case 'select':
                    case 'option':
                      // For input and textarea we current always set the value property at
                      // post mount to force it to diverge from attributes. However, for
                      // option and select we don't quite do the same thing and select
                      // is not resilient to the DOM state changing so we don't do that here.
                      // TODO: Consider not doing this for input and textarea.
                      break
                    default:
                      if (typeof rawProps.onClick === 'function') {
                        // TODO: This cast may not be sound for SVG, MathML or custom elements.
                        trapClickOnNonInteractiveElement(domElement)
                      }
                      break
                  }

                  return updatePayload
                }

                function diffHydratedText$1(textNode, text) {
                  var isDifferent = textNode.nodeValue !== text
                  return isDifferent
                }

                function warnForUnmatchedText$1(textNode, text) {
                  {
                    warnForTextDifference(textNode.nodeValue, text)
                  }
                }

                function warnForDeletedHydratableElement$1(parentNode, child) {
                  {
                    if (didWarnInvalidHydration) {
                      return
                    }
                    didWarnInvalidHydration = true
                    warning(
                      false,
                      'Did not expect server HTML to contain a <%s> in <%s>.',
                      child.nodeName.toLowerCase(),
                      parentNode.nodeName.toLowerCase()
                    )
                  }
                }

                function warnForDeletedHydratableText$1(parentNode, child) {
                  {
                    if (didWarnInvalidHydration) {
                      return
                    }
                    didWarnInvalidHydration = true
                    warning(
                      false,
                      'Did not expect server HTML to contain the text node "%s" in <%s>.',
                      child.nodeValue,
                      parentNode.nodeName.toLowerCase()
                    )
                  }
                }

                function warnForInsertedHydratedElement$1(
                  parentNode,
                  tag,
                  props
                ) {
                  {
                    if (didWarnInvalidHydration) {
                      return
                    }
                    didWarnInvalidHydration = true
                    warning(
                      false,
                      'Expected server HTML to contain a matching <%s> in <%s>.',
                      tag,
                      parentNode.nodeName.toLowerCase()
                    )
                  }
                }

                function warnForInsertedHydratedText$1(parentNode, text) {
                  {
                    if (text === '') {
                      // We expect to insert empty text nodes since they're not represented in
                      // the HTML.
                      // TODO: Remove this special case if we can just avoid inserting empty
                      // text nodes.
                      return
                    }
                    if (didWarnInvalidHydration) {
                      return
                    }
                    didWarnInvalidHydration = true
                    warning(
                      false,
                      'Expected server HTML to contain a matching text node for "%s" in <%s>.',
                      text,
                      parentNode.nodeName.toLowerCase()
                    )
                  }
                }

                function restoreControlledState$1(domElement, tag, props) {
                  switch (tag) {
                    case 'input':
                      restoreControlledState(domElement, props)
                      return
                    case 'textarea':
                      restoreControlledState$3(domElement, props)
                      return
                    case 'select':
                      restoreControlledState$2(domElement, props)
                      return
                  }
                }

                var ReactDOMFiberComponent = Object.freeze({
                  createElement: createElement$1,
                  createTextNode: createTextNode$1,
                  setInitialProperties: setInitialProperties$1,
                  diffProperties: diffProperties$1,
                  updateProperties: updateProperties$1,
                  diffHydratedProperties: diffHydratedProperties$1,
                  diffHydratedText: diffHydratedText$1,
                  warnForUnmatchedText: warnForUnmatchedText$1,
                  warnForDeletedHydratableElement: warnForDeletedHydratableElement$1,
                  warnForDeletedHydratableText: warnForDeletedHydratableText$1,
                  warnForInsertedHydratedElement: warnForInsertedHydratedElement$1,
                  warnForInsertedHydratedText: warnForInsertedHydratedText$1,
                  restoreControlledState: restoreControlledState$1,
                })

                // TODO: direct imports like some-package/src/* are bad. Fix me.
                var getCurrentFiberStackAddendum$6 =
                  ReactDebugCurrentFiber.getCurrentFiberStackAddendum

                var validateDOMNesting = emptyFunction

                {
                  // This validation code was written based on the HTML5 parsing spec:
                  // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-scope
                  //
                  // Note: this does not catch all invalid nesting, nor does it try to (as it's
                  // not clear what practical benefit doing so provides); instead, we warn only
                  // for cases where the parser will give a parse tree differing from what React
                  // intended. For example, <b><div></div></b> is invalid but we don't warn
                  // because it still parses correctly; we do warn for other cases like nested
                  // <p> tags where the beginning of the second element implicitly closes the
                  // first, causing a confusing mess.

                  // https://html.spec.whatwg.org/multipage/syntax.html#special
                  var specialTags = [
                    'address',
                    'applet',
                    'area',
                    'article',
                    'aside',
                    'base',
                    'basefont',
                    'bgsound',
                    'blockquote',
                    'body',
                    'br',
                    'button',
                    'caption',
                    'center',
                    'col',
                    'colgroup',
                    'dd',
                    'details',
                    'dir',
                    'div',
                    'dl',
                    'dt',
                    'embed',
                    'fieldset',
                    'figcaption',
                    'figure',
                    'footer',
                    'form',
                    'frame',
                    'frameset',
                    'h1',
                    'h2',
                    'h3',
                    'h4',
                    'h5',
                    'h6',
                    'head',
                    'header',
                    'hgroup',
                    'hr',
                    'html',
                    'iframe',
                    'img',
                    'input',
                    'isindex',
                    'li',
                    'link',
                    'listing',
                    'main',
                    'marquee',
                    'menu',
                    'menuitem',
                    'meta',
                    'nav',
                    'noembed',
                    'noframes',
                    'noscript',
                    'object',
                    'ol',
                    'p',
                    'param',
                    'plaintext',
                    'pre',
                    'script',
                    'section',
                    'select',
                    'source',
                    'style',
                    'summary',
                    'table',
                    'tbody',
                    'td',
                    'template',
                    'textarea',
                    'tfoot',
                    'th',
                    'thead',
                    'title',
                    'tr',
                    'track',
                    'ul',
                    'wbr',
                    'xmp',
                  ]

                  // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-scope
                  var inScopeTags = [
                    'applet',
                    'caption',
                    'html',
                    'table',
                    'td',
                    'th',
                    'marquee',
                    'object',
                    'template',

                    // https://html.spec.whatwg.org/multipage/syntax.html#html-integration-point
                    // TODO: Distinguish by namespace here -- for <title>, including it here
                    // errs on the side of fewer warnings
                    'foreignObject',
                    'desc',
                    'title',
                  ]

                  // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-button-scope
                  var buttonScopeTags = inScopeTags.concat(['button'])

                  // https://html.spec.whatwg.org/multipage/syntax.html#generate-implied-end-tags
                  var impliedEndTags = [
                    'dd',
                    'dt',
                    'li',
                    'option',
                    'optgroup',
                    'p',
                    'rp',
                    'rt',
                  ]

                  var emptyAncestorInfo = {
                    current: null,

                    formTag: null,
                    aTagInScope: null,
                    buttonTagInScope: null,
                    nobrTagInScope: null,
                    pTagInButtonScope: null,

                    listItemTagAutoclosing: null,
                    dlItemTagAutoclosing: null,
                  }

                  var updatedAncestorInfo$1 = function (
                    oldInfo,
                    tag,
                    instance
                  ) {
                    var ancestorInfo = _assign({}, oldInfo || emptyAncestorInfo)
                    var info = { tag: tag, instance: instance }

                    if (inScopeTags.indexOf(tag) !== -1) {
                      ancestorInfo.aTagInScope = null
                      ancestorInfo.buttonTagInScope = null
                      ancestorInfo.nobrTagInScope = null
                    }
                    if (buttonScopeTags.indexOf(tag) !== -1) {
                      ancestorInfo.pTagInButtonScope = null
                    }

                    // See rules for 'li', 'dd', 'dt' start tags in
                    // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inbody
                    if (
                      specialTags.indexOf(tag) !== -1 &&
                      tag !== 'address' &&
                      tag !== 'div' &&
                      tag !== 'p'
                    ) {
                      ancestorInfo.listItemTagAutoclosing = null
                      ancestorInfo.dlItemTagAutoclosing = null
                    }

                    ancestorInfo.current = info

                    if (tag === 'form') {
                      ancestorInfo.formTag = info
                    }
                    if (tag === 'a') {
                      ancestorInfo.aTagInScope = info
                    }
                    if (tag === 'button') {
                      ancestorInfo.buttonTagInScope = info
                    }
                    if (tag === 'nobr') {
                      ancestorInfo.nobrTagInScope = info
                    }
                    if (tag === 'p') {
                      ancestorInfo.pTagInButtonScope = info
                    }
                    if (tag === 'li') {
                      ancestorInfo.listItemTagAutoclosing = info
                    }
                    if (tag === 'dd' || tag === 'dt') {
                      ancestorInfo.dlItemTagAutoclosing = info
                    }

                    return ancestorInfo
                  }

                  /**
                   * Returns whether
                   */
                  var isTagValidWithParent = function (tag, parentTag) {
                    // First, let's check if we're in an unusual parsing mode...
                    switch (parentTag) {
                      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inselect
                      case 'select':
                        return (
                          tag === 'option' ||
                          tag === 'optgroup' ||
                          tag === '#text'
                        )
                      case 'optgroup':
                        return tag === 'option' || tag === '#text'
                      // Strictly speaking, seeing an <option> doesn't mean we're in a <select>
                      // but
                      case 'option':
                        return tag === '#text'
                      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intd
                      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-incaption
                      // No special behavior since these rules fall back to "in body" mode for
                      // all except special table nodes which cause bad parsing behavior anyway.

                      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intr
                      case 'tr':
                        return (
                          tag === 'th' ||
                          tag === 'td' ||
                          tag === 'style' ||
                          tag === 'script' ||
                          tag === 'template'
                        )
                      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intbody
                      case 'tbody':
                      case 'thead':
                      case 'tfoot':
                        return (
                          tag === 'tr' ||
                          tag === 'style' ||
                          tag === 'script' ||
                          tag === 'template'
                        )
                      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-incolgroup
                      case 'colgroup':
                        return tag === 'col' || tag === 'template'
                      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intable
                      case 'table':
                        return (
                          tag === 'caption' ||
                          tag === 'colgroup' ||
                          tag === 'tbody' ||
                          tag === 'tfoot' ||
                          tag === 'thead' ||
                          tag === 'style' ||
                          tag === 'script' ||
                          tag === 'template'
                        )
                      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inhead
                      case 'head':
                        return (
                          tag === 'base' ||
                          tag === 'basefont' ||
                          tag === 'bgsound' ||
                          tag === 'link' ||
                          tag === 'meta' ||
                          tag === 'title' ||
                          tag === 'noscript' ||
                          tag === 'noframes' ||
                          tag === 'style' ||
                          tag === 'script' ||
                          tag === 'template'
                        )
                      // https://html.spec.whatwg.org/multipage/semantics.html#the-html-element
                      case 'html':
                        return tag === 'head' || tag === 'body'
                      case '#document':
                        return tag === 'html'
                    }

                    // Probably in the "in body" parsing mode, so we outlaw only tag combos
                    // where the parsing rules cause implicit opens or closes to be added.
                    // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inbody
                    switch (tag) {
                      case 'h1':
                      case 'h2':
                      case 'h3':
                      case 'h4':
                      case 'h5':
                      case 'h6':
                        return (
                          parentTag !== 'h1' &&
                          parentTag !== 'h2' &&
                          parentTag !== 'h3' &&
                          parentTag !== 'h4' &&
                          parentTag !== 'h5' &&
                          parentTag !== 'h6'
                        )

                      case 'rp':
                      case 'rt':
                        return impliedEndTags.indexOf(parentTag) === -1

                      case 'body':
                      case 'caption':
                      case 'col':
                      case 'colgroup':
                      case 'frame':
                      case 'head':
                      case 'html':
                      case 'tbody':
                      case 'td':
                      case 'tfoot':
                      case 'th':
                      case 'thead':
                      case 'tr':
                        // These tags are only valid with a few parents that have special child
                        // parsing rules -- if we're down here, then none of those matched and
                        // so we allow it only if we don't know what the parent is, as all other
                        // cases are invalid.
                        return parentTag == null
                    }

                    return true
                  }

                  /**
                   * Returns whether
                   */
                  var findInvalidAncestorForTag = function (tag, ancestorInfo) {
                    switch (tag) {
                      case 'address':
                      case 'article':
                      case 'aside':
                      case 'blockquote':
                      case 'center':
                      case 'details':
                      case 'dialog':
                      case 'dir':
                      case 'div':
                      case 'dl':
                      case 'fieldset':
                      case 'figcaption':
                      case 'figure':
                      case 'footer':
                      case 'header':
                      case 'hgroup':
                      case 'main':
                      case 'menu':
                      case 'nav':
                      case 'ol':
                      case 'p':
                      case 'section':
                      case 'summary':
                      case 'ul':
                      case 'pre':
                      case 'listing':
                      case 'table':
                      case 'hr':
                      case 'xmp':
                      case 'h1':
                      case 'h2':
                      case 'h3':
                      case 'h4':
                      case 'h5':
                      case 'h6':
                        return ancestorInfo.pTagInButtonScope

                      case 'form':
                        return (
                          ancestorInfo.formTag || ancestorInfo.pTagInButtonScope
                        )

                      case 'li':
                        return ancestorInfo.listItemTagAutoclosing

                      case 'dd':
                      case 'dt':
                        return ancestorInfo.dlItemTagAutoclosing

                      case 'button':
                        return ancestorInfo.buttonTagInScope

                      case 'a':
                        // Spec says something about storing a list of markers, but it sounds
                        // equivalent to this check.
                        return ancestorInfo.aTagInScope

                      case 'nobr':
                        return ancestorInfo.nobrTagInScope
                    }

                    return null
                  }

                  var didWarn = {}

                  validateDOMNesting = function (
                    childTag,
                    childText,
                    ancestorInfo
                  ) {
                    ancestorInfo = ancestorInfo || emptyAncestorInfo
                    var parentInfo = ancestorInfo.current
                    var parentTag = parentInfo && parentInfo.tag

                    if (childText != null) {
                      !(childTag == null)
                        ? warning(
                            false,
                            'validateDOMNesting: when childText is passed, childTag should be null'
                          )
                        : void 0
                      childTag = '#text'
                    }

                    var invalidParent = isTagValidWithParent(
                      childTag,
                      parentTag
                    )
                      ? null
                      : parentInfo
                    var invalidAncestor = invalidParent
                      ? null
                      : findInvalidAncestorForTag(childTag, ancestorInfo)
                    var invalidParentOrAncestor =
                      invalidParent || invalidAncestor
                    if (!invalidParentOrAncestor) {
                      return
                    }

                    var ancestorTag = invalidParentOrAncestor.tag
                    var addendum = getCurrentFiberStackAddendum$6()

                    var warnKey =
                      !!invalidParent +
                      '|' +
                      childTag +
                      '|' +
                      ancestorTag +
                      '|' +
                      addendum
                    if (didWarn[warnKey]) {
                      return
                    }
                    didWarn[warnKey] = true

                    var tagDisplayName = childTag
                    var whitespaceInfo = ''
                    if (childTag === '#text') {
                      if (/\S/.test(childText)) {
                        tagDisplayName = 'Text nodes'
                      } else {
                        tagDisplayName = 'Whitespace text nodes'
                        whitespaceInfo =
                          " Make sure you don't have any extra whitespace between tags on " +
                          'each line of your source code.'
                      }
                    } else {
                      tagDisplayName = '<' + childTag + '>'
                    }

                    if (invalidParent) {
                      var info = ''
                      if (ancestorTag === 'table' && childTag === 'tr') {
                        info +=
                          ' Add a <tbody> to your code to match the DOM tree generated by ' +
                          'the browser.'
                      }
                      warning(
                        false,
                        'validateDOMNesting(...): %s cannot appear as a child of <%s>.%s%s%s',
                        tagDisplayName,
                        ancestorTag,
                        whitespaceInfo,
                        info,
                        addendum
                      )
                    } else {
                      warning(
                        false,
                        'validateDOMNesting(...): %s cannot appear as a descendant of ' +
                          '<%s>.%s',
                        tagDisplayName,
                        ancestorTag,
                        addendum
                      )
                    }
                  }

                  // TODO: turn this into a named export
                  validateDOMNesting.updatedAncestorInfo = updatedAncestorInfo$1
                }

                var validateDOMNesting$1 = validateDOMNesting

                // TODO: This type is shared between the reconciler and ReactDOM, but will
                // eventually be lifted out to the renderer.

                // TODO: direct imports like some-package/src/* are bad. Fix me.
                var createElement = createElement$1
                var createTextNode = createTextNode$1
                var setInitialProperties = setInitialProperties$1
                var diffProperties = diffProperties$1
                var updateProperties = updateProperties$1
                var diffHydratedProperties = diffHydratedProperties$1
                var diffHydratedText = diffHydratedText$1
                var warnForUnmatchedText = warnForUnmatchedText$1
                var warnForDeletedHydratableElement = warnForDeletedHydratableElement$1
                var warnForDeletedHydratableText = warnForDeletedHydratableText$1
                var warnForInsertedHydratedElement = warnForInsertedHydratedElement$1
                var warnForInsertedHydratedText = warnForInsertedHydratedText$1
                var updatedAncestorInfo =
                  validateDOMNesting$1.updatedAncestorInfo
                var precacheFiberNode = precacheFiberNode$1
                var updateFiberProps = updateFiberProps$1

                var SUPPRESS_HYDRATION_WARNING = void 0
                var topLevelUpdateWarnings = void 0
                var warnOnInvalidCallback = void 0
                var didWarnAboutUnstableCreatePortal = false

                {
                  SUPPRESS_HYDRATION_WARNING = 'suppressHydrationWarning'
                  if (
                    typeof Map !== 'function' ||
                    Map.prototype == null ||
                    typeof Map.prototype.forEach !== 'function' ||
                    typeof Set !== 'function' ||
                    Set.prototype == null ||
                    typeof Set.prototype.clear !== 'function' ||
                    typeof Set.prototype.forEach !== 'function'
                  ) {
                    warning(
                      false,
                      'React depends on Map and Set built-in types. Make sure that you load a ' +
                        'polyfill in older browsers. https://fb.me/react-polyfills'
                    )
                  }

                  topLevelUpdateWarnings = function (container) {
                    if (
                      container._reactRootContainer &&
                      container.nodeType !== COMMENT_NODE
                    ) {
                      var hostInstance = DOMRenderer.findHostInstanceWithNoPortals(
                        container._reactRootContainer._internalRoot.current
                      )
                      if (hostInstance) {
                        !(hostInstance.parentNode === container)
                          ? warning(
                              false,
                              'render(...): It looks like the React-rendered content of this ' +
                                'container was removed without using React. This is not ' +
                                'supported and will cause errors. Instead, call ' +
                                'ReactDOM.unmountComponentAtNode to empty a container.'
                            )
                          : void 0
                      }
                    }

                    var isRootRenderedBySomeReact = !!container._reactRootContainer
                    var rootEl = getReactRootElementInContainer(container)
                    var hasNonRootReactChild = !!(
                      rootEl && getInstanceFromNode$1(rootEl)
                    )

                    !(!hasNonRootReactChild || isRootRenderedBySomeReact)
                      ? warning(
                          false,
                          'render(...): Replacing React-rendered children with a new root ' +
                            'component. If you intended to update the children of this node, ' +
                            'you should instead have the existing children update their state ' +
                            'and render the new components instead of calling ReactDOM.render.'
                        )
                      : void 0

                    !(
                      container.nodeType !== ELEMENT_NODE ||
                      !container.tagName ||
                      container.tagName.toUpperCase() !== 'BODY'
                    )
                      ? warning(
                          false,
                          'render(): Rendering components directly into document.body is ' +
                            'discouraged, since its children are often manipulated by third-party ' +
                            'scripts and browser extensions. This may lead to subtle ' +
                            'reconciliation issues. Try rendering into a container element created ' +
                            'for your app.'
                        )
                      : void 0
                  }

                  warnOnInvalidCallback = function (callback, callerName) {
                    !(callback === null || typeof callback === 'function')
                      ? warning(
                          false,
                          '%s(...): Expected the last optional `callback` argument to be a ' +
                            'function. Instead received: %s.',
                          callerName,
                          callback
                        )
                      : void 0
                  }
                }

                injection$2.injectFiberControlledHostComponent(
                  ReactDOMFiberComponent
                )

                var eventsEnabled = null
                var selectionInformation = null

                function ReactBatch(root) {
                  var expirationTime = DOMRenderer.computeUniqueAsyncExpiration()
                  this._expirationTime = expirationTime
                  this._root = root
                  this._next = null
                  this._callbacks = null
                  this._didComplete = false
                  this._hasChildren = false
                  this._children = null
                  this._defer = true
                }
                ReactBatch.prototype.render = function (children) {
                  !this._defer
                    ? invariant(
                        false,
                        'batch.render: Cannot render a batch that already committed.'
                      )
                    : void 0
                  this._hasChildren = true
                  this._children = children
                  var internalRoot = this._root._internalRoot
                  var expirationTime = this._expirationTime
                  var work = new ReactWork()
                  DOMRenderer.updateContainerAtExpirationTime(
                    children,
                    internalRoot,
                    null,
                    expirationTime,
                    work._onCommit
                  )
                  return work
                }
                ReactBatch.prototype.then = function (onComplete) {
                  if (this._didComplete) {
                    onComplete()
                    return
                  }
                  var callbacks = this._callbacks
                  if (callbacks === null) {
                    callbacks = this._callbacks = []
                  }
                  callbacks.push(onComplete)
                }
                ReactBatch.prototype.commit = function () {
                  var internalRoot = this._root._internalRoot
                  var firstBatch = internalRoot.firstBatch
                  !(this._defer && firstBatch !== null)
                    ? invariant(
                        false,
                        'batch.commit: Cannot commit a batch multiple times.'
                      )
                    : void 0

                  if (!this._hasChildren) {
                    // This batch is empty. Return.
                    this._next = null
                    this._defer = false
                    return
                  }

                  var expirationTime = this._expirationTime

                  // Ensure this is the first batch in the list.
                  if (firstBatch !== this) {
                    // This batch is not the earliest batch. We need to move it to the front.
                    // Update its expiration time to be the expiration time of the earliest
                    // batch, so that we can flush it without flushing the other batches.
                    if (this._hasChildren) {
                      expirationTime = this._expirationTime =
                        firstBatch._expirationTime
                      // Rendering this batch again ensures its children will be the final state
                      // when we flush (updates are processed in insertion order: last
                      // update wins).
                      // TODO: This forces a restart. Should we print a warning?
                      this.render(this._children)
                    }

                    // Remove the batch from the list.
                    var previous = null
                    var batch = firstBatch
                    while (batch !== this) {
                      previous = batch
                      batch = batch._next
                    }
                    !(previous !== null)
                      ? invariant(
                          false,
                          'batch.commit: Cannot commit a batch multiple times.'
                        )
                      : void 0
                    previous._next = batch._next

                    // Add it to the front.
                    this._next = firstBatch
                    firstBatch = internalRoot.firstBatch = this
                  }

                  // Synchronously flush all the work up to this batch's expiration time.
                  this._defer = false
                  DOMRenderer.flushRoot(internalRoot, expirationTime)

                  // Pop the batch from the list.
                  var next = this._next
                  this._next = null
                  firstBatch = internalRoot.firstBatch = next

                  // Append the next earliest batch's children to the update queue.
                  if (firstBatch !== null && firstBatch._hasChildren) {
                    firstBatch.render(firstBatch._children)
                  }
                }
                ReactBatch.prototype._onComplete = function () {
                  if (this._didComplete) {
                    return
                  }
                  this._didComplete = true
                  var callbacks = this._callbacks
                  if (callbacks === null) {
                    return
                  }
                  // TODO: Error handling.
                  for (var i = 0; i < callbacks.length; i++) {
                    var _callback = callbacks[i]
                    _callback()
                  }
                }

                function ReactWork() {
                  this._callbacks = null
                  this._didCommit = false
                  // TODO: Avoid need to bind by replacing callbacks in the update queue with
                  // list of Work objects.
                  this._onCommit = this._onCommit.bind(this)
                }
                ReactWork.prototype.then = function (onCommit) {
                  if (this._didCommit) {
                    onCommit()
                    return
                  }
                  var callbacks = this._callbacks
                  if (callbacks === null) {
                    callbacks = this._callbacks = []
                  }
                  callbacks.push(onCommit)
                }
                ReactWork.prototype._onCommit = function () {
                  if (this._didCommit) {
                    return
                  }
                  this._didCommit = true
                  var callbacks = this._callbacks
                  if (callbacks === null) {
                    return
                  }
                  // TODO: Error handling.
                  for (var i = 0; i < callbacks.length; i++) {
                    var _callback2 = callbacks[i]
                    !(typeof _callback2 === 'function')
                      ? invariant(
                          false,
                          'Invalid argument passed as callback. Expected a function. Instead received: %s',
                          _callback2
                        )
                      : void 0
                    _callback2()
                  }
                }

                function ReactRoot(container, isAsync, hydrate) {
                  var root = DOMRenderer.createContainer(
                    container,
                    isAsync,
                    hydrate
                  )
                  this._internalRoot = root
                }
                ReactRoot.prototype.render = function (children, callback) {
                  var root = this._internalRoot
                  var work = new ReactWork()
                  callback = callback === undefined ? null : callback
                  {
                    warnOnInvalidCallback(callback, 'render')
                  }
                  if (callback !== null) {
                    work.then(callback)
                  }
                  DOMRenderer.updateContainer(
                    children,
                    root,
                    null,
                    work._onCommit
                  )
                  return work
                }
                ReactRoot.prototype.unmount = function (callback) {
                  var root = this._internalRoot
                  var work = new ReactWork()
                  callback = callback === undefined ? null : callback
                  {
                    warnOnInvalidCallback(callback, 'render')
                  }
                  if (callback !== null) {
                    work.then(callback)
                  }
                  DOMRenderer.updateContainer(null, root, null, work._onCommit)
                  return work
                }
                ReactRoot.prototype.legacy_renderSubtreeIntoContainer = function (
                  parentComponent,
                  children,
                  callback
                ) {
                  var root = this._internalRoot
                  var work = new ReactWork()
                  callback = callback === undefined ? null : callback
                  {
                    warnOnInvalidCallback(callback, 'render')
                  }
                  if (callback !== null) {
                    work.then(callback)
                  }
                  DOMRenderer.updateContainer(
                    children,
                    root,
                    parentComponent,
                    work._onCommit
                  )
                  return work
                }
                ReactRoot.prototype.createBatch = function () {
                  var batch = new ReactBatch(this)
                  var expirationTime = batch._expirationTime

                  var internalRoot = this._internalRoot
                  var firstBatch = internalRoot.firstBatch
                  if (firstBatch === null) {
                    internalRoot.firstBatch = batch
                    batch._next = null
                  } else {
                    // Insert sorted by expiration time then insertion order
                    var insertAfter = null
                    var insertBefore = firstBatch
                    while (
                      insertBefore !== null &&
                      insertBefore._expirationTime <= expirationTime
                    ) {
                      insertAfter = insertBefore
                      insertBefore = insertBefore._next
                    }
                    batch._next = insertBefore
                    if (insertAfter !== null) {
                      insertAfter._next = batch
                    }
                  }

                  return batch
                }

                /**
                 * True if the supplied DOM node is a valid node element.
                 *
                 * @param {?DOMElement} node The candidate DOM node.
                 * @return {boolean} True if the DOM is a valid DOM node.
                 * @internal
                 */
                function isValidContainer(node) {
                  return !!(
                    node &&
                    (node.nodeType === ELEMENT_NODE ||
                      node.nodeType === DOCUMENT_NODE ||
                      node.nodeType === DOCUMENT_FRAGMENT_NODE ||
                      (node.nodeType === COMMENT_NODE &&
                        node.nodeValue === ' react-mount-point-unstable '))
                  )
                }

                function getReactRootElementInContainer(container) {
                  if (!container) {
                    return null
                  }

                  if (container.nodeType === DOCUMENT_NODE) {
                    return container.documentElement
                  } else {
                    return container.firstChild
                  }
                }

                function shouldHydrateDueToLegacyHeuristic(container) {
                  var rootElement = getReactRootElementInContainer(container)
                  return !!(
                    rootElement &&
                    rootElement.nodeType === ELEMENT_NODE &&
                    rootElement.hasAttribute(ROOT_ATTRIBUTE_NAME)
                  )
                }

                function shouldAutoFocusHostComponent(type, props) {
                  switch (type) {
                    case 'button':
                    case 'input':
                    case 'select':
                    case 'textarea':
                      return !!props.autoFocus
                  }
                  return false
                }

                var DOMRenderer = reactReconciler({
                  getRootHostContext: function (rootContainerInstance) {
                    var type = void 0
                    var namespace = void 0
                    var nodeType = rootContainerInstance.nodeType
                    switch (nodeType) {
                      case DOCUMENT_NODE:
                      case DOCUMENT_FRAGMENT_NODE: {
                        type =
                          nodeType === DOCUMENT_NODE ? '#document' : '#fragment'
                        var root = rootContainerInstance.documentElement
                        namespace = root
                          ? root.namespaceURI
                          : getChildNamespace(null, '')
                        break
                      }
                      default: {
                        var container =
                          nodeType === COMMENT_NODE
                            ? rootContainerInstance.parentNode
                            : rootContainerInstance
                        var ownNamespace = container.namespaceURI || null
                        type = container.tagName
                        namespace = getChildNamespace(ownNamespace, type)
                        break
                      }
                    }
                    {
                      var validatedTag = type.toLowerCase()
                      var _ancestorInfo = updatedAncestorInfo(
                        null,
                        validatedTag,
                        null
                      )
                      return {
                        namespace: namespace,
                        ancestorInfo: _ancestorInfo,
                      }
                    }
                    return namespace
                  },
                  getChildHostContext: function (parentHostContext, type) {
                    {
                      var parentHostContextDev = parentHostContext
                      var _namespace = getChildNamespace(
                        parentHostContextDev.namespace,
                        type
                      )
                      var _ancestorInfo2 = updatedAncestorInfo(
                        parentHostContextDev.ancestorInfo,
                        type,
                        null
                      )
                      return {
                        namespace: _namespace,
                        ancestorInfo: _ancestorInfo2,
                      }
                    }
                    var parentNamespace = parentHostContext
                    return getChildNamespace(parentNamespace, type)
                  },
                  getPublicInstance: function (instance) {
                    return instance
                  },
                  prepareForCommit: function () {
                    eventsEnabled = isEnabled()
                    selectionInformation = getSelectionInformation()
                    setEnabled(false)
                  },
                  resetAfterCommit: function () {
                    restoreSelection(selectionInformation)
                    selectionInformation = null
                    setEnabled(eventsEnabled)
                    eventsEnabled = null
                  },
                  createInstance: function (
                    type,
                    props,
                    rootContainerInstance,
                    hostContext,
                    internalInstanceHandle
                  ) {
                    var parentNamespace = void 0
                    {
                      // TODO: take namespace into account when validating.
                      var hostContextDev = hostContext
                      validateDOMNesting$1(
                        type,
                        null,
                        hostContextDev.ancestorInfo
                      )
                      if (
                        typeof props.children === 'string' ||
                        typeof props.children === 'number'
                      ) {
                        var string = '' + props.children
                        var ownAncestorInfo = updatedAncestorInfo(
                          hostContextDev.ancestorInfo,
                          type,
                          null
                        )
                        validateDOMNesting$1(null, string, ownAncestorInfo)
                      }
                      parentNamespace = hostContextDev.namespace
                    }
                    var domElement = createElement(
                      type,
                      props,
                      rootContainerInstance,
                      parentNamespace
                    )
                    precacheFiberNode(internalInstanceHandle, domElement)
                    updateFiberProps(domElement, props)
                    return domElement
                  },
                  appendInitialChild: function (parentInstance, child) {
                    parentInstance.appendChild(child)
                  },
                  finalizeInitialChildren: function (
                    domElement,
                    type,
                    props,
                    rootContainerInstance
                  ) {
                    setInitialProperties(
                      domElement,
                      type,
                      props,
                      rootContainerInstance
                    )
                    return shouldAutoFocusHostComponent(type, props)
                  },
                  prepareUpdate: function (
                    domElement,
                    type,
                    oldProps,
                    newProps,
                    rootContainerInstance,
                    hostContext
                  ) {
                    {
                      var hostContextDev = hostContext
                      if (
                        typeof newProps.children !== typeof oldProps.children &&
                        (typeof newProps.children === 'string' ||
                          typeof newProps.children === 'number')
                      ) {
                        var string = '' + newProps.children
                        var ownAncestorInfo = updatedAncestorInfo(
                          hostContextDev.ancestorInfo,
                          type,
                          null
                        )
                        validateDOMNesting$1(null, string, ownAncestorInfo)
                      }
                    }
                    return diffProperties(
                      domElement,
                      type,
                      oldProps,
                      newProps,
                      rootContainerInstance
                    )
                  },
                  shouldSetTextContent: function (type, props) {
                    return (
                      type === 'textarea' ||
                      typeof props.children === 'string' ||
                      typeof props.children === 'number' ||
                      (typeof props.dangerouslySetInnerHTML === 'object' &&
                        props.dangerouslySetInnerHTML !== null &&
                        typeof props.dangerouslySetInnerHTML.__html ===
                          'string')
                    )
                  },
                  shouldDeprioritizeSubtree: function (type, props) {
                    return !!props.hidden
                  },
                  createTextInstance: function (
                    text,
                    rootContainerInstance,
                    hostContext,
                    internalInstanceHandle
                  ) {
                    {
                      var hostContextDev = hostContext
                      validateDOMNesting$1(
                        null,
                        text,
                        hostContextDev.ancestorInfo
                      )
                    }
                    var textNode = createTextNode(text, rootContainerInstance)
                    precacheFiberNode(internalInstanceHandle, textNode)
                    return textNode
                  },

                  now: now,

                  mutation: {
                    commitMount: function (
                      domElement,
                      type,
                      newProps,
                      internalInstanceHandle
                    ) {
                      // Despite the naming that might imply otherwise, this method only
                      // fires if there is an `Update` effect scheduled during mounting.
                      // This happens if `finalizeInitialChildren` returns `true` (which it
                      // does to implement the `autoFocus` attribute on the client). But
                      // there are also other cases when this might happen (such as patching
                      // up text content during hydration mismatch). So we'll check this again.
                      if (shouldAutoFocusHostComponent(type, newProps)) {
                        domElement.focus()
                      }
                    },
                    commitUpdate: function (
                      domElement,
                      updatePayload,
                      type,
                      oldProps,
                      newProps,
                      internalInstanceHandle
                    ) {
                      // Update the props handle so that we know which props are the ones with
                      // with current event handlers.
                      updateFiberProps(domElement, newProps)
                      // Apply the diff to the DOM node.
                      updateProperties(
                        domElement,
                        updatePayload,
                        type,
                        oldProps,
                        newProps
                      )
                    },
                    resetTextContent: function (domElement) {
                      setTextContent(domElement, '')
                    },
                    commitTextUpdate: function (
                      textInstance,
                      oldText,
                      newText
                    ) {
                      textInstance.nodeValue = newText
                    },
                    appendChild: function (parentInstance, child) {
                      parentInstance.appendChild(child)
                    },
                    appendChildToContainer: function (container, child) {
                      if (container.nodeType === COMMENT_NODE) {
                        container.parentNode.insertBefore(child, container)
                      } else {
                        container.appendChild(child)
                      }
                    },
                    insertBefore: function (
                      parentInstance,
                      child,
                      beforeChild
                    ) {
                      parentInstance.insertBefore(child, beforeChild)
                    },
                    insertInContainerBefore: function (
                      container,
                      child,
                      beforeChild
                    ) {
                      if (container.nodeType === COMMENT_NODE) {
                        container.parentNode.insertBefore(child, beforeChild)
                      } else {
                        container.insertBefore(child, beforeChild)
                      }
                    },
                    removeChild: function (parentInstance, child) {
                      parentInstance.removeChild(child)
                    },
                    removeChildFromContainer: function (container, child) {
                      if (container.nodeType === COMMENT_NODE) {
                        container.parentNode.removeChild(child)
                      } else {
                        container.removeChild(child)
                      }
                    },
                  },

                  hydration: {
                    canHydrateInstance: function (instance, type, props) {
                      if (
                        instance.nodeType !== ELEMENT_NODE ||
                        type.toLowerCase() !== instance.nodeName.toLowerCase()
                      ) {
                        return null
                      }
                      // This has now been refined to an element node.
                      return instance
                    },
                    canHydrateTextInstance: function (instance, text) {
                      if (text === '' || instance.nodeType !== TEXT_NODE) {
                        // Empty strings are not parsed by HTML so there won't be a correct match here.
                        return null
                      }
                      // This has now been refined to a text node.
                      return instance
                    },
                    getNextHydratableSibling: function (instance) {
                      var node = instance.nextSibling
                      // Skip non-hydratable nodes.
                      while (
                        node &&
                        node.nodeType !== ELEMENT_NODE &&
                        node.nodeType !== TEXT_NODE
                      ) {
                        node = node.nextSibling
                      }
                      return node
                    },
                    getFirstHydratableChild: function (parentInstance) {
                      var next = parentInstance.firstChild
                      // Skip non-hydratable nodes.
                      while (
                        next &&
                        next.nodeType !== ELEMENT_NODE &&
                        next.nodeType !== TEXT_NODE
                      ) {
                        next = next.nextSibling
                      }
                      return next
                    },
                    hydrateInstance: function (
                      instance,
                      type,
                      props,
                      rootContainerInstance,
                      hostContext,
                      internalInstanceHandle
                    ) {
                      precacheFiberNode(internalInstanceHandle, instance)
                      // TODO: Possibly defer this until the commit phase where all the events
                      // get attached.
                      updateFiberProps(instance, props)
                      var parentNamespace = void 0
                      {
                        var hostContextDev = hostContext
                        parentNamespace = hostContextDev.namespace
                      }
                      return diffHydratedProperties(
                        instance,
                        type,
                        props,
                        parentNamespace,
                        rootContainerInstance
                      )
                    },
                    hydrateTextInstance: function (
                      textInstance,
                      text,
                      internalInstanceHandle
                    ) {
                      precacheFiberNode(internalInstanceHandle, textInstance)
                      return diffHydratedText(textInstance, text)
                    },
                    didNotMatchHydratedContainerTextInstance: function (
                      parentContainer,
                      textInstance,
                      text
                    ) {
                      {
                        warnForUnmatchedText(textInstance, text)
                      }
                    },
                    didNotMatchHydratedTextInstance: function (
                      parentType,
                      parentProps,
                      parentInstance,
                      textInstance,
                      text
                    ) {
                      if (
                        true &&
                        parentProps[SUPPRESS_HYDRATION_WARNING] !== true
                      ) {
                        warnForUnmatchedText(textInstance, text)
                      }
                    },
                    didNotHydrateContainerInstance: function (
                      parentContainer,
                      instance
                    ) {
                      {
                        if (instance.nodeType === 1) {
                          warnForDeletedHydratableElement(
                            parentContainer,
                            instance
                          )
                        } else {
                          warnForDeletedHydratableText(
                            parentContainer,
                            instance
                          )
                        }
                      }
                    },
                    didNotHydrateInstance: function (
                      parentType,
                      parentProps,
                      parentInstance,
                      instance
                    ) {
                      if (
                        true &&
                        parentProps[SUPPRESS_HYDRATION_WARNING] !== true
                      ) {
                        if (instance.nodeType === 1) {
                          warnForDeletedHydratableElement(
                            parentInstance,
                            instance
                          )
                        } else {
                          warnForDeletedHydratableText(parentInstance, instance)
                        }
                      }
                    },
                    didNotFindHydratableContainerInstance: function (
                      parentContainer,
                      type,
                      props
                    ) {
                      {
                        warnForInsertedHydratedElement(
                          parentContainer,
                          type,
                          props
                        )
                      }
                    },
                    didNotFindHydratableContainerTextInstance: function (
                      parentContainer,
                      text
                    ) {
                      {
                        warnForInsertedHydratedText(parentContainer, text)
                      }
                    },
                    didNotFindHydratableInstance: function (
                      parentType,
                      parentProps,
                      parentInstance,
                      type,
                      props
                    ) {
                      if (
                        true &&
                        parentProps[SUPPRESS_HYDRATION_WARNING] !== true
                      ) {
                        warnForInsertedHydratedElement(
                          parentInstance,
                          type,
                          props
                        )
                      }
                    },
                    didNotFindHydratableTextInstance: function (
                      parentType,
                      parentProps,
                      parentInstance,
                      text
                    ) {
                      if (
                        true &&
                        parentProps[SUPPRESS_HYDRATION_WARNING] !== true
                      ) {
                        warnForInsertedHydratedText(parentInstance, text)
                      }
                    },
                  },

                  scheduleDeferredCallback: rIC,
                  cancelDeferredCallback: cIC,
                })

                injection$3.injectRenderer(DOMRenderer)

                var warnedAboutHydrateAPI = false

                function legacyCreateRootFromDOMContainer(
                  container,
                  forceHydrate
                ) {
                  var shouldHydrate =
                    forceHydrate || shouldHydrateDueToLegacyHeuristic(container)
                  // First clear any existing content.
                  if (!shouldHydrate) {
                    var warned = false
                    var rootSibling = void 0
                    while ((rootSibling = container.lastChild)) {
                      {
                        if (
                          !warned &&
                          rootSibling.nodeType === ELEMENT_NODE &&
                          rootSibling.hasAttribute(ROOT_ATTRIBUTE_NAME)
                        ) {
                          warned = true
                          warning(
                            false,
                            'render(): Target node has markup rendered by React, but there ' +
                              'are unrelated nodes as well. This is most commonly caused by ' +
                              'white-space inserted around server-rendered markup.'
                          )
                        }
                      }
                      container.removeChild(rootSibling)
                    }
                  }
                  {
                    if (
                      shouldHydrate &&
                      !forceHydrate &&
                      !warnedAboutHydrateAPI
                    ) {
                      warnedAboutHydrateAPI = true
                      lowPriorityWarning$1(
                        false,
                        'render(): Calling ReactDOM.render() to hydrate server-rendered markup ' +
                          'will stop working in React v17. Replace the ReactDOM.render() call ' +
                          'with ReactDOM.hydrate() if you want React to attach to the server HTML.'
                      )
                    }
                  }
                  // Legacy roots are not async by default.
                  var isAsync = false
                  return new ReactRoot(container, isAsync, shouldHydrate)
                }

                function legacyRenderSubtreeIntoContainer(
                  parentComponent,
                  children,
                  container,
                  forceHydrate,
                  callback
                ) {
                  // TODO: Ensure all entry points contain this check
                  !isValidContainer(container)
                    ? invariant(false, 'Target container is not a DOM element.')
                    : void 0

                  {
                    topLevelUpdateWarnings(container)
                  }

                  // TODO: Without `any` type, Flow says "Property cannot be accessed on any
                  // member of intersection type." Whyyyyyy.
                  var root = container._reactRootContainer
                  if (!root) {
                    // Initial mount
                    root = container._reactRootContainer = legacyCreateRootFromDOMContainer(
                      container,
                      forceHydrate
                    )
                    if (typeof callback === 'function') {
                      var originalCallback = callback
                      callback = function () {
                        var instance = DOMRenderer.getPublicRootInstance(
                          root._internalRoot
                        )
                        originalCallback.call(instance)
                      }
                    }
                    // Initial mount should not be batched.
                    DOMRenderer.unbatchedUpdates(function () {
                      if (parentComponent != null) {
                        root.legacy_renderSubtreeIntoContainer(
                          parentComponent,
                          children,
                          callback
                        )
                      } else {
                        root.render(children, callback)
                      }
                    })
                  } else {
                    if (typeof callback === 'function') {
                      var _originalCallback = callback
                      callback = function () {
                        var instance = DOMRenderer.getPublicRootInstance(
                          root._internalRoot
                        )
                        _originalCallback.call(instance)
                      }
                    }
                    // Update
                    if (parentComponent != null) {
                      root.legacy_renderSubtreeIntoContainer(
                        parentComponent,
                        children,
                        callback
                      )
                    } else {
                      root.render(children, callback)
                    }
                  }
                  return DOMRenderer.getPublicRootInstance(root._internalRoot)
                }

                function createPortal(children, container) {
                  var key =
                    arguments.length > 2 && arguments[2] !== undefined
                      ? arguments[2]
                      : null

                  !isValidContainer(container)
                    ? invariant(false, 'Target container is not a DOM element.')
                    : void 0
                  // TODO: pass ReactDOM portal implementation as third argument
                  return createPortal$1(children, container, null, key)
                }

                var ReactDOM = {
                  createPortal: createPortal,

                  findDOMNode: function (componentOrElement) {
                    {
                      var owner = ReactCurrentOwner.current
                      if (owner !== null && owner.stateNode !== null) {
                        var warnedAboutRefsInRender =
                          owner.stateNode._warnedAboutRefsInRender
                        !warnedAboutRefsInRender
                          ? warning(
                              false,
                              '%s is accessing findDOMNode inside its render(). ' +
                                'render() should be a pure function of props and state. It should ' +
                                'never access something that requires stale data from the previous ' +
                                'render, such as refs. Move this logic to componentDidMount and ' +
                                'componentDidUpdate instead.',
                              getComponentName(owner) || 'A component'
                            )
                          : void 0
                        owner.stateNode._warnedAboutRefsInRender = true
                      }
                    }
                    if (componentOrElement == null) {
                      return null
                    }
                    if (componentOrElement.nodeType === ELEMENT_NODE) {
                      return componentOrElement
                    }

                    return DOMRenderer.findHostInstance(componentOrElement)
                  },
                  hydrate: function (element, container, callback) {
                    // TODO: throw or warn if we couldn't hydrate?
                    return legacyRenderSubtreeIntoContainer(
                      null,
                      element,
                      container,
                      true,
                      callback
                    )
                  },
                  render: function (element, container, callback) {
                    return legacyRenderSubtreeIntoContainer(
                      null,
                      element,
                      container,
                      false,
                      callback
                    )
                  },
                  unstable_renderSubtreeIntoContainer: function (
                    parentComponent,
                    element,
                    containerNode,
                    callback
                  ) {
                    !(parentComponent != null && has(parentComponent))
                      ? invariant(
                          false,
                          'parentComponent must be a valid React Component'
                        )
                      : void 0
                    return legacyRenderSubtreeIntoContainer(
                      parentComponent,
                      element,
                      containerNode,
                      false,
                      callback
                    )
                  },
                  unmountComponentAtNode: function (container) {
                    !isValidContainer(container)
                      ? invariant(
                          false,
                          'unmountComponentAtNode(...): Target container is not a DOM element.'
                        )
                      : void 0

                    if (container._reactRootContainer) {
                      {
                        var rootEl = getReactRootElementInContainer(container)
                        var renderedByDifferentReact =
                          rootEl && !getInstanceFromNode$1(rootEl)
                        !!renderedByDifferentReact
                          ? warning(
                              false,
                              "unmountComponentAtNode(): The node you're attempting to unmount " +
                                'was rendered by another copy of React.'
                            )
                          : void 0
                      }

                      // Unmount should not be batched.
                      DOMRenderer.unbatchedUpdates(function () {
                        legacyRenderSubtreeIntoContainer(
                          null,
                          null,
                          container,
                          false,
                          function () {
                            container._reactRootContainer = null
                          }
                        )
                      })
                      // If you call unmountComponentAtNode twice in quick succession, you'll
                      // get `true` twice. That's probably fine?
                      return true
                    } else {
                      {
                        var _rootEl = getReactRootElementInContainer(container)
                        var hasNonRootReactChild = !!(
                          _rootEl && getInstanceFromNode$1(_rootEl)
                        )

                        // Check if the container itself is a React root node.
                        var isContainerReactRoot =
                          container.nodeType === 1 &&
                          isValidContainer(container.parentNode) &&
                          !!container.parentNode._reactRootContainer

                        !!hasNonRootReactChild
                          ? warning(
                              false,
                              "unmountComponentAtNode(): The node you're attempting to unmount " +
                                'was rendered by React and is not a top-level container. %s',
                              isContainerReactRoot
                                ? 'You may have accidentally passed in a React root node instead ' +
                                    'of its container.'
                                : 'Instead, have the parent component update its state and ' +
                                    'rerender in order to remove this component.'
                            )
                          : void 0
                      }

                      return false
                    }
                  },

                  // Temporary alias since we already shipped React 16 RC with it.
                  // TODO: remove in React 17.
                  unstable_createPortal: function () {
                    if (!didWarnAboutUnstableCreatePortal) {
                      didWarnAboutUnstableCreatePortal = true
                      lowPriorityWarning$1(
                        false,
                        'The ReactDOM.unstable_createPortal() alias has been deprecated, ' +
                          'and will be removed in React 17+. Update your code to use ' +
                          'ReactDOM.createPortal() instead. It has the exact same API, ' +
                          'but without the "unstable_" prefix.'
                      )
                    }
                    return createPortal.apply(undefined, arguments)
                  },

                  unstable_batchedUpdates: DOMRenderer.batchedUpdates,

                  unstable_deferredUpdates: DOMRenderer.deferredUpdates,

                  flushSync: DOMRenderer.flushSync,

                  unstable_flushControlled: DOMRenderer.flushControlled,

                  __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED: {
                    // For TapEventPlugin which is popular in open source
                    EventPluginHub: EventPluginHub,
                    // Used by test-utils
                    EventPluginRegistry: EventPluginRegistry,
                    EventPropagators: EventPropagators,
                    ReactControlledComponent: ReactControlledComponent,
                    ReactDOMComponentTree: ReactDOMComponentTree,
                    ReactDOMEventListener: ReactDOMEventListener,
                  },
                }

                ReactDOM.unstable_createRoot = function createRoot(
                  container,
                  options
                ) {
                  var hydrate = options != null && options.hydrate === true
                  return new ReactRoot(container, true, hydrate)
                }

                var foundDevTools = DOMRenderer.injectIntoDevTools({
                  findFiberByHostInstance: getClosestInstanceFromNode,
                  bundleType: 1,
                  version: ReactVersion,
                  rendererPackageName: 'react-dom',
                })

                {
                  if (
                    !foundDevTools &&
                    ExecutionEnvironment.canUseDOM &&
                    window.top === window.self
                  ) {
                    // If we're in Chrome or Firefox, provide a download link if not installed.
                    if (
                      (navigator.userAgent.indexOf('Chrome') > -1 &&
                        navigator.userAgent.indexOf('Edge') === -1) ||
                      navigator.userAgent.indexOf('Firefox') > -1
                    ) {
                      var protocol = window.location.protocol
                      // Don't warn in exotic cases like chrome-extension://.
                      if (/^(https?|file):$/.test(protocol)) {
                        console.info(
                          '%cDownload the React DevTools ' +
                            'for a better development experience: ' +
                            'https://fb.me/react-devtools' +
                            (protocol === 'file:'
                              ? '\nYou might need to use a local HTTP server (instead of file://): ' +
                                'https://fb.me/react-devtools-faq'
                              : ''),
                          'font-weight:bold'
                        )
                      }
                    }
                  }
                }

                var ReactDOM$2 = Object.freeze({
                  default: ReactDOM,
                })

                var ReactDOM$3 = (ReactDOM$2 && ReactDOM) || ReactDOM$2

                // TODO: decide on the top-level export form.
                // This is hacky but makes it work with both Rollup and Jest.
                var reactDom = ReactDOM$3['default']
                  ? ReactDOM$3['default']
                  : ReactDOM$3

                module.exports = reactDom
              })()
            }
          }.call(this, require('_process')))
        },
        {
          _process: 13,
          'fbjs/lib/ExecutionEnvironment': 27,
          'fbjs/lib/camelizeStyleName': 29,
          'fbjs/lib/containsNode': 30,
          'fbjs/lib/emptyFunction': 31,
          'fbjs/lib/emptyObject': 32,
          'fbjs/lib/getActiveElement': 33,
          'fbjs/lib/hyphenateStyleName': 35,
          'fbjs/lib/invariant': 36,
          'fbjs/lib/shallowEqual': 39,
          'fbjs/lib/warning': 40,
          'object-assign': 41,
          'prop-types/checkPropTypes': 42,
          react: 46,
        },
      ],
      25: [
        function (require, module, exports) {
          /** @license React v16.3.3
           * react-dom.production.min.js
           *
           * Copyright (c) 2013-present, Facebook, Inc.
           *
           * This source code is licensed under the MIT license found in the
           * LICENSE file in the root directory of this source tree.
           */

          /*
 Modernizr 3.0.0pre (Custom Build) | MIT
*/
          'use strict'
          var ba = require('fbjs/lib/invariant'),
            ea = require('react'),
            m = require('fbjs/lib/ExecutionEnvironment'),
            A = require('object-assign'),
            C = require('fbjs/lib/emptyFunction'),
            fa = require('fbjs/lib/getActiveElement'),
            ha = require('fbjs/lib/shallowEqual'),
            ja = require('fbjs/lib/containsNode'),
            ka = require('fbjs/lib/emptyObject')
          function D(a) {
            for (
              var b = arguments.length - 1,
                c =
                  'http://reactjs.org/docs/error-decoder.html?invariant\x3d' +
                  a,
                d = 0;
              d < b;
              d++
            )
              c += '\x26args[]\x3d' + encodeURIComponent(arguments[d + 1])
            ba(
              !1,
              'Minified React error #' +
                a +
                '; visit %s for the full message or use the non-minified dev environment for full errors and additional helpful warnings. ',
              c
            )
          }
          ea ? void 0 : D('227')
          function ma(a, b, c, d, e, f, h, g, k) {
            this._hasCaughtError = !1
            this._caughtError = null
            var v = Array.prototype.slice.call(arguments, 3)
            try {
              b.apply(c, v)
            } catch (l) {
              ;(this._caughtError = l), (this._hasCaughtError = !0)
            }
          }
          var E = {
            _caughtError: null,
            _hasCaughtError: !1,
            _rethrowError: null,
            _hasRethrowError: !1,
            invokeGuardedCallback: function (a, b, c, d, e, f, h, g, k) {
              ma.apply(E, arguments)
            },
            invokeGuardedCallbackAndCatchFirstError: function (
              a,
              b,
              c,
              d,
              e,
              f,
              h,
              g,
              k
            ) {
              E.invokeGuardedCallback.apply(this, arguments)
              if (E.hasCaughtError()) {
                var v = E.clearCaughtError()
                E._hasRethrowError ||
                  ((E._hasRethrowError = !0), (E._rethrowError = v))
              }
            },
            rethrowCaughtError: function () {
              return na.apply(E, arguments)
            },
            hasCaughtError: function () {
              return E._hasCaughtError
            },
            clearCaughtError: function () {
              if (E._hasCaughtError) {
                var a = E._caughtError
                E._caughtError = null
                E._hasCaughtError = !1
                return a
              }
              D('198')
            },
          }
          function na() {
            if (E._hasRethrowError) {
              var a = E._rethrowError
              E._rethrowError = null
              E._hasRethrowError = !1
              throw a
            }
          }
          var oa = null,
            pa = {}
          function qa() {
            if (oa)
              for (var a in pa) {
                var b = pa[a],
                  c = oa.indexOf(a)
                ;-1 < c ? void 0 : D('96', a)
                if (!ra[c]) {
                  b.extractEvents ? void 0 : D('97', a)
                  ra[c] = b
                  c = b.eventTypes
                  for (var d in c) {
                    var e = void 0
                    var f = c[d],
                      h = b,
                      g = d
                    sa.hasOwnProperty(g) ? D('99', g) : void 0
                    sa[g] = f
                    var k = f.phasedRegistrationNames
                    if (k) {
                      for (e in k) k.hasOwnProperty(e) && ta(k[e], h, g)
                      e = !0
                    } else
                      f.registrationName
                        ? (ta(f.registrationName, h, g), (e = !0))
                        : (e = !1)
                    e ? void 0 : D('98', d, a)
                  }
                }
              }
          }
          function ta(a, b, c) {
            ua[a] ? D('100', a) : void 0
            ua[a] = b
            va[a] = b.eventTypes[c].dependencies
          }
          var ra = [],
            sa = {},
            ua = {},
            va = {}
          function wa(a) {
            oa ? D('101') : void 0
            oa = Array.prototype.slice.call(a)
            qa()
          }
          function xa(a) {
            var b = !1,
              c
            for (c in a)
              if (a.hasOwnProperty(c)) {
                var d = a[c]
                ;(pa.hasOwnProperty(c) && pa[c] === d) ||
                  (pa[c] ? D('102', c) : void 0, (pa[c] = d), (b = !0))
              }
            b && qa()
          }
          var Ca = Object.freeze({
              plugins: ra,
              eventNameDispatchConfigs: sa,
              registrationNameModules: ua,
              registrationNameDependencies: va,
              possibleRegistrationNames: null,
              injectEventPluginOrder: wa,
              injectEventPluginsByName: xa,
            }),
            Da = null,
            Ea = null,
            Fa = null
          function Ga(a, b, c, d) {
            b = a.type || 'unknown-event'
            a.currentTarget = Fa(d)
            E.invokeGuardedCallbackAndCatchFirstError(b, c, void 0, a)
            a.currentTarget = null
          }
          function Ha(a, b) {
            null == b ? D('30') : void 0
            if (null == a) return b
            if (Array.isArray(a)) {
              if (Array.isArray(b)) return a.push.apply(a, b), a
              a.push(b)
              return a
            }
            return Array.isArray(b) ? [a].concat(b) : [a, b]
          }
          function Ia(a, b, c) {
            Array.isArray(a) ? a.forEach(b, c) : a && b.call(c, a)
          }
          var Ja = null
          function Ka(a, b) {
            if (a) {
              var c = a._dispatchListeners,
                d = a._dispatchInstances
              if (Array.isArray(c))
                for (var e = 0; e < c.length && !a.isPropagationStopped(); e++)
                  Ga(a, b, c[e], d[e])
              else c && Ga(a, b, c, d)
              a._dispatchListeners = null
              a._dispatchInstances = null
              a.isPersistent() || a.constructor.release(a)
            }
          }
          function La(a) {
            return Ka(a, !0)
          }
          function Ma(a) {
            return Ka(a, !1)
          }
          var Na = { injectEventPluginOrder: wa, injectEventPluginsByName: xa }
          function Oa(a, b) {
            var c = a.stateNode
            if (!c) return null
            var d = Da(c)
            if (!d) return null
            c = d[b]
            a: switch (b) {
              case 'onClick':
              case 'onClickCapture':
              case 'onDoubleClick':
              case 'onDoubleClickCapture':
              case 'onMouseDown':
              case 'onMouseDownCapture':
              case 'onMouseMove':
              case 'onMouseMoveCapture':
              case 'onMouseUp':
              case 'onMouseUpCapture':
                ;(d = !d.disabled) ||
                  ((a = a.type),
                  (d = !(
                    'button' === a ||
                    'input' === a ||
                    'select' === a ||
                    'textarea' === a
                  )))
                a = !d
                break a
              default:
                a = !1
            }
            if (a) return null
            c && 'function' !== typeof c ? D('231', b, typeof c) : void 0
            return c
          }
          function Pa(a, b) {
            null !== a && (Ja = Ha(Ja, a))
            a = Ja
            Ja = null
            a &&
              (b ? Ia(a, La) : Ia(a, Ma),
              Ja ? D('95') : void 0,
              E.rethrowCaughtError())
          }
          function Qa(a, b, c, d) {
            for (var e = null, f = 0; f < ra.length; f++) {
              var h = ra[f]
              h && (h = h.extractEvents(a, b, c, d)) && (e = Ha(e, h))
            }
            Pa(e, !1)
          }
          var Ra = Object.freeze({
              injection: Na,
              getListener: Oa,
              runEventsInBatch: Pa,
              runExtractedEventsInBatch: Qa,
            }),
            Sa = Math.random().toString(36).slice(2),
            F = '__reactInternalInstance$' + Sa,
            Ta = '__reactEventHandlers$' + Sa
          function Ua(a) {
            if (a[F]) return a[F]
            for (; !a[F]; )
              if (a.parentNode) a = a.parentNode
              else return null
            a = a[F]
            return 5 === a.tag || 6 === a.tag ? a : null
          }
          function Va(a) {
            if (5 === a.tag || 6 === a.tag) return a.stateNode
            D('33')
          }
          function Xa(a) {
            return a[Ta] || null
          }
          var bb = Object.freeze({
            precacheFiberNode: function (a, b) {
              b[F] = a
            },
            getClosestInstanceFromNode: Ua,
            getInstanceFromNode: function (a) {
              a = a[F]
              return !a || (5 !== a.tag && 6 !== a.tag) ? null : a
            },
            getNodeFromInstance: Va,
            getFiberCurrentPropsFromNode: Xa,
            updateFiberProps: function (a, b) {
              a[Ta] = b
            },
          })
          function L(a) {
            do a = a['return']
            while (a && 5 !== a.tag)
            return a ? a : null
          }
          function cb(a, b, c) {
            for (var d = []; a; ) d.push(a), (a = L(a))
            for (a = d.length; 0 < a--; ) b(d[a], 'captured', c)
            for (a = 0; a < d.length; a++) b(d[a], 'bubbled', c)
          }
          function db(a, b, c) {
            if ((b = Oa(a, c.dispatchConfig.phasedRegistrationNames[b])))
              (c._dispatchListeners = Ha(c._dispatchListeners, b)),
                (c._dispatchInstances = Ha(c._dispatchInstances, a))
          }
          function eb(a) {
            a &&
              a.dispatchConfig.phasedRegistrationNames &&
              cb(a._targetInst, db, a)
          }
          function fb(a) {
            if (a && a.dispatchConfig.phasedRegistrationNames) {
              var b = a._targetInst
              b = b ? L(b) : null
              cb(b, db, a)
            }
          }
          function gb(a, b, c) {
            a &&
              c &&
              c.dispatchConfig.registrationName &&
              (b = Oa(a, c.dispatchConfig.registrationName)) &&
              ((c._dispatchListeners = Ha(c._dispatchListeners, b)),
              (c._dispatchInstances = Ha(c._dispatchInstances, a)))
          }
          function hb(a) {
            a && a.dispatchConfig.registrationName && gb(a._targetInst, null, a)
          }
          function ib(a) {
            Ia(a, eb)
          }
          function jb(a, b, c, d) {
            if (c && d)
              a: {
                var e = c
                for (var f = d, h = 0, g = e; g; g = L(g)) h++
                g = 0
                for (var k = f; k; k = L(k)) g++
                for (; 0 < h - g; ) (e = L(e)), h--
                for (; 0 < g - h; ) (f = L(f)), g--
                for (; h--; ) {
                  if (e === f || e === f.alternate) break a
                  e = L(e)
                  f = L(f)
                }
                e = null
              }
            else e = null
            f = e
            for (e = []; c && c !== f; ) {
              h = c.alternate
              if (null !== h && h === f) break
              e.push(c)
              c = L(c)
            }
            for (c = []; d && d !== f; ) {
              h = d.alternate
              if (null !== h && h === f) break
              c.push(d)
              d = L(d)
            }
            for (d = 0; d < e.length; d++) gb(e[d], 'bubbled', a)
            for (a = c.length; 0 < a--; ) gb(c[a], 'captured', b)
          }
          var kb = Object.freeze({
              accumulateTwoPhaseDispatches: ib,
              accumulateTwoPhaseDispatchesSkipTarget: function (a) {
                Ia(a, fb)
              },
              accumulateEnterLeaveDispatches: jb,
              accumulateDirectDispatches: function (a) {
                Ia(a, hb)
              },
            }),
            lb = null
          function mb() {
            !lb &&
              m.canUseDOM &&
              (lb =
                'textContent' in document.documentElement
                  ? 'textContent'
                  : 'innerText')
            return lb
          }
          var M = { _root: null, _startText: null, _fallbackText: null }
          function nb() {
            if (M._fallbackText) return M._fallbackText
            var a,
              b = M._startText,
              c = b.length,
              d,
              e = ob(),
              f = e.length
            for (a = 0; a < c && b[a] === e[a]; a++);
            var h = c - a
            for (d = 1; d <= h && b[c - d] === e[f - d]; d++);
            M._fallbackText = e.slice(a, 1 < d ? 1 - d : void 0)
            return M._fallbackText
          }
          function ob() {
            return 'value' in M._root ? M._root.value : M._root[mb()]
          }
          var pb = 'dispatchConfig _targetInst nativeEvent isDefaultPrevented isPropagationStopped _dispatchListeners _dispatchInstances'.split(
              ' '
            ),
            qb = {
              type: null,
              target: null,
              currentTarget: C.thatReturnsNull,
              eventPhase: null,
              bubbles: null,
              cancelable: null,
              timeStamp: function (a) {
                return a.timeStamp || Date.now()
              },
              defaultPrevented: null,
              isTrusted: null,
            }
          function N(a, b, c, d) {
            this.dispatchConfig = a
            this._targetInst = b
            this.nativeEvent = c
            a = this.constructor.Interface
            for (var e in a)
              a.hasOwnProperty(e) &&
                ((b = a[e])
                  ? (this[e] = b(c))
                  : 'target' === e
                  ? (this.target = d)
                  : (this[e] = c[e]))
            this.isDefaultPrevented = (
              null != c.defaultPrevented
                ? c.defaultPrevented
                : !1 === c.returnValue
            )
              ? C.thatReturnsTrue
              : C.thatReturnsFalse
            this.isPropagationStopped = C.thatReturnsFalse
            return this
          }
          A(N.prototype, {
            preventDefault: function () {
              this.defaultPrevented = !0
              var a = this.nativeEvent
              a &&
                (a.preventDefault
                  ? a.preventDefault()
                  : 'unknown' !== typeof a.returnValue && (a.returnValue = !1),
                (this.isDefaultPrevented = C.thatReturnsTrue))
            },
            stopPropagation: function () {
              var a = this.nativeEvent
              a &&
                (a.stopPropagation
                  ? a.stopPropagation()
                  : 'unknown' !== typeof a.cancelBubble &&
                    (a.cancelBubble = !0),
                (this.isPropagationStopped = C.thatReturnsTrue))
            },
            persist: function () {
              this.isPersistent = C.thatReturnsTrue
            },
            isPersistent: C.thatReturnsFalse,
            destructor: function () {
              var a = this.constructor.Interface,
                b
              for (b in a) this[b] = null
              for (a = 0; a < pb.length; a++) this[pb[a]] = null
            },
          })
          N.Interface = qb
          N.extend = function (a) {
            function b() {}
            function c() {
              return d.apply(this, arguments)
            }
            var d = this
            b.prototype = d.prototype
            var e = new b()
            A(e, c.prototype)
            c.prototype = e
            c.prototype.constructor = c
            c.Interface = A({}, d.Interface, a)
            c.extend = d.extend
            rb(c)
            return c
          }
          rb(N)
          function sb(a, b, c, d) {
            if (this.eventPool.length) {
              var e = this.eventPool.pop()
              this.call(e, a, b, c, d)
              return e
            }
            return new this(a, b, c, d)
          }
          function tb(a) {
            a instanceof this ? void 0 : D('223')
            a.destructor()
            10 > this.eventPool.length && this.eventPool.push(a)
          }
          function rb(a) {
            a.eventPool = []
            a.getPooled = sb
            a.release = tb
          }
          var ub = N.extend({ data: null }),
            vb = N.extend({ data: null }),
            wb = [9, 13, 27, 32],
            xb = m.canUseDOM && 'CompositionEvent' in window,
            yb = null
          m.canUseDOM &&
            'documentMode' in document &&
            (yb = document.documentMode)
          var zb = m.canUseDOM && 'TextEvent' in window && !yb,
            Ab = m.canUseDOM && (!xb || (yb && 8 < yb && 11 >= yb)),
            Bb = String.fromCharCode(32),
            Kb = {
              beforeInput: {
                phasedRegistrationNames: {
                  bubbled: 'onBeforeInput',
                  captured: 'onBeforeInputCapture',
                },
                dependencies: [
                  'topCompositionEnd',
                  'topKeyPress',
                  'topTextInput',
                  'topPaste',
                ],
              },
              compositionEnd: {
                phasedRegistrationNames: {
                  bubbled: 'onCompositionEnd',
                  captured: 'onCompositionEndCapture',
                },
                dependencies: 'topBlur topCompositionEnd topKeyDown topKeyPress topKeyUp topMouseDown'.split(
                  ' '
                ),
              },
              compositionStart: {
                phasedRegistrationNames: {
                  bubbled: 'onCompositionStart',
                  captured: 'onCompositionStartCapture',
                },
                dependencies: 'topBlur topCompositionStart topKeyDown topKeyPress topKeyUp topMouseDown'.split(
                  ' '
                ),
              },
              compositionUpdate: {
                phasedRegistrationNames: {
                  bubbled: 'onCompositionUpdate',
                  captured: 'onCompositionUpdateCapture',
                },
                dependencies: 'topBlur topCompositionUpdate topKeyDown topKeyPress topKeyUp topMouseDown'.split(
                  ' '
                ),
              },
            },
            Lb = !1
          function Mb(a, b) {
            switch (a) {
              case 'topKeyUp':
                return -1 !== wb.indexOf(b.keyCode)
              case 'topKeyDown':
                return 229 !== b.keyCode
              case 'topKeyPress':
              case 'topMouseDown':
              case 'topBlur':
                return !0
              default:
                return !1
            }
          }
          function Nb(a) {
            a = a.detail
            return 'object' === typeof a && 'data' in a ? a.data : null
          }
          var Ob = !1
          function Pb(a, b) {
            switch (a) {
              case 'topCompositionEnd':
                return Nb(b)
              case 'topKeyPress':
                if (32 !== b.which) return null
                Lb = !0
                return Bb
              case 'topTextInput':
                return (a = b.data), a === Bb && Lb ? null : a
              default:
                return null
            }
          }
          function Qb(a, b) {
            if (Ob)
              return 'topCompositionEnd' === a || (!xb && Mb(a, b))
                ? ((a = nb()),
                  (M._root = null),
                  (M._startText = null),
                  (M._fallbackText = null),
                  (Ob = !1),
                  a)
                : null
            switch (a) {
              case 'topPaste':
                return null
              case 'topKeyPress':
                if (
                  !(b.ctrlKey || b.altKey || b.metaKey) ||
                  (b.ctrlKey && b.altKey)
                ) {
                  if (b.char && 1 < b.char.length) return b.char
                  if (b.which) return String.fromCharCode(b.which)
                }
                return null
              case 'topCompositionEnd':
                return Ab ? null : b.data
              default:
                return null
            }
          }
          var Rb = {
              eventTypes: Kb,
              extractEvents: function (a, b, c, d) {
                var e = void 0
                var f = void 0
                if (xb)
                  b: {
                    switch (a) {
                      case 'topCompositionStart':
                        e = Kb.compositionStart
                        break b
                      case 'topCompositionEnd':
                        e = Kb.compositionEnd
                        break b
                      case 'topCompositionUpdate':
                        e = Kb.compositionUpdate
                        break b
                    }
                    e = void 0
                  }
                else
                  Ob
                    ? Mb(a, c) && (e = Kb.compositionEnd)
                    : 'topKeyDown' === a &&
                      229 === c.keyCode &&
                      (e = Kb.compositionStart)
                e
                  ? (Ab &&
                      (Ob || e !== Kb.compositionStart
                        ? e === Kb.compositionEnd && Ob && (f = nb())
                        : ((M._root = d), (M._startText = ob()), (Ob = !0))),
                    (e = ub.getPooled(e, b, c, d)),
                    f
                      ? (e.data = f)
                      : ((f = Nb(c)), null !== f && (e.data = f)),
                    ib(e),
                    (f = e))
                  : (f = null)
                ;(a = zb ? Pb(a, c) : Qb(a, c))
                  ? ((b = vb.getPooled(Kb.beforeInput, b, c, d)),
                    (b.data = a),
                    ib(b))
                  : (b = null)
                return null === f ? b : null === b ? f : [f, b]
              },
            },
            Sb = null,
            Tb = {
              injectFiberControlledHostComponent: function (a) {
                Sb = a
              },
            },
            Ub = null,
            Vb = null
          function Wb(a) {
            if ((a = Ea(a))) {
              Sb && 'function' === typeof Sb.restoreControlledState
                ? void 0
                : D('194')
              var b = Da(a.stateNode)
              Sb.restoreControlledState(a.stateNode, a.type, b)
            }
          }
          function Xb(a) {
            Ub ? (Vb ? Vb.push(a) : (Vb = [a])) : (Ub = a)
          }
          function Yb() {
            return null !== Ub || null !== Vb
          }
          function Zb() {
            if (Ub) {
              var a = Ub,
                b = Vb
              Vb = Ub = null
              Wb(a)
              if (b) for (a = 0; a < b.length; a++) Wb(b[a])
            }
          }
          var $b = Object.freeze({
            injection: Tb,
            enqueueStateRestore: Xb,
            needsStateRestore: Yb,
            restoreStateIfNeeded: Zb,
          })
          function ac(a, b) {
            return a(b)
          }
          function bc(a, b, c) {
            return a(b, c)
          }
          function cc() {}
          var dc = !1
          function ec(a, b) {
            if (dc) return a(b)
            dc = !0
            try {
              return ac(a, b)
            } finally {
              ;(dc = !1), Yb() && (cc(), Zb())
            }
          }
          var fc = {
            color: !0,
            date: !0,
            datetime: !0,
            'datetime-local': !0,
            email: !0,
            month: !0,
            number: !0,
            password: !0,
            range: !0,
            search: !0,
            tel: !0,
            text: !0,
            time: !0,
            url: !0,
            week: !0,
          }
          function gc(a) {
            var b = a && a.nodeName && a.nodeName.toLowerCase()
            return 'input' === b ? !!fc[a.type] : 'textarea' === b ? !0 : !1
          }
          function hc(a) {
            a = a.target || window
            a.correspondingUseElement && (a = a.correspondingUseElement)
            return 3 === a.nodeType ? a.parentNode : a
          }
          function ic(a, b) {
            if (!m.canUseDOM || (b && !('addEventListener' in document)))
              return !1
            a = 'on' + a
            b = a in document
            b ||
              ((b = document.createElement('div')),
              b.setAttribute(a, 'return;'),
              (b = 'function' === typeof b[a]))
            return b
          }
          function jc(a) {
            var b = a.type
            return (
              (a = a.nodeName) &&
              'input' === a.toLowerCase() &&
              ('checkbox' === b || 'radio' === b)
            )
          }
          function kc(a) {
            var b = jc(a) ? 'checked' : 'value',
              c = Object.getOwnPropertyDescriptor(a.constructor.prototype, b),
              d = '' + a[b]
            if (
              !a.hasOwnProperty(b) &&
              'function' === typeof c.get &&
              'function' === typeof c.set
            )
              return (
                Object.defineProperty(a, b, {
                  configurable: !0,
                  get: function () {
                    return c.get.call(this)
                  },
                  set: function (a) {
                    d = '' + a
                    c.set.call(this, a)
                  },
                }),
                Object.defineProperty(a, b, { enumerable: c.enumerable }),
                {
                  getValue: function () {
                    return d
                  },
                  setValue: function (a) {
                    d = '' + a
                  },
                  stopTracking: function () {
                    a._valueTracker = null
                    delete a[b]
                  },
                }
              )
          }
          function lc(a) {
            a._valueTracker || (a._valueTracker = kc(a))
          }
          function mc(a) {
            if (!a) return !1
            var b = a._valueTracker
            if (!b) return !0
            var c = b.getValue()
            var d = ''
            a && (d = jc(a) ? (a.checked ? 'true' : 'false') : a.value)
            a = d
            return a !== c ? (b.setValue(a), !0) : !1
          }
          var nc =
              ea.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED
                .ReactCurrentOwner,
            O = 'function' === typeof Symbol && Symbol['for'],
            oc = O ? Symbol['for']('react.element') : 60103,
            pc = O ? Symbol['for']('react.call') : 60104,
            qc = O ? Symbol['for']('react.return') : 60105,
            rc = O ? Symbol['for']('react.portal') : 60106,
            sc = O ? Symbol['for']('react.fragment') : 60107,
            tc = O ? Symbol['for']('react.strict_mode') : 60108,
            uc = O ? Symbol['for']('react.provider') : 60109,
            vc = O ? Symbol['for']('react.context') : 60110,
            wc = O ? Symbol['for']('react.async_mode') : 60111,
            xc = O ? Symbol['for']('react.forward_ref') : 60112,
            yc = 'function' === typeof Symbol && Symbol.iterator
          function zc(a) {
            if (null === a || 'undefined' === typeof a) return null
            a = (yc && a[yc]) || a['@@iterator']
            return 'function' === typeof a ? a : null
          }
          function Ac(a) {
            a = a.type
            if ('function' === typeof a) return a.displayName || a.name
            if ('string' === typeof a) return a
            switch (a) {
              case sc:
                return 'ReactFragment'
              case rc:
                return 'ReactPortal'
              case pc:
                return 'ReactCall'
              case qc:
                return 'ReactReturn'
            }
            if ('object' === typeof a && null !== a)
              switch (a.$$typeof) {
                case xc:
                  return (
                    (a = a.render.displayName || a.render.name || ''),
                    '' !== a ? 'ForwardRef(' + a + ')' : 'ForwardRef'
                  )
              }
            return null
          }
          function Bc(a) {
            var b = ''
            do {
              a: switch (a.tag) {
                case 0:
                case 1:
                case 2:
                case 5:
                  var c = a._debugOwner,
                    d = a._debugSource
                  var e = Ac(a)
                  var f = null
                  c && (f = Ac(c))
                  c = d
                  e =
                    '\n    in ' +
                    (e || 'Unknown') +
                    (c
                      ? ' (at ' +
                        c.fileName.replace(/^.*[\\\/]/, '') +
                        ':' +
                        c.lineNumber +
                        ')'
                      : f
                      ? ' (created by ' + f + ')'
                      : '')
                  break a
                default:
                  e = ''
              }
              b += e
              a = a['return']
            } while (a)
            return b
          }
          var Cc = /^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,
            Dc = {},
            Ec = {}
          function Fc(a) {
            if (Ec.hasOwnProperty(a)) return !0
            if (Dc.hasOwnProperty(a)) return !1
            if (Cc.test(a)) return (Ec[a] = !0)
            Dc[a] = !0
            return !1
          }
          function Gc(a, b, c, d) {
            if (null !== c && 0 === c.type) return !1
            switch (typeof b) {
              case 'function':
              case 'symbol':
                return !0
              case 'boolean':
                if (d) return !1
                if (null !== c) return !c.acceptsBooleans
                a = a.toLowerCase().slice(0, 5)
                return 'data-' !== a && 'aria-' !== a
              default:
                return !1
            }
          }
          function Hc(a, b, c, d) {
            if (null === b || 'undefined' === typeof b || Gc(a, b, c, d))
              return !0
            if (null !== c)
              switch (c.type) {
                case 3:
                  return !b
                case 4:
                  return !1 === b
                case 5:
                  return isNaN(b)
                case 6:
                  return isNaN(b) || 1 > b
              }
            return !1
          }
          function U(a, b, c, d, e) {
            this.acceptsBooleans = 2 === b || 3 === b || 4 === b
            this.attributeName = d
            this.attributeNamespace = e
            this.mustUseProperty = c
            this.propertyName = a
            this.type = b
          }
          var V = {}
          'children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style'
            .split(' ')
            .forEach(function (a) {
              V[a] = new U(a, 0, !1, a, null)
            })
          ;[
            ['acceptCharset', 'accept-charset'],
            ['className', 'class'],
            ['htmlFor', 'for'],
            ['httpEquiv', 'http-equiv'],
          ].forEach(function (a) {
            var b = a[0]
            V[b] = new U(b, 1, !1, a[1], null)
          })
          ;['contentEditable', 'draggable', 'spellCheck', 'value'].forEach(
            function (a) {
              V[a] = new U(a, 2, !1, a.toLowerCase(), null)
            }
          )
          ;[
            'autoReverse',
            'externalResourcesRequired',
            'preserveAlpha',
          ].forEach(function (a) {
            V[a] = new U(a, 2, !1, a, null)
          })
          'allowFullScreen async autoFocus autoPlay controls default defer disabled formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope'
            .split(' ')
            .forEach(function (a) {
              V[a] = new U(a, 3, !1, a.toLowerCase(), null)
            })
          ;['checked', 'multiple', 'muted', 'selected'].forEach(function (a) {
            V[a] = new U(a, 3, !0, a.toLowerCase(), null)
          })
          ;['capture', 'download'].forEach(function (a) {
            V[a] = new U(a, 4, !1, a.toLowerCase(), null)
          })
          ;['cols', 'rows', 'size', 'span'].forEach(function (a) {
            V[a] = new U(a, 6, !1, a.toLowerCase(), null)
          })
          ;['rowSpan', 'start'].forEach(function (a) {
            V[a] = new U(a, 5, !1, a.toLowerCase(), null)
          })
          var Sc = /[\-:]([a-z])/g
          function Tc(a) {
            return a[1].toUpperCase()
          }
          'accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height'
            .split(' ')
            .forEach(function (a) {
              var b = a.replace(Sc, Tc)
              V[b] = new U(b, 1, !1, a, null)
            })
          'xlink:actuate xlink:arcrole xlink:href xlink:role xlink:show xlink:title xlink:type'
            .split(' ')
            .forEach(function (a) {
              var b = a.replace(Sc, Tc)
              V[b] = new U(b, 1, !1, a, 'http://www.w3.org/1999/xlink')
            })
          ;['xml:base', 'xml:lang', 'xml:space'].forEach(function (a) {
            var b = a.replace(Sc, Tc)
            V[b] = new U(b, 1, !1, a, 'http://www.w3.org/XML/1998/namespace')
          })
          V.tabIndex = new U('tabIndex', 1, !1, 'tabindex', null)
          function Uc(a, b, c, d) {
            var e = V.hasOwnProperty(b) ? V[b] : null
            var f =
              null !== e
                ? 0 === e.type
                : d
                ? !1
                : !(2 < b.length) ||
                  ('o' !== b[0] && 'O' !== b[0]) ||
                  ('n' !== b[1] && 'N' !== b[1])
                ? !1
                : !0
            f ||
              (Hc(b, c, e, d) && (c = null),
              d || null === e
                ? Fc(b) &&
                  (null === c
                    ? a.removeAttribute(b)
                    : a.setAttribute(b, '' + c))
                : e.mustUseProperty
                ? (a[e.propertyName] =
                    null === c ? (3 === e.type ? !1 : '') : c)
                : ((b = e.attributeName),
                  (d = e.attributeNamespace),
                  null === c
                    ? a.removeAttribute(b)
                    : ((e = e.type),
                      (c = 3 === e || (4 === e && !0 === c) ? '' : '' + c),
                      d ? a.setAttributeNS(d, b, c) : a.setAttribute(b, c))))
          }
          function Vc(a, b) {
            var c = b.checked
            return A({}, b, {
              defaultChecked: void 0,
              defaultValue: void 0,
              value: void 0,
              checked: null != c ? c : a._wrapperState.initialChecked,
            })
          }
          function Wc(a, b) {
            var c = null == b.defaultValue ? '' : b.defaultValue,
              d = null != b.checked ? b.checked : b.defaultChecked
            c = Xc(null != b.value ? b.value : c)
            a._wrapperState = {
              initialChecked: d,
              initialValue: c,
              controlled:
                'checkbox' === b.type || 'radio' === b.type
                  ? null != b.checked
                  : null != b.value,
            }
          }
          function Yc(a, b) {
            b = b.checked
            null != b && Uc(a, 'checked', b, !1)
          }
          function Zc(a, b) {
            Yc(a, b)
            var c = Xc(b.value)
            if (null != c)
              if ('number' === b.type) {
                if ((0 === c && '' === a.value) || a.value != c)
                  a.value = '' + c
              } else a.value !== '' + c && (a.value = '' + c)
            b.hasOwnProperty('value')
              ? $c(a, b.type, c)
              : b.hasOwnProperty('defaultValue') &&
                $c(a, b.type, Xc(b.defaultValue))
            null == b.checked &&
              null != b.defaultChecked &&
              (a.defaultChecked = !!b.defaultChecked)
          }
          function ad(a, b) {
            if (b.hasOwnProperty('value') || b.hasOwnProperty('defaultValue'))
              '' === a.value && (a.value = '' + a._wrapperState.initialValue),
                (a.defaultValue = '' + a._wrapperState.initialValue)
            b = a.name
            '' !== b && (a.name = '')
            a.defaultChecked = !a.defaultChecked
            a.defaultChecked = !a.defaultChecked
            '' !== b && (a.name = b)
          }
          function $c(a, b, c) {
            if ('number' !== b || a.ownerDocument.activeElement !== a)
              null == c
                ? (a.defaultValue = '' + a._wrapperState.initialValue)
                : a.defaultValue !== '' + c && (a.defaultValue = '' + c)
          }
          function Xc(a) {
            switch (typeof a) {
              case 'boolean':
              case 'number':
              case 'object':
              case 'string':
              case 'undefined':
                return a
              default:
                return ''
            }
          }
          var bd = {
            change: {
              phasedRegistrationNames: {
                bubbled: 'onChange',
                captured: 'onChangeCapture',
              },
              dependencies: 'topBlur topChange topClick topFocus topInput topKeyDown topKeyUp topSelectionChange'.split(
                ' '
              ),
            },
          }
          function cd(a, b, c) {
            a = N.getPooled(bd.change, a, b, c)
            a.type = 'change'
            Xb(c)
            ib(a)
            return a
          }
          var dd = null,
            ed = null
          function fd(a) {
            Pa(a, !1)
          }
          function gd(a) {
            var b = Va(a)
            if (mc(b)) return a
          }
          function hd(a, b) {
            if ('topChange' === a) return b
          }
          var id = !1
          m.canUseDOM &&
            (id =
              ic('input') &&
              (!document.documentMode || 9 < document.documentMode))
          function jd() {
            dd && (dd.detachEvent('onpropertychange', kd), (ed = dd = null))
          }
          function kd(a) {
            'value' === a.propertyName &&
              gd(ed) &&
              ((a = cd(ed, a, hc(a))), ec(fd, a))
          }
          function ld(a, b, c) {
            'topFocus' === a
              ? (jd(),
                (dd = b),
                (ed = c),
                dd.attachEvent('onpropertychange', kd))
              : 'topBlur' === a && jd()
          }
          function md(a) {
            if (
              'topSelectionChange' === a ||
              'topKeyUp' === a ||
              'topKeyDown' === a
            )
              return gd(ed)
          }
          function nd(a, b) {
            if ('topClick' === a) return gd(b)
          }
          function od(a, b) {
            if ('topInput' === a || 'topChange' === a) return gd(b)
          }
          var pd = {
              eventTypes: bd,
              _isInputEventSupported: id,
              extractEvents: function (a, b, c, d) {
                var e = b ? Va(b) : window,
                  f = void 0,
                  h = void 0,
                  g = e.nodeName && e.nodeName.toLowerCase()
                'select' === g || ('input' === g && 'file' === e.type)
                  ? (f = hd)
                  : gc(e)
                  ? id
                    ? (f = od)
                    : ((f = md), (h = ld))
                  : (g = e.nodeName) &&
                    'input' === g.toLowerCase() &&
                    ('checkbox' === e.type || 'radio' === e.type) &&
                    (f = nd)
                if (f && (f = f(a, b))) return cd(f, c, d)
                h && h(a, e, b)
                'topBlur' === a &&
                  null != b &&
                  (a = b._wrapperState || e._wrapperState) &&
                  a.controlled &&
                  'number' === e.type &&
                  $c(e, 'number', e.value)
              },
            },
            qd = N.extend({ view: null, detail: null }),
            rd = {
              Alt: 'altKey',
              Control: 'ctrlKey',
              Meta: 'metaKey',
              Shift: 'shiftKey',
            }
          function sd(a) {
            var b = this.nativeEvent
            return b.getModifierState
              ? b.getModifierState(a)
              : (a = rd[a])
              ? !!b[a]
              : !1
          }
          function td() {
            return sd
          }
          var ud = qd.extend({
              screenX: null,
              screenY: null,
              clientX: null,
              clientY: null,
              pageX: null,
              pageY: null,
              ctrlKey: null,
              shiftKey: null,
              altKey: null,
              metaKey: null,
              getModifierState: td,
              button: null,
              buttons: null,
              relatedTarget: function (a) {
                return (
                  a.relatedTarget ||
                  (a.fromElement === a.srcElement ? a.toElement : a.fromElement)
                )
              },
            }),
            vd = {
              mouseEnter: {
                registrationName: 'onMouseEnter',
                dependencies: ['topMouseOut', 'topMouseOver'],
              },
              mouseLeave: {
                registrationName: 'onMouseLeave',
                dependencies: ['topMouseOut', 'topMouseOver'],
              },
            },
            wd = {
              eventTypes: vd,
              extractEvents: function (a, b, c, d) {
                if (
                  ('topMouseOver' === a &&
                    (c.relatedTarget || c.fromElement)) ||
                  ('topMouseOut' !== a && 'topMouseOver' !== a)
                )
                  return null
                var e =
                  d.window === d
                    ? d
                    : (e = d.ownerDocument)
                    ? e.defaultView || e.parentWindow
                    : window
                'topMouseOut' === a
                  ? ((a = b),
                    (b = (b = c.relatedTarget || c.toElement) ? Ua(b) : null))
                  : (a = null)
                if (a === b) return null
                var f = null == a ? e : Va(a)
                e = null == b ? e : Va(b)
                var h = ud.getPooled(vd.mouseLeave, a, c, d)
                h.type = 'mouseleave'
                h.target = f
                h.relatedTarget = e
                c = ud.getPooled(vd.mouseEnter, b, c, d)
                c.type = 'mouseenter'
                c.target = e
                c.relatedTarget = f
                jb(h, c, a, b)
                return [h, c]
              },
            }
          function xd(a) {
            var b = a
            if (a.alternate) for (; b['return']; ) b = b['return']
            else {
              if (0 !== (b.effectTag & 2)) return 1
              for (; b['return']; )
                if (((b = b['return']), 0 !== (b.effectTag & 2))) return 1
            }
            return 3 === b.tag ? 2 : 3
          }
          function yd(a) {
            return (a = a._reactInternalFiber) ? 2 === xd(a) : !1
          }
          function zd(a) {
            2 !== xd(a) ? D('188') : void 0
          }
          function Ad(a) {
            var b = a.alternate
            if (!b)
              return (
                (b = xd(a)), 3 === b ? D('188') : void 0, 1 === b ? null : a
              )
            for (var c = a, d = b; ; ) {
              var e = c['return'],
                f = e ? e.alternate : null
              if (!e || !f) break
              if (e.child === f.child) {
                for (var h = e.child; h; ) {
                  if (h === c) return zd(e), a
                  if (h === d) return zd(e), b
                  h = h.sibling
                }
                D('188')
              }
              if (c['return'] !== d['return']) (c = e), (d = f)
              else {
                h = !1
                for (var g = e.child; g; ) {
                  if (g === c) {
                    h = !0
                    c = e
                    d = f
                    break
                  }
                  if (g === d) {
                    h = !0
                    d = e
                    c = f
                    break
                  }
                  g = g.sibling
                }
                if (!h) {
                  for (g = f.child; g; ) {
                    if (g === c) {
                      h = !0
                      c = f
                      d = e
                      break
                    }
                    if (g === d) {
                      h = !0
                      d = f
                      c = e
                      break
                    }
                    g = g.sibling
                  }
                  h ? void 0 : D('189')
                }
              }
              c.alternate !== d ? D('190') : void 0
            }
            3 !== c.tag ? D('188') : void 0
            return c.stateNode.current === c ? a : b
          }
          function Bd(a) {
            a = Ad(a)
            if (!a) return null
            for (var b = a; ; ) {
              if (5 === b.tag || 6 === b.tag) return b
              if (b.child) (b.child['return'] = b), (b = b.child)
              else {
                if (b === a) break
                for (; !b.sibling; ) {
                  if (!b['return'] || b['return'] === a) return null
                  b = b['return']
                }
                b.sibling['return'] = b['return']
                b = b.sibling
              }
            }
            return null
          }
          function Cd(a) {
            a = Ad(a)
            if (!a) return null
            for (var b = a; ; ) {
              if (5 === b.tag || 6 === b.tag) return b
              if (b.child && 4 !== b.tag) (b.child['return'] = b), (b = b.child)
              else {
                if (b === a) break
                for (; !b.sibling; ) {
                  if (!b['return'] || b['return'] === a) return null
                  b = b['return']
                }
                b.sibling['return'] = b['return']
                b = b.sibling
              }
            }
            return null
          }
          var Dd = N.extend({
              animationName: null,
              elapsedTime: null,
              pseudoElement: null,
            }),
            Ed = N.extend({
              clipboardData: function (a) {
                return 'clipboardData' in a
                  ? a.clipboardData
                  : window.clipboardData
              },
            }),
            Fd = qd.extend({ relatedTarget: null })
          function Gd(a) {
            var b = a.keyCode
            'charCode' in a
              ? ((a = a.charCode), 0 === a && 13 === b && (a = 13))
              : (a = b)
            10 === a && (a = 13)
            return 32 <= a || 13 === a ? a : 0
          }
          var Hd = {
              Esc: 'Escape',
              Spacebar: ' ',
              Left: 'ArrowLeft',
              Up: 'ArrowUp',
              Right: 'ArrowRight',
              Down: 'ArrowDown',
              Del: 'Delete',
              Win: 'OS',
              Menu: 'ContextMenu',
              Apps: 'ContextMenu',
              Scroll: 'ScrollLock',
              MozPrintableKey: 'Unidentified',
            },
            Id = {
              8: 'Backspace',
              9: 'Tab',
              12: 'Clear',
              13: 'Enter',
              16: 'Shift',
              17: 'Control',
              18: 'Alt',
              19: 'Pause',
              20: 'CapsLock',
              27: 'Escape',
              32: ' ',
              33: 'PageUp',
              34: 'PageDown',
              35: 'End',
              36: 'Home',
              37: 'ArrowLeft',
              38: 'ArrowUp',
              39: 'ArrowRight',
              40: 'ArrowDown',
              45: 'Insert',
              46: 'Delete',
              112: 'F1',
              113: 'F2',
              114: 'F3',
              115: 'F4',
              116: 'F5',
              117: 'F6',
              118: 'F7',
              119: 'F8',
              120: 'F9',
              121: 'F10',
              122: 'F11',
              123: 'F12',
              144: 'NumLock',
              145: 'ScrollLock',
              224: 'Meta',
            },
            Jd = qd.extend({
              key: function (a) {
                if (a.key) {
                  var b = Hd[a.key] || a.key
                  if ('Unidentified' !== b) return b
                }
                return 'keypress' === a.type
                  ? ((a = Gd(a)), 13 === a ? 'Enter' : String.fromCharCode(a))
                  : 'keydown' === a.type || 'keyup' === a.type
                  ? Id[a.keyCode] || 'Unidentified'
                  : ''
              },
              location: null,
              ctrlKey: null,
              shiftKey: null,
              altKey: null,
              metaKey: null,
              repeat: null,
              locale: null,
              getModifierState: td,
              charCode: function (a) {
                return 'keypress' === a.type ? Gd(a) : 0
              },
              keyCode: function (a) {
                return 'keydown' === a.type || 'keyup' === a.type
                  ? a.keyCode
                  : 0
              },
              which: function (a) {
                return 'keypress' === a.type
                  ? Gd(a)
                  : 'keydown' === a.type || 'keyup' === a.type
                  ? a.keyCode
                  : 0
              },
            }),
            Kd = ud.extend({ dataTransfer: null }),
            Ld = qd.extend({
              touches: null,
              targetTouches: null,
              changedTouches: null,
              altKey: null,
              metaKey: null,
              ctrlKey: null,
              shiftKey: null,
              getModifierState: td,
            }),
            Md = N.extend({
              propertyName: null,
              elapsedTime: null,
              pseudoElement: null,
            }),
            Nd = ud.extend({
              deltaX: function (a) {
                return 'deltaX' in a
                  ? a.deltaX
                  : 'wheelDeltaX' in a
                  ? -a.wheelDeltaX
                  : 0
              },
              deltaY: function (a) {
                return 'deltaY' in a
                  ? a.deltaY
                  : 'wheelDeltaY' in a
                  ? -a.wheelDeltaY
                  : 'wheelDelta' in a
                  ? -a.wheelDelta
                  : 0
              },
              deltaZ: null,
              deltaMode: null,
            }),
            Od = {},
            Pd = {}
          function Qd(a, b) {
            var c = a[0].toUpperCase() + a.slice(1),
              d = 'on' + c
            c = 'top' + c
            b = {
              phasedRegistrationNames: { bubbled: d, captured: d + 'Capture' },
              dependencies: [c],
              isInteractive: b,
            }
            Od[a] = b
            Pd[c] = b
          }
          'blur cancel click close contextMenu copy cut doubleClick dragEnd dragStart drop focus input invalid keyDown keyPress keyUp mouseDown mouseUp paste pause play rateChange reset seeked submit touchCancel touchEnd touchStart volumeChange'
            .split(' ')
            .forEach(function (a) {
              Qd(a, !0)
            })
          'abort animationEnd animationIteration animationStart canPlay canPlayThrough drag dragEnter dragExit dragLeave dragOver durationChange emptied encrypted ended error load loadedData loadedMetadata loadStart mouseMove mouseOut mouseOver playing progress scroll seeking stalled suspend timeUpdate toggle touchMove transitionEnd waiting wheel'
            .split(' ')
            .forEach(function (a) {
              Qd(a, !1)
            })
          var Rd = {
              eventTypes: Od,
              isInteractiveTopLevelEventType: function (a) {
                a = Pd[a]
                return void 0 !== a && !0 === a.isInteractive
              },
              extractEvents: function (a, b, c, d) {
                var e = Pd[a]
                if (!e) return null
                switch (a) {
                  case 'topKeyPress':
                    if (0 === Gd(c)) return null
                  case 'topKeyDown':
                  case 'topKeyUp':
                    a = Jd
                    break
                  case 'topBlur':
                  case 'topFocus':
                    a = Fd
                    break
                  case 'topClick':
                    if (2 === c.button) return null
                  case 'topDoubleClick':
                  case 'topMouseDown':
                  case 'topMouseMove':
                  case 'topMouseUp':
                  case 'topMouseOut':
                  case 'topMouseOver':
                  case 'topContextMenu':
                    a = ud
                    break
                  case 'topDrag':
                  case 'topDragEnd':
                  case 'topDragEnter':
                  case 'topDragExit':
                  case 'topDragLeave':
                  case 'topDragOver':
                  case 'topDragStart':
                  case 'topDrop':
                    a = Kd
                    break
                  case 'topTouchCancel':
                  case 'topTouchEnd':
                  case 'topTouchMove':
                  case 'topTouchStart':
                    a = Ld
                    break
                  case 'topAnimationEnd':
                  case 'topAnimationIteration':
                  case 'topAnimationStart':
                    a = Dd
                    break
                  case 'topTransitionEnd':
                    a = Md
                    break
                  case 'topScroll':
                    a = qd
                    break
                  case 'topWheel':
                    a = Nd
                    break
                  case 'topCopy':
                  case 'topCut':
                  case 'topPaste':
                    a = Ed
                    break
                  default:
                    a = N
                }
                b = a.getPooled(e, b, c, d)
                ib(b)
                return b
              },
            },
            Sd = Rd.isInteractiveTopLevelEventType,
            Td = []
          function Ud(a) {
            var b = a.targetInst
            do {
              if (!b) {
                a.ancestors.push(b)
                break
              }
              var c
              for (c = b; c['return']; ) c = c['return']
              c = 3 !== c.tag ? null : c.stateNode.containerInfo
              if (!c) break
              a.ancestors.push(b)
              b = Ua(c)
            } while (b)
            for (c = 0; c < a.ancestors.length; c++)
              (b = a.ancestors[c]),
                Qa(a.topLevelType, b, a.nativeEvent, hc(a.nativeEvent))
          }
          var Vd = !0
          function Wd(a) {
            Vd = !!a
          }
          function W(a, b, c) {
            if (!c) return null
            a = (Sd(a) ? Xd : Yd).bind(null, a)
            c.addEventListener(b, a, !1)
          }
          function Zd(a, b, c) {
            if (!c) return null
            a = (Sd(a) ? Xd : Yd).bind(null, a)
            c.addEventListener(b, a, !0)
          }
          function Xd(a, b) {
            bc(Yd, a, b)
          }
          function Yd(a, b) {
            if (Vd) {
              var c = hc(b)
              c = Ua(c)
              null !== c &&
                'number' === typeof c.tag &&
                2 !== xd(c) &&
                (c = null)
              if (Td.length) {
                var d = Td.pop()
                d.topLevelType = a
                d.nativeEvent = b
                d.targetInst = c
                a = d
              } else
                a = {
                  topLevelType: a,
                  nativeEvent: b,
                  targetInst: c,
                  ancestors: [],
                }
              try {
                ec(Ud, a)
              } finally {
                ;(a.topLevelType = null),
                  (a.nativeEvent = null),
                  (a.targetInst = null),
                  (a.ancestors.length = 0),
                  10 > Td.length && Td.push(a)
              }
            }
          }
          var $d = Object.freeze({
            get _enabled() {
              return Vd
            },
            setEnabled: Wd,
            isEnabled: function () {
              return Vd
            },
            trapBubbledEvent: W,
            trapCapturedEvent: Zd,
            dispatchEvent: Yd,
          })
          function ae(a, b) {
            var c = {}
            c[a.toLowerCase()] = b.toLowerCase()
            c['Webkit' + a] = 'webkit' + b
            c['Moz' + a] = 'moz' + b
            c['ms' + a] = 'MS' + b
            c['O' + a] = 'o' + b.toLowerCase()
            return c
          }
          var be = {
              animationend: ae('Animation', 'AnimationEnd'),
              animationiteration: ae('Animation', 'AnimationIteration'),
              animationstart: ae('Animation', 'AnimationStart'),
              transitionend: ae('Transition', 'TransitionEnd'),
            },
            ce = {},
            de = {}
          m.canUseDOM &&
            ((de = document.createElement('div').style),
            'AnimationEvent' in window ||
              (delete be.animationend.animation,
              delete be.animationiteration.animation,
              delete be.animationstart.animation),
            'TransitionEvent' in window || delete be.transitionend.transition)
          function ee(a) {
            if (ce[a]) return ce[a]
            if (!be[a]) return a
            var b = be[a],
              c
            for (c in b)
              if (b.hasOwnProperty(c) && c in de) return (ce[a] = b[c])
            return a
          }
          var fe = {
              topAnimationEnd: ee('animationend'),
              topAnimationIteration: ee('animationiteration'),
              topAnimationStart: ee('animationstart'),
              topBlur: 'blur',
              topCancel: 'cancel',
              topChange: 'change',
              topClick: 'click',
              topClose: 'close',
              topCompositionEnd: 'compositionend',
              topCompositionStart: 'compositionstart',
              topCompositionUpdate: 'compositionupdate',
              topContextMenu: 'contextmenu',
              topCopy: 'copy',
              topCut: 'cut',
              topDoubleClick: 'dblclick',
              topDrag: 'drag',
              topDragEnd: 'dragend',
              topDragEnter: 'dragenter',
              topDragExit: 'dragexit',
              topDragLeave: 'dragleave',
              topDragOver: 'dragover',
              topDragStart: 'dragstart',
              topDrop: 'drop',
              topFocus: 'focus',
              topInput: 'input',
              topKeyDown: 'keydown',
              topKeyPress: 'keypress',
              topKeyUp: 'keyup',
              topLoad: 'load',
              topLoadStart: 'loadstart',
              topMouseDown: 'mousedown',
              topMouseMove: 'mousemove',
              topMouseOut: 'mouseout',
              topMouseOver: 'mouseover',
              topMouseUp: 'mouseup',
              topPaste: 'paste',
              topScroll: 'scroll',
              topSelectionChange: 'selectionchange',
              topTextInput: 'textInput',
              topToggle: 'toggle',
              topTouchCancel: 'touchcancel',
              topTouchEnd: 'touchend',
              topTouchMove: 'touchmove',
              topTouchStart: 'touchstart',
              topTransitionEnd: ee('transitionend'),
              topWheel: 'wheel',
            },
            ge = {
              topAbort: 'abort',
              topCanPlay: 'canplay',
              topCanPlayThrough: 'canplaythrough',
              topDurationChange: 'durationchange',
              topEmptied: 'emptied',
              topEncrypted: 'encrypted',
              topEnded: 'ended',
              topError: 'error',
              topLoadedData: 'loadeddata',
              topLoadedMetadata: 'loadedmetadata',
              topLoadStart: 'loadstart',
              topPause: 'pause',
              topPlay: 'play',
              topPlaying: 'playing',
              topProgress: 'progress',
              topRateChange: 'ratechange',
              topSeeked: 'seeked',
              topSeeking: 'seeking',
              topStalled: 'stalled',
              topSuspend: 'suspend',
              topTimeUpdate: 'timeupdate',
              topVolumeChange: 'volumechange',
              topWaiting: 'waiting',
            },
            he = {},
            ie = 0,
            je = '_reactListenersID' + ('' + Math.random()).slice(2)
          function ke(a) {
            Object.prototype.hasOwnProperty.call(a, je) ||
              ((a[je] = ie++), (he[a[je]] = {}))
            return he[a[je]]
          }
          function le(a) {
            for (; a && a.firstChild; ) a = a.firstChild
            return a
          }
          function me(a, b) {
            var c = le(a)
            a = 0
            for (var d; c; ) {
              if (3 === c.nodeType) {
                d = a + c.textContent.length
                if (a <= b && d >= b) return { node: c, offset: b - a }
                a = d
              }
              a: {
                for (; c; ) {
                  if (c.nextSibling) {
                    c = c.nextSibling
                    break a
                  }
                  c = c.parentNode
                }
                c = void 0
              }
              c = le(c)
            }
          }
          function ne(a) {
            var b = a && a.nodeName && a.nodeName.toLowerCase()
            return (
              b &&
              (('input' === b && 'text' === a.type) ||
                'textarea' === b ||
                'true' === a.contentEditable)
            )
          }
          var oe =
              m.canUseDOM &&
              'documentMode' in document &&
              11 >= document.documentMode,
            pe = {
              select: {
                phasedRegistrationNames: {
                  bubbled: 'onSelect',
                  captured: 'onSelectCapture',
                },
                dependencies: 'topBlur topContextMenu topFocus topKeyDown topKeyUp topMouseDown topMouseUp topSelectionChange'.split(
                  ' '
                ),
              },
            },
            qe = null,
            re = null,
            se = null,
            te = !1
          function ue(a, b) {
            if (te || null == qe || qe !== fa()) return null
            var c = qe
            'selectionStart' in c && ne(c)
              ? (c = { start: c.selectionStart, end: c.selectionEnd })
              : window.getSelection
              ? ((c = window.getSelection()),
                (c = {
                  anchorNode: c.anchorNode,
                  anchorOffset: c.anchorOffset,
                  focusNode: c.focusNode,
                  focusOffset: c.focusOffset,
                }))
              : (c = void 0)
            return se && ha(se, c)
              ? null
              : ((se = c),
                (a = N.getPooled(pe.select, re, a, b)),
                (a.type = 'select'),
                (a.target = qe),
                ib(a),
                a)
          }
          var ve = {
            eventTypes: pe,
            extractEvents: function (a, b, c, d) {
              var e =
                  d.window === d
                    ? d.document
                    : 9 === d.nodeType
                    ? d
                    : d.ownerDocument,
                f
              if (!(f = !e)) {
                a: {
                  e = ke(e)
                  f = va.onSelect
                  for (var h = 0; h < f.length; h++) {
                    var g = f[h]
                    if (!e.hasOwnProperty(g) || !e[g]) {
                      e = !1
                      break a
                    }
                  }
                  e = !0
                }
                f = !e
              }
              if (f) return null
              e = b ? Va(b) : window
              switch (a) {
                case 'topFocus':
                  if (gc(e) || 'true' === e.contentEditable)
                    (qe = e), (re = b), (se = null)
                  break
                case 'topBlur':
                  se = re = qe = null
                  break
                case 'topMouseDown':
                  te = !0
                  break
                case 'topContextMenu':
                case 'topMouseUp':
                  return (te = !1), ue(c, d)
                case 'topSelectionChange':
                  if (oe) break
                case 'topKeyDown':
                case 'topKeyUp':
                  return ue(c, d)
              }
              return null
            },
          }
          Na.injectEventPluginOrder(
            'ResponderEventPlugin SimpleEventPlugin TapEventPlugin EnterLeaveEventPlugin ChangeEventPlugin SelectEventPlugin BeforeInputEventPlugin'.split(
              ' '
            )
          )
          Da = bb.getFiberCurrentPropsFromNode
          Ea = bb.getInstanceFromNode
          Fa = bb.getNodeFromInstance
          Na.injectEventPluginsByName({
            SimpleEventPlugin: Rd,
            EnterLeaveEventPlugin: wd,
            ChangeEventPlugin: pd,
            SelectEventPlugin: ve,
            BeforeInputEventPlugin: Rb,
          })
          function xe(a, b, c, d) {
            this.tag = a
            this.key = c
            this.stateNode = this.type = null
            this.sibling = this.child = this['return'] = null
            this.index = 0
            this.ref = null
            this.pendingProps = b
            this.memoizedState = this.updateQueue = this.memoizedProps = null
            this.mode = d
            this.effectTag = 0
            this.lastEffect = this.firstEffect = this.nextEffect = null
            this.expirationTime = 0
            this.alternate = null
          }
          function ze(a, b, c) {
            var d = a.alternate
            null === d
              ? ((d = new xe(a.tag, b, a.key, a.mode)),
                (d.type = a.type),
                (d.stateNode = a.stateNode),
                (d.alternate = a),
                (a.alternate = d))
              : ((d.pendingProps = b),
                (d.effectTag = 0),
                (d.nextEffect = null),
                (d.firstEffect = null),
                (d.lastEffect = null))
            d.expirationTime = c
            d.child = a.child
            d.memoizedProps = a.memoizedProps
            d.memoizedState = a.memoizedState
            d.updateQueue = a.updateQueue
            d.sibling = a.sibling
            d.index = a.index
            d.ref = a.ref
            return d
          }
          function Ae(a, b, c) {
            var d = a.type,
              e = a.key
            a = a.props
            var f = void 0
            if ('function' === typeof d)
              f = d.prototype && d.prototype.isReactComponent ? 2 : 0
            else if ('string' === typeof d) f = 5
            else
              switch (d) {
                case sc:
                  return Be(a.children, b, c, e)
                case wc:
                  f = 11
                  b |= 3
                  break
                case tc:
                  f = 11
                  b |= 2
                  break
                case pc:
                  f = 7
                  break
                case qc:
                  f = 9
                  break
                default:
                  if ('object' === typeof d && null !== d)
                    switch (d.$$typeof) {
                      case uc:
                        f = 13
                        break
                      case vc:
                        f = 12
                        break
                      case xc:
                        f = 14
                        break
                      default:
                        if ('number' === typeof d.tag)
                          return (
                            (b = d),
                            (b.pendingProps = a),
                            (b.expirationTime = c),
                            b
                          )
                        D('130', null == d ? d : typeof d, '')
                    }
                  else D('130', null == d ? d : typeof d, '')
              }
            b = new xe(f, a, e, b)
            b.type = d
            b.expirationTime = c
            return b
          }
          function Be(a, b, c, d) {
            a = new xe(10, a, d, b)
            a.expirationTime = c
            return a
          }
          function Ce(a, b, c) {
            a = new xe(6, a, null, b)
            a.expirationTime = c
            return a
          }
          function De(a, b, c) {
            b = new xe(4, null !== a.children ? a.children : [], a.key, b)
            b.expirationTime = c
            b.stateNode = {
              containerInfo: a.containerInfo,
              pendingChildren: null,
              implementation: a.implementation,
            }
            return b
          }
          var Ee = null,
            Fe = null
          function Ge(a) {
            return function (b) {
              try {
                return a(b)
              } catch (c) {}
            }
          }
          function He(a) {
            if ('undefined' === typeof __REACT_DEVTOOLS_GLOBAL_HOOK__) return !1
            var b = __REACT_DEVTOOLS_GLOBAL_HOOK__
            if (b.isDisabled || !b.supportsFiber) return !0
            try {
              var c = b.inject(a)
              Ee = Ge(function (a) {
                return b.onCommitFiberRoot(c, a)
              })
              Fe = Ge(function (a) {
                return b.onCommitFiberUnmount(c, a)
              })
            } catch (d) {}
            return !0
          }
          function Ie(a) {
            'function' === typeof Ee && Ee(a)
          }
          function Je(a) {
            'function' === typeof Fe && Fe(a)
          }
          new Set()
          function Ke(a) {
            return {
              baseState: a,
              expirationTime: 0,
              first: null,
              last: null,
              callbackList: null,
              hasForceUpdate: !1,
              isInitialized: !1,
              capturedValues: null,
            }
          }
          function Le(a, b) {
            null === a.last
              ? (a.first = a.last = b)
              : ((a.last.next = b), (a.last = b))
            if (0 === a.expirationTime || a.expirationTime > b.expirationTime)
              a.expirationTime = b.expirationTime
          }
          var Me = void 0,
            Ne = void 0
          function Oe(a) {
            Me = Ne = null
            var b = a.alternate,
              c = a.updateQueue
            null === c && (c = a.updateQueue = Ke(null))
            null !== b
              ? ((a = b.updateQueue),
                null === a && (a = b.updateQueue = Ke(null)))
              : (a = null)
            Me = c
            Ne = a !== c ? a : null
          }
          function Pe(a, b) {
            Oe(a)
            a = Me
            var c = Ne
            null === c
              ? Le(a, b)
              : null === a.last || null === c.last
              ? (Le(a, b), Le(c, b))
              : (Le(a, b), (c.last = b))
          }
          function Qe(a, b, c, d) {
            a = a.partialState
            return 'function' === typeof a ? a.call(b, c, d) : a
          }
          function Re(a, b, c, d, e, f) {
            null !== a &&
              a.updateQueue === c &&
              (c = b.updateQueue = {
                baseState: c.baseState,
                expirationTime: c.expirationTime,
                first: c.first,
                last: c.last,
                isInitialized: c.isInitialized,
                capturedValues: c.capturedValues,
                callbackList: null,
                hasForceUpdate: !1,
              })
            c.expirationTime = 0
            c.isInitialized
              ? (a = c.baseState)
              : ((a = c.baseState = b.memoizedState), (c.isInitialized = !0))
            for (var h = !0, g = c.first, k = !1; null !== g; ) {
              var v = g.expirationTime
              if (v > f) {
                var l = c.expirationTime
                if (0 === l || l > v) c.expirationTime = v
                k || ((k = !0), (c.baseState = a))
              } else {
                k || ((c.first = g.next), null === c.first && (c.last = null))
                if (g.isReplace) (a = Qe(g, d, a, e)), (h = !0)
                else if ((v = Qe(g, d, a, e)))
                  (a = h ? A({}, a, v) : A(a, v)), (h = !1)
                g.isForced && (c.hasForceUpdate = !0)
                null !== g.callback &&
                  ((v = c.callbackList),
                  null === v && (v = c.callbackList = []),
                  v.push(g))
                null !== g.capturedValue &&
                  ((v = c.capturedValues),
                  null === v
                    ? (c.capturedValues = [g.capturedValue])
                    : v.push(g.capturedValue))
              }
              g = g.next
            }
            null !== c.callbackList
              ? (b.effectTag |= 32)
              : null !== c.first ||
                c.hasForceUpdate ||
                null !== c.capturedValues ||
                (b.updateQueue = null)
            k || (c.baseState = a)
            return a
          }
          function Se(a, b) {
            var c = a.callbackList
            if (null !== c)
              for (a.callbackList = null, a = 0; a < c.length; a++) {
                var d = c[a],
                  e = d.callback
                d.callback = null
                'function' !== typeof e ? D('191', e) : void 0
                e.call(b)
              }
          }
          function Te(a, b, c, d, e) {
            function f(a, b, c, d, e, f) {
              if (
                null === b ||
                (null !== a.updateQueue && a.updateQueue.hasForceUpdate)
              )
                return !0
              var n = a.stateNode
              a = a.type
              return 'function' === typeof n.shouldComponentUpdate
                ? n.shouldComponentUpdate(c, e, f)
                : a.prototype && a.prototype.isPureReactComponent
                ? !ha(b, c) || !ha(d, e)
                : !0
            }
            function h(a, b) {
              b.updater = r
              a.stateNode = b
              b._reactInternalFiber = a
            }
            function g(a, b, c, d) {
              a = b.state
              'function' === typeof b.componentWillReceiveProps &&
                b.componentWillReceiveProps(c, d)
              'function' === typeof b.UNSAFE_componentWillReceiveProps &&
                b.UNSAFE_componentWillReceiveProps(c, d)
              b.state !== a && r.enqueueReplaceState(b, b.state, null)
            }
            function k(a, b, c, d) {
              a = a.type
              if ('function' === typeof a.getDerivedStateFromProps)
                return a.getDerivedStateFromProps.call(null, c, d)
            }
            var v = a.cacheContext,
              l = a.getMaskedContext,
              p = a.getUnmaskedContext,
              z = a.isContextConsumer,
              B = a.hasContextChanged,
              r = {
                isMounted: yd,
                enqueueSetState: function (a, d, e) {
                  a = a._reactInternalFiber
                  e = void 0 === e ? null : e
                  var f = c(a)
                  Pe(a, {
                    expirationTime: f,
                    partialState: d,
                    callback: e,
                    isReplace: !1,
                    isForced: !1,
                    capturedValue: null,
                    next: null,
                  })
                  b(a, f)
                },
                enqueueReplaceState: function (a, d, e) {
                  a = a._reactInternalFiber
                  e = void 0 === e ? null : e
                  var f = c(a)
                  Pe(a, {
                    expirationTime: f,
                    partialState: d,
                    callback: e,
                    isReplace: !0,
                    isForced: !1,
                    capturedValue: null,
                    next: null,
                  })
                  b(a, f)
                },
                enqueueForceUpdate: function (a, d) {
                  a = a._reactInternalFiber
                  d = void 0 === d ? null : d
                  var e = c(a)
                  Pe(a, {
                    expirationTime: e,
                    partialState: null,
                    callback: d,
                    isReplace: !1,
                    isForced: !0,
                    capturedValue: null,
                    next: null,
                  })
                  b(a, e)
                },
              }
            return {
              adoptClassInstance: h,
              callGetDerivedStateFromProps: k,
              constructClassInstance: function (a, b) {
                var c = a.type,
                  d = p(a),
                  e = z(a),
                  f = e ? l(a, d) : ka
                c = new c(b, f)
                var n = null !== c.state && void 0 !== c.state ? c.state : null
                h(a, c)
                a.memoizedState = n
                b = k(a, c, b, n)
                null !== b &&
                  void 0 !== b &&
                  (a.memoizedState = A({}, a.memoizedState, b))
                e && v(a, d, f)
                return c
              },
              mountClassInstance: function (a, b) {
                var c = a.type,
                  d = a.alternate,
                  e = a.stateNode,
                  f = a.pendingProps,
                  n = p(a)
                e.props = f
                e.state = a.memoizedState
                e.refs = ka
                e.context = l(a, n)
                'function' === typeof c.getDerivedStateFromProps ||
                  'function' === typeof e.getSnapshotBeforeUpdate ||
                  ('function' !== typeof e.UNSAFE_componentWillMount &&
                    'function' !== typeof e.componentWillMount) ||
                  ((c = e.state),
                  'function' === typeof e.componentWillMount &&
                    e.componentWillMount(),
                  'function' === typeof e.UNSAFE_componentWillMount &&
                    e.UNSAFE_componentWillMount(),
                  c !== e.state && r.enqueueReplaceState(e, e.state, null),
                  (c = a.updateQueue),
                  null !== c && (e.state = Re(d, a, c, e, f, b)))
                'function' === typeof e.componentDidMount && (a.effectTag |= 4)
              },
              resumeMountClassInstance: function (a, b) {
                var c = a.type,
                  n = a.stateNode
                n.props = a.memoizedProps
                n.state = a.memoizedState
                var h = a.memoizedProps,
                  r = a.pendingProps,
                  z = n.context,
                  q = p(a)
                q = l(a, q)
                ;(c =
                  'function' === typeof c.getDerivedStateFromProps ||
                  'function' === typeof n.getSnapshotBeforeUpdate) ||
                  ('function' !== typeof n.UNSAFE_componentWillReceiveProps &&
                    'function' !== typeof n.componentWillReceiveProps) ||
                  ((h !== r || z !== q) && g(a, n, r, q))
                z = a.memoizedState
                b =
                  null !== a.updateQueue
                    ? Re(null, a, a.updateQueue, n, r, b)
                    : z
                var u = void 0
                h !== r && (u = k(a, n, r, b))
                if (null !== u && void 0 !== u) {
                  b = null === b || void 0 === b ? u : A({}, b, u)
                  var t = a.updateQueue
                  null !== t && (t.baseState = A({}, t.baseState, u))
                }
                if (
                  !(
                    h !== r ||
                    z !== b ||
                    B() ||
                    (null !== a.updateQueue && a.updateQueue.hasForceUpdate)
                  )
                )
                  return (
                    'function' === typeof n.componentDidMount &&
                      (a.effectTag |= 4),
                    !1
                  )
                ;(h = f(a, h, r, z, b, q))
                  ? (c ||
                      ('function' !== typeof n.UNSAFE_componentWillMount &&
                        'function' !== typeof n.componentWillMount) ||
                      ('function' === typeof n.componentWillMount &&
                        n.componentWillMount(),
                      'function' === typeof n.UNSAFE_componentWillMount &&
                        n.UNSAFE_componentWillMount()),
                    'function' === typeof n.componentDidMount &&
                      (a.effectTag |= 4))
                  : ('function' === typeof n.componentDidMount &&
                      (a.effectTag |= 4),
                    d(a, r),
                    e(a, b))
                n.props = r
                n.state = b
                n.context = q
                return h
              },
              updateClassInstance: function (a, b, c) {
                var n = b.type,
                  x = b.stateNode
                x.props = b.memoizedProps
                x.state = b.memoizedState
                var h = b.memoizedProps,
                  r = b.pendingProps,
                  q = x.context,
                  u = p(b)
                u = l(b, u)
                ;(n =
                  'function' === typeof n.getDerivedStateFromProps ||
                  'function' === typeof x.getSnapshotBeforeUpdate) ||
                  ('function' !== typeof x.UNSAFE_componentWillReceiveProps &&
                    'function' !== typeof x.componentWillReceiveProps) ||
                  ((h !== r || q !== u) && g(b, x, r, u))
                q = b.memoizedState
                c =
                  null !== b.updateQueue ? Re(a, b, b.updateQueue, x, r, c) : q
                var t = void 0
                h !== r && (t = k(b, x, r, c))
                if (null !== t && void 0 !== t) {
                  c = null === c || void 0 === c ? t : A({}, c, t)
                  var y = b.updateQueue
                  null !== y && (y.baseState = A({}, y.baseState, t))
                }
                if (
                  !(
                    h !== r ||
                    q !== c ||
                    B() ||
                    (null !== b.updateQueue && b.updateQueue.hasForceUpdate)
                  )
                )
                  return (
                    'function' !== typeof x.componentDidUpdate ||
                      (h === a.memoizedProps && q === a.memoizedState) ||
                      (b.effectTag |= 4),
                    'function' !== typeof x.getSnapshotBeforeUpdate ||
                      (h === a.memoizedProps && q === a.memoizedState) ||
                      (b.effectTag |= 2048),
                    !1
                  )
                ;(t = f(b, h, r, q, c, u))
                  ? (n ||
                      ('function' !== typeof x.UNSAFE_componentWillUpdate &&
                        'function' !== typeof x.componentWillUpdate) ||
                      ('function' === typeof x.componentWillUpdate &&
                        x.componentWillUpdate(r, c, u),
                      'function' === typeof x.UNSAFE_componentWillUpdate &&
                        x.UNSAFE_componentWillUpdate(r, c, u)),
                    'function' === typeof x.componentDidUpdate &&
                      (b.effectTag |= 4),
                    'function' === typeof x.getSnapshotBeforeUpdate &&
                      (b.effectTag |= 2048))
                  : ('function' !== typeof x.componentDidUpdate ||
                      (h === a.memoizedProps && q === a.memoizedState) ||
                      (b.effectTag |= 4),
                    'function' !== typeof x.getSnapshotBeforeUpdate ||
                      (h === a.memoizedProps && q === a.memoizedState) ||
                      (b.effectTag |= 2048),
                    d(b, r),
                    e(b, c))
                x.props = r
                x.state = c
                x.context = u
                return t
              },
            }
          }
          var Ue = Array.isArray
          function Ve(a, b, c) {
            a = c.ref
            if (
              null !== a &&
              'function' !== typeof a &&
              'object' !== typeof a
            ) {
              if (c._owner) {
                c = c._owner
                var d = void 0
                c && (2 !== c.tag ? D('110') : void 0, (d = c.stateNode))
                d ? void 0 : D('147', a)
                var e = '' + a
                if (null !== b && null !== b.ref && b.ref._stringRef === e)
                  return b.ref
                b = function (a) {
                  var b = d.refs === ka ? (d.refs = {}) : d.refs
                  null === a ? delete b[e] : (b[e] = a)
                }
                b._stringRef = e
                return b
              }
              'string' !== typeof a ? D('148') : void 0
              c._owner ? void 0 : D('254', a)
            }
            return a
          }
          function We(a, b) {
            'textarea' !== a.type &&
              D(
                '31',
                '[object Object]' === Object.prototype.toString.call(b)
                  ? 'object with keys {' + Object.keys(b).join(', ') + '}'
                  : b,
                ''
              )
          }
          function Xe(a) {
            function b(b, c) {
              if (a) {
                var d = b.lastEffect
                null !== d
                  ? ((d.nextEffect = c), (b.lastEffect = c))
                  : (b.firstEffect = b.lastEffect = c)
                c.nextEffect = null
                c.effectTag = 8
              }
            }
            function c(c, d) {
              if (!a) return null
              for (; null !== d; ) b(c, d), (d = d.sibling)
              return null
            }
            function d(a, b) {
              for (a = new Map(); null !== b; )
                null !== b.key ? a.set(b.key, b) : a.set(b.index, b),
                  (b = b.sibling)
              return a
            }
            function e(a, b, c) {
              a = ze(a, b, c)
              a.index = 0
              a.sibling = null
              return a
            }
            function f(b, c, d) {
              b.index = d
              if (!a) return c
              d = b.alternate
              if (null !== d)
                return (d = d.index), d < c ? ((b.effectTag = 2), c) : d
              b.effectTag = 2
              return c
            }
            function h(b) {
              a && null === b.alternate && (b.effectTag = 2)
              return b
            }
            function g(a, b, c, d) {
              if (null === b || 6 !== b.tag)
                return (b = Ce(c, a.mode, d)), (b['return'] = a), b
              b = e(b, c, d)
              b['return'] = a
              return b
            }
            function k(a, b, c, d) {
              if (null !== b && b.type === c.type)
                return (
                  (d = e(b, c.props, d)),
                  (d.ref = Ve(a, b, c)),
                  (d['return'] = a),
                  d
                )
              d = Ae(c, a.mode, d)
              d.ref = Ve(a, b, c)
              d['return'] = a
              return d
            }
            function v(a, b, c, d) {
              if (
                null === b ||
                4 !== b.tag ||
                b.stateNode.containerInfo !== c.containerInfo ||
                b.stateNode.implementation !== c.implementation
              )
                return (b = De(c, a.mode, d)), (b['return'] = a), b
              b = e(b, c.children || [], d)
              b['return'] = a
              return b
            }
            function l(a, b, c, d, f) {
              if (null === b || 10 !== b.tag)
                return (b = Be(c, a.mode, d, f)), (b['return'] = a), b
              b = e(b, c, d)
              b['return'] = a
              return b
            }
            function p(a, b, c) {
              if ('string' === typeof b || 'number' === typeof b)
                return (b = Ce('' + b, a.mode, c)), (b['return'] = a), b
              if ('object' === typeof b && null !== b) {
                switch (b.$$typeof) {
                  case oc:
                    return (
                      (c = Ae(b, a.mode, c)),
                      (c.ref = Ve(a, null, b)),
                      (c['return'] = a),
                      c
                    )
                  case rc:
                    return (b = De(b, a.mode, c)), (b['return'] = a), b
                }
                if (Ue(b) || zc(b))
                  return (b = Be(b, a.mode, c, null)), (b['return'] = a), b
                We(a, b)
              }
              return null
            }
            function z(a, b, c, d) {
              var e = null !== b ? b.key : null
              if ('string' === typeof c || 'number' === typeof c)
                return null !== e ? null : g(a, b, '' + c, d)
              if ('object' === typeof c && null !== c) {
                switch (c.$$typeof) {
                  case oc:
                    return c.key === e
                      ? c.type === sc
                        ? l(a, b, c.props.children, d, e)
                        : k(a, b, c, d)
                      : null
                  case rc:
                    return c.key === e ? v(a, b, c, d) : null
                }
                if (Ue(c) || zc(c))
                  return null !== e ? null : l(a, b, c, d, null)
                We(a, c)
              }
              return null
            }
            function B(a, b, c, d, e) {
              if ('string' === typeof d || 'number' === typeof d)
                return (a = a.get(c) || null), g(b, a, '' + d, e)
              if ('object' === typeof d && null !== d) {
                switch (d.$$typeof) {
                  case oc:
                    return (
                      (a = a.get(null === d.key ? c : d.key) || null),
                      d.type === sc
                        ? l(b, a, d.props.children, e, d.key)
                        : k(b, a, d, e)
                    )
                  case rc:
                    return (
                      (a = a.get(null === d.key ? c : d.key) || null),
                      v(b, a, d, e)
                    )
                }
                if (Ue(d) || zc(d))
                  return (a = a.get(c) || null), l(b, a, d, e, null)
                We(b, d)
              }
              return null
            }
            function r(e, l, g, h) {
              for (
                var r = null, k = null, q = l, u = (l = 0), t = null;
                null !== q && u < g.length;
                u++
              ) {
                q.index > u ? ((t = q), (q = null)) : (t = q.sibling)
                var n = z(e, q, g[u], h)
                if (null === n) {
                  null === q && (q = t)
                  break
                }
                a && q && null === n.alternate && b(e, q)
                l = f(n, l, u)
                null === k ? (r = n) : (k.sibling = n)
                k = n
                q = t
              }
              if (u === g.length) return c(e, q), r
              if (null === q) {
                for (; u < g.length; u++)
                  if ((q = p(e, g[u], h)))
                    (l = f(q, l, u)),
                      null === k ? (r = q) : (k.sibling = q),
                      (k = q)
                return r
              }
              for (q = d(e, q); u < g.length; u++)
                if ((t = B(q, e, u, g[u], h))) {
                  if (a && null !== t.alternate)
                    q['delete'](null === t.key ? u : t.key)
                  l = f(t, l, u)
                  null === k ? (r = t) : (k.sibling = t)
                  k = t
                }
              a &&
                q.forEach(function (a) {
                  return b(e, a)
                })
              return r
            }
            function Q(e, l, g, h) {
              var r = zc(g)
              'function' !== typeof r ? D('150') : void 0
              g = r.call(g)
              null == g ? D('151') : void 0
              for (
                var k = (r = null), q = l, u = (l = 0), t = null, n = g.next();
                null !== q && !n.done;
                u++, n = g.next()
              ) {
                q.index > u ? ((t = q), (q = null)) : (t = q.sibling)
                var H = z(e, q, n.value, h)
                if (null === H) {
                  q || (q = t)
                  break
                }
                a && q && null === H.alternate && b(e, q)
                l = f(H, l, u)
                null === k ? (r = H) : (k.sibling = H)
                k = H
                q = t
              }
              if (n.done) return c(e, q), r
              if (null === q) {
                for (; !n.done; u++, n = g.next())
                  (n = p(e, n.value, h)),
                    null !== n &&
                      ((l = f(n, l, u)),
                      null === k ? (r = n) : (k.sibling = n),
                      (k = n))
                return r
              }
              for (q = d(e, q); !n.done; u++, n = g.next())
                if (((n = B(q, e, u, n.value, h)), null !== n)) {
                  if (a && null !== n.alternate)
                    q['delete'](null === n.key ? u : n.key)
                  l = f(n, l, u)
                  null === k ? (r = n) : (k.sibling = n)
                  k = n
                }
              a &&
                q.forEach(function (a) {
                  return b(e, a)
                })
              return r
            }
            return function (a, d, f, l) {
              'object' === typeof f &&
                null !== f &&
                f.type === sc &&
                null === f.key &&
                (f = f.props.children)
              var g = 'object' === typeof f && null !== f
              if (g)
                switch (f.$$typeof) {
                  case oc:
                    a: {
                      var k = f.key
                      for (g = d; null !== g; ) {
                        if (g.key === k)
                          if (
                            10 === g.tag ? f.type === sc : g.type === f.type
                          ) {
                            c(a, g.sibling)
                            d = e(
                              g,
                              f.type === sc ? f.props.children : f.props,
                              l
                            )
                            d.ref = Ve(a, g, f)
                            d['return'] = a
                            a = d
                            break a
                          } else {
                            c(a, g)
                            break
                          }
                        else b(a, g)
                        g = g.sibling
                      }
                      f.type === sc
                        ? ((d = Be(f.props.children, a.mode, l, f.key)),
                          (d['return'] = a),
                          (a = d))
                        : ((l = Ae(f, a.mode, l)),
                          (l.ref = Ve(a, d, f)),
                          (l['return'] = a),
                          (a = l))
                    }
                    return h(a)
                  case rc:
                    a: {
                      for (g = f.key; null !== d; ) {
                        if (d.key === g)
                          if (
                            4 === d.tag &&
                            d.stateNode.containerInfo === f.containerInfo &&
                            d.stateNode.implementation === f.implementation
                          ) {
                            c(a, d.sibling)
                            d = e(d, f.children || [], l)
                            d['return'] = a
                            a = d
                            break a
                          } else {
                            c(a, d)
                            break
                          }
                        else b(a, d)
                        d = d.sibling
                      }
                      d = De(f, a.mode, l)
                      d['return'] = a
                      a = d
                    }
                    return h(a)
                }
              if ('string' === typeof f || 'number' === typeof f)
                return (
                  (f = '' + f),
                  null !== d && 6 === d.tag
                    ? (c(a, d.sibling),
                      (d = e(d, f, l)),
                      (d['return'] = a),
                      (a = d))
                    : (c(a, d),
                      (d = Ce(f, a.mode, l)),
                      (d['return'] = a),
                      (a = d)),
                  h(a)
                )
              if (Ue(f)) return r(a, d, f, l)
              if (zc(f)) return Q(a, d, f, l)
              g && We(a, f)
              if ('undefined' === typeof f)
                switch (a.tag) {
                  case 2:
                  case 1:
                    ;(l = a.type),
                      D('152', l.displayName || l.name || 'Component')
                }
              return c(a, d)
            }
          }
          var Ye = Xe(!0),
            Ze = Xe(!1)
          function $e(a, b, c, d, e, f, h) {
            function g(a, b, c) {
              k(a, b, c, b.expirationTime)
            }
            function k(a, b, c, d) {
              b.child = null === a ? Ze(b, null, c, d) : Ye(b, a.child, c, d)
            }
            function v(a, b) {
              var c = b.ref
              if ((null === a && null !== c) || (null !== a && a.ref !== c))
                b.effectTag |= 128
            }
            function l(a, b, c, d, e, f) {
              v(a, b)
              if (!c && !e) return d && y(b, !1), r(a, b)
              c = b.stateNode
              nc.current = b
              var l = e ? null : c.render()
              b.effectTag |= 1
              e && (k(a, b, null, f), (b.child = null))
              k(a, b, l, f)
              b.memoizedState = c.state
              b.memoizedProps = c.props
              d && y(b, !0)
              return b.child
            }
            function p(a) {
              var b = a.stateNode
              b.pendingContext
                ? t(a, b.pendingContext, b.pendingContext !== b.context)
                : b.context && t(a, b.context, !1)
              Y(a, b.containerInfo)
            }
            function z(a, b, c, d) {
              var e = a.child
              for (null !== e && (e['return'] = a); null !== e; ) {
                switch (e.tag) {
                  case 12:
                    var f = e.stateNode | 0
                    if (e.type === b && 0 !== (f & c)) {
                      for (f = e; null !== f; ) {
                        var l = f.alternate
                        if (0 === f.expirationTime || f.expirationTime > d)
                          (f.expirationTime = d),
                            null !== l &&
                              (0 === l.expirationTime ||
                                l.expirationTime > d) &&
                              (l.expirationTime = d)
                        else if (
                          null !== l &&
                          (0 === l.expirationTime || l.expirationTime > d)
                        )
                          l.expirationTime = d
                        else break
                        f = f['return']
                      }
                      f = null
                    } else f = e.child
                    break
                  case 13:
                    f = e.type === a.type ? null : e.child
                    break
                  default:
                    f = e.child
                }
                if (null !== f) f['return'] = e
                else
                  for (f = e; null !== f; ) {
                    if (f === a) {
                      f = null
                      break
                    }
                    e = f.sibling
                    if (null !== e) {
                      f = e
                      break
                    }
                    f = f['return']
                  }
                e = f
              }
            }
            function B(a, b, c) {
              var d = b.type._context,
                e = b.pendingProps,
                f = b.memoizedProps
              if (!q() && f === e) return (b.stateNode = 0), G(b), r(a, b)
              var l = e.value
              b.memoizedProps = e
              if (null === f) l = 1073741823
              else if (f.value === e.value) {
                if (f.children === e.children)
                  return (b.stateNode = 0), G(b), r(a, b)
                l = 0
              } else {
                var h = f.value
                if (
                  (h === l && (0 !== h || 1 / h === 1 / l)) ||
                  (h !== h && l !== l)
                ) {
                  if (f.children === e.children)
                    return (b.stateNode = 0), G(b), r(a, b)
                  l = 0
                } else if (
                  ((l =
                    'function' === typeof d._calculateChangedBits
                      ? d._calculateChangedBits(h, l)
                      : 1073741823),
                  (l |= 0),
                  0 === l)
                ) {
                  if (f.children === e.children)
                    return (b.stateNode = 0), G(b), r(a, b)
                } else z(b, d, l, c)
              }
              b.stateNode = l
              G(b)
              g(a, b, e.children)
              return b.child
            }
            function r(a, b) {
              null !== a && b.child !== a.child ? D('153') : void 0
              if (null !== b.child) {
                a = b.child
                var c = ze(a, a.pendingProps, a.expirationTime)
                b.child = c
                for (c['return'] = b; null !== a.sibling; )
                  (a = a.sibling),
                    (c = c.sibling = ze(a, a.pendingProps, a.expirationTime)),
                    (c['return'] = b)
                c.sibling = null
              }
              return b.child
            }
            var Q = a.shouldSetTextContent,
              n = a.shouldDeprioritizeSubtree,
              x = b.pushHostContext,
              Y = b.pushHostContainer,
              G = d.pushProvider,
              R = c.getMaskedContext,
              S = c.getUnmaskedContext,
              q = c.hasContextChanged,
              u = c.pushContextProvider,
              t = c.pushTopLevelContextObject,
              y = c.invalidateContextProvider,
              H = e.enterHydrationState,
              Wa = e.resetHydrationState,
              Cb = e.tryToClaimNextHydratableInstance
            a = Te(
              c,
              f,
              h,
              function (a, b) {
                a.memoizedProps = b
              },
              function (a, b) {
                a.memoizedState = b
              }
            )
            var Jc = a.adoptClassInstance,
              Kc = a.callGetDerivedStateFromProps,
              Lc = a.constructClassInstance,
              Db = a.mountClassInstance,
              Mc = a.resumeMountClassInstance,
              Eb = a.updateClassInstance
            return {
              beginWork: function (a, b, c) {
                if (0 === b.expirationTime || b.expirationTime > c) {
                  switch (b.tag) {
                    case 3:
                      p(b)
                      break
                    case 2:
                      u(b)
                      break
                    case 4:
                      Y(b, b.stateNode.containerInfo)
                      break
                    case 13:
                      G(b)
                  }
                  return null
                }
                switch (b.tag) {
                  case 0:
                    null !== a ? D('155') : void 0
                    var d = b.type,
                      e = b.pendingProps,
                      f = S(b)
                    f = R(b, f)
                    d = d(e, f)
                    b.effectTag |= 1
                    'object' === typeof d &&
                    null !== d &&
                    'function' === typeof d.render &&
                    void 0 === d.$$typeof
                      ? ((f = b.type),
                        (b.tag = 2),
                        (b.memoizedState =
                          null !== d.state && void 0 !== d.state
                            ? d.state
                            : null),
                        'function' === typeof f.getDerivedStateFromProps &&
                          ((e = Kc(b, d, e, b.memoizedState)),
                          null !== e &&
                            void 0 !== e &&
                            (b.memoizedState = A({}, b.memoizedState, e))),
                        (e = u(b)),
                        Jc(b, d),
                        Db(b, c),
                        (a = l(a, b, !0, e, !1, c)))
                      : ((b.tag = 1),
                        g(a, b, d),
                        (b.memoizedProps = e),
                        (a = b.child))
                    return a
                  case 1:
                    return (
                      (e = b.type),
                      (c = b.pendingProps),
                      q() || b.memoizedProps !== c
                        ? ((d = S(b)),
                          (d = R(b, d)),
                          (e = e(c, d)),
                          (b.effectTag |= 1),
                          g(a, b, e),
                          (b.memoizedProps = c),
                          (a = b.child))
                        : (a = r(a, b)),
                      a
                    )
                  case 2:
                    e = u(b)
                    null === a
                      ? null === b.stateNode
                        ? (Lc(b, b.pendingProps), Db(b, c), (d = !0))
                        : (d = Mc(b, c))
                      : (d = Eb(a, b, c))
                    f = !1
                    var h = b.updateQueue
                    null !== h && null !== h.capturedValues && (f = d = !0)
                    return l(a, b, d, e, f, c)
                  case 3:
                    a: if ((p(b), (d = b.updateQueue), null !== d)) {
                      f = b.memoizedState
                      e = Re(a, b, d, null, null, c)
                      b.memoizedState = e
                      d = b.updateQueue
                      if (null !== d && null !== d.capturedValues) d = null
                      else if (f === e) {
                        Wa()
                        a = r(a, b)
                        break a
                      } else d = e.element
                      f = b.stateNode
                      ;(null === a || null === a.child) && f.hydrate && H(b)
                        ? ((b.effectTag |= 2), (b.child = Ze(b, null, d, c)))
                        : (Wa(), g(a, b, d))
                      b.memoizedState = e
                      a = b.child
                    } else Wa(), (a = r(a, b))
                    return a
                  case 5:
                    a: {
                      x(b)
                      null === a && Cb(b)
                      e = b.type
                      h = b.memoizedProps
                      d = b.pendingProps
                      f = null !== a ? a.memoizedProps : null
                      if (!q() && h === d) {
                        if ((h = b.mode & 1 && n(e, d)))
                          b.expirationTime = 1073741823
                        if (!h || 1073741823 !== c) {
                          a = r(a, b)
                          break a
                        }
                      }
                      h = d.children
                      Q(e, d) ? (h = null) : f && Q(e, f) && (b.effectTag |= 16)
                      v(a, b)
                      1073741823 !== c && b.mode & 1 && n(e, d)
                        ? ((b.expirationTime = 1073741823),
                          (b.memoizedProps = d),
                          (a = null))
                        : (g(a, b, h), (b.memoizedProps = d), (a = b.child))
                    }
                    return a
                  case 6:
                    return (
                      null === a && Cb(b),
                      (b.memoizedProps = b.pendingProps),
                      null
                    )
                  case 8:
                    b.tag = 7
                  case 7:
                    return (
                      (e = b.pendingProps),
                      q() || b.memoizedProps !== e || (e = b.memoizedProps),
                      (d = e.children),
                      (b.stateNode =
                        null === a
                          ? Ze(b, b.stateNode, d, c)
                          : Ye(b, a.stateNode, d, c)),
                      (b.memoizedProps = e),
                      b.stateNode
                    )
                  case 9:
                    return null
                  case 4:
                    return (
                      Y(b, b.stateNode.containerInfo),
                      (e = b.pendingProps),
                      q() || b.memoizedProps !== e
                        ? (null === a
                            ? (b.child = Ye(b, null, e, c))
                            : g(a, b, e),
                          (b.memoizedProps = e),
                          (a = b.child))
                        : (a = r(a, b)),
                      a
                    )
                  case 14:
                    return (
                      (c = b.type.render),
                      (c = c(b.pendingProps, b.ref)),
                      g(a, b, c),
                      (b.memoizedProps = c),
                      b.child
                    )
                  case 10:
                    return (
                      (c = b.pendingProps),
                      q() || b.memoizedProps !== c
                        ? (g(a, b, c), (b.memoizedProps = c), (a = b.child))
                        : (a = r(a, b)),
                      a
                    )
                  case 11:
                    return (
                      (c = b.pendingProps.children),
                      q() || (null !== c && b.memoizedProps !== c)
                        ? (g(a, b, c), (b.memoizedProps = c), (a = b.child))
                        : (a = r(a, b)),
                      a
                    )
                  case 13:
                    return B(a, b, c)
                  case 12:
                    a: {
                      d = b.type
                      f = b.pendingProps
                      h = b.memoizedProps
                      e = d._currentValue
                      var t = d._changedBits
                      if (q() || 0 !== t || h !== f) {
                        b.memoizedProps = f
                        var k = f.unstable_observedBits
                        if (void 0 === k || null === k) k = 1073741823
                        b.stateNode = k
                        if (0 !== (t & k)) z(b, d, t, c)
                        else if (h === f) {
                          a = r(a, b)
                          break a
                        }
                        c = f.children
                        c = c(e)
                        g(a, b, c)
                        a = b.child
                      } else a = r(a, b)
                    }
                    return a
                  default:
                    D('156')
                }
              },
            }
          }
          function af(a, b, c, d, e) {
            function f(a) {
              a.effectTag |= 4
            }
            var h = a.createInstance,
              g = a.createTextInstance,
              k = a.appendInitialChild,
              v = a.finalizeInitialChildren,
              l = a.prepareUpdate,
              p = a.persistence,
              z = b.getRootHostContainer,
              B = b.popHostContext,
              r = b.getHostContext,
              Q = b.popHostContainer,
              n = c.popContextProvider,
              x = c.popTopLevelContextObject,
              Y = d.popProvider,
              G = e.prepareToHydrateHostInstance,
              R = e.prepareToHydrateHostTextInstance,
              S = e.popHydrationState,
              q = void 0,
              u = void 0,
              t = void 0
            a.mutation
              ? ((q = function () {}),
                (u = function (a, b, c) {
                  ;(b.updateQueue = c) && f(b)
                }),
                (t = function (a, b, c, d) {
                  c !== d && f(b)
                }))
              : p
              ? D('235')
              : D('236')
            return {
              completeWork: function (a, b, c) {
                var d = b.pendingProps
                switch (b.tag) {
                  case 1:
                    return null
                  case 2:
                    return (
                      n(b),
                      (a = b.stateNode),
                      (d = b.updateQueue),
                      null !== d &&
                        null !== d.capturedValues &&
                        ((b.effectTag &= -65),
                        'function' === typeof a.componentDidCatch
                          ? (b.effectTag |= 256)
                          : (d.capturedValues = null)),
                      null
                    )
                  case 3:
                    Q(b)
                    x(b)
                    d = b.stateNode
                    d.pendingContext &&
                      ((d.context = d.pendingContext),
                      (d.pendingContext = null))
                    if (null === a || null === a.child)
                      S(b), (b.effectTag &= -3)
                    q(b)
                    a = b.updateQueue
                    null !== a &&
                      null !== a.capturedValues &&
                      (b.effectTag |= 256)
                    return null
                  case 5:
                    B(b)
                    c = z()
                    var e = b.type
                    if (null !== a && null != b.stateNode) {
                      var p = a.memoizedProps,
                        H = b.stateNode,
                        y = r()
                      H = l(H, e, p, d, c, y)
                      u(a, b, H, e, p, d, c, y)
                      a.ref !== b.ref && (b.effectTag |= 128)
                    } else {
                      if (!d)
                        return null === b.stateNode ? D('166') : void 0, null
                      a = r()
                      if (S(b)) G(b, c, a) && f(b)
                      else {
                        p = h(e, d, c, a, b)
                        a: for (y = b.child; null !== y; ) {
                          if (5 === y.tag || 6 === y.tag) k(p, y.stateNode)
                          else if (4 !== y.tag && null !== y.child) {
                            y.child['return'] = y
                            y = y.child
                            continue
                          }
                          if (y === b) break
                          for (; null === y.sibling; ) {
                            if (null === y['return'] || y['return'] === b)
                              break a
                            y = y['return']
                          }
                          y.sibling['return'] = y['return']
                          y = y.sibling
                        }
                        v(p, e, d, c, a) && f(b)
                        b.stateNode = p
                      }
                      null !== b.ref && (b.effectTag |= 128)
                    }
                    return null
                  case 6:
                    if (a && null != b.stateNode) t(a, b, a.memoizedProps, d)
                    else {
                      if ('string' !== typeof d)
                        return null === b.stateNode ? D('166') : void 0, null
                      a = z()
                      c = r()
                      S(b) ? R(b) && f(b) : (b.stateNode = g(d, a, c, b))
                    }
                    return null
                  case 7:
                    ;(d = b.memoizedProps) ? void 0 : D('165')
                    b.tag = 8
                    e = []
                    a: for (
                      (p = b.stateNode) && (p['return'] = b);
                      null !== p;

                    ) {
                      if (5 === p.tag || 6 === p.tag || 4 === p.tag) D('247')
                      else if (9 === p.tag) e.push(p.pendingProps.value)
                      else if (null !== p.child) {
                        p.child['return'] = p
                        p = p.child
                        continue
                      }
                      for (; null === p.sibling; ) {
                        if (null === p['return'] || p['return'] === b) break a
                        p = p['return']
                      }
                      p.sibling['return'] = p['return']
                      p = p.sibling
                    }
                    p = d.handler
                    d = p(d.props, e)
                    b.child = Ye(b, null !== a ? a.child : null, d, c)
                    return b.child
                  case 8:
                    return (b.tag = 7), null
                  case 9:
                    return null
                  case 14:
                    return null
                  case 10:
                    return null
                  case 11:
                    return null
                  case 4:
                    return Q(b), q(b), null
                  case 13:
                    return Y(b), null
                  case 12:
                    return null
                  case 0:
                    D('167')
                  default:
                    D('156')
                }
              },
            }
          }
          function bf(a, b, c, d, e) {
            var f = a.popHostContainer,
              h = a.popHostContext,
              g = b.popContextProvider,
              k = b.popTopLevelContextObject,
              v = c.popProvider
            return {
              throwException: function (a, b, c) {
                b.effectTag |= 512
                b.firstEffect = b.lastEffect = null
                b = { value: c, source: b, stack: Bc(b) }
                do {
                  switch (a.tag) {
                    case 3:
                      Oe(a)
                      a.updateQueue.capturedValues = [b]
                      a.effectTag |= 1024
                      return
                    case 2:
                      if (
                        ((c = a.stateNode),
                        0 === (a.effectTag & 64) &&
                          null !== c &&
                          'function' === typeof c.componentDidCatch &&
                          !e(c))
                      ) {
                        Oe(a)
                        c = a.updateQueue
                        var d = c.capturedValues
                        null === d ? (c.capturedValues = [b]) : d.push(b)
                        a.effectTag |= 1024
                        return
                      }
                  }
                  a = a['return']
                } while (null !== a)
              },
              unwindWork: function (a) {
                switch (a.tag) {
                  case 2:
                    g(a)
                    var b = a.effectTag
                    return b & 1024
                      ? ((a.effectTag = (b & -1025) | 64), a)
                      : null
                  case 3:
                    return (
                      f(a),
                      k(a),
                      (b = a.effectTag),
                      b & 1024 ? ((a.effectTag = (b & -1025) | 64), a) : null
                    )
                  case 5:
                    return h(a), null
                  case 4:
                    return f(a), null
                  case 13:
                    return v(a), null
                  default:
                    return null
                }
              },
              unwindInterruptedWork: function (a) {
                switch (a.tag) {
                  case 2:
                    g(a)
                    break
                  case 3:
                    f(a)
                    k(a)
                    break
                  case 5:
                    h(a)
                    break
                  case 4:
                    f(a)
                    break
                  case 13:
                    v(a)
                }
              },
            }
          }
          function cf(a, b) {
            var c = b.source
            null === b.stack && Bc(c)
            null !== c && Ac(c)
            b = b.value
            null !== a && 2 === a.tag && Ac(a)
            try {
              ;(b && b.suppressReactErrorLogging) || console.error(b)
            } catch (d) {
              ;(d && d.suppressReactErrorLogging) || console.error(d)
            }
          }
          function df(a, b, c, d, e) {
            function f(a) {
              var c = a.ref
              if (null !== c)
                if ('function' === typeof c)
                  try {
                    c(null)
                  } catch (t) {
                    b(a, t)
                  }
                else c.current = null
            }
            function h(a) {
              'function' === typeof Je && Je(a)
              switch (a.tag) {
                case 2:
                  f(a)
                  var c = a.stateNode
                  if ('function' === typeof c.componentWillUnmount)
                    try {
                      ;(c.props = a.memoizedProps),
                        (c.state = a.memoizedState),
                        c.componentWillUnmount()
                    } catch (t) {
                      b(a, t)
                    }
                  break
                case 5:
                  f(a)
                  break
                case 7:
                  g(a.stateNode)
                  break
                case 4:
                  p && v(a)
              }
            }
            function g(a) {
              for (var b = a; ; )
                if ((h(b), null === b.child || (p && 4 === b.tag))) {
                  if (b === a) break
                  for (; null === b.sibling; ) {
                    if (null === b['return'] || b['return'] === a) return
                    b = b['return']
                  }
                  b.sibling['return'] = b['return']
                  b = b.sibling
                } else (b.child['return'] = b), (b = b.child)
            }
            function k(a) {
              return 5 === a.tag || 3 === a.tag || 4 === a.tag
            }
            function v(a) {
              for (var b = a, c = !1, d = void 0, e = void 0; ; ) {
                if (!c) {
                  c = b['return']
                  a: for (;;) {
                    null === c ? D('160') : void 0
                    switch (c.tag) {
                      case 5:
                        d = c.stateNode
                        e = !1
                        break a
                      case 3:
                        d = c.stateNode.containerInfo
                        e = !0
                        break a
                      case 4:
                        d = c.stateNode.containerInfo
                        e = !0
                        break a
                    }
                    c = c['return']
                  }
                  c = !0
                }
                if (5 === b.tag || 6 === b.tag)
                  g(b), e ? S(d, b.stateNode) : R(d, b.stateNode)
                else if (
                  (4 === b.tag ? (d = b.stateNode.containerInfo) : h(b),
                  null !== b.child)
                ) {
                  b.child['return'] = b
                  b = b.child
                  continue
                }
                if (b === a) break
                for (; null === b.sibling; ) {
                  if (null === b['return'] || b['return'] === a) return
                  b = b['return']
                  4 === b.tag && (c = !1)
                }
                b.sibling['return'] = b['return']
                b = b.sibling
              }
            }
            var l = a.getPublicInstance,
              p = a.mutation
            a = a.persistence
            p || (a ? D('235') : D('236'))
            var z = p.commitMount,
              B = p.commitUpdate,
              r = p.resetTextContent,
              Q = p.commitTextUpdate,
              n = p.appendChild,
              x = p.appendChildToContainer,
              Y = p.insertBefore,
              G = p.insertInContainerBefore,
              R = p.removeChild,
              S = p.removeChildFromContainer
            return {
              commitBeforeMutationLifeCycles: function (a, b) {
                switch (b.tag) {
                  case 2:
                    if (b.effectTag & 2048 && null !== a) {
                      var c = a.memoizedProps,
                        d = a.memoizedState
                      a = b.stateNode
                      a.props = b.memoizedProps
                      a.state = b.memoizedState
                      b = a.getSnapshotBeforeUpdate(c, d)
                      a.__reactInternalSnapshotBeforeUpdate = b
                    }
                    break
                  case 3:
                  case 5:
                  case 6:
                  case 4:
                    break
                  default:
                    D('163')
                }
              },
              commitResetTextContent: function (a) {
                r(a.stateNode)
              },
              commitPlacement: function (a) {
                a: {
                  for (var b = a['return']; null !== b; ) {
                    if (k(b)) {
                      var c = b
                      break a
                    }
                    b = b['return']
                  }
                  D('160')
                  c = void 0
                }
                var d = (b = void 0)
                switch (c.tag) {
                  case 5:
                    b = c.stateNode
                    d = !1
                    break
                  case 3:
                    b = c.stateNode.containerInfo
                    d = !0
                    break
                  case 4:
                    b = c.stateNode.containerInfo
                    d = !0
                    break
                  default:
                    D('161')
                }
                c.effectTag & 16 && (r(b), (c.effectTag &= -17))
                a: b: for (c = a; ; ) {
                  for (; null === c.sibling; ) {
                    if (null === c['return'] || k(c['return'])) {
                      c = null
                      break a
                    }
                    c = c['return']
                  }
                  c.sibling['return'] = c['return']
                  for (c = c.sibling; 5 !== c.tag && 6 !== c.tag; ) {
                    if (c.effectTag & 2) continue b
                    if (null === c.child || 4 === c.tag) continue b
                    else (c.child['return'] = c), (c = c.child)
                  }
                  if (!(c.effectTag & 2)) {
                    c = c.stateNode
                    break a
                  }
                }
                for (var e = a; ; ) {
                  if (5 === e.tag || 6 === e.tag)
                    c
                      ? d
                        ? G(b, e.stateNode, c)
                        : Y(b, e.stateNode, c)
                      : d
                      ? x(b, e.stateNode)
                      : n(b, e.stateNode)
                  else if (4 !== e.tag && null !== e.child) {
                    e.child['return'] = e
                    e = e.child
                    continue
                  }
                  if (e === a) break
                  for (; null === e.sibling; ) {
                    if (null === e['return'] || e['return'] === a) return
                    e = e['return']
                  }
                  e.sibling['return'] = e['return']
                  e = e.sibling
                }
              },
              commitDeletion: function (a) {
                v(a)
                a['return'] = null
                a.child = null
                a.alternate &&
                  ((a.alternate.child = null), (a.alternate['return'] = null))
              },
              commitWork: function (a, b) {
                switch (b.tag) {
                  case 2:
                    break
                  case 5:
                    var c = b.stateNode
                    if (null != c) {
                      var d = b.memoizedProps
                      a = null !== a ? a.memoizedProps : d
                      var e = b.type,
                        f = b.updateQueue
                      b.updateQueue = null
                      null !== f && B(c, f, e, a, d, b)
                    }
                    break
                  case 6:
                    null === b.stateNode ? D('162') : void 0
                    c = b.memoizedProps
                    Q(b.stateNode, null !== a ? a.memoizedProps : c, c)
                    break
                  case 3:
                    break
                  default:
                    D('163')
                }
              },
              commitLifeCycles: function (a, b, c) {
                switch (c.tag) {
                  case 2:
                    a = c.stateNode
                    if (c.effectTag & 4)
                      if (null === b)
                        (a.props = c.memoizedProps),
                          (a.state = c.memoizedState),
                          a.componentDidMount()
                      else {
                        var d = b.memoizedProps
                        b = b.memoizedState
                        a.props = c.memoizedProps
                        a.state = c.memoizedState
                        a.componentDidUpdate(
                          d,
                          b,
                          a.__reactInternalSnapshotBeforeUpdate
                        )
                      }
                    c = c.updateQueue
                    null !== c && Se(c, a)
                    break
                  case 3:
                    b = c.updateQueue
                    if (null !== b) {
                      a = null
                      if (null !== c.child)
                        switch (c.child.tag) {
                          case 5:
                            a = l(c.child.stateNode)
                            break
                          case 2:
                            a = c.child.stateNode
                        }
                      Se(b, a)
                    }
                    break
                  case 5:
                    a = c.stateNode
                    null === b &&
                      c.effectTag & 4 &&
                      z(a, c.type, c.memoizedProps, c)
                    break
                  case 6:
                    break
                  case 4:
                    break
                  default:
                    D('163')
                }
              },
              commitErrorLogging: function (a, b) {
                switch (a.tag) {
                  case 2:
                    var c = a.type
                    b = a.stateNode
                    var d = a.updateQueue
                    null === d || null === d.capturedValues ? D('264') : void 0
                    var f = d.capturedValues
                    d.capturedValues = null
                    'function' !== typeof c.getDerivedStateFromCatch && e(b)
                    b.props = a.memoizedProps
                    b.state = a.memoizedState
                    for (c = 0; c < f.length; c++) {
                      d = f[c]
                      var l = d.value,
                        g = d.stack
                      cf(a, d)
                      b.componentDidCatch(l, {
                        componentStack: null !== g ? g : '',
                      })
                    }
                    break
                  case 3:
                    c = a.updateQueue
                    null === c || null === c.capturedValues ? D('264') : void 0
                    f = c.capturedValues
                    c.capturedValues = null
                    for (c = 0; c < f.length; c++)
                      (d = f[c]), cf(a, d), b(d.value)
                    break
                  default:
                    D('265')
                }
              },
              commitAttachRef: function (a) {
                var b = a.ref
                if (null !== b) {
                  var c = a.stateNode
                  switch (a.tag) {
                    case 5:
                      a = l(c)
                      break
                    default:
                      a = c
                  }
                  'function' === typeof b ? b(a) : (b.current = a)
                }
              },
              commitDetachRef: function (a) {
                a = a.ref
                null !== a &&
                  ('function' === typeof a ? a(null) : (a.current = null))
              },
            }
          }
          var ef = {}
          function ff(a, b) {
            function c(a) {
              a === ef ? D('174') : void 0
              return a
            }
            var d = a.getChildHostContext,
              e = a.getRootHostContext
            a = b.createCursor
            var f = b.push,
              h = b.pop,
              g = a(ef),
              k = a(ef),
              v = a(ef)
            return {
              getHostContext: function () {
                return c(g.current)
              },
              getRootHostContainer: function () {
                return c(v.current)
              },
              popHostContainer: function (a) {
                h(g, a)
                h(k, a)
                h(v, a)
              },
              popHostContext: function (a) {
                k.current === a && (h(g, a), h(k, a))
              },
              pushHostContainer: function (a, b) {
                f(v, b, a)
                f(k, a, a)
                f(g, ef, a)
                b = e(b)
                h(g, a)
                f(g, b, a)
              },
              pushHostContext: function (a) {
                var b = c(v.current),
                  e = c(g.current)
                b = d(e, a.type, b)
                e !== b && (f(k, a, a), f(g, b, a))
              },
            }
          }
          function gf(a) {
            function b(a, b) {
              var c = new xe(5, null, null, 0)
              c.type = 'DELETED'
              c.stateNode = b
              c['return'] = a
              c.effectTag = 8
              null !== a.lastEffect
                ? ((a.lastEffect.nextEffect = c), (a.lastEffect = c))
                : (a.firstEffect = a.lastEffect = c)
            }
            function c(a, b) {
              switch (a.tag) {
                case 5:
                  return (
                    (b = f(b, a.type, a.pendingProps)),
                    null !== b ? ((a.stateNode = b), !0) : !1
                  )
                case 6:
                  return (
                    (b = h(b, a.pendingProps)),
                    null !== b ? ((a.stateNode = b), !0) : !1
                  )
                default:
                  return !1
              }
            }
            function d(a) {
              for (a = a['return']; null !== a && 5 !== a.tag && 3 !== a.tag; )
                a = a['return']
              p = a
            }
            var e = a.shouldSetTextContent
            a = a.hydration
            if (!a)
              return {
                enterHydrationState: function () {
                  return !1
                },
                resetHydrationState: function () {},
                tryToClaimNextHydratableInstance: function () {},
                prepareToHydrateHostInstance: function () {
                  D('175')
                },
                prepareToHydrateHostTextInstance: function () {
                  D('176')
                },
                popHydrationState: function () {
                  return !1
                },
              }
            var f = a.canHydrateInstance,
              h = a.canHydrateTextInstance,
              g = a.getNextHydratableSibling,
              k = a.getFirstHydratableChild,
              v = a.hydrateInstance,
              l = a.hydrateTextInstance,
              p = null,
              z = null,
              B = !1
            return {
              enterHydrationState: function (a) {
                z = k(a.stateNode.containerInfo)
                p = a
                return (B = !0)
              },
              resetHydrationState: function () {
                z = p = null
                B = !1
              },
              tryToClaimNextHydratableInstance: function (a) {
                if (B) {
                  var d = z
                  if (d) {
                    if (!c(a, d)) {
                      d = g(d)
                      if (!d || !c(a, d)) {
                        a.effectTag |= 2
                        B = !1
                        p = a
                        return
                      }
                      b(p, z)
                    }
                    p = a
                    z = k(d)
                  } else (a.effectTag |= 2), (B = !1), (p = a)
                }
              },
              prepareToHydrateHostInstance: function (a, b, c) {
                b = v(a.stateNode, a.type, a.memoizedProps, b, c, a)
                a.updateQueue = b
                return null !== b ? !0 : !1
              },
              prepareToHydrateHostTextInstance: function (a) {
                return l(a.stateNode, a.memoizedProps, a)
              },
              popHydrationState: function (a) {
                if (a !== p) return !1
                if (!B) return d(a), (B = !0), !1
                var c = a.type
                if (
                  5 !== a.tag ||
                  ('head' !== c && 'body' !== c && !e(c, a.memoizedProps))
                )
                  for (c = z; c; ) b(a, c), (c = g(c))
                d(a)
                z = p ? g(a.stateNode) : null
                return !0
              },
            }
          }
          function hf(a) {
            function b(a, b, c) {
              a = a.stateNode
              a.__reactInternalMemoizedUnmaskedChildContext = b
              a.__reactInternalMemoizedMaskedChildContext = c
            }
            function c(a) {
              return 2 === a.tag && null != a.type.childContextTypes
            }
            function d(a, b) {
              var c = a.stateNode,
                d = a.type.childContextTypes
              if ('function' !== typeof c.getChildContext) return b
              c = c.getChildContext()
              for (var e in c) e in d ? void 0 : D('108', Ac(a) || 'Unknown', e)
              return A({}, b, c)
            }
            var e = a.createCursor,
              f = a.push,
              h = a.pop,
              g = e(ka),
              k = e(!1),
              v = ka
            return {
              getUnmaskedContext: function (a) {
                return c(a) ? v : g.current
              },
              cacheContext: b,
              getMaskedContext: function (a, c) {
                var d = a.type.contextTypes
                if (!d) return ka
                var e = a.stateNode
                if (e && e.__reactInternalMemoizedUnmaskedChildContext === c)
                  return e.__reactInternalMemoizedMaskedChildContext
                var f = {},
                  g
                for (g in d) f[g] = c[g]
                e && b(a, c, f)
                return f
              },
              hasContextChanged: function () {
                return k.current
              },
              isContextConsumer: function (a) {
                return 2 === a.tag && null != a.type.contextTypes
              },
              isContextProvider: c,
              popContextProvider: function (a) {
                c(a) && (h(k, a), h(g, a))
              },
              popTopLevelContextObject: function (a) {
                h(k, a)
                h(g, a)
              },
              pushTopLevelContextObject: function (a, b, c) {
                null != g.cursor ? D('168') : void 0
                f(g, b, a)
                f(k, c, a)
              },
              processChildContext: d,
              pushContextProvider: function (a) {
                if (!c(a)) return !1
                var b = a.stateNode
                b = (b && b.__reactInternalMemoizedMergedChildContext) || ka
                v = g.current
                f(g, b, a)
                f(k, k.current, a)
                return !0
              },
              invalidateContextProvider: function (a, b) {
                var c = a.stateNode
                c ? void 0 : D('169')
                if (b) {
                  var e = d(a, v)
                  c.__reactInternalMemoizedMergedChildContext = e
                  h(k, a)
                  h(g, a)
                  f(g, e, a)
                } else h(k, a)
                f(k, b, a)
              },
              findCurrentUnmaskedContext: function (a) {
                for (
                  2 !== xd(a) || 2 !== a.tag ? D('170') : void 0;
                  3 !== a.tag;

                ) {
                  if (c(a))
                    return a.stateNode.__reactInternalMemoizedMergedChildContext
                  ;(a = a['return']) ? void 0 : D('171')
                }
                return a.stateNode.context
              },
            }
          }
          function jf(a) {
            var b = a.createCursor,
              c = a.push,
              d = a.pop,
              e = b(null),
              f = b(null),
              h = b(0)
            return {
              pushProvider: function (a) {
                var b = a.type._context
                c(h, b._changedBits, a)
                c(f, b._currentValue, a)
                c(e, a, a)
                b._currentValue = a.pendingProps.value
                b._changedBits = a.stateNode
              },
              popProvider: function (a) {
                var b = h.current,
                  c = f.current
                d(e, a)
                d(f, a)
                d(h, a)
                a = a.type._context
                a._currentValue = c
                a._changedBits = b
              },
            }
          }
          function kf() {
            var a = [],
              b = -1
            return {
              createCursor: function (a) {
                return { current: a }
              },
              isEmpty: function () {
                return -1 === b
              },
              pop: function (c) {
                0 > b || ((c.current = a[b]), (a[b] = null), b--)
              },
              push: function (c, d) {
                b++
                a[b] = c.current
                c.current = d
              },
              checkThatStackIsEmpty: function () {},
              resetStackAfterFatalErrorInDev: function () {},
            }
          }
          function lf(a) {
            function b() {
              if (null !== I)
                for (var a = I['return']; null !== a; ) Lc(a), (a = a['return'])
              Ya = null
              Z = 0
              I = null
              Nc = !1
            }
            function c(a) {
              return null !== ya && ya.has(a)
            }
            function d(a) {
              for (;;) {
                var b = a.alternate,
                  c = a['return'],
                  d = a.sibling
                if (0 === (a.effectTag & 512)) {
                  b = Cb(b, a, Z)
                  var e = a
                  if (1073741823 === Z || 1073741823 !== e.expirationTime) {
                    b: switch (e.tag) {
                      case 3:
                      case 2:
                        var f = e.updateQueue
                        f = null === f ? 0 : f.expirationTime
                        break b
                      default:
                        f = 0
                    }
                    for (var g = e.child; null !== g; )
                      0 !== g.expirationTime &&
                        (0 === f || f > g.expirationTime) &&
                        (f = g.expirationTime),
                        (g = g.sibling)
                    e.expirationTime = f
                  }
                  if (null !== b) return b
                  null !== c &&
                    0 === (c.effectTag & 512) &&
                    (null === c.firstEffect && (c.firstEffect = a.firstEffect),
                    null !== a.lastEffect &&
                      (null !== c.lastEffect &&
                        (c.lastEffect.nextEffect = a.firstEffect),
                      (c.lastEffect = a.lastEffect)),
                    1 < a.effectTag &&
                      (null !== c.lastEffect
                        ? (c.lastEffect.nextEffect = a)
                        : (c.firstEffect = a),
                      (c.lastEffect = a)))
                  if (null !== d) return d
                  if (null !== c) a = c
                  else {
                    Nc = !0
                    break
                  }
                } else {
                  a = Kc(a)
                  if (null !== a) return (a.effectTag &= 2559), a
                  null !== c &&
                    ((c.firstEffect = c.lastEffect = null),
                    (c.effectTag |= 512))
                  if (null !== d) return d
                  if (null !== c) a = c
                  else break
                }
              }
              return null
            }
            function e(a) {
              var b = Wa(a.alternate, a, Z)
              null === b && (b = d(a))
              nc.current = null
              return b
            }
            function f(a, c, f) {
              ca ? D('243') : void 0
              ca = !0
              if (c !== Z || a !== Ya || null === I)
                b(),
                  (Ya = a),
                  (Z = c),
                  (I = ze(Ya.current, null, Z)),
                  (a.pendingCommitExpirationTime = 0)
              var g = !1
              do {
                try {
                  if (f) for (; null !== I && !S(); ) I = e(I)
                  else for (; null !== I; ) I = e(I)
                } catch (Oc) {
                  if (null === I) {
                    g = !0
                    q(Oc)
                    break
                  }
                  f = I
                  var h = f['return']
                  if (null === h) {
                    g = !0
                    q(Oc)
                    break
                  }
                  Jc(h, f, Oc)
                  I = d(f)
                }
                break
              } while (1)
              ca = !1
              if (g || null !== I) return null
              if (Nc)
                return (a.pendingCommitExpirationTime = c), a.current.alternate
              D('262')
            }
            function h(a, b, c, d) {
              a = { value: c, source: a, stack: Bc(a) }
              Pe(b, {
                expirationTime: d,
                partialState: null,
                callback: null,
                isReplace: !1,
                isForced: !1,
                capturedValue: a,
                next: null,
              })
              v(b, d)
            }
            function g(a, b) {
              a: {
                ca && !Za ? D('263') : void 0
                for (var d = a['return']; null !== d; ) {
                  switch (d.tag) {
                    case 2:
                      var e = d.stateNode
                      if (
                        'function' === typeof d.type.getDerivedStateFromCatch ||
                        ('function' === typeof e.componentDidCatch && !c(e))
                      ) {
                        h(a, d, b, 1)
                        a = void 0
                        break a
                      }
                      break
                    case 3:
                      h(a, d, b, 1)
                      a = void 0
                      break a
                  }
                  d = d['return']
                }
                3 === a.tag && h(a, a, b, 1)
                a = void 0
              }
              return a
            }
            function k(a) {
              a =
                0 !== ia
                  ? ia
                  : ca
                  ? Za
                    ? 1
                    : Z
                  : a.mode & 1
                  ? za
                    ? 10 * ((((l() + 15) / 10) | 0) + 1)
                    : 25 * ((((l() + 500) / 25) | 0) + 1)
                  : 1
              za && (0 === da || a > da) && (da = a)
              return a
            }
            function v(a, c) {
              a: {
                for (; null !== a; ) {
                  if (0 === a.expirationTime || a.expirationTime > c)
                    a.expirationTime = c
                  null !== a.alternate &&
                    (0 === a.alternate.expirationTime ||
                      a.alternate.expirationTime > c) &&
                    (a.alternate.expirationTime = c)
                  if (null === a['return'])
                    if (3 === a.tag) {
                      var d = a.stateNode
                      !ca && 0 !== Z && c < Z && b()
                      ;(ca && !Za && Ya === d) || B(d, c)
                      Fb > xg && D('185')
                    } else {
                      c = void 0
                      break a
                    }
                  a = a['return']
                }
                c = void 0
              }
              return c
            }
            function l() {
              ye = Ic() - Pc
              return (yg = ((ye / 10) | 0) + 2)
            }
            function p(a, b, c, d, e) {
              var f = ia
              ia = 1
              try {
                return a(b, c, d, e)
              } finally {
                ia = f
              }
            }
            function z(a) {
              if (0 !== Gb) {
                if (a > Gb) return
                mg(Qc)
              }
              var b = Ic() - Pc
              Gb = a
              Qc = lg(Q, { timeout: 10 * (a - 2) - b })
            }
            function B(a, b) {
              if (null === a.nextScheduledRoot)
                (a.remainingExpirationTime = b),
                  null === K
                    ? ((la = K = a), (a.nextScheduledRoot = a))
                    : ((K = K.nextScheduledRoot = a),
                      (K.nextScheduledRoot = la))
              else {
                var c = a.remainingExpirationTime
                if (0 === c || b < c) a.remainingExpirationTime = b
              }
              T ||
                (J
                  ? Hb && ((aa = a), (P = 1), G(a, 1, !1))
                  : 1 === b
                  ? n()
                  : z(b))
            }
            function r() {
              var a = 0,
                b = null
              if (null !== K)
                for (var c = K, d = la; null !== d; ) {
                  var e = d.remainingExpirationTime
                  if (0 === e) {
                    null === c || null === K ? D('244') : void 0
                    if (d === d.nextScheduledRoot) {
                      la = K = d.nextScheduledRoot = null
                      break
                    } else if (d === la)
                      (la = e = d.nextScheduledRoot),
                        (K.nextScheduledRoot = e),
                        (d.nextScheduledRoot = null)
                    else if (d === K) {
                      K = c
                      K.nextScheduledRoot = la
                      d.nextScheduledRoot = null
                      break
                    } else
                      (c.nextScheduledRoot = d.nextScheduledRoot),
                        (d.nextScheduledRoot = null)
                    d = c.nextScheduledRoot
                  } else {
                    if (0 === a || e < a) (a = e), (b = d)
                    if (d === K) break
                    c = d
                    d = d.nextScheduledRoot
                  }
                }
              c = aa
              null !== c && c === b && 1 === a ? Fb++ : (Fb = 0)
              aa = b
              P = a
            }
            function Q(a) {
              x(0, !0, a)
            }
            function n() {
              x(1, !1, null)
            }
            function x(a, b, c) {
              $a = c
              r()
              if (b)
                for (
                  ;
                  null !== aa &&
                  0 !== P &&
                  (0 === a || a >= P) &&
                  (!Ib || l() >= P);

                )
                  G(aa, P, !Ib), r()
              else
                for (; null !== aa && 0 !== P && (0 === a || a >= P); )
                  G(aa, P, !1), r()
              null !== $a && ((Gb = 0), (Qc = -1))
              0 !== P && z(P)
              $a = null
              Ib = !1
              Y()
            }
            function Y() {
              Fb = 0
              if (null !== Aa) {
                var a = Aa
                Aa = null
                for (var b = 0; b < a.length; b++) {
                  var c = a[b]
                  try {
                    c._onComplete()
                  } catch (wg) {
                    Ba || ((Ba = !0), (Jb = wg))
                  }
                }
              }
              if (Ba) throw ((a = Jb), (Jb = null), (Ba = !1), a)
            }
            function G(a, b, c) {
              T ? D('245') : void 0
              T = !0
              c
                ? ((c = a.finishedWork),
                  null !== c
                    ? R(a, c, b)
                    : ((a.finishedWork = null),
                      (c = f(a, b, !0)),
                      null !== c && (S() ? (a.finishedWork = c) : R(a, c, b))))
                : ((c = a.finishedWork),
                  null !== c
                    ? R(a, c, b)
                    : ((a.finishedWork = null),
                      (c = f(a, b, !1)),
                      null !== c && R(a, c, b)))
              T = !1
            }
            function R(a, b, c) {
              var d = a.firstBatch
              if (
                null !== d &&
                d._expirationTime <= c &&
                (null === Aa ? (Aa = [d]) : Aa.push(d), d._defer)
              ) {
                a.finishedWork = b
                a.remainingExpirationTime = 0
                return
              }
              a.finishedWork = null
              Za = ca = !0
              c = b.stateNode
              c.current === b ? D('177') : void 0
              d = c.pendingCommitExpirationTime
              0 === d ? D('261') : void 0
              c.pendingCommitExpirationTime = 0
              var e = l()
              nc.current = null
              if (1 < b.effectTag)
                if (null !== b.lastEffect) {
                  b.lastEffect.nextEffect = b
                  var f = b.firstEffect
                } else f = b
              else f = b.firstEffect
              zg(c.containerInfo)
              for (w = f; null !== w; ) {
                var h = !1,
                  k = void 0
                try {
                  for (; null !== w; )
                    w.effectTag & 2048 && Db(w.alternate, w), (w = w.nextEffect)
                } catch (ab) {
                  ;(h = !0), (k = ab)
                }
                h &&
                  (null === w ? D('178') : void 0,
                  g(w, k),
                  null !== w && (w = w.nextEffect))
              }
              for (w = f; null !== w; ) {
                h = !1
                k = void 0
                try {
                  for (; null !== w; ) {
                    var p = w.effectTag
                    p & 16 && Mc(w)
                    if (p & 128) {
                      var n = w.alternate
                      null !== n && kg(n)
                    }
                    switch (p & 14) {
                      case 2:
                        Eb(w)
                        w.effectTag &= -3
                        break
                      case 6:
                        Eb(w)
                        w.effectTag &= -3
                        we(w.alternate, w)
                        break
                      case 4:
                        we(w.alternate, w)
                        break
                      case 8:
                        gg(w)
                    }
                    w = w.nextEffect
                  }
                } catch (ab) {
                  ;(h = !0), (k = ab)
                }
                h &&
                  (null === w ? D('178') : void 0,
                  g(w, k),
                  null !== w && (w = w.nextEffect))
              }
              Ag(c.containerInfo)
              c.current = b
              for (w = f; null !== w; ) {
                p = !1
                n = void 0
                try {
                  for (f = c, h = e, k = d; null !== w; ) {
                    var r = w.effectTag
                    r & 36 && hg(f, w.alternate, w, h, k)
                    r & 256 && ig(w, q)
                    r & 128 && jg(w)
                    var t = w.nextEffect
                    w.nextEffect = null
                    w = t
                  }
                } catch (ab) {
                  ;(p = !0), (n = ab)
                }
                p &&
                  (null === w ? D('178') : void 0,
                  g(w, n),
                  null !== w && (w = w.nextEffect))
              }
              ca = Za = !1
              'function' === typeof Ie && Ie(b.stateNode)
              b = c.current.expirationTime
              0 === b && (ya = null)
              a.remainingExpirationTime = b
            }
            function S() {
              return null === $a || $a.timeRemaining() > Bg ? !1 : (Ib = !0)
            }
            function q(a) {
              null === aa ? D('246') : void 0
              aa.remainingExpirationTime = 0
              Ba || ((Ba = !0), (Jb = a))
            }
            var u = kf(),
              t = ff(a, u),
              y = hf(u)
            u = jf(u)
            var H = gf(a),
              Wa = $e(a, t, y, u, H, v, k).beginWork,
              Cb = af(a, t, y, u, H).completeWork
            t = bf(t, y, u, v, c)
            var Jc = t.throwException,
              Kc = t.unwindWork,
              Lc = t.unwindInterruptedWork
            t = df(
              a,
              g,
              v,
              k,
              function (a) {
                null === ya ? (ya = new Set([a])) : ya.add(a)
              },
              l
            )
            var Db = t.commitBeforeMutationLifeCycles,
              Mc = t.commitResetTextContent,
              Eb = t.commitPlacement,
              gg = t.commitDeletion,
              we = t.commitWork,
              hg = t.commitLifeCycles,
              ig = t.commitErrorLogging,
              jg = t.commitAttachRef,
              kg = t.commitDetachRef,
              Ic = a.now,
              lg = a.scheduleDeferredCallback,
              mg = a.cancelDeferredCallback,
              zg = a.prepareForCommit,
              Ag = a.resetAfterCommit,
              Pc = Ic(),
              yg = 2,
              ye = Pc,
              Rc = 0,
              ia = 0,
              ca = !1,
              I = null,
              Ya = null,
              Z = 0,
              w = null,
              Za = !1,
              Nc = !1,
              ya = null,
              la = null,
              K = null,
              Gb = 0,
              Qc = -1,
              T = !1,
              aa = null,
              P = 0,
              da = 0,
              Ib = !1,
              Ba = !1,
              Jb = null,
              $a = null,
              J = !1,
              Hb = !1,
              za = !1,
              Aa = null,
              xg = 1e3,
              Fb = 0,
              Bg = 1
            return {
              recalculateCurrentTime: l,
              computeExpirationForFiber: k,
              scheduleWork: v,
              requestWork: B,
              flushRoot: function (a, b) {
                T ? D('253') : void 0
                aa = a
                P = b
                G(a, b, !1)
                n()
                Y()
              },
              batchedUpdates: function (a, b) {
                var c = J
                J = !0
                try {
                  return a(b)
                } finally {
                  ;(J = c) || T || n()
                }
              },
              unbatchedUpdates: function (a, b) {
                if (J && !Hb) {
                  Hb = !0
                  try {
                    return a(b)
                  } finally {
                    Hb = !1
                  }
                }
                return a(b)
              },
              flushSync: function (a, b) {
                T ? D('187') : void 0
                var c = J
                J = !0
                try {
                  return p(a, b)
                } finally {
                  ;(J = c), n()
                }
              },
              flushControlled: function (a) {
                var b = J
                J = !0
                try {
                  p(a)
                } finally {
                  ;(J = b) || T || x(1, !1, null)
                }
              },
              deferredUpdates: function (a) {
                var b = ia
                ia = 25 * ((((l() + 500) / 25) | 0) + 1)
                try {
                  return a()
                } finally {
                  ia = b
                }
              },
              syncUpdates: p,
              interactiveUpdates: function (a, b, c) {
                if (za) return a(b, c)
                J || T || 0 === da || (x(da, !1, null), (da = 0))
                var d = za,
                  e = J
                J = za = !0
                try {
                  return a(b, c)
                } finally {
                  ;(za = d), (J = e) || T || n()
                }
              },
              flushInteractiveUpdates: function () {
                T || 0 === da || (x(da, !1, null), (da = 0))
              },
              computeUniqueAsyncExpiration: function () {
                var a = 25 * ((((l() + 500) / 25) | 0) + 1)
                a <= Rc && (a = Rc + 1)
                return (Rc = a)
              },
              legacyContext: y,
            }
          }
          function mf(a) {
            function b(a, b, c, d, e, h) {
              d = b.current
              if (c) {
                c = c._reactInternalFiber
                var l = g(c)
                c = k(c) ? v(c, l) : l
              } else c = ka
              null === b.context ? (b.context = c) : (b.pendingContext = c)
              b = h
              Pe(d, {
                expirationTime: e,
                partialState: { element: a },
                callback: void 0 === b ? null : b,
                isReplace: !1,
                isForced: !1,
                capturedValue: null,
                next: null,
              })
              f(d, e)
              return e
            }
            var c = a.getPublicInstance
            a = lf(a)
            var d = a.recalculateCurrentTime,
              e = a.computeExpirationForFiber,
              f = a.scheduleWork,
              h = a.legacyContext,
              g = h.findCurrentUnmaskedContext,
              k = h.isContextProvider,
              v = h.processChildContext
            return {
              createContainer: function (a, b, c) {
                b = new xe(3, null, null, b ? 3 : 0)
                a = {
                  current: b,
                  containerInfo: a,
                  pendingChildren: null,
                  pendingCommitExpirationTime: 0,
                  finishedWork: null,
                  context: null,
                  pendingContext: null,
                  hydrate: c,
                  remainingExpirationTime: 0,
                  firstBatch: null,
                  nextScheduledRoot: null,
                }
                return (b.stateNode = a)
              },
              updateContainer: function (a, c, f, h) {
                var g = c.current,
                  k = d()
                g = e(g)
                return b(a, c, f, k, g, h)
              },
              updateContainerAtExpirationTime: function (a, c, e, f, g) {
                var h = d()
                return b(a, c, e, h, f, g)
              },
              flushRoot: a.flushRoot,
              requestWork: a.requestWork,
              computeUniqueAsyncExpiration: a.computeUniqueAsyncExpiration,
              batchedUpdates: a.batchedUpdates,
              unbatchedUpdates: a.unbatchedUpdates,
              deferredUpdates: a.deferredUpdates,
              syncUpdates: a.syncUpdates,
              interactiveUpdates: a.interactiveUpdates,
              flushInteractiveUpdates: a.flushInteractiveUpdates,
              flushControlled: a.flushControlled,
              flushSync: a.flushSync,
              getPublicRootInstance: function (a) {
                a = a.current
                if (!a.child) return null
                switch (a.child.tag) {
                  case 5:
                    return c(a.child.stateNode)
                  default:
                    return a.child.stateNode
                }
              },
              findHostInstance: function (a) {
                var b = a._reactInternalFiber
                void 0 === b &&
                  ('function' === typeof a.render
                    ? D('188')
                    : D('268', Object.keys(a)))
                a = Bd(b)
                return null === a ? null : a.stateNode
              },
              findHostInstanceWithNoPortals: function (a) {
                a = Cd(a)
                return null === a ? null : a.stateNode
              },
              injectIntoDevTools: function (a) {
                var b = a.findFiberByHostInstance
                return He(
                  A({}, a, {
                    findHostInstanceByFiber: function (a) {
                      a = Bd(a)
                      return null === a ? null : a.stateNode
                    },
                    findFiberByHostInstance: function (a) {
                      return b ? b(a) : null
                    },
                  })
                )
              },
            }
          }
          var nf = Object.freeze({ default: mf }),
            of = (nf && mf) || nf,
            pf = of['default'] ? of['default'] : of
          function qf(a, b, c) {
            var d =
              3 < arguments.length && void 0 !== arguments[3]
                ? arguments[3]
                : null
            return {
              $$typeof: rc,
              key: null == d ? null : '' + d,
              children: a,
              containerInfo: b,
              implementation: c,
            }
          }
          var rf =
              'object' === typeof performance &&
              'function' === typeof performance.now,
            sf = void 0
          sf = rf
            ? function () {
                return performance.now()
              }
            : function () {
                return Date.now()
              }
          var tf = void 0,
            uf = void 0
          if (m.canUseDOM)
            if (
              'function' !== typeof requestIdleCallback ||
              'function' !== typeof cancelIdleCallback
            ) {
              var vf = null,
                wf = !1,
                xf = -1,
                yf = !1,
                zf = 0,
                Af = 33,
                Bf = 33,
                Cf = void 0
              Cf = rf
                ? {
                    didTimeout: !1,
                    timeRemaining: function () {
                      var a = zf - performance.now()
                      return 0 < a ? a : 0
                    },
                  }
                : {
                    didTimeout: !1,
                    timeRemaining: function () {
                      var a = zf - Date.now()
                      return 0 < a ? a : 0
                    },
                  }
              var Df =
                '__reactIdleCallback$' + Math.random().toString(36).slice(2)
              window.addEventListener(
                'message',
                function (a) {
                  if (a.source === window && a.data === Df) {
                    wf = !1
                    a = sf()
                    if (0 >= zf - a)
                      if (-1 !== xf && xf <= a) Cf.didTimeout = !0
                      else {
                        yf || ((yf = !0), requestAnimationFrame(Ef))
                        return
                      }
                    else Cf.didTimeout = !1
                    xf = -1
                    a = vf
                    vf = null
                    null !== a && a(Cf)
                  }
                },
                !1
              )
              var Ef = function (a) {
                yf = !1
                var b = a - zf + Bf
                b < Bf && Af < Bf
                  ? (8 > b && (b = 8), (Bf = b < Af ? Af : b))
                  : (Af = b)
                zf = a + Bf
                wf || ((wf = !0), window.postMessage(Df, '*'))
              }
              tf = function (a, b) {
                vf = a
                null != b &&
                  'number' === typeof b.timeout &&
                  (xf = sf() + b.timeout)
                yf || ((yf = !0), requestAnimationFrame(Ef))
                return 0
              }
              uf = function () {
                vf = null
                wf = !1
                xf = -1
              }
            } else
              (tf = window.requestIdleCallback),
                (uf = window.cancelIdleCallback)
          else
            (tf = function (a) {
              return setTimeout(function () {
                a({
                  timeRemaining: function () {
                    return Infinity
                  },
                  didTimeout: !1,
                })
              })
            }),
              (uf = function (a) {
                clearTimeout(a)
              })
          function Ff(a) {
            var b = ''
            ea.Children.forEach(a, function (a) {
              null == a ||
                ('string' !== typeof a && 'number' !== typeof a) ||
                (b += a)
            })
            return b
          }
          function Gf(a, b) {
            a = A({ children: void 0 }, b)
            if ((b = Ff(b.children))) a.children = b
            return a
          }
          function Hf(a, b, c, d) {
            a = a.options
            if (b) {
              b = {}
              for (var e = 0; e < c.length; e++) b['$' + c[e]] = !0
              for (c = 0; c < a.length; c++)
                (e = b.hasOwnProperty('$' + a[c].value)),
                  a[c].selected !== e && (a[c].selected = e),
                  e && d && (a[c].defaultSelected = !0)
            } else {
              c = '' + c
              b = null
              for (e = 0; e < a.length; e++) {
                if (a[e].value === c) {
                  a[e].selected = !0
                  d && (a[e].defaultSelected = !0)
                  return
                }
                null !== b || a[e].disabled || (b = a[e])
              }
              null !== b && (b.selected = !0)
            }
          }
          function If(a, b) {
            var c = b.value
            a._wrapperState = {
              initialValue: null != c ? c : b.defaultValue,
              wasMultiple: !!b.multiple,
            }
          }
          function Jf(a, b) {
            null != b.dangerouslySetInnerHTML ? D('91') : void 0
            return A({}, b, {
              value: void 0,
              defaultValue: void 0,
              children: '' + a._wrapperState.initialValue,
            })
          }
          function Kf(a, b) {
            var c = b.value
            null == c &&
              ((c = b.defaultValue),
              (b = b.children),
              null != b &&
                (null != c ? D('92') : void 0,
                Array.isArray(b) &&
                  (1 >= b.length ? void 0 : D('93'), (b = b[0])),
                (c = '' + b)),
              null == c && (c = ''))
            a._wrapperState = { initialValue: '' + c }
          }
          function Lf(a, b) {
            var c = b.value
            null != c &&
              ((c = '' + c),
              c !== a.value && (a.value = c),
              null == b.defaultValue && (a.defaultValue = c))
            null != b.defaultValue && (a.defaultValue = b.defaultValue)
          }
          function Mf(a) {
            var b = a.textContent
            b === a._wrapperState.initialValue && (a.value = b)
          }
          var Nf = {
            html: 'http://www.w3.org/1999/xhtml',
            mathml: 'http://www.w3.org/1998/Math/MathML',
            svg: 'http://www.w3.org/2000/svg',
          }
          function Of(a) {
            switch (a) {
              case 'svg':
                return 'http://www.w3.org/2000/svg'
              case 'math':
                return 'http://www.w3.org/1998/Math/MathML'
              default:
                return 'http://www.w3.org/1999/xhtml'
            }
          }
          function Pf(a, b) {
            return null == a || 'http://www.w3.org/1999/xhtml' === a
              ? Of(b)
              : 'http://www.w3.org/2000/svg' === a && 'foreignObject' === b
              ? 'http://www.w3.org/1999/xhtml'
              : a
          }
          var Qf = void 0,
            Rf = (function (a) {
              return 'undefined' !== typeof MSApp &&
                MSApp.execUnsafeLocalFunction
                ? function (b, c, d, e) {
                    MSApp.execUnsafeLocalFunction(function () {
                      return a(b, c, d, e)
                    })
                  }
                : a
            })(function (a, b) {
              if (a.namespaceURI !== Nf.svg || 'innerHTML' in a) a.innerHTML = b
              else {
                Qf = Qf || document.createElement('div')
                Qf.innerHTML = '\x3csvg\x3e' + b + '\x3c/svg\x3e'
                for (b = Qf.firstChild; a.firstChild; )
                  a.removeChild(a.firstChild)
                for (; b.firstChild; ) a.appendChild(b.firstChild)
              }
            })
          function Sf(a, b) {
            if (b) {
              var c = a.firstChild
              if (c && c === a.lastChild && 3 === c.nodeType) {
                c.nodeValue = b
                return
              }
            }
            a.textContent = b
          }
          var Tf = {
              animationIterationCount: !0,
              borderImageOutset: !0,
              borderImageSlice: !0,
              borderImageWidth: !0,
              boxFlex: !0,
              boxFlexGroup: !0,
              boxOrdinalGroup: !0,
              columnCount: !0,
              columns: !0,
              flex: !0,
              flexGrow: !0,
              flexPositive: !0,
              flexShrink: !0,
              flexNegative: !0,
              flexOrder: !0,
              gridRow: !0,
              gridRowEnd: !0,
              gridRowSpan: !0,
              gridRowStart: !0,
              gridColumn: !0,
              gridColumnEnd: !0,
              gridColumnSpan: !0,
              gridColumnStart: !0,
              fontWeight: !0,
              lineClamp: !0,
              lineHeight: !0,
              opacity: !0,
              order: !0,
              orphans: !0,
              tabSize: !0,
              widows: !0,
              zIndex: !0,
              zoom: !0,
              fillOpacity: !0,
              floodOpacity: !0,
              stopOpacity: !0,
              strokeDasharray: !0,
              strokeDashoffset: !0,
              strokeMiterlimit: !0,
              strokeOpacity: !0,
              strokeWidth: !0,
            },
            Uf = ['Webkit', 'ms', 'Moz', 'O']
          Object.keys(Tf).forEach(function (a) {
            Uf.forEach(function (b) {
              b = b + a.charAt(0).toUpperCase() + a.substring(1)
              Tf[b] = Tf[a]
            })
          })
          function Vf(a, b) {
            a = a.style
            for (var c in b)
              if (b.hasOwnProperty(c)) {
                var d = 0 === c.indexOf('--')
                var e = c
                var f = b[c]
                e =
                  null == f || 'boolean' === typeof f || '' === f
                    ? ''
                    : d ||
                      'number' !== typeof f ||
                      0 === f ||
                      (Tf.hasOwnProperty(e) && Tf[e])
                    ? ('' + f).trim()
                    : f + 'px'
                'float' === c && (c = 'cssFloat')
                d ? a.setProperty(c, e) : (a[c] = e)
              }
          }
          var Wf = A(
            { menuitem: !0 },
            {
              area: !0,
              base: !0,
              br: !0,
              col: !0,
              embed: !0,
              hr: !0,
              img: !0,
              input: !0,
              keygen: !0,
              link: !0,
              meta: !0,
              param: !0,
              source: !0,
              track: !0,
              wbr: !0,
            }
          )
          function Xf(a, b, c) {
            b &&
              (Wf[a] &&
                (null != b.children || null != b.dangerouslySetInnerHTML
                  ? D('137', a, c())
                  : void 0),
              null != b.dangerouslySetInnerHTML &&
                (null != b.children ? D('60') : void 0,
                'object' === typeof b.dangerouslySetInnerHTML &&
                '__html' in b.dangerouslySetInnerHTML
                  ? void 0
                  : D('61')),
              null != b.style && 'object' !== typeof b.style
                ? D('62', c())
                : void 0)
          }
          function Yf(a, b) {
            if (-1 === a.indexOf('-')) return 'string' === typeof b.is
            switch (a) {
              case 'annotation-xml':
              case 'color-profile':
              case 'font-face':
              case 'font-face-src':
              case 'font-face-uri':
              case 'font-face-format':
              case 'font-face-name':
              case 'missing-glyph':
                return !1
              default:
                return !0
            }
          }
          var Zf = C.thatReturns('')
          function $f(a, b) {
            a = 9 === a.nodeType || 11 === a.nodeType ? a : a.ownerDocument
            var c = ke(a)
            b = va[b]
            for (var d = 0; d < b.length; d++) {
              var e = b[d]
              ;(c.hasOwnProperty(e) && c[e]) ||
                ('topScroll' === e
                  ? Zd('topScroll', 'scroll', a)
                  : 'topFocus' === e || 'topBlur' === e
                  ? (Zd('topFocus', 'focus', a),
                    Zd('topBlur', 'blur', a),
                    (c.topBlur = !0),
                    (c.topFocus = !0))
                  : 'topCancel' === e
                  ? (ic('cancel', !0) && Zd('topCancel', 'cancel', a),
                    (c.topCancel = !0))
                  : 'topClose' === e
                  ? (ic('close', !0) && Zd('topClose', 'close', a),
                    (c.topClose = !0))
                  : fe.hasOwnProperty(e) && W(e, fe[e], a),
                (c[e] = !0))
            }
          }
          function ag(a, b, c, d) {
            c = 9 === c.nodeType ? c : c.ownerDocument
            d === Nf.html && (d = Of(a))
            d === Nf.html
              ? 'script' === a
                ? ((a = c.createElement('div')),
                  (a.innerHTML = '\x3cscript\x3e\x3c/script\x3e'),
                  (a = a.removeChild(a.firstChild)))
                : (a =
                    'string' === typeof b.is
                      ? c.createElement(a, { is: b.is })
                      : c.createElement(a))
              : (a = c.createElementNS(d, a))
            return a
          }
          function bg(a, b) {
            return (9 === b.nodeType ? b : b.ownerDocument).createTextNode(a)
          }
          function cg(a, b, c, d) {
            var e = Yf(b, c)
            switch (b) {
              case 'iframe':
              case 'object':
                W('topLoad', 'load', a)
                var f = c
                break
              case 'video':
              case 'audio':
                for (f in ge) ge.hasOwnProperty(f) && W(f, ge[f], a)
                f = c
                break
              case 'source':
                W('topError', 'error', a)
                f = c
                break
              case 'img':
              case 'image':
              case 'link':
                W('topError', 'error', a)
                W('topLoad', 'load', a)
                f = c
                break
              case 'form':
                W('topReset', 'reset', a)
                W('topSubmit', 'submit', a)
                f = c
                break
              case 'details':
                W('topToggle', 'toggle', a)
                f = c
                break
              case 'input':
                Wc(a, c)
                f = Vc(a, c)
                W('topInvalid', 'invalid', a)
                $f(d, 'onChange')
                break
              case 'option':
                f = Gf(a, c)
                break
              case 'select':
                If(a, c)
                f = A({}, c, { value: void 0 })
                W('topInvalid', 'invalid', a)
                $f(d, 'onChange')
                break
              case 'textarea':
                Kf(a, c)
                f = Jf(a, c)
                W('topInvalid', 'invalid', a)
                $f(d, 'onChange')
                break
              default:
                f = c
            }
            Xf(b, f, Zf)
            var h = f,
              g
            for (g in h)
              if (h.hasOwnProperty(g)) {
                var k = h[g]
                'style' === g
                  ? Vf(a, k, Zf)
                  : 'dangerouslySetInnerHTML' === g
                  ? ((k = k ? k.__html : void 0), null != k && Rf(a, k))
                  : 'children' === g
                  ? 'string' === typeof k
                    ? ('textarea' !== b || '' !== k) && Sf(a, k)
                    : 'number' === typeof k && Sf(a, '' + k)
                  : 'suppressContentEditableWarning' !== g &&
                    'suppressHydrationWarning' !== g &&
                    'autoFocus' !== g &&
                    (ua.hasOwnProperty(g)
                      ? null != k && $f(d, g)
                      : null != k && Uc(a, g, k, e))
              }
            switch (b) {
              case 'input':
                lc(a)
                ad(a, c)
                break
              case 'textarea':
                lc(a)
                Mf(a, c)
                break
              case 'option':
                null != c.value && a.setAttribute('value', c.value)
                break
              case 'select':
                a.multiple = !!c.multiple
                b = c.value
                null != b
                  ? Hf(a, !!c.multiple, b, !1)
                  : null != c.defaultValue &&
                    Hf(a, !!c.multiple, c.defaultValue, !0)
                break
              default:
                'function' === typeof f.onClick && (a.onclick = C)
            }
          }
          function dg(a, b, c, d, e) {
            var f = null
            switch (b) {
              case 'input':
                c = Vc(a, c)
                d = Vc(a, d)
                f = []
                break
              case 'option':
                c = Gf(a, c)
                d = Gf(a, d)
                f = []
                break
              case 'select':
                c = A({}, c, { value: void 0 })
                d = A({}, d, { value: void 0 })
                f = []
                break
              case 'textarea':
                c = Jf(a, c)
                d = Jf(a, d)
                f = []
                break
              default:
                'function' !== typeof c.onClick &&
                  'function' === typeof d.onClick &&
                  (a.onclick = C)
            }
            Xf(b, d, Zf)
            b = a = void 0
            var h = null
            for (a in c)
              if (!d.hasOwnProperty(a) && c.hasOwnProperty(a) && null != c[a])
                if ('style' === a) {
                  var g = c[a]
                  for (b in g)
                    g.hasOwnProperty(b) && (h || (h = {}), (h[b] = ''))
                } else
                  'dangerouslySetInnerHTML' !== a &&
                    'children' !== a &&
                    'suppressContentEditableWarning' !== a &&
                    'suppressHydrationWarning' !== a &&
                    'autoFocus' !== a &&
                    (ua.hasOwnProperty(a)
                      ? f || (f = [])
                      : (f = f || []).push(a, null))
            for (a in d) {
              var k = d[a]
              g = null != c ? c[a] : void 0
              if (d.hasOwnProperty(a) && k !== g && (null != k || null != g))
                if ('style' === a)
                  if (g) {
                    for (b in g)
                      !g.hasOwnProperty(b) ||
                        (k && k.hasOwnProperty(b)) ||
                        (h || (h = {}), (h[b] = ''))
                    for (b in k)
                      k.hasOwnProperty(b) &&
                        g[b] !== k[b] &&
                        (h || (h = {}), (h[b] = k[b]))
                  } else h || (f || (f = []), f.push(a, h)), (h = k)
                else
                  'dangerouslySetInnerHTML' === a
                    ? ((k = k ? k.__html : void 0),
                      (g = g ? g.__html : void 0),
                      null != k && g !== k && (f = f || []).push(a, '' + k))
                    : 'children' === a
                    ? g === k ||
                      ('string' !== typeof k && 'number' !== typeof k) ||
                      (f = f || []).push(a, '' + k)
                    : 'suppressContentEditableWarning' !== a &&
                      'suppressHydrationWarning' !== a &&
                      (ua.hasOwnProperty(a)
                        ? (null != k && $f(e, a), f || g === k || (f = []))
                        : (f = f || []).push(a, k))
            }
            h && (f = f || []).push('style', h)
            return f
          }
          function eg(a, b, c, d, e) {
            'input' === c && 'radio' === e.type && null != e.name && Yc(a, e)
            Yf(c, d)
            d = Yf(c, e)
            for (var f = 0; f < b.length; f += 2) {
              var h = b[f],
                g = b[f + 1]
              'style' === h
                ? Vf(a, g, Zf)
                : 'dangerouslySetInnerHTML' === h
                ? Rf(a, g)
                : 'children' === h
                ? Sf(a, g)
                : Uc(a, h, g, d)
            }
            switch (c) {
              case 'input':
                Zc(a, e)
                break
              case 'textarea':
                Lf(a, e)
                break
              case 'select':
                ;(a._wrapperState.initialValue = void 0),
                  (b = a._wrapperState.wasMultiple),
                  (a._wrapperState.wasMultiple = !!e.multiple),
                  (c = e.value),
                  null != c
                    ? Hf(a, !!e.multiple, c, !1)
                    : b !== !!e.multiple &&
                      (null != e.defaultValue
                        ? Hf(a, !!e.multiple, e.defaultValue, !0)
                        : Hf(a, !!e.multiple, e.multiple ? [] : '', !1))
            }
          }
          function fg(a, b, c, d, e) {
            switch (b) {
              case 'iframe':
              case 'object':
                W('topLoad', 'load', a)
                break
              case 'video':
              case 'audio':
                for (var f in ge) ge.hasOwnProperty(f) && W(f, ge[f], a)
                break
              case 'source':
                W('topError', 'error', a)
                break
              case 'img':
              case 'image':
              case 'link':
                W('topError', 'error', a)
                W('topLoad', 'load', a)
                break
              case 'form':
                W('topReset', 'reset', a)
                W('topSubmit', 'submit', a)
                break
              case 'details':
                W('topToggle', 'toggle', a)
                break
              case 'input':
                Wc(a, c)
                W('topInvalid', 'invalid', a)
                $f(e, 'onChange')
                break
              case 'select':
                If(a, c)
                W('topInvalid', 'invalid', a)
                $f(e, 'onChange')
                break
              case 'textarea':
                Kf(a, c), W('topInvalid', 'invalid', a), $f(e, 'onChange')
            }
            Xf(b, c, Zf)
            d = null
            for (var h in c)
              c.hasOwnProperty(h) &&
                ((f = c[h]),
                'children' === h
                  ? 'string' === typeof f
                    ? a.textContent !== f && (d = ['children', f])
                    : 'number' === typeof f &&
                      a.textContent !== '' + f &&
                      (d = ['children', '' + f])
                  : ua.hasOwnProperty(h) && null != f && $f(e, h))
            switch (b) {
              case 'input':
                lc(a)
                ad(a, c)
                break
              case 'textarea':
                lc(a)
                Mf(a, c)
                break
              case 'select':
              case 'option':
                break
              default:
                'function' === typeof c.onClick && (a.onclick = C)
            }
            return d
          }
          function ng(a, b) {
            return a.nodeValue !== b
          }
          var og = Object.freeze({
            createElement: ag,
            createTextNode: bg,
            setInitialProperties: cg,
            diffProperties: dg,
            updateProperties: eg,
            diffHydratedProperties: fg,
            diffHydratedText: ng,
            warnForUnmatchedText: function () {},
            warnForDeletedHydratableElement: function () {},
            warnForDeletedHydratableText: function () {},
            warnForInsertedHydratedElement: function () {},
            warnForInsertedHydratedText: function () {},
            restoreControlledState: function (a, b, c) {
              switch (b) {
                case 'input':
                  Zc(a, c)
                  b = c.name
                  if ('radio' === c.type && null != b) {
                    for (c = a; c.parentNode; ) c = c.parentNode
                    c = c.querySelectorAll(
                      'input[name\x3d' +
                        JSON.stringify('' + b) +
                        '][type\x3d"radio"]'
                    )
                    for (b = 0; b < c.length; b++) {
                      var d = c[b]
                      if (d !== a && d.form === a.form) {
                        var e = Xa(d)
                        e ? void 0 : D('90')
                        mc(d)
                        Zc(d, e)
                      }
                    }
                  }
                  break
                case 'textarea':
                  Lf(a, c)
                  break
                case 'select':
                  ;(b = c.value), null != b && Hf(a, !!c.multiple, b, !1)
              }
            },
          })
          Tb.injectFiberControlledHostComponent(og)
          var pg = null,
            qg = null
          function rg(a) {
            this._expirationTime = X.computeUniqueAsyncExpiration()
            this._root = a
            this._callbacks = this._next = null
            this._hasChildren = this._didComplete = !1
            this._children = null
            this._defer = !0
          }
          rg.prototype.render = function (a) {
            this._defer ? void 0 : D('250')
            this._hasChildren = !0
            this._children = a
            var b = this._root._internalRoot,
              c = this._expirationTime,
              d = new sg()
            X.updateContainerAtExpirationTime(a, b, null, c, d._onCommit)
            return d
          }
          rg.prototype.then = function (a) {
            if (this._didComplete) a()
            else {
              var b = this._callbacks
              null === b && (b = this._callbacks = [])
              b.push(a)
            }
          }
          rg.prototype.commit = function () {
            var a = this._root._internalRoot,
              b = a.firstBatch
            this._defer && null !== b ? void 0 : D('251')
            if (this._hasChildren) {
              var c = this._expirationTime
              if (b !== this) {
                this._hasChildren &&
                  ((c = this._expirationTime = b._expirationTime),
                  this.render(this._children))
                for (var d = null, e = b; e !== this; ) (d = e), (e = e._next)
                null === d ? D('251') : void 0
                d._next = e._next
                this._next = b
                a.firstBatch = this
              }
              this._defer = !1
              X.flushRoot(a, c)
              b = this._next
              this._next = null
              b = a.firstBatch = b
              null !== b && b._hasChildren && b.render(b._children)
            } else (this._next = null), (this._defer = !1)
          }
          rg.prototype._onComplete = function () {
            if (!this._didComplete) {
              this._didComplete = !0
              var a = this._callbacks
              if (null !== a) for (var b = 0; b < a.length; b++) (0, a[b])()
            }
          }
          function sg() {
            this._callbacks = null
            this._didCommit = !1
            this._onCommit = this._onCommit.bind(this)
          }
          sg.prototype.then = function (a) {
            if (this._didCommit) a()
            else {
              var b = this._callbacks
              null === b && (b = this._callbacks = [])
              b.push(a)
            }
          }
          sg.prototype._onCommit = function () {
            if (!this._didCommit) {
              this._didCommit = !0
              var a = this._callbacks
              if (null !== a)
                for (var b = 0; b < a.length; b++) {
                  var c = a[b]
                  'function' !== typeof c ? D('191', c) : void 0
                  c()
                }
            }
          }
          function tg(a, b, c) {
            this._internalRoot = X.createContainer(a, b, c)
          }
          tg.prototype.render = function (a, b) {
            var c = this._internalRoot,
              d = new sg()
            b = void 0 === b ? null : b
            null !== b && d.then(b)
            X.updateContainer(a, c, null, d._onCommit)
            return d
          }
          tg.prototype.unmount = function (a) {
            var b = this._internalRoot,
              c = new sg()
            a = void 0 === a ? null : a
            null !== a && c.then(a)
            X.updateContainer(null, b, null, c._onCommit)
            return c
          }
          tg.prototype.legacy_renderSubtreeIntoContainer = function (a, b, c) {
            var d = this._internalRoot,
              e = new sg()
            c = void 0 === c ? null : c
            null !== c && e.then(c)
            X.updateContainer(b, d, a, e._onCommit)
            return e
          }
          tg.prototype.createBatch = function () {
            var a = new rg(this),
              b = a._expirationTime,
              c = this._internalRoot,
              d = c.firstBatch
            if (null === d) (c.firstBatch = a), (a._next = null)
            else {
              for (c = null; null !== d && d._expirationTime <= b; )
                (c = d), (d = d._next)
              a._next = d
              null !== c && (c._next = a)
            }
            return a
          }
          function ug(a) {
            return !(
              !a ||
              (1 !== a.nodeType &&
                9 !== a.nodeType &&
                11 !== a.nodeType &&
                (8 !== a.nodeType ||
                  ' react-mount-point-unstable ' !== a.nodeValue))
            )
          }
          function vg(a, b) {
            switch (a) {
              case 'button':
              case 'input':
              case 'select':
              case 'textarea':
                return !!b.autoFocus
            }
            return !1
          }
          var X = pf({
              getRootHostContext: function (a) {
                var b = a.nodeType
                switch (b) {
                  case 9:
                  case 11:
                    a = (a = a.documentElement) ? a.namespaceURI : Pf(null, '')
                    break
                  default:
                    ;(b = 8 === b ? a.parentNode : a),
                      (a = b.namespaceURI || null),
                      (b = b.tagName),
                      (a = Pf(a, b))
                }
                return a
              },
              getChildHostContext: function (a, b) {
                return Pf(a, b)
              },
              getPublicInstance: function (a) {
                return a
              },
              prepareForCommit: function () {
                pg = Vd
                var a = fa()
                if (ne(a)) {
                  if ('selectionStart' in a)
                    var b = { start: a.selectionStart, end: a.selectionEnd }
                  else
                    a: {
                      var c = window.getSelection && window.getSelection()
                      if (c && 0 !== c.rangeCount) {
                        b = c.anchorNode
                        var d = c.anchorOffset,
                          e = c.focusNode
                        c = c.focusOffset
                        try {
                          b.nodeType, e.nodeType
                        } catch (B) {
                          b = null
                          break a
                        }
                        var f = 0,
                          h = -1,
                          g = -1,
                          k = 0,
                          v = 0,
                          l = a,
                          p = null
                        b: for (;;) {
                          for (var z; ; ) {
                            l !== b ||
                              (0 !== d && 3 !== l.nodeType) ||
                              (h = f + d)
                            l !== e ||
                              (0 !== c && 3 !== l.nodeType) ||
                              (g = f + c)
                            3 === l.nodeType && (f += l.nodeValue.length)
                            if (null === (z = l.firstChild)) break
                            p = l
                            l = z
                          }
                          for (;;) {
                            if (l === a) break b
                            p === b && ++k === d && (h = f)
                            p === e && ++v === c && (g = f)
                            if (null !== (z = l.nextSibling)) break
                            l = p
                            p = l.parentNode
                          }
                          l = z
                        }
                        b = -1 === h || -1 === g ? null : { start: h, end: g }
                      } else b = null
                    }
                  b = b || { start: 0, end: 0 }
                } else b = null
                qg = { focusedElem: a, selectionRange: b }
                Wd(!1)
              },
              resetAfterCommit: function () {
                var a = qg,
                  b = fa(),
                  c = a.focusedElem,
                  d = a.selectionRange
                if (b !== c && ja(document.documentElement, c)) {
                  if (ne(c))
                    if (
                      ((b = d.start),
                      (a = d.end),
                      void 0 === a && (a = b),
                      'selectionStart' in c)
                    )
                      (c.selectionStart = b),
                        (c.selectionEnd = Math.min(a, c.value.length))
                    else if (window.getSelection) {
                      b = window.getSelection()
                      var e = c[mb()].length
                      a = Math.min(d.start, e)
                      d = void 0 === d.end ? a : Math.min(d.end, e)
                      !b.extend && a > d && ((e = d), (d = a), (a = e))
                      e = me(c, a)
                      var f = me(c, d)
                      if (
                        e &&
                        f &&
                        (1 !== b.rangeCount ||
                          b.anchorNode !== e.node ||
                          b.anchorOffset !== e.offset ||
                          b.focusNode !== f.node ||
                          b.focusOffset !== f.offset)
                      ) {
                        var h = document.createRange()
                        h.setStart(e.node, e.offset)
                        b.removeAllRanges()
                        a > d
                          ? (b.addRange(h), b.extend(f.node, f.offset))
                          : (h.setEnd(f.node, f.offset), b.addRange(h))
                      }
                    }
                  b = []
                  for (a = c; (a = a.parentNode); )
                    1 === a.nodeType &&
                      b.push({
                        element: a,
                        left: a.scrollLeft,
                        top: a.scrollTop,
                      })
                  c.focus()
                  for (c = 0; c < b.length; c++)
                    (a = b[c]),
                      (a.element.scrollLeft = a.left),
                      (a.element.scrollTop = a.top)
                }
                qg = null
                Wd(pg)
                pg = null
              },
              createInstance: function (a, b, c, d, e) {
                a = ag(a, b, c, d)
                a[F] = e
                a[Ta] = b
                return a
              },
              appendInitialChild: function (a, b) {
                a.appendChild(b)
              },
              finalizeInitialChildren: function (a, b, c, d) {
                cg(a, b, c, d)
                return vg(b, c)
              },
              prepareUpdate: function (a, b, c, d, e) {
                return dg(a, b, c, d, e)
              },
              shouldSetTextContent: function (a, b) {
                return (
                  'textarea' === a ||
                  'string' === typeof b.children ||
                  'number' === typeof b.children ||
                  ('object' === typeof b.dangerouslySetInnerHTML &&
                    null !== b.dangerouslySetInnerHTML &&
                    'string' === typeof b.dangerouslySetInnerHTML.__html)
                )
              },
              shouldDeprioritizeSubtree: function (a, b) {
                return !!b.hidden
              },
              createTextInstance: function (a, b, c, d) {
                a = bg(a, b)
                a[F] = d
                return a
              },
              now: sf,
              mutation: {
                commitMount: function (a, b, c) {
                  vg(b, c) && a.focus()
                },
                commitUpdate: function (a, b, c, d, e) {
                  a[Ta] = e
                  eg(a, b, c, d, e)
                },
                resetTextContent: function (a) {
                  Sf(a, '')
                },
                commitTextUpdate: function (a, b, c) {
                  a.nodeValue = c
                },
                appendChild: function (a, b) {
                  a.appendChild(b)
                },
                appendChildToContainer: function (a, b) {
                  8 === a.nodeType
                    ? a.parentNode.insertBefore(b, a)
                    : a.appendChild(b)
                },
                insertBefore: function (a, b, c) {
                  a.insertBefore(b, c)
                },
                insertInContainerBefore: function (a, b, c) {
                  8 === a.nodeType
                    ? a.parentNode.insertBefore(b, c)
                    : a.insertBefore(b, c)
                },
                removeChild: function (a, b) {
                  a.removeChild(b)
                },
                removeChildFromContainer: function (a, b) {
                  8 === a.nodeType
                    ? a.parentNode.removeChild(b)
                    : a.removeChild(b)
                },
              },
              hydration: {
                canHydrateInstance: function (a, b) {
                  return 1 !== a.nodeType ||
                    b.toLowerCase() !== a.nodeName.toLowerCase()
                    ? null
                    : a
                },
                canHydrateTextInstance: function (a, b) {
                  return '' === b || 3 !== a.nodeType ? null : a
                },
                getNextHydratableSibling: function (a) {
                  for (
                    a = a.nextSibling;
                    a && 1 !== a.nodeType && 3 !== a.nodeType;

                  )
                    a = a.nextSibling
                  return a
                },
                getFirstHydratableChild: function (a) {
                  for (
                    a = a.firstChild;
                    a && 1 !== a.nodeType && 3 !== a.nodeType;

                  )
                    a = a.nextSibling
                  return a
                },
                hydrateInstance: function (a, b, c, d, e, f) {
                  a[F] = f
                  a[Ta] = c
                  return fg(a, b, c, e, d)
                },
                hydrateTextInstance: function (a, b, c) {
                  a[F] = c
                  return ng(a, b)
                },
                didNotMatchHydratedContainerTextInstance: function () {},
                didNotMatchHydratedTextInstance: function () {},
                didNotHydrateContainerInstance: function () {},
                didNotHydrateInstance: function () {},
                didNotFindHydratableContainerInstance: function () {},
                didNotFindHydratableContainerTextInstance: function () {},
                didNotFindHydratableInstance: function () {},
                didNotFindHydratableTextInstance: function () {},
              },
              scheduleDeferredCallback: tf,
              cancelDeferredCallback: uf,
            }),
            Cg = X
          ac = Cg.batchedUpdates
          bc = Cg.interactiveUpdates
          cc = Cg.flushInteractiveUpdates
          function Dg(a, b) {
            b ||
              ((b = a
                ? 9 === a.nodeType
                  ? a.documentElement
                  : a.firstChild
                : null),
              (b = !(
                !b ||
                1 !== b.nodeType ||
                !b.hasAttribute('data-reactroot')
              )))
            if (!b) for (var c; (c = a.lastChild); ) a.removeChild(c)
            return new tg(a, !1, b)
          }
          function Eg(a, b, c, d, e) {
            ug(c) ? void 0 : D('200')
            var f = c._reactRootContainer
            if (f) {
              if ('function' === typeof e) {
                var h = e
                e = function () {
                  var a = X.getPublicRootInstance(f._internalRoot)
                  h.call(a)
                }
              }
              null != a
                ? f.legacy_renderSubtreeIntoContainer(a, b, e)
                : f.render(b, e)
            } else {
              f = c._reactRootContainer = Dg(c, d)
              if ('function' === typeof e) {
                var g = e
                e = function () {
                  var a = X.getPublicRootInstance(f._internalRoot)
                  g.call(a)
                }
              }
              X.unbatchedUpdates(function () {
                null != a
                  ? f.legacy_renderSubtreeIntoContainer(a, b, e)
                  : f.render(b, e)
              })
            }
            return X.getPublicRootInstance(f._internalRoot)
          }
          function Fg(a, b) {
            var c =
              2 < arguments.length && void 0 !== arguments[2]
                ? arguments[2]
                : null
            ug(b) ? void 0 : D('200')
            return qf(a, b, null, c)
          }
          var Gg = {
            createPortal: Fg,
            findDOMNode: function (a) {
              return null == a
                ? null
                : 1 === a.nodeType
                ? a
                : X.findHostInstance(a)
            },
            hydrate: function (a, b, c) {
              return Eg(null, a, b, !0, c)
            },
            render: function (a, b, c) {
              return Eg(null, a, b, !1, c)
            },
            unstable_renderSubtreeIntoContainer: function (a, b, c, d) {
              null == a || void 0 === a._reactInternalFiber ? D('38') : void 0
              return Eg(a, b, c, !1, d)
            },
            unmountComponentAtNode: function (a) {
              ug(a) ? void 0 : D('40')
              return a._reactRootContainer
                ? (X.unbatchedUpdates(function () {
                    Eg(null, null, a, !1, function () {
                      a._reactRootContainer = null
                    })
                  }),
                  !0)
                : !1
            },
            unstable_createPortal: function () {
              return Fg.apply(void 0, arguments)
            },
            unstable_batchedUpdates: X.batchedUpdates,
            unstable_deferredUpdates: X.deferredUpdates,
            flushSync: X.flushSync,
            unstable_flushControlled: X.flushControlled,
            __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED: {
              EventPluginHub: Ra,
              EventPluginRegistry: Ca,
              EventPropagators: kb,
              ReactControlledComponent: $b,
              ReactDOMComponentTree: bb,
              ReactDOMEventListener: $d,
            },
            unstable_createRoot: function (a, b) {
              return new tg(a, !0, null != b && !0 === b.hydrate)
            },
          }
          X.injectIntoDevTools({
            findFiberByHostInstance: Ua,
            bundleType: 0,
            version: '16.3.3',
            rendererPackageName: 'react-dom',
          })
          var Hg = Object.freeze({ default: Gg }),
            Ig = (Hg && Gg) || Hg
          module.exports = Ig['default'] ? Ig['default'] : Ig
        },
        {
          'fbjs/lib/ExecutionEnvironment': 27,
          'fbjs/lib/containsNode': 30,
          'fbjs/lib/emptyFunction': 31,
          'fbjs/lib/emptyObject': 32,
          'fbjs/lib/getActiveElement': 33,
          'fbjs/lib/invariant': 36,
          'fbjs/lib/shallowEqual': 39,
          'object-assign': 41,
          react: 46,
        },
      ],
      26: [
        function (require, module, exports) {
          ;(function (process) {
            'use strict'

            function checkDCE() {
              /* global __REACT_DEVTOOLS_GLOBAL_HOOK__ */
              if (
                typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === 'undefined' ||
                typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE !== 'function'
              ) {
                return
              }
              if (process.env.NODE_ENV !== 'production') {
                // This branch is unreachable because this function is only called
                // in production, but the condition is true only in development.
                // Therefore if the branch is still here, dead code elimination wasn't
                // properly applied.
                // Don't change the message. React DevTools relies on it. Also make sure
                // this message doesn't occur elsewhere in this function, or it will cause
                // a false positive.
                throw new Error('^_^')
              }
              try {
                // Verify that the code above has been dead code eliminated (DCE'd).
                __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(checkDCE)
              } catch (err) {
                // DevTools shouldn't crash React, no matter what.
                // We should still report in case we break this code.
                console.error(err)
              }
            }

            if (process.env.NODE_ENV === 'production') {
              // DCE check should happen before ReactDOM bundle executes so that
              // DevTools can report bad minification during injection.
              checkDCE()
              module.exports = require('./cjs/react-dom.production.min.js')
            } else {
              module.exports = require('./cjs/react-dom.development.js')
            }
          }.call(this, require('_process')))
        },
        {
          './cjs/react-dom.development.js': 24,
          './cjs/react-dom.production.min.js': 25,
          _process: 13,
        },
      ],
      27: [
        function (require, module, exports) {
          /**
           * Copyright (c) 2013-present, Facebook, Inc.
           *
           * This source code is licensed under the MIT license found in the
           * LICENSE file in the root directory of this source tree.
           *
           */

          'use strict'

          var canUseDOM = !!(
            typeof window !== 'undefined' &&
            window.document &&
            window.document.createElement
          )

          /**
           * Simple, lightweight module assisting with the detection and context of
           * Worker. Helps avoid circular dependencies and allows code to reason about
           * whether or not they are in a Worker, even if they never include the main
           * `ReactWorker` dependency.
           */
          var ExecutionEnvironment = {
            canUseDOM: canUseDOM,

            canUseWorkers: typeof Worker !== 'undefined',

            canUseEventListeners:
              canUseDOM && !!(window.addEventListener || window.attachEvent),

            canUseViewport: canUseDOM && !!window.screen,

            isInWorker: !canUseDOM, // For now, this is true - might change in the future.
          }

          module.exports = ExecutionEnvironment
        },
        {},
      ],
      28: [
        function (require, module, exports) {
          'use strict'

          /**
           * Copyright (c) 2013-present, Facebook, Inc.
           *
           * This source code is licensed under the MIT license found in the
           * LICENSE file in the root directory of this source tree.
           *
           * @typechecks
           */

          var _hyphenPattern = /-(.)/g

          /**
           * Camelcases a hyphenated string, for example:
           *
           *   > camelize('background-color')
           *   < "backgroundColor"
           *
           * @param {string} string
           * @return {string}
           */
          function camelize(string) {
            return string.replace(_hyphenPattern, function (_, character) {
              return character.toUpperCase()
            })
          }

          module.exports = camelize
        },
        {},
      ],
      29: [
        function (require, module, exports) {
          /**
           * Copyright (c) 2013-present, Facebook, Inc.
           *
           * This source code is licensed under the MIT license found in the
           * LICENSE file in the root directory of this source tree.
           *
           * @typechecks
           */

          'use strict'

          var camelize = require('./camelize')

          var msPattern = /^-ms-/

          /**
           * Camelcases a hyphenated CSS property name, for example:
           *
           *   > camelizeStyleName('background-color')
           *   < "backgroundColor"
           *   > camelizeStyleName('-moz-transition')
           *   < "MozTransition"
           *   > camelizeStyleName('-ms-transition')
           *   < "msTransition"
           *
           * As Andi Smith suggests
           * (http://www.andismith.com/blog/2012/02/modernizr-prefixed/), an `-ms` prefix
           * is converted to lowercase `ms`.
           *
           * @param {string} string
           * @return {string}
           */
          function camelizeStyleName(string) {
            return camelize(string.replace(msPattern, 'ms-'))
          }

          module.exports = camelizeStyleName
        },
        { './camelize': 28 },
      ],
      30: [
        function (require, module, exports) {
          'use strict'

          /**
           * Copyright (c) 2013-present, Facebook, Inc.
           *
           * This source code is licensed under the MIT license found in the
           * LICENSE file in the root directory of this source tree.
           *
           *
           */

          var isTextNode = require('./isTextNode')

          /*eslint-disable no-bitwise */

          /**
           * Checks if a given DOM node contains or is another DOM node.
           */
          function containsNode(outerNode, innerNode) {
            if (!outerNode || !innerNode) {
              return false
            } else if (outerNode === innerNode) {
              return true
            } else if (isTextNode(outerNode)) {
              return false
            } else if (isTextNode(innerNode)) {
              return containsNode(outerNode, innerNode.parentNode)
            } else if ('contains' in outerNode) {
              return outerNode.contains(innerNode)
            } else if (outerNode.compareDocumentPosition) {
              return !!(outerNode.compareDocumentPosition(innerNode) & 16)
            } else {
              return false
            }
          }

          module.exports = containsNode
        },
        { './isTextNode': 38 },
      ],
      31: [
        function (require, module, exports) {
          'use strict'

          /**
           * Copyright (c) 2013-present, Facebook, Inc.
           *
           * This source code is licensed under the MIT license found in the
           * LICENSE file in the root directory of this source tree.
           *
           *
           */

          function makeEmptyFunction(arg) {
            return function () {
              return arg
            }
          }

          /**
           * This function accepts and discards inputs; it has no side effects. This is
           * primarily useful idiomatically for overridable function endpoints which
           * always need to be callable, since JS lacks a null-call idiom ala Cocoa.
           */
          var emptyFunction = function emptyFunction() {}

          emptyFunction.thatReturns = makeEmptyFunction
          emptyFunction.thatReturnsFalse = makeEmptyFunction(false)
          emptyFunction.thatReturnsTrue = makeEmptyFunction(true)
          emptyFunction.thatReturnsNull = makeEmptyFunction(null)
          emptyFunction.thatReturnsThis = function () {
            return this
          }
          emptyFunction.thatReturnsArgument = function (arg) {
            return arg
          }

          module.exports = emptyFunction
        },
        {},
      ],
      32: [
        function (require, module, exports) {
          ;(function (process) {
            /**
             * Copyright (c) 2013-present, Facebook, Inc.
             *
             * This source code is licensed under the MIT license found in the
             * LICENSE file in the root directory of this source tree.
             *
             */

            'use strict'

            var emptyObject = {}

            if (process.env.NODE_ENV !== 'production') {
              Object.freeze(emptyObject)
            }

            module.exports = emptyObject
          }.call(this, require('_process')))
        },
        { _process: 13 },
      ],
      33: [
        function (require, module, exports) {
          'use strict'

          /**
           * Copyright (c) 2013-present, Facebook, Inc.
           *
           * This source code is licensed under the MIT license found in the
           * LICENSE file in the root directory of this source tree.
           *
           * @typechecks
           */

          /* eslint-disable fb-www/typeof-undefined */

          /**
           * Same as document.activeElement but wraps in a try-catch block. In IE it is
           * not safe to call document.activeElement if there is nothing focused.
           *
           * The activeElement will be null only if the document or document body is not
           * yet defined.
           *
           * @param {?DOMDocument} doc Defaults to current document.
           * @return {?DOMElement}
           */
          function getActiveElement(doc) /*?DOMElement*/ {
            doc =
              doc || (typeof document !== 'undefined' ? document : undefined)
            if (typeof doc === 'undefined') {
              return null
            }
            try {
              return doc.activeElement || doc.body
            } catch (e) {
              return doc.body
            }
          }

          module.exports = getActiveElement
        },
        {},
      ],
      34: [
        function (require, module, exports) {
          'use strict'

          /**
           * Copyright (c) 2013-present, Facebook, Inc.
           *
           * This source code is licensed under the MIT license found in the
           * LICENSE file in the root directory of this source tree.
           *
           * @typechecks
           */

          var _uppercasePattern = /([A-Z])/g

          /**
           * Hyphenates a camelcased string, for example:
           *
           *   > hyphenate('backgroundColor')
           *   < "background-color"
           *
           * For CSS style names, use `hyphenateStyleName` instead which works properly
           * with all vendor prefixes, including `ms`.
           *
           * @param {string} string
           * @return {string}
           */
          function hyphenate(string) {
            return string.replace(_uppercasePattern, '-$1').toLowerCase()
          }

          module.exports = hyphenate
        },
        {},
      ],
      35: [
        function (require, module, exports) {
          /**
           * Copyright (c) 2013-present, Facebook, Inc.
           *
           * This source code is licensed under the MIT license found in the
           * LICENSE file in the root directory of this source tree.
           *
           * @typechecks
           */

          'use strict'

          var hyphenate = require('./hyphenate')

          var msPattern = /^ms-/

          /**
           * Hyphenates a camelcased CSS property name, for example:
           *
           *   > hyphenateStyleName('backgroundColor')
           *   < "background-color"
           *   > hyphenateStyleName('MozTransition')
           *   < "-moz-transition"
           *   > hyphenateStyleName('msTransition')
           *   < "-ms-transition"
           *
           * As Modernizr suggests (http://modernizr.com/docs/#prefixed), an `ms` prefix
           * is converted to `-ms-`.
           *
           * @param {string} string
           * @return {string}
           */
          function hyphenateStyleName(string) {
            return hyphenate(string).replace(msPattern, '-ms-')
          }

          module.exports = hyphenateStyleName
        },
        { './hyphenate': 34 },
      ],
      36: [
        function (require, module, exports) {
          ;(function (process) {
            /**
             * Copyright (c) 2013-present, Facebook, Inc.
             *
             * This source code is licensed under the MIT license found in the
             * LICENSE file in the root directory of this source tree.
             *
             */

            'use strict'

            /**
             * Use invariant() to assert state which your program assumes to be true.
             *
             * Provide sprintf-style format (only %s is supported) and arguments
             * to provide information about what broke and what you were
             * expecting.
             *
             * The invariant message will be stripped in production, but the invariant
             * will remain to ensure logic does not differ in production.
             */

            var validateFormat = function validateFormat(format) {}

            if (process.env.NODE_ENV !== 'production') {
              validateFormat = function validateFormat(format) {
                if (format === undefined) {
                  throw new Error(
                    'invariant requires an error message argument'
                  )
                }
              }
            }

            function invariant(condition, format, a, b, c, d, e, f) {
              validateFormat(format)

              if (!condition) {
                var error
                if (format === undefined) {
                  error = new Error(
                    'Minified exception occurred; use the non-minified dev environment ' +
                      'for the full error message and additional helpful warnings.'
                  )
                } else {
                  var args = [a, b, c, d, e, f]
                  var argIndex = 0
                  error = new Error(
                    format.replace(/%s/g, function () {
                      return args[argIndex++]
                    })
                  )
                  error.name = 'Invariant Violation'
                }

                error.framesToPop = 1 // we don't care about invariant's own frame
                throw error
              }
            }

            module.exports = invariant
          }.call(this, require('_process')))
        },
        { _process: 13 },
      ],
      37: [
        function (require, module, exports) {
          'use strict'

          /**
           * Copyright (c) 2013-present, Facebook, Inc.
           *
           * This source code is licensed under the MIT license found in the
           * LICENSE file in the root directory of this source tree.
           *
           * @typechecks
           */

          /**
           * @param {*} object The object to check.
           * @return {boolean} Whether or not the object is a DOM node.
           */
          function isNode(object) {
            var doc = object ? object.ownerDocument || object : document
            var defaultView = doc.defaultView || window
            return !!(
              object &&
              (typeof defaultView.Node === 'function'
                ? object instanceof defaultView.Node
                : typeof object === 'object' &&
                  typeof object.nodeType === 'number' &&
                  typeof object.nodeName === 'string')
            )
          }

          module.exports = isNode
        },
        {},
      ],
      38: [
        function (require, module, exports) {
          'use strict'

          /**
           * Copyright (c) 2013-present, Facebook, Inc.
           *
           * This source code is licensed under the MIT license found in the
           * LICENSE file in the root directory of this source tree.
           *
           * @typechecks
           */

          var isNode = require('./isNode')

          /**
           * @param {*} object The object to check.
           * @return {boolean} Whether or not the object is a DOM text node.
           */
          function isTextNode(object) {
            return isNode(object) && object.nodeType == 3
          }

          module.exports = isTextNode
        },
        { './isNode': 37 },
      ],
      39: [
        function (require, module, exports) {
          /**
           * Copyright (c) 2013-present, Facebook, Inc.
           *
           * This source code is licensed under the MIT license found in the
           * LICENSE file in the root directory of this source tree.
           *
           * @typechecks
           *
           */

          /*eslint-disable no-self-compare */

          'use strict'

          var hasOwnProperty = Object.prototype.hasOwnProperty

          /**
           * inlined Object.is polyfill to avoid requiring consumers ship their own
           * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is
           */
          function is(x, y) {
            // SameValue algorithm
            if (x === y) {
              // Steps 1-5, 7-10
              // Steps 6.b-6.e: +0 != -0
              // Added the nonzero y check to make Flow happy, but it is redundant
              return x !== 0 || y !== 0 || 1 / x === 1 / y
            } else {
              // Step 6.a: NaN == NaN
              return x !== x && y !== y
            }
          }

          /**
           * Performs equality by iterating through keys on an object and returning false
           * when any key has values which are not strictly equal between the arguments.
           * Returns true when the values of all keys are strictly equal.
           */
          function shallowEqual(objA, objB) {
            if (is(objA, objB)) {
              return true
            }

            if (
              typeof objA !== 'object' ||
              objA === null ||
              typeof objB !== 'object' ||
              objB === null
            ) {
              return false
            }

            var keysA = Object.keys(objA)
            var keysB = Object.keys(objB)

            if (keysA.length !== keysB.length) {
              return false
            }

            // Test for A's keys different from B.
            for (var i = 0; i < keysA.length; i++) {
              if (
                !hasOwnProperty.call(objB, keysA[i]) ||
                !is(objA[keysA[i]], objB[keysA[i]])
              ) {
                return false
              }
            }

            return true
          }

          module.exports = shallowEqual
        },
        {},
      ],
      40: [
        function (require, module, exports) {
          ;(function (process) {
            /**
             * Copyright (c) 2014-present, Facebook, Inc.
             *
             * This source code is licensed under the MIT license found in the
             * LICENSE file in the root directory of this source tree.
             *
             */

            'use strict'

            var emptyFunction = require('./emptyFunction')

            /**
             * Similar to invariant but only logs a warning if the condition is not met.
             * This can be used to log issues in development environments in critical
             * paths. Removing the logging code for production environments will keep the
             * same logic and follow the same code paths.
             */

            var warning = emptyFunction

            if (process.env.NODE_ENV !== 'production') {
              var printWarning = function printWarning(format) {
                for (
                  var _len = arguments.length,
                    args = Array(_len > 1 ? _len - 1 : 0),
                    _key = 1;
                  _key < _len;
                  _key++
                ) {
                  args[_key - 1] = arguments[_key]
                }

                var argIndex = 0
                var message =
                  'Warning: ' +
                  format.replace(/%s/g, function () {
                    return args[argIndex++]
                  })
                if (typeof console !== 'undefined') {
                  console.error(message)
                }
                try {
                  // --- Welcome to debugging React ---
                  // This error was thrown as a convenience so that you can use this stack
                  // to find the callsite that caused this warning to fire.
                  throw new Error(message)
                } catch (x) {}
              }

              warning = function warning(condition, format) {
                if (format === undefined) {
                  throw new Error(
                    '`warning(condition, format, ...args)` requires a warning ' +
                      'message argument'
                  )
                }

                if (format.indexOf('Failed Composite propType: ') === 0) {
                  return // Ignore CompositeComponent proptype check.
                }

                if (!condition) {
                  for (
                    var _len2 = arguments.length,
                      args = Array(_len2 > 2 ? _len2 - 2 : 0),
                      _key2 = 2;
                    _key2 < _len2;
                    _key2++
                  ) {
                    args[_key2 - 2] = arguments[_key2]
                  }

                  printWarning.apply(undefined, [format].concat(args))
                }
              }
            }

            module.exports = warning
          }.call(this, require('_process')))
        },
        { './emptyFunction': 31, _process: 13 },
      ],
      41: [
        function (require, module, exports) {
          /*
object-assign
(c) Sindre Sorhus
@license MIT
*/

          'use strict'
          /* eslint-disable no-unused-vars */
          var getOwnPropertySymbols = Object.getOwnPropertySymbols
          var hasOwnProperty = Object.prototype.hasOwnProperty
          var propIsEnumerable = Object.prototype.propertyIsEnumerable

          function toObject(val) {
            if (val === null || val === undefined) {
              throw new TypeError(
                'Object.assign cannot be called with null or undefined'
              )
            }

            return Object(val)
          }

          function shouldUseNative() {
            try {
              if (!Object.assign) {
                return false
              }

              // Detect buggy property enumeration order in older V8 versions.

              // https://bugs.chromium.org/p/v8/issues/detail?id=4118
              var test1 = new String('abc') // eslint-disable-line no-new-wrappers
              test1[5] = 'de'
              if (Object.getOwnPropertyNames(test1)[0] === '5') {
                return false
              }

              // https://bugs.chromium.org/p/v8/issues/detail?id=3056
              var test2 = {}
              for (var i = 0; i < 10; i++) {
                test2['_' + String.fromCharCode(i)] = i
              }
              var order2 = Object.getOwnPropertyNames(test2).map(function (n) {
                return test2[n]
              })
              if (order2.join('') !== '0123456789') {
                return false
              }

              // https://bugs.chromium.org/p/v8/issues/detail?id=3056
              var test3 = {}
              'abcdefghijklmnopqrst'.split('').forEach(function (letter) {
                test3[letter] = letter
              })
              if (
                Object.keys(Object.assign({}, test3)).join('') !==
                'abcdefghijklmnopqrst'
              ) {
                return false
              }

              return true
            } catch (err) {
              // We don't expect any of the above to throw, but better to be safe.
              return false
            }
          }

          module.exports = shouldUseNative()
            ? Object.assign
            : function (target, source) {
                var from
                var to = toObject(target)
                var symbols

                for (var s = 1; s < arguments.length; s++) {
                  from = Object(arguments[s])

                  for (var key in from) {
                    if (hasOwnProperty.call(from, key)) {
                      to[key] = from[key]
                    }
                  }

                  if (getOwnPropertySymbols) {
                    symbols = getOwnPropertySymbols(from)
                    for (var i = 0; i < symbols.length; i++) {
                      if (propIsEnumerable.call(from, symbols[i])) {
                        to[symbols[i]] = from[symbols[i]]
                      }
                    }
                  }
                }

                return to
              }
        },
        {},
      ],
      42: [
        function (require, module, exports) {
          ;(function (process) {
            /**
             * Copyright (c) 2013-present, Facebook, Inc.
             *
             * This source code is licensed under the MIT license found in the
             * LICENSE file in the root directory of this source tree.
             */

            'use strict'

            var printWarning = function () {}

            if (process.env.NODE_ENV !== 'production') {
              var ReactPropTypesSecret = require('./lib/ReactPropTypesSecret')
              var loggedTypeFailures = {}

              printWarning = function (text) {
                var message = 'Warning: ' + text
                if (typeof console !== 'undefined') {
                  console.error(message)
                }
                try {
                  // --- Welcome to debugging React ---
                  // This error was thrown as a convenience so that you can use this stack
                  // to find the callsite that caused this warning to fire.
                  throw new Error(message)
                } catch (x) {}
              }
            }

            /**
             * Assert that the values match with the type specs.
             * Error messages are memorized and will only be shown once.
             *
             * @param {object} typeSpecs Map of name to a ReactPropType
             * @param {object} values Runtime values that need to be type-checked
             * @param {string} location e.g. "prop", "context", "child context"
             * @param {string} componentName Name of the component for error messages.
             * @param {?Function} getStack Returns the component stack.
             * @private
             */
            function checkPropTypes(
              typeSpecs,
              values,
              location,
              componentName,
              getStack
            ) {
              if (process.env.NODE_ENV !== 'production') {
                for (var typeSpecName in typeSpecs) {
                  if (typeSpecs.hasOwnProperty(typeSpecName)) {
                    var error
                    // Prop type validation may throw. In case they do, we don't want to
                    // fail the render phase where it didn't fail before. So we log it.
                    // After these have been cleaned up, we'll let them throw.
                    try {
                      // This is intentionally an invariant that gets caught. It's the same
                      // behavior as without this statement except with a better message.
                      if (typeof typeSpecs[typeSpecName] !== 'function') {
                        var err = Error(
                          (componentName || 'React class') +
                            ': ' +
                            location +
                            ' type `' +
                            typeSpecName +
                            '` is invalid; ' +
                            'it must be a function, usually from the `prop-types` package, but received `' +
                            typeof typeSpecs[typeSpecName] +
                            '`.'
                        )
                        err.name = 'Invariant Violation'
                        throw err
                      }
                      error = typeSpecs[typeSpecName](
                        values,
                        typeSpecName,
                        componentName,
                        location,
                        null,
                        ReactPropTypesSecret
                      )
                    } catch (ex) {
                      error = ex
                    }
                    if (error && !(error instanceof Error)) {
                      printWarning(
                        (componentName || 'React class') +
                          ': type specification of ' +
                          location +
                          ' `' +
                          typeSpecName +
                          '` is invalid; the type checker ' +
                          'function must return `null` or an `Error` but returned a ' +
                          typeof error +
                          '. ' +
                          'You may have forgotten to pass an argument to the type checker ' +
                          'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' +
                          'shape all require an argument).'
                      )
                    }
                    if (
                      error instanceof Error &&
                      !(error.message in loggedTypeFailures)
                    ) {
                      // Only monitor this failure once because there tends to be a lot of the
                      // same error.
                      loggedTypeFailures[error.message] = true

                      var stack = getStack ? getStack() : ''

                      printWarning(
                        'Failed ' +
                          location +
                          ' type: ' +
                          error.message +
                          (stack != null ? stack : '')
                      )
                    }
                  }
                }
              }
            }

            module.exports = checkPropTypes
          }.call(this, require('_process')))
        },
        { './lib/ReactPropTypesSecret': 43, _process: 13 },
      ],
      43: [
        function (require, module, exports) {
          /**
           * Copyright (c) 2013-present, Facebook, Inc.
           *
           * This source code is licensed under the MIT license found in the
           * LICENSE file in the root directory of this source tree.
           */

          'use strict'

          var ReactPropTypesSecret =
            'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED'

          module.exports = ReactPropTypesSecret
        },
        {},
      ],
      44: [
        function (require, module, exports) {
          ;(function (process) {
            /** @license React v16.3.2
             * react.development.js
             *
             * Copyright (c) 2013-present, Facebook, Inc.
             *
             * This source code is licensed under the MIT license found in the
             * LICENSE file in the root directory of this source tree.
             */

            'use strict'

            if (process.env.NODE_ENV !== 'production') {
              ;(function () {
                'use strict'

                var _assign = require('object-assign')
                var invariant = require('fbjs/lib/invariant')
                var emptyObject = require('fbjs/lib/emptyObject')
                var warning = require('fbjs/lib/warning')
                var emptyFunction = require('fbjs/lib/emptyFunction')
                var checkPropTypes = require('prop-types/checkPropTypes')

                // TODO: this is special because it gets imported during build.

                var ReactVersion = '16.3.2'

                // The Symbol used to tag the ReactElement-like types. If there is no native Symbol
                // nor polyfill, then a plain number is used for performance.
                var hasSymbol = typeof Symbol === 'function' && Symbol['for']

                var REACT_ELEMENT_TYPE = hasSymbol
                  ? Symbol['for']('react.element')
                  : 0xeac7
                var REACT_CALL_TYPE = hasSymbol
                  ? Symbol['for']('react.call')
                  : 0xeac8
                var REACT_RETURN_TYPE = hasSymbol
                  ? Symbol['for']('react.return')
                  : 0xeac9
                var REACT_PORTAL_TYPE = hasSymbol
                  ? Symbol['for']('react.portal')
                  : 0xeaca
                var REACT_FRAGMENT_TYPE = hasSymbol
                  ? Symbol['for']('react.fragment')
                  : 0xeacb
                var REACT_STRICT_MODE_TYPE = hasSymbol
                  ? Symbol['for']('react.strict_mode')
                  : 0xeacc
                var REACT_PROVIDER_TYPE = hasSymbol
                  ? Symbol['for']('react.provider')
                  : 0xeacd
                var REACT_CONTEXT_TYPE = hasSymbol
                  ? Symbol['for']('react.context')
                  : 0xeace
                var REACT_ASYNC_MODE_TYPE = hasSymbol
                  ? Symbol['for']('react.async_mode')
                  : 0xeacf
                var REACT_FORWARD_REF_TYPE = hasSymbol
                  ? Symbol['for']('react.forward_ref')
                  : 0xead0

                var MAYBE_ITERATOR_SYMBOL =
                  typeof Symbol === 'function' && Symbol.iterator
                var FAUX_ITERATOR_SYMBOL = '@@iterator'

                function getIteratorFn(maybeIterable) {
                  if (
                    maybeIterable === null ||
                    typeof maybeIterable === 'undefined'
                  ) {
                    return null
                  }
                  var maybeIterator =
                    (MAYBE_ITERATOR_SYMBOL &&
                      maybeIterable[MAYBE_ITERATOR_SYMBOL]) ||
                    maybeIterable[FAUX_ITERATOR_SYMBOL]
                  if (typeof maybeIterator === 'function') {
                    return maybeIterator
                  }
                  return null
                }

                // Relying on the `invariant()` implementation lets us
                // have preserve the format and params in the www builds.

                /**
                 * Forked from fbjs/warning:
                 * https://github.com/facebook/fbjs/blob/e66ba20ad5be433eb54423f2b097d829324d9de6/packages/fbjs/src/__forks__/warning.js
                 *
                 * Only change is we use console.warn instead of console.error,
                 * and do nothing when 'console' is not supported.
                 * This really simplifies the code.
                 * ---
                 * Similar to invariant but only logs a warning if the condition is not met.
                 * This can be used to log issues in development environments in critical
                 * paths. Removing the logging code for production environments will keep the
                 * same logic and follow the same code paths.
                 */

                var lowPriorityWarning = function () {}

                {
                  var printWarning = function (format) {
                    for (
                      var _len = arguments.length,
                        args = Array(_len > 1 ? _len - 1 : 0),
                        _key = 1;
                      _key < _len;
                      _key++
                    ) {
                      args[_key - 1] = arguments[_key]
                    }

                    var argIndex = 0
                    var message =
                      'Warning: ' +
                      format.replace(/%s/g, function () {
                        return args[argIndex++]
                      })
                    if (typeof console !== 'undefined') {
                      console.warn(message)
                    }
                    try {
                      // --- Welcome to debugging React ---
                      // This error was thrown as a convenience so that you can use this stack
                      // to find the callsite that caused this warning to fire.
                      throw new Error(message)
                    } catch (x) {}
                  }

                  lowPriorityWarning = function (condition, format) {
                    if (format === undefined) {
                      throw new Error(
                        '`warning(condition, format, ...args)` requires a warning ' +
                          'message argument'
                      )
                    }
                    if (!condition) {
                      for (
                        var _len2 = arguments.length,
                          args = Array(_len2 > 2 ? _len2 - 2 : 0),
                          _key2 = 2;
                        _key2 < _len2;
                        _key2++
                      ) {
                        args[_key2 - 2] = arguments[_key2]
                      }

                      printWarning.apply(undefined, [format].concat(args))
                    }
                  }
                }

                var lowPriorityWarning$1 = lowPriorityWarning

                var didWarnStateUpdateForUnmountedComponent = {}

                function warnNoop(publicInstance, callerName) {
                  {
                    var _constructor = publicInstance.constructor
                    var componentName =
                      (_constructor &&
                        (_constructor.displayName || _constructor.name)) ||
                      'ReactClass'
                    var warningKey = componentName + '.' + callerName
                    if (didWarnStateUpdateForUnmountedComponent[warningKey]) {
                      return
                    }
                    warning(
                      false,
                      "Can't call %s on a component that is not yet mounted. " +
                        'This is a no-op, but it might indicate a bug in your application. ' +
                        'Instead, assign to `this.state` directly or define a `state = {};` ' +
                        'class property with the desired state in the %s component.',
                      callerName,
                      componentName
                    )
                    didWarnStateUpdateForUnmountedComponent[warningKey] = true
                  }
                }

                /**
                 * This is the abstract API for an update queue.
                 */
                var ReactNoopUpdateQueue = {
                  /**
                   * Checks whether or not this composite component is mounted.
                   * @param {ReactClass} publicInstance The instance we want to test.
                   * @return {boolean} True if mounted, false otherwise.
                   * @protected
                   * @final
                   */
                  isMounted: function (publicInstance) {
                    return false
                  },

                  /**
                   * Forces an update. This should only be invoked when it is known with
                   * certainty that we are **not** in a DOM transaction.
                   *
                   * You may want to call this when you know that some deeper aspect of the
                   * component's state has changed but `setState` was not called.
                   *
                   * This will not invoke `shouldComponentUpdate`, but it will invoke
                   * `componentWillUpdate` and `componentDidUpdate`.
                   *
                   * @param {ReactClass} publicInstance The instance that should rerender.
                   * @param {?function} callback Called after component is updated.
                   * @param {?string} callerName name of the calling function in the public API.
                   * @internal
                   */
                  enqueueForceUpdate: function (
                    publicInstance,
                    callback,
                    callerName
                  ) {
                    warnNoop(publicInstance, 'forceUpdate')
                  },

                  /**
                   * Replaces all of the state. Always use this or `setState` to mutate state.
                   * You should treat `this.state` as immutable.
                   *
                   * There is no guarantee that `this.state` will be immediately updated, so
                   * accessing `this.state` after calling this method may return the old value.
                   *
                   * @param {ReactClass} publicInstance The instance that should rerender.
                   * @param {object} completeState Next state.
                   * @param {?function} callback Called after component is updated.
                   * @param {?string} callerName name of the calling function in the public API.
                   * @internal
                   */
                  enqueueReplaceState: function (
                    publicInstance,
                    completeState,
                    callback,
                    callerName
                  ) {
                    warnNoop(publicInstance, 'replaceState')
                  },

                  /**
                   * Sets a subset of the state. This only exists because _pendingState is
                   * internal. This provides a merging strategy that is not available to deep
                   * properties which is confusing. TODO: Expose pendingState or don't use it
                   * during the merge.
                   *
                   * @param {ReactClass} publicInstance The instance that should rerender.
                   * @param {object} partialState Next partial state to be merged with state.
                   * @param {?function} callback Called after component is updated.
                   * @param {?string} Name of the calling function in the public API.
                   * @internal
                   */
                  enqueueSetState: function (
                    publicInstance,
                    partialState,
                    callback,
                    callerName
                  ) {
                    warnNoop(publicInstance, 'setState')
                  },
                }

                /**
                 * Base class helpers for the updating state of a component.
                 */
                function Component(props, context, updater) {
                  this.props = props
                  this.context = context
                  this.refs = emptyObject
                  // We initialize the default updater but the real one gets injected by the
                  // renderer.
                  this.updater = updater || ReactNoopUpdateQueue
                }

                Component.prototype.isReactComponent = {}

                /**
                 * Sets a subset of the state. Always use this to mutate
                 * state. You should treat `this.state` as immutable.
                 *
                 * There is no guarantee that `this.state` will be immediately updated, so
                 * accessing `this.state` after calling this method may return the old value.
                 *
                 * There is no guarantee that calls to `setState` will run synchronously,
                 * as they may eventually be batched together.  You can provide an optional
                 * callback that will be executed when the call to setState is actually
                 * completed.
                 *
                 * When a function is provided to setState, it will be called at some point in
                 * the future (not synchronously). It will be called with the up to date
                 * component arguments (state, props, context). These values can be different
                 * from this.* because your function may be called after receiveProps but before
                 * shouldComponentUpdate, and this new state, props, and context will not yet be
                 * assigned to this.
                 *
                 * @param {object|function} partialState Next partial state or function to
                 *        produce next partial state to be merged with current state.
                 * @param {?function} callback Called after state is updated.
                 * @final
                 * @protected
                 */
                Component.prototype.setState = function (
                  partialState,
                  callback
                ) {
                  !(
                    typeof partialState === 'object' ||
                    typeof partialState === 'function' ||
                    partialState == null
                  )
                    ? invariant(
                        false,
                        'setState(...): takes an object of state variables to update or a function which returns an object of state variables.'
                      )
                    : void 0
                  this.updater.enqueueSetState(
                    this,
                    partialState,
                    callback,
                    'setState'
                  )
                }

                /**
                 * Forces an update. This should only be invoked when it is known with
                 * certainty that we are **not** in a DOM transaction.
                 *
                 * You may want to call this when you know that some deeper aspect of the
                 * component's state has changed but `setState` was not called.
                 *
                 * This will not invoke `shouldComponentUpdate`, but it will invoke
                 * `componentWillUpdate` and `componentDidUpdate`.
                 *
                 * @param {?function} callback Called after update is complete.
                 * @final
                 * @protected
                 */
                Component.prototype.forceUpdate = function (callback) {
                  this.updater.enqueueForceUpdate(this, callback, 'forceUpdate')
                }

                /**
                 * Deprecated APIs. These APIs used to exist on classic React classes but since
                 * we would like to deprecate them, we're not going to move them over to this
                 * modern base class. Instead, we define a getter that warns if it's accessed.
                 */
                {
                  var deprecatedAPIs = {
                    isMounted: [
                      'isMounted',
                      'Instead, make sure to clean up subscriptions and pending requests in ' +
                        'componentWillUnmount to prevent memory leaks.',
                    ],
                    replaceState: [
                      'replaceState',
                      'Refactor your code to use setState instead (see ' +
                        'https://github.com/facebook/react/issues/3236).',
                    ],
                  }
                  var defineDeprecationWarning = function (methodName, info) {
                    Object.defineProperty(Component.prototype, methodName, {
                      get: function () {
                        lowPriorityWarning$1(
                          false,
                          '%s(...) is deprecated in plain JavaScript React classes. %s',
                          info[0],
                          info[1]
                        )
                        return undefined
                      },
                    })
                  }
                  for (var fnName in deprecatedAPIs) {
                    if (deprecatedAPIs.hasOwnProperty(fnName)) {
                      defineDeprecationWarning(fnName, deprecatedAPIs[fnName])
                    }
                  }
                }

                function ComponentDummy() {}
                ComponentDummy.prototype = Component.prototype

                /**
                 * Convenience component with default shallow equality check for sCU.
                 */
                function PureComponent(props, context, updater) {
                  this.props = props
                  this.context = context
                  this.refs = emptyObject
                  this.updater = updater || ReactNoopUpdateQueue
                }

                var pureComponentPrototype = (PureComponent.prototype = new ComponentDummy())
                pureComponentPrototype.constructor = PureComponent
                // Avoid an extra prototype jump for these methods.
                _assign(pureComponentPrototype, Component.prototype)
                pureComponentPrototype.isPureReactComponent = true

                // an immutable object with a single mutable value
                function createRef() {
                  var refObject = {
                    current: null,
                  }
                  {
                    Object.seal(refObject)
                  }
                  return refObject
                }

                /**
                 * Keeps track of the current owner.
                 *
                 * The current owner is the component who should own any components that are
                 * currently being constructed.
                 */
                var ReactCurrentOwner = {
                  /**
                   * @internal
                   * @type {ReactComponent}
                   */
                  current: null,
                }

                var hasOwnProperty = Object.prototype.hasOwnProperty

                var RESERVED_PROPS = {
                  key: true,
                  ref: true,
                  __self: true,
                  __source: true,
                }

                var specialPropKeyWarningShown = void 0
                var specialPropRefWarningShown = void 0

                function hasValidRef(config) {
                  {
                    if (hasOwnProperty.call(config, 'ref')) {
                      var getter = Object.getOwnPropertyDescriptor(
                        config,
                        'ref'
                      ).get
                      if (getter && getter.isReactWarning) {
                        return false
                      }
                    }
                  }
                  return config.ref !== undefined
                }

                function hasValidKey(config) {
                  {
                    if (hasOwnProperty.call(config, 'key')) {
                      var getter = Object.getOwnPropertyDescriptor(
                        config,
                        'key'
                      ).get
                      if (getter && getter.isReactWarning) {
                        return false
                      }
                    }
                  }
                  return config.key !== undefined
                }

                function defineKeyPropWarningGetter(props, displayName) {
                  var warnAboutAccessingKey = function () {
                    if (!specialPropKeyWarningShown) {
                      specialPropKeyWarningShown = true
                      warning(
                        false,
                        '%s: `key` is not a prop. Trying to access it will result ' +
                          'in `undefined` being returned. If you need to access the same ' +
                          'value within the child component, you should pass it as a different ' +
                          'prop. (https://fb.me/react-special-props)',
                        displayName
                      )
                    }
                  }
                  warnAboutAccessingKey.isReactWarning = true
                  Object.defineProperty(props, 'key', {
                    get: warnAboutAccessingKey,
                    configurable: true,
                  })
                }

                function defineRefPropWarningGetter(props, displayName) {
                  var warnAboutAccessingRef = function () {
                    if (!specialPropRefWarningShown) {
                      specialPropRefWarningShown = true
                      warning(
                        false,
                        '%s: `ref` is not a prop. Trying to access it will result ' +
                          'in `undefined` being returned. If you need to access the same ' +
                          'value within the child component, you should pass it as a different ' +
                          'prop. (https://fb.me/react-special-props)',
                        displayName
                      )
                    }
                  }
                  warnAboutAccessingRef.isReactWarning = true
                  Object.defineProperty(props, 'ref', {
                    get: warnAboutAccessingRef,
                    configurable: true,
                  })
                }

                /**
                 * Factory method to create a new React element. This no longer adheres to
                 * the class pattern, so do not use new to call it. Also, no instanceof check
                 * will work. Instead test $$typeof field against Symbol.for('react.element') to check
                 * if something is a React Element.
                 *
                 * @param {*} type
                 * @param {*} key
                 * @param {string|object} ref
                 * @param {*} self A *temporary* helper to detect places where `this` is
                 * different from the `owner` when React.createElement is called, so that we
                 * can warn. We want to get rid of owner and replace string `ref`s with arrow
                 * functions, and as long as `this` and owner are the same, there will be no
                 * change in behavior.
                 * @param {*} source An annotation object (added by a transpiler or otherwise)
                 * indicating filename, line number, and/or other information.
                 * @param {*} owner
                 * @param {*} props
                 * @internal
                 */
                var ReactElement = function (
                  type,
                  key,
                  ref,
                  self,
                  source,
                  owner,
                  props
                ) {
                  var element = {
                    // This tag allows us to uniquely identify this as a React Element
                    $$typeof: REACT_ELEMENT_TYPE,

                    // Built-in properties that belong on the element
                    type: type,
                    key: key,
                    ref: ref,
                    props: props,

                    // Record the component responsible for creating this element.
                    _owner: owner,
                  }

                  {
                    // The validation flag is currently mutative. We put it on
                    // an external backing store so that we can freeze the whole object.
                    // This can be replaced with a WeakMap once they are implemented in
                    // commonly used development environments.
                    element._store = {}

                    // To make comparing ReactElements easier for testing purposes, we make
                    // the validation flag non-enumerable (where possible, which should
                    // include every environment we run tests in), so the test framework
                    // ignores it.
                    Object.defineProperty(element._store, 'validated', {
                      configurable: false,
                      enumerable: false,
                      writable: true,
                      value: false,
                    })
                    // self and source are DEV only properties.
                    Object.defineProperty(element, '_self', {
                      configurable: false,
                      enumerable: false,
                      writable: false,
                      value: self,
                    })
                    // Two elements created in two different places should be considered
                    // equal for testing purposes and therefore we hide it from enumeration.
                    Object.defineProperty(element, '_source', {
                      configurable: false,
                      enumerable: false,
                      writable: false,
                      value: source,
                    })
                    if (Object.freeze) {
                      Object.freeze(element.props)
                      Object.freeze(element)
                    }
                  }

                  return element
                }

                /**
                 * Create and return a new ReactElement of the given type.
                 * See https://reactjs.org/docs/react-api.html#createelement
                 */
                function createElement(type, config, children) {
                  var propName = void 0

                  // Reserved names are extracted
                  var props = {}

                  var key = null
                  var ref = null
                  var self = null
                  var source = null

                  if (config != null) {
                    if (hasValidRef(config)) {
                      ref = config.ref
                    }
                    if (hasValidKey(config)) {
                      key = '' + config.key
                    }

                    self = config.__self === undefined ? null : config.__self
                    source =
                      config.__source === undefined ? null : config.__source
                    // Remaining properties are added to a new props object
                    for (propName in config) {
                      if (
                        hasOwnProperty.call(config, propName) &&
                        !RESERVED_PROPS.hasOwnProperty(propName)
                      ) {
                        props[propName] = config[propName]
                      }
                    }
                  }

                  // Children can be more than one argument, and those are transferred onto
                  // the newly allocated props object.
                  var childrenLength = arguments.length - 2
                  if (childrenLength === 1) {
                    props.children = children
                  } else if (childrenLength > 1) {
                    var childArray = Array(childrenLength)
                    for (var i = 0; i < childrenLength; i++) {
                      childArray[i] = arguments[i + 2]
                    }
                    {
                      if (Object.freeze) {
                        Object.freeze(childArray)
                      }
                    }
                    props.children = childArray
                  }

                  // Resolve default props
                  if (type && type.defaultProps) {
                    var defaultProps = type.defaultProps
                    for (propName in defaultProps) {
                      if (props[propName] === undefined) {
                        props[propName] = defaultProps[propName]
                      }
                    }
                  }
                  {
                    if (key || ref) {
                      if (
                        typeof props.$$typeof === 'undefined' ||
                        props.$$typeof !== REACT_ELEMENT_TYPE
                      ) {
                        var displayName =
                          typeof type === 'function'
                            ? type.displayName || type.name || 'Unknown'
                            : type
                        if (key) {
                          defineKeyPropWarningGetter(props, displayName)
                        }
                        if (ref) {
                          defineRefPropWarningGetter(props, displayName)
                        }
                      }
                    }
                  }
                  return ReactElement(
                    type,
                    key,
                    ref,
                    self,
                    source,
                    ReactCurrentOwner.current,
                    props
                  )
                }

                /**
                 * Return a function that produces ReactElements of a given type.
                 * See https://reactjs.org/docs/react-api.html#createfactory
                 */

                function cloneAndReplaceKey(oldElement, newKey) {
                  var newElement = ReactElement(
                    oldElement.type,
                    newKey,
                    oldElement.ref,
                    oldElement._self,
                    oldElement._source,
                    oldElement._owner,
                    oldElement.props
                  )

                  return newElement
                }

                /**
                 * Clone and return a new ReactElement using element as the starting point.
                 * See https://reactjs.org/docs/react-api.html#cloneelement
                 */
                function cloneElement(element, config, children) {
                  !!(element === null || element === undefined)
                    ? invariant(
                        false,
                        'React.cloneElement(...): The argument must be a React element, but you passed %s.',
                        element
                      )
                    : void 0

                  var propName = void 0

                  // Original props are copied
                  var props = _assign({}, element.props)

                  // Reserved names are extracted
                  var key = element.key
                  var ref = element.ref
                  // Self is preserved since the owner is preserved.
                  var self = element._self
                  // Source is preserved since cloneElement is unlikely to be targeted by a
                  // transpiler, and the original source is probably a better indicator of the
                  // true owner.
                  var source = element._source

                  // Owner will be preserved, unless ref is overridden
                  var owner = element._owner

                  if (config != null) {
                    if (hasValidRef(config)) {
                      // Silently steal the ref from the parent.
                      ref = config.ref
                      owner = ReactCurrentOwner.current
                    }
                    if (hasValidKey(config)) {
                      key = '' + config.key
                    }

                    // Remaining properties override existing props
                    var defaultProps = void 0
                    if (element.type && element.type.defaultProps) {
                      defaultProps = element.type.defaultProps
                    }
                    for (propName in config) {
                      if (
                        hasOwnProperty.call(config, propName) &&
                        !RESERVED_PROPS.hasOwnProperty(propName)
                      ) {
                        if (
                          config[propName] === undefined &&
                          defaultProps !== undefined
                        ) {
                          // Resolve default props
                          props[propName] = defaultProps[propName]
                        } else {
                          props[propName] = config[propName]
                        }
                      }
                    }
                  }

                  // Children can be more than one argument, and those are transferred onto
                  // the newly allocated props object.
                  var childrenLength = arguments.length - 2
                  if (childrenLength === 1) {
                    props.children = children
                  } else if (childrenLength > 1) {
                    var childArray = Array(childrenLength)
                    for (var i = 0; i < childrenLength; i++) {
                      childArray[i] = arguments[i + 2]
                    }
                    props.children = childArray
                  }

                  return ReactElement(
                    element.type,
                    key,
                    ref,
                    self,
                    source,
                    owner,
                    props
                  )
                }

                /**
                 * Verifies the object is a ReactElement.
                 * See https://reactjs.org/docs/react-api.html#isvalidelement
                 * @param {?object} object
                 * @return {boolean} True if `object` is a valid component.
                 * @final
                 */
                function isValidElement(object) {
                  return (
                    typeof object === 'object' &&
                    object !== null &&
                    object.$$typeof === REACT_ELEMENT_TYPE
                  )
                }

                var ReactDebugCurrentFrame = {}

                {
                  // Component that is being worked on
                  ReactDebugCurrentFrame.getCurrentStack = null

                  ReactDebugCurrentFrame.getStackAddendum = function () {
                    var impl = ReactDebugCurrentFrame.getCurrentStack
                    if (impl) {
                      return impl()
                    }
                    return null
                  }
                }

                var SEPARATOR = '.'
                var SUBSEPARATOR = ':'

                /**
                 * Escape and wrap key so it is safe to use as a reactid
                 *
                 * @param {string} key to be escaped.
                 * @return {string} the escaped key.
                 */
                function escape(key) {
                  var escapeRegex = /[=:]/g
                  var escaperLookup = {
                    '=': '=0',
                    ':': '=2',
                  }
                  var escapedString = ('' + key).replace(escapeRegex, function (
                    match
                  ) {
                    return escaperLookup[match]
                  })

                  return '$' + escapedString
                }

                /**
                 * TODO: Test that a single child and an array with one item have the same key
                 * pattern.
                 */

                var didWarnAboutMaps = false

                var userProvidedKeyEscapeRegex = /\/+/g
                function escapeUserProvidedKey(text) {
                  return ('' + text).replace(userProvidedKeyEscapeRegex, '$&/')
                }

                var POOL_SIZE = 10
                var traverseContextPool = []
                function getPooledTraverseContext(
                  mapResult,
                  keyPrefix,
                  mapFunction,
                  mapContext
                ) {
                  if (traverseContextPool.length) {
                    var traverseContext = traverseContextPool.pop()
                    traverseContext.result = mapResult
                    traverseContext.keyPrefix = keyPrefix
                    traverseContext.func = mapFunction
                    traverseContext.context = mapContext
                    traverseContext.count = 0
                    return traverseContext
                  } else {
                    return {
                      result: mapResult,
                      keyPrefix: keyPrefix,
                      func: mapFunction,
                      context: mapContext,
                      count: 0,
                    }
                  }
                }

                function releaseTraverseContext(traverseContext) {
                  traverseContext.result = null
                  traverseContext.keyPrefix = null
                  traverseContext.func = null
                  traverseContext.context = null
                  traverseContext.count = 0
                  if (traverseContextPool.length < POOL_SIZE) {
                    traverseContextPool.push(traverseContext)
                  }
                }

                /**
                 * @param {?*} children Children tree container.
                 * @param {!string} nameSoFar Name of the key path so far.
                 * @param {!function} callback Callback to invoke with each child found.
                 * @param {?*} traverseContext Used to pass information throughout the traversal
                 * process.
                 * @return {!number} The number of children in this subtree.
                 */
                function traverseAllChildrenImpl(
                  children,
                  nameSoFar,
                  callback,
                  traverseContext
                ) {
                  var type = typeof children

                  if (type === 'undefined' || type === 'boolean') {
                    // All of the above are perceived as null.
                    children = null
                  }

                  var invokeCallback = false

                  if (children === null) {
                    invokeCallback = true
                  } else {
                    switch (type) {
                      case 'string':
                      case 'number':
                        invokeCallback = true
                        break
                      case 'object':
                        switch (children.$$typeof) {
                          case REACT_ELEMENT_TYPE:
                          case REACT_PORTAL_TYPE:
                            invokeCallback = true
                        }
                    }
                  }

                  if (invokeCallback) {
                    callback(
                      traverseContext,
                      children,
                      // If it's the only child, treat the name as if it was wrapped in an array
                      // so that it's consistent if the number of children grows.
                      nameSoFar === ''
                        ? SEPARATOR + getComponentKey(children, 0)
                        : nameSoFar
                    )
                    return 1
                  }

                  var child = void 0
                  var nextName = void 0
                  var subtreeCount = 0 // Count of children found in the current subtree.
                  var nextNamePrefix =
                    nameSoFar === '' ? SEPARATOR : nameSoFar + SUBSEPARATOR

                  if (Array.isArray(children)) {
                    for (var i = 0; i < children.length; i++) {
                      child = children[i]
                      nextName = nextNamePrefix + getComponentKey(child, i)
                      subtreeCount += traverseAllChildrenImpl(
                        child,
                        nextName,
                        callback,
                        traverseContext
                      )
                    }
                  } else {
                    var iteratorFn = getIteratorFn(children)
                    if (typeof iteratorFn === 'function') {
                      {
                        // Warn about using Maps as children
                        if (iteratorFn === children.entries) {
                          !didWarnAboutMaps
                            ? warning(
                                false,
                                'Using Maps as children is unsupported and will likely yield ' +
                                  'unexpected results. Convert it to a sequence/iterable of keyed ' +
                                  'ReactElements instead.%s',
                                ReactDebugCurrentFrame.getStackAddendum()
                              )
                            : void 0
                          didWarnAboutMaps = true
                        }
                      }

                      var iterator = iteratorFn.call(children)
                      var step = void 0
                      var ii = 0
                      while (!(step = iterator.next()).done) {
                        child = step.value
                        nextName = nextNamePrefix + getComponentKey(child, ii++)
                        subtreeCount += traverseAllChildrenImpl(
                          child,
                          nextName,
                          callback,
                          traverseContext
                        )
                      }
                    } else if (type === 'object') {
                      var addendum = ''
                      {
                        addendum =
                          ' If you meant to render a collection of children, use an array ' +
                          'instead.' +
                          ReactDebugCurrentFrame.getStackAddendum()
                      }
                      var childrenString = '' + children
                      invariant(
                        false,
                        'Objects are not valid as a React child (found: %s).%s',
                        childrenString === '[object Object]'
                          ? 'object with keys {' +
                              Object.keys(children).join(', ') +
                              '}'
                          : childrenString,
                        addendum
                      )
                    }
                  }

                  return subtreeCount
                }

                /**
                 * Traverses children that are typically specified as `props.children`, but
                 * might also be specified through attributes:
                 *
                 * - `traverseAllChildren(this.props.children, ...)`
                 * - `traverseAllChildren(this.props.leftPanelChildren, ...)`
                 *
                 * The `traverseContext` is an optional argument that is passed through the
                 * entire traversal. It can be used to store accumulations or anything else that
                 * the callback might find relevant.
                 *
                 * @param {?*} children Children tree object.
                 * @param {!function} callback To invoke upon traversing each child.
                 * @param {?*} traverseContext Context for traversal.
                 * @return {!number} The number of children in this subtree.
                 */
                function traverseAllChildren(
                  children,
                  callback,
                  traverseContext
                ) {
                  if (children == null) {
                    return 0
                  }

                  return traverseAllChildrenImpl(
                    children,
                    '',
                    callback,
                    traverseContext
                  )
                }

                /**
                 * Generate a key string that identifies a component within a set.
                 *
                 * @param {*} component A component that could contain a manual key.
                 * @param {number} index Index that is used if a manual key is not provided.
                 * @return {string}
                 */
                function getComponentKey(component, index) {
                  // Do some typechecking here since we call this blindly. We want to ensure
                  // that we don't block potential future ES APIs.
                  if (
                    typeof component === 'object' &&
                    component !== null &&
                    component.key != null
                  ) {
                    // Explicit key
                    return escape(component.key)
                  }
                  // Implicit key determined by the index in the set
                  return index.toString(36)
                }

                function forEachSingleChild(bookKeeping, child, name) {
                  var func = bookKeeping.func,
                    context = bookKeeping.context

                  func.call(context, child, bookKeeping.count++)
                }

                /**
                 * Iterates through children that are typically specified as `props.children`.
                 *
                 * See https://reactjs.org/docs/react-api.html#react.children.foreach
                 *
                 * The provided forEachFunc(child, index) will be called for each
                 * leaf child.
                 *
                 * @param {?*} children Children tree container.
                 * @param {function(*, int)} forEachFunc
                 * @param {*} forEachContext Context for forEachContext.
                 */
                function forEachChildren(
                  children,
                  forEachFunc,
                  forEachContext
                ) {
                  if (children == null) {
                    return children
                  }
                  var traverseContext = getPooledTraverseContext(
                    null,
                    null,
                    forEachFunc,
                    forEachContext
                  )
                  traverseAllChildren(
                    children,
                    forEachSingleChild,
                    traverseContext
                  )
                  releaseTraverseContext(traverseContext)
                }

                function mapSingleChildIntoContext(
                  bookKeeping,
                  child,
                  childKey
                ) {
                  var result = bookKeeping.result,
                    keyPrefix = bookKeeping.keyPrefix,
                    func = bookKeeping.func,
                    context = bookKeeping.context

                  var mappedChild = func.call(
                    context,
                    child,
                    bookKeeping.count++
                  )
                  if (Array.isArray(mappedChild)) {
                    mapIntoWithKeyPrefixInternal(
                      mappedChild,
                      result,
                      childKey,
                      emptyFunction.thatReturnsArgument
                    )
                  } else if (mappedChild != null) {
                    if (isValidElement(mappedChild)) {
                      mappedChild = cloneAndReplaceKey(
                        mappedChild,
                        // Keep both the (mapped) and old keys if they differ, just as
                        // traverseAllChildren used to do for objects as children
                        keyPrefix +
                          (mappedChild.key &&
                          (!child || child.key !== mappedChild.key)
                            ? escapeUserProvidedKey(mappedChild.key) + '/'
                            : '') +
                          childKey
                      )
                    }
                    result.push(mappedChild)
                  }
                }

                function mapIntoWithKeyPrefixInternal(
                  children,
                  array,
                  prefix,
                  func,
                  context
                ) {
                  var escapedPrefix = ''
                  if (prefix != null) {
                    escapedPrefix = escapeUserProvidedKey(prefix) + '/'
                  }
                  var traverseContext = getPooledTraverseContext(
                    array,
                    escapedPrefix,
                    func,
                    context
                  )
                  traverseAllChildren(
                    children,
                    mapSingleChildIntoContext,
                    traverseContext
                  )
                  releaseTraverseContext(traverseContext)
                }

                /**
                 * Maps children that are typically specified as `props.children`.
                 *
                 * See https://reactjs.org/docs/react-api.html#react.children.map
                 *
                 * The provided mapFunction(child, key, index) will be called for each
                 * leaf child.
                 *
                 * @param {?*} children Children tree container.
                 * @param {function(*, int)} func The map function.
                 * @param {*} context Context for mapFunction.
                 * @return {object} Object containing the ordered map of results.
                 */
                function mapChildren(children, func, context) {
                  if (children == null) {
                    return children
                  }
                  var result = []
                  mapIntoWithKeyPrefixInternal(
                    children,
                    result,
                    null,
                    func,
                    context
                  )
                  return result
                }

                /**
                 * Count the number of children that are typically specified as
                 * `props.children`.
                 *
                 * See https://reactjs.org/docs/react-api.html#react.children.count
                 *
                 * @param {?*} children Children tree container.
                 * @return {number} The number of children.
                 */
                function countChildren(children, context) {
                  return traverseAllChildren(
                    children,
                    emptyFunction.thatReturnsNull,
                    null
                  )
                }

                /**
                 * Flatten a children object (typically specified as `props.children`) and
                 * return an array with appropriately re-keyed children.
                 *
                 * See https://reactjs.org/docs/react-api.html#react.children.toarray
                 */
                function toArray(children) {
                  var result = []
                  mapIntoWithKeyPrefixInternal(
                    children,
                    result,
                    null,
                    emptyFunction.thatReturnsArgument
                  )
                  return result
                }

                /**
                 * Returns the first child in a collection of children and verifies that there
                 * is only one child in the collection.
                 *
                 * See https://reactjs.org/docs/react-api.html#react.children.only
                 *
                 * The current implementation of this function assumes that a single child gets
                 * passed without a wrapper, but the purpose of this helper function is to
                 * abstract away the particular structure of children.
                 *
                 * @param {?object} children Child collection structure.
                 * @return {ReactElement} The first and only `ReactElement` contained in the
                 * structure.
                 */
                function onlyChild(children) {
                  !isValidElement(children)
                    ? invariant(
                        false,
                        'React.Children.only expected to receive a single React element child.'
                      )
                    : void 0
                  return children
                }

                function createContext(defaultValue, calculateChangedBits) {
                  if (calculateChangedBits === undefined) {
                    calculateChangedBits = null
                  } else {
                    {
                      !(
                        calculateChangedBits === null ||
                        typeof calculateChangedBits === 'function'
                      )
                        ? warning(
                            false,
                            'createContext: Expected the optional second argument to be a ' +
                              'function. Instead received: %s',
                            calculateChangedBits
                          )
                        : void 0
                    }
                  }

                  var context = {
                    $$typeof: REACT_CONTEXT_TYPE,
                    _calculateChangedBits: calculateChangedBits,
                    _defaultValue: defaultValue,
                    _currentValue: defaultValue,
                    _changedBits: 0,
                    // These are circular
                    Provider: null,
                    Consumer: null,
                  }

                  context.Provider = {
                    $$typeof: REACT_PROVIDER_TYPE,
                    _context: context,
                  }
                  context.Consumer = context

                  {
                    context._currentRenderer = null
                  }

                  return context
                }

                function forwardRef(render) {
                  {
                    !(typeof render === 'function')
                      ? warning(
                          false,
                          'forwardRef requires a render function but was given %s.',
                          render === null ? 'null' : typeof render
                        )
                      : void 0
                  }

                  return {
                    $$typeof: REACT_FORWARD_REF_TYPE,
                    render: render,
                  }
                }

                var describeComponentFrame = function (
                  name,
                  source,
                  ownerName
                ) {
                  return (
                    '\n    in ' +
                    (name || 'Unknown') +
                    (source
                      ? ' (at ' +
                        source.fileName.replace(/^.*[\\\/]/, '') +
                        ':' +
                        source.lineNumber +
                        ')'
                      : ownerName
                      ? ' (created by ' + ownerName + ')'
                      : '')
                  )
                }

                function isValidElementType(type) {
                  return (
                    typeof type === 'string' ||
                    typeof type === 'function' ||
                    // Note: its typeof might be other than 'symbol' or 'number' if it's a polyfill.
                    type === REACT_FRAGMENT_TYPE ||
                    type === REACT_ASYNC_MODE_TYPE ||
                    type === REACT_STRICT_MODE_TYPE ||
                    (typeof type === 'object' &&
                      type !== null &&
                      (type.$$typeof === REACT_PROVIDER_TYPE ||
                        type.$$typeof === REACT_CONTEXT_TYPE ||
                        type.$$typeof === REACT_FORWARD_REF_TYPE))
                  )
                }

                function getComponentName(fiber) {
                  var type = fiber.type

                  if (typeof type === 'function') {
                    return type.displayName || type.name
                  }
                  if (typeof type === 'string') {
                    return type
                  }
                  switch (type) {
                    case REACT_FRAGMENT_TYPE:
                      return 'ReactFragment'
                    case REACT_PORTAL_TYPE:
                      return 'ReactPortal'
                    case REACT_CALL_TYPE:
                      return 'ReactCall'
                    case REACT_RETURN_TYPE:
                      return 'ReactReturn'
                  }
                  if (typeof type === 'object' && type !== null) {
                    switch (type.$$typeof) {
                      case REACT_FORWARD_REF_TYPE:
                        var functionName =
                          type.render.displayName || type.render.name || ''
                        return functionName !== ''
                          ? 'ForwardRef(' + functionName + ')'
                          : 'ForwardRef'
                    }
                  }
                  return null
                }

                /**
                 * ReactElementValidator provides a wrapper around a element factory
                 * which validates the props passed to the element. This is intended to be
                 * used only in DEV and could be replaced by a static type checker for languages
                 * that support it.
                 */

                var currentlyValidatingElement = void 0
                var propTypesMisspellWarningShown = void 0

                var getDisplayName = function () {}
                var getStackAddendum = function () {}

                {
                  currentlyValidatingElement = null

                  propTypesMisspellWarningShown = false

                  getDisplayName = function (element) {
                    if (element == null) {
                      return '#empty'
                    } else if (
                      typeof element === 'string' ||
                      typeof element === 'number'
                    ) {
                      return '#text'
                    } else if (typeof element.type === 'string') {
                      return element.type
                    } else if (element.type === REACT_FRAGMENT_TYPE) {
                      return 'React.Fragment'
                    } else {
                      return (
                        element.type.displayName ||
                        element.type.name ||
                        'Unknown'
                      )
                    }
                  }

                  getStackAddendum = function () {
                    var stack = ''
                    if (currentlyValidatingElement) {
                      var name = getDisplayName(currentlyValidatingElement)
                      var owner = currentlyValidatingElement._owner
                      stack += describeComponentFrame(
                        name,
                        currentlyValidatingElement._source,
                        owner && getComponentName(owner)
                      )
                    }
                    stack += ReactDebugCurrentFrame.getStackAddendum() || ''
                    return stack
                  }
                }

                function getDeclarationErrorAddendum() {
                  if (ReactCurrentOwner.current) {
                    var name = getComponentName(ReactCurrentOwner.current)
                    if (name) {
                      return '\n\nCheck the render method of `' + name + '`.'
                    }
                  }
                  return ''
                }

                function getSourceInfoErrorAddendum(elementProps) {
                  if (
                    elementProps !== null &&
                    elementProps !== undefined &&
                    elementProps.__source !== undefined
                  ) {
                    var source = elementProps.__source
                    var fileName = source.fileName.replace(/^.*[\\\/]/, '')
                    var lineNumber = source.lineNumber
                    return (
                      '\n\nCheck your code at ' +
                      fileName +
                      ':' +
                      lineNumber +
                      '.'
                    )
                  }
                  return ''
                }

                /**
                 * Warn if there's no key explicitly set on dynamic arrays of children or
                 * object keys are not valid. This allows us to keep track of children between
                 * updates.
                 */
                var ownerHasKeyUseWarning = {}

                function getCurrentComponentErrorInfo(parentType) {
                  var info = getDeclarationErrorAddendum()

                  if (!info) {
                    var parentName =
                      typeof parentType === 'string'
                        ? parentType
                        : parentType.displayName || parentType.name
                    if (parentName) {
                      info =
                        '\n\nCheck the top-level render call using <' +
                        parentName +
                        '>.'
                    }
                  }
                  return info
                }

                /**
                 * Warn if the element doesn't have an explicit key assigned to it.
                 * This element is in an array. The array could grow and shrink or be
                 * reordered. All children that haven't already been validated are required to
                 * have a "key" property assigned to it. Error statuses are cached so a warning
                 * will only be shown once.
                 *
                 * @internal
                 * @param {ReactElement} element Element that requires a key.
                 * @param {*} parentType element's parent's type.
                 */
                function validateExplicitKey(element, parentType) {
                  if (
                    !element._store ||
                    element._store.validated ||
                    element.key != null
                  ) {
                    return
                  }
                  element._store.validated = true

                  var currentComponentErrorInfo = getCurrentComponentErrorInfo(
                    parentType
                  )
                  if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {
                    return
                  }
                  ownerHasKeyUseWarning[currentComponentErrorInfo] = true

                  // Usually the current owner is the offender, but if it accepts children as a
                  // property, it may be the creator of the child that's responsible for
                  // assigning it a key.
                  var childOwner = ''
                  if (
                    element &&
                    element._owner &&
                    element._owner !== ReactCurrentOwner.current
                  ) {
                    // Give the component that originally created this child.
                    childOwner =
                      ' It was passed a child from ' +
                      getComponentName(element._owner) +
                      '.'
                  }

                  currentlyValidatingElement = element
                  {
                    warning(
                      false,
                      'Each child in an array or iterator should have a unique "key" prop.' +
                        '%s%s See https://fb.me/react-warning-keys for more information.%s',
                      currentComponentErrorInfo,
                      childOwner,
                      getStackAddendum()
                    )
                  }
                  currentlyValidatingElement = null
                }

                /**
                 * Ensure that every element either is passed in a static location, in an
                 * array with an explicit keys property defined, or in an object literal
                 * with valid key property.
                 *
                 * @internal
                 * @param {ReactNode} node Statically passed child of any type.
                 * @param {*} parentType node's parent's type.
                 */
                function validateChildKeys(node, parentType) {
                  if (typeof node !== 'object') {
                    return
                  }
                  if (Array.isArray(node)) {
                    for (var i = 0; i < node.length; i++) {
                      var child = node[i]
                      if (isValidElement(child)) {
                        validateExplicitKey(child, parentType)
                      }
                    }
                  } else if (isValidElement(node)) {
                    // This element was passed in a valid location.
                    if (node._store) {
                      node._store.validated = true
                    }
                  } else if (node) {
                    var iteratorFn = getIteratorFn(node)
                    if (typeof iteratorFn === 'function') {
                      // Entry iterators used to provide implicit keys,
                      // but now we print a separate warning for them later.
                      if (iteratorFn !== node.entries) {
                        var iterator = iteratorFn.call(node)
                        var step = void 0
                        while (!(step = iterator.next()).done) {
                          if (isValidElement(step.value)) {
                            validateExplicitKey(step.value, parentType)
                          }
                        }
                      }
                    }
                  }
                }

                /**
                 * Given an element, validate that its props follow the propTypes definition,
                 * provided by the type.
                 *
                 * @param {ReactElement} element
                 */
                function validatePropTypes(element) {
                  var componentClass = element.type
                  if (typeof componentClass !== 'function') {
                    return
                  }
                  var name = componentClass.displayName || componentClass.name
                  var propTypes = componentClass.propTypes
                  if (propTypes) {
                    currentlyValidatingElement = element
                    checkPropTypes(
                      propTypes,
                      element.props,
                      'prop',
                      name,
                      getStackAddendum
                    )
                    currentlyValidatingElement = null
                  } else if (
                    componentClass.PropTypes !== undefined &&
                    !propTypesMisspellWarningShown
                  ) {
                    propTypesMisspellWarningShown = true
                    warning(
                      false,
                      'Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?',
                      name || 'Unknown'
                    )
                  }
                  if (typeof componentClass.getDefaultProps === 'function') {
                    !componentClass.getDefaultProps.isReactClassApproved
                      ? warning(
                          false,
                          'getDefaultProps is only used on classic React.createClass ' +
                            'definitions. Use a static property named `defaultProps` instead.'
                        )
                      : void 0
                  }
                }

                /**
                 * Given a fragment, validate that it can only be provided with fragment props
                 * @param {ReactElement} fragment
                 */
                function validateFragmentProps(fragment) {
                  currentlyValidatingElement = fragment

                  var keys = Object.keys(fragment.props)
                  for (var i = 0; i < keys.length; i++) {
                    var key = keys[i]
                    if (key !== 'children' && key !== 'key') {
                      warning(
                        false,
                        'Invalid prop `%s` supplied to `React.Fragment`. ' +
                          'React.Fragment can only have `key` and `children` props.%s',
                        key,
                        getStackAddendum()
                      )
                      break
                    }
                  }

                  if (fragment.ref !== null) {
                    warning(
                      false,
                      'Invalid attribute `ref` supplied to `React.Fragment`.%s',
                      getStackAddendum()
                    )
                  }

                  currentlyValidatingElement = null
                }

                function createElementWithValidation(type, props, children) {
                  var validType = isValidElementType(type)

                  // We warn in this case but don't throw. We expect the element creation to
                  // succeed and there will likely be errors in render.
                  if (!validType) {
                    var info = ''
                    if (
                      type === undefined ||
                      (typeof type === 'object' &&
                        type !== null &&
                        Object.keys(type).length === 0)
                    ) {
                      info +=
                        ' You likely forgot to export your component from the file ' +
                        "it's defined in, or you might have mixed up default and named imports."
                    }

                    var sourceInfo = getSourceInfoErrorAddendum(props)
                    if (sourceInfo) {
                      info += sourceInfo
                    } else {
                      info += getDeclarationErrorAddendum()
                    }

                    info += getStackAddendum() || ''

                    var typeString = void 0
                    if (type === null) {
                      typeString = 'null'
                    } else if (Array.isArray(type)) {
                      typeString = 'array'
                    } else {
                      typeString = typeof type
                    }

                    warning(
                      false,
                      'React.createElement: type is invalid -- expected a string (for ' +
                        'built-in components) or a class/function (for composite ' +
                        'components) but got: %s.%s',
                      typeString,
                      info
                    )
                  }

                  var element = createElement.apply(this, arguments)

                  // The result can be nullish if a mock or a custom function is used.
                  // TODO: Drop this when these are no longer allowed as the type argument.
                  if (element == null) {
                    return element
                  }

                  // Skip key warning if the type isn't valid since our key validation logic
                  // doesn't expect a non-string/function type and can throw confusing errors.
                  // We don't want exception behavior to differ between dev and prod.
                  // (Rendering will throw with a helpful message and as soon as the type is
                  // fixed, the key warnings will appear.)
                  if (validType) {
                    for (var i = 2; i < arguments.length; i++) {
                      validateChildKeys(arguments[i], type)
                    }
                  }

                  if (type === REACT_FRAGMENT_TYPE) {
                    validateFragmentProps(element)
                  } else {
                    validatePropTypes(element)
                  }

                  return element
                }

                function createFactoryWithValidation(type) {
                  var validatedFactory = createElementWithValidation.bind(
                    null,
                    type
                  )
                  validatedFactory.type = type
                  // Legacy hook: remove it
                  {
                    Object.defineProperty(validatedFactory, 'type', {
                      enumerable: false,
                      get: function () {
                        lowPriorityWarning$1(
                          false,
                          'Factory.type is deprecated. Access the class directly ' +
                            'before passing it to createFactory.'
                        )
                        Object.defineProperty(this, 'type', {
                          value: type,
                        })
                        return type
                      },
                    })
                  }

                  return validatedFactory
                }

                function cloneElementWithValidation(element, props, children) {
                  var newElement = cloneElement.apply(this, arguments)
                  for (var i = 2; i < arguments.length; i++) {
                    validateChildKeys(arguments[i], newElement.type)
                  }
                  validatePropTypes(newElement)
                  return newElement
                }

                var React = {
                  Children: {
                    map: mapChildren,
                    forEach: forEachChildren,
                    count: countChildren,
                    toArray: toArray,
                    only: onlyChild,
                  },

                  createRef: createRef,
                  Component: Component,
                  PureComponent: PureComponent,

                  createContext: createContext,
                  forwardRef: forwardRef,

                  Fragment: REACT_FRAGMENT_TYPE,
                  StrictMode: REACT_STRICT_MODE_TYPE,
                  unstable_AsyncMode: REACT_ASYNC_MODE_TYPE,

                  createElement: createElementWithValidation,
                  cloneElement: cloneElementWithValidation,
                  createFactory: createFactoryWithValidation,
                  isValidElement: isValidElement,

                  version: ReactVersion,

                  __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED: {
                    ReactCurrentOwner: ReactCurrentOwner,
                    // Used by renderers to avoid bundling object-assign twice in UMD bundles:
                    assign: _assign,
                  },
                }

                {
                  _assign(
                    React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED,
                    {
                      // These should not be included in production.
                      ReactDebugCurrentFrame: ReactDebugCurrentFrame,
                      // Shim for React DOM 16.0.0 which still destructured (but not used) this.
                      // TODO: remove in React 17.0.
                      ReactComponentTreeHook: {},
                    }
                  )
                }

                var React$2 = Object.freeze({
                  default: React,
                })

                var React$3 = (React$2 && React) || React$2

                // TODO: decide on the top-level export form.
                // This is hacky but makes it work with both Rollup and Jest.
                var react = React$3['default'] ? React$3['default'] : React$3

                module.exports = react
              })()
            }
          }.call(this, require('_process')))
        },
        {
          _process: 13,
          'fbjs/lib/emptyFunction': 47,
          'fbjs/lib/emptyObject': 48,
          'fbjs/lib/invariant': 49,
          'fbjs/lib/warning': 50,
          'object-assign': 51,
          'prop-types/checkPropTypes': 52,
        },
      ],
      45: [
        function (require, module, exports) {
          /** @license React v16.3.2
           * react.production.min.js
           *
           * Copyright (c) 2013-present, Facebook, Inc.
           *
           * This source code is licensed under the MIT license found in the
           * LICENSE file in the root directory of this source tree.
           */

          'use strict'
          var m = require('object-assign'),
            n = require('fbjs/lib/invariant'),
            p = require('fbjs/lib/emptyObject'),
            q = require('fbjs/lib/emptyFunction'),
            r = 'function' === typeof Symbol && Symbol['for'],
            t = r ? Symbol['for']('react.element') : 60103,
            u = r ? Symbol['for']('react.portal') : 60106,
            v = r ? Symbol['for']('react.fragment') : 60107,
            w = r ? Symbol['for']('react.strict_mode') : 60108,
            x = r ? Symbol['for']('react.provider') : 60109,
            y = r ? Symbol['for']('react.context') : 60110,
            z = r ? Symbol['for']('react.async_mode') : 60111,
            A = r ? Symbol['for']('react.forward_ref') : 60112,
            B = 'function' === typeof Symbol && Symbol.iterator
          function C(a) {
            for (
              var b = arguments.length - 1,
                e =
                  'http://reactjs.org/docs/error-decoder.html?invariant\x3d' +
                  a,
                c = 0;
              c < b;
              c++
            )
              e += '\x26args[]\x3d' + encodeURIComponent(arguments[c + 1])
            n(
              !1,
              'Minified React error #' +
                a +
                '; visit %s for the full message or use the non-minified dev environment for full errors and additional helpful warnings. ',
              e
            )
          }
          var D = {
            isMounted: function () {
              return !1
            },
            enqueueForceUpdate: function () {},
            enqueueReplaceState: function () {},
            enqueueSetState: function () {},
          }
          function E(a, b, e) {
            this.props = a
            this.context = b
            this.refs = p
            this.updater = e || D
          }
          E.prototype.isReactComponent = {}
          E.prototype.setState = function (a, b) {
            'object' !== typeof a && 'function' !== typeof a && null != a
              ? C('85')
              : void 0
            this.updater.enqueueSetState(this, a, b, 'setState')
          }
          E.prototype.forceUpdate = function (a) {
            this.updater.enqueueForceUpdate(this, a, 'forceUpdate')
          }
          function F() {}
          F.prototype = E.prototype
          function G(a, b, e) {
            this.props = a
            this.context = b
            this.refs = p
            this.updater = e || D
          }
          var H = (G.prototype = new F())
          H.constructor = G
          m(H, E.prototype)
          H.isPureReactComponent = !0
          var I = { current: null },
            J = Object.prototype.hasOwnProperty,
            K = { key: !0, ref: !0, __self: !0, __source: !0 }
          function L(a, b, e) {
            var c = void 0,
              d = {},
              g = null,
              h = null
            if (null != b)
              for (c in (void 0 !== b.ref && (h = b.ref),
              void 0 !== b.key && (g = '' + b.key),
              b))
                J.call(b, c) && !K.hasOwnProperty(c) && (d[c] = b[c])
            var f = arguments.length - 2
            if (1 === f) d.children = e
            else if (1 < f) {
              for (var k = Array(f), l = 0; l < f; l++) k[l] = arguments[l + 2]
              d.children = k
            }
            if (a && a.defaultProps)
              for (c in ((f = a.defaultProps), f))
                void 0 === d[c] && (d[c] = f[c])
            return {
              $$typeof: t,
              type: a,
              key: g,
              ref: h,
              props: d,
              _owner: I.current,
            }
          }
          function M(a) {
            return 'object' === typeof a && null !== a && a.$$typeof === t
          }
          function escape(a) {
            var b = { '\x3d': '\x3d0', ':': '\x3d2' }
            return (
              '$' +
              ('' + a).replace(/[=:]/g, function (a) {
                return b[a]
              })
            )
          }
          var N = /\/+/g,
            O = []
          function P(a, b, e, c) {
            if (O.length) {
              var d = O.pop()
              d.result = a
              d.keyPrefix = b
              d.func = e
              d.context = c
              d.count = 0
              return d
            }
            return { result: a, keyPrefix: b, func: e, context: c, count: 0 }
          }
          function Q(a) {
            a.result = null
            a.keyPrefix = null
            a.func = null
            a.context = null
            a.count = 0
            10 > O.length && O.push(a)
          }
          function R(a, b, e, c) {
            var d = typeof a
            if ('undefined' === d || 'boolean' === d) a = null
            var g = !1
            if (null === a) g = !0
            else
              switch (d) {
                case 'string':
                case 'number':
                  g = !0
                  break
                case 'object':
                  switch (a.$$typeof) {
                    case t:
                    case u:
                      g = !0
                  }
              }
            if (g) return e(c, a, '' === b ? '.' + S(a, 0) : b), 1
            g = 0
            b = '' === b ? '.' : b + ':'
            if (Array.isArray(a))
              for (var h = 0; h < a.length; h++) {
                d = a[h]
                var f = b + S(d, h)
                g += R(d, f, e, c)
              }
            else if (
              (null === a || 'undefined' === typeof a
                ? (f = null)
                : ((f = (B && a[B]) || a['@@iterator']),
                  (f = 'function' === typeof f ? f : null)),
              'function' === typeof f)
            )
              for (a = f.call(a), h = 0; !(d = a.next()).done; )
                (d = d.value), (f = b + S(d, h++)), (g += R(d, f, e, c))
            else
              'object' === d &&
                ((e = '' + a),
                C(
                  '31',
                  '[object Object]' === e
                    ? 'object with keys {' + Object.keys(a).join(', ') + '}'
                    : e,
                  ''
                ))
            return g
          }
          function S(a, b) {
            return 'object' === typeof a && null !== a && null != a.key
              ? escape(a.key)
              : b.toString(36)
          }
          function T(a, b) {
            a.func.call(a.context, b, a.count++)
          }
          function U(a, b, e) {
            var c = a.result,
              d = a.keyPrefix
            a = a.func.call(a.context, b, a.count++)
            Array.isArray(a)
              ? V(a, c, e, q.thatReturnsArgument)
              : null != a &&
                (M(a) &&
                  ((b =
                    d +
                    (!a.key || (b && b.key === a.key)
                      ? ''
                      : ('' + a.key).replace(N, '$\x26/') + '/') +
                    e),
                  (a = {
                    $$typeof: t,
                    type: a.type,
                    key: b,
                    ref: a.ref,
                    props: a.props,
                    _owner: a._owner,
                  })),
                c.push(a))
          }
          function V(a, b, e, c, d) {
            var g = ''
            null != e && (g = ('' + e).replace(N, '$\x26/') + '/')
            b = P(b, g, c, d)
            null == a || R(a, '', U, b)
            Q(b)
          }
          var W = {
              Children: {
                map: function (a, b, e) {
                  if (null == a) return a
                  var c = []
                  V(a, c, null, b, e)
                  return c
                },
                forEach: function (a, b, e) {
                  if (null == a) return a
                  b = P(null, null, b, e)
                  null == a || R(a, '', T, b)
                  Q(b)
                },
                count: function (a) {
                  return null == a ? 0 : R(a, '', q.thatReturnsNull, null)
                },
                toArray: function (a) {
                  var b = []
                  V(a, b, null, q.thatReturnsArgument)
                  return b
                },
                only: function (a) {
                  M(a) ? void 0 : C('143')
                  return a
                },
              },
              createRef: function () {
                return { current: null }
              },
              Component: E,
              PureComponent: G,
              createContext: function (a, b) {
                void 0 === b && (b = null)
                a = {
                  $$typeof: y,
                  _calculateChangedBits: b,
                  _defaultValue: a,
                  _currentValue: a,
                  _changedBits: 0,
                  Provider: null,
                  Consumer: null,
                }
                a.Provider = { $$typeof: x, _context: a }
                return (a.Consumer = a)
              },
              forwardRef: function (a) {
                return { $$typeof: A, render: a }
              },
              Fragment: v,
              StrictMode: w,
              unstable_AsyncMode: z,
              createElement: L,
              cloneElement: function (a, b, e) {
                null === a || void 0 === a ? C('267', a) : void 0
                var c = void 0,
                  d = m({}, a.props),
                  g = a.key,
                  h = a.ref,
                  f = a._owner
                if (null != b) {
                  void 0 !== b.ref && ((h = b.ref), (f = I.current))
                  void 0 !== b.key && (g = '' + b.key)
                  var k = void 0
                  a.type && a.type.defaultProps && (k = a.type.defaultProps)
                  for (c in b)
                    J.call(b, c) &&
                      !K.hasOwnProperty(c) &&
                      (d[c] = void 0 === b[c] && void 0 !== k ? k[c] : b[c])
                }
                c = arguments.length - 2
                if (1 === c) d.children = e
                else if (1 < c) {
                  k = Array(c)
                  for (var l = 0; l < c; l++) k[l] = arguments[l + 2]
                  d.children = k
                }
                return {
                  $$typeof: t,
                  type: a.type,
                  key: g,
                  ref: h,
                  props: d,
                  _owner: f,
                }
              },
              createFactory: function (a) {
                var b = L.bind(null, a)
                b.type = a
                return b
              },
              isValidElement: M,
              version: '16.3.2',
              __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED: {
                ReactCurrentOwner: I,
                assign: m,
              },
            },
            X = Object.freeze({ default: W }),
            Y = (X && W) || X
          module.exports = Y['default'] ? Y['default'] : Y
        },
        {
          'fbjs/lib/emptyFunction': 47,
          'fbjs/lib/emptyObject': 48,
          'fbjs/lib/invariant': 49,
          'object-assign': 51,
        },
      ],
      46: [
        function (require, module, exports) {
          ;(function (process) {
            'use strict'

            if (process.env.NODE_ENV === 'production') {
              module.exports = require('./cjs/react.production.min.js')
            } else {
              module.exports = require('./cjs/react.development.js')
            }
          }.call(this, require('_process')))
        },
        {
          './cjs/react.development.js': 44,
          './cjs/react.production.min.js': 45,
          _process: 13,
        },
      ],
      47: [
        function (require, module, exports) {
          arguments[4][31][0].apply(exports, arguments)
        },
        { dup: 31 },
      ],
      48: [
        function (require, module, exports) {
          arguments[4][32][0].apply(exports, arguments)
        },
        { _process: 13, dup: 32 },
      ],
      49: [
        function (require, module, exports) {
          arguments[4][36][0].apply(exports, arguments)
        },
        { _process: 13, dup: 36 },
      ],
      50: [
        function (require, module, exports) {
          arguments[4][40][0].apply(exports, arguments)
        },
        { './emptyFunction': 47, _process: 13, dup: 40 },
      ],
      51: [
        function (require, module, exports) {
          arguments[4][41][0].apply(exports, arguments)
        },
        { dup: 41 },
      ],
      52: [
        function (require, module, exports) {
          arguments[4][42][0].apply(exports, arguments)
        },
        { './lib/ReactPropTypesSecret': 53, _process: 13, dup: 42 },
      ],
      53: [
        function (require, module, exports) {
          arguments[4][43][0].apply(exports, arguments)
        },
        { dup: 43 },
      ],
      54: [
        function (require, module, exports) {
          'use strict'

          exports.__esModule = true
          exports.default = void 0

          var _computeScrollIntoView = _interopRequireDefault(
            require('compute-scroll-into-view')
          )

          function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : { default: obj }
          }

          function isOptionsObject(options) {
            return (
              options === Object(options) && Object.keys(options).length !== 0
            )
          }

          function defaultBehavior(actions, behavior) {
            if (behavior === void 0) {
              behavior = 'auto'
            }

            var canSmoothScroll = 'scrollBehavior' in document.body.style
            actions.forEach(function (_ref) {
              var el = _ref.el,
                top = _ref.top,
                left = _ref.left

              if (el.scroll && canSmoothScroll) {
                el.scroll({
                  top: top,
                  left: left,
                  behavior: behavior,
                })
              } else {
                el.scrollTop = top
                el.scrollLeft = left
              }
            })
          }

          function getOptions(options) {
            if (options === false) {
              return {
                block: 'end',
                inline: 'nearest',
              }
            }

            if (isOptionsObject(options)) {
              return options
            }

            return {
              block: 'start',
              inline: 'nearest',
            }
          }

          function scrollIntoView(target, options) {
            if (
              isOptionsObject(options) &&
              typeof options.behavior === 'function'
            ) {
              return options.behavior(
                (0, _computeScrollIntoView.default)(target, options)
              )
            }

            var computeOptions = getOptions(options)
            return defaultBehavior(
              (0, _computeScrollIntoView.default)(target, computeOptions),
              computeOptions.behavior
            )
          }

          var _default = scrollIntoView
          exports.default = _default
          module.exports = exports.default
        },
        { 'compute-scroll-into-view': 55 },
      ],
      55: [
        function (require, module, exports) {
          'use strict'

          exports.__esModule = true
          exports.default = void 0

          function isElement(el) {
            return (
              el != null &&
              typeof el === 'object' &&
              (el.nodeType === 1 || el.nodeType === 11)
            )
          }

          function canOverflow(overflow, skipOverflowHiddenElements) {
            if (skipOverflowHiddenElements && overflow === 'hidden') {
              return false
            }

            return overflow !== 'visible' && overflow !== 'clip'
          }

          function isScrollable(el, skipOverflowHiddenElements) {
            if (
              el.clientHeight < el.scrollHeight ||
              el.clientWidth < el.scrollWidth
            ) {
              var style = getComputedStyle(el, null)
              return (
                canOverflow(style.overflowY, skipOverflowHiddenElements) ||
                canOverflow(style.overflowX, skipOverflowHiddenElements)
              )
            }

            return false
          }

          function alignNearest(
            scrollingEdgeStart,
            scrollingEdgeEnd,
            scrollingSize,
            scrollingBorderStart,
            scrollingBorderEnd,
            elementEdgeStart,
            elementEdgeEnd,
            elementSize
          ) {
            if (
              (elementEdgeStart < scrollingEdgeStart &&
                elementEdgeEnd > scrollingEdgeEnd) ||
              (elementEdgeStart > scrollingEdgeStart &&
                elementEdgeEnd < scrollingEdgeEnd)
            ) {
              return 0
            }

            if (
              (elementEdgeStart < scrollingEdgeStart &&
                elementSize < scrollingSize) ||
              (elementEdgeEnd > scrollingEdgeEnd && elementSize > scrollingSize)
            ) {
              return (
                elementEdgeStart - scrollingEdgeStart - scrollingBorderStart
              )
            }

            if (
              (elementEdgeEnd > scrollingEdgeEnd &&
                elementSize < scrollingSize) ||
              (elementEdgeStart < scrollingEdgeStart &&
                elementSize > scrollingSize)
            ) {
              return elementEdgeEnd - scrollingEdgeEnd + scrollingBorderEnd
            }

            return 0
          }

          var _default = function _default(target, options) {
            var scrollMode = options.scrollMode,
              block = options.block,
              inline = options.inline,
              boundary = options.boundary,
              skipOverflowHiddenElements = options.skipOverflowHiddenElements
            var checkBoundary =
              typeof boundary === 'function'
                ? boundary
                : function (node) {
                    return node !== boundary
                  }

            if (!isElement(target)) {
              throw new TypeError('Invalid target')
            }

            var scrollingElement =
              document.scrollingElement || document.documentElement
            var frames = []
            var cursor = target

            while (isElement(cursor) && checkBoundary(cursor)) {
              cursor = cursor.parentNode || cursor.host

              if (cursor === scrollingElement) {
                frames.push(cursor)
                break
              }

              if (
                cursor === document.body &&
                isScrollable(cursor) &&
                !isScrollable(document.documentElement)
              ) {
                continue
              }

              if (isScrollable(cursor, skipOverflowHiddenElements)) {
                frames.push(cursor)
              }
            }

            var viewportWidth = window.visualViewport
              ? visualViewport.width
              : innerWidth
            var viewportHeight = window.visualViewport
              ? visualViewport.height
              : innerHeight
            var viewportX = window.scrollX || pageXOffset
            var viewportY = window.scrollY || pageYOffset

            var _target$getBoundingCl = target.getBoundingClientRect(),
              targetHeight = _target$getBoundingCl.height,
              targetWidth = _target$getBoundingCl.width,
              targetTop = _target$getBoundingCl.top,
              targetRight = _target$getBoundingCl.right,
              targetBottom = _target$getBoundingCl.bottom,
              targetLeft = _target$getBoundingCl.left

            var targetBlock =
              block === 'start' || block === 'nearest'
                ? targetTop
                : block === 'end'
                ? targetBottom
                : targetTop + targetHeight / 2
            var targetInline =
              inline === 'center'
                ? targetLeft + targetWidth / 2
                : inline === 'end'
                ? targetRight
                : targetLeft
            var computations = []

            for (var index = 0; index < frames.length; index++) {
              var frame = frames[index]

              var _frame$getBoundingCli = frame.getBoundingClientRect(),
                _height = _frame$getBoundingCli.height,
                _width = _frame$getBoundingCli.width,
                _top = _frame$getBoundingCli.top,
                right = _frame$getBoundingCli.right,
                bottom = _frame$getBoundingCli.bottom,
                _left = _frame$getBoundingCli.left

              if (
                scrollMode === 'if-needed' &&
                targetTop >= 0 &&
                targetLeft >= 0 &&
                targetBottom <= viewportHeight &&
                targetRight <= viewportWidth &&
                targetTop >= _top &&
                targetBottom <= bottom &&
                targetLeft >= _left &&
                targetRight <= right
              ) {
                return computations
              }

              var frameStyle = getComputedStyle(frame)
              var borderLeft = parseInt(frameStyle.borderLeftWidth, 10)
              var borderTop = parseInt(frameStyle.borderTopWidth, 10)
              var borderRight = parseInt(frameStyle.borderRightWidth, 10)
              var borderBottom = parseInt(frameStyle.borderBottomWidth, 10)
              var blockScroll = 0
              var inlineScroll = 0
              var scrollbarWidth =
                'offsetWidth' in frame
                  ? frame.offsetWidth -
                    frame.clientWidth -
                    borderLeft -
                    borderRight
                  : 0
              var scrollbarHeight =
                'offsetHeight' in frame
                  ? frame.offsetHeight -
                    frame.clientHeight -
                    borderTop -
                    borderBottom
                  : 0

              if (scrollingElement === frame) {
                if (block === 'start') {
                  blockScroll = targetBlock
                } else if (block === 'end') {
                  blockScroll = targetBlock - viewportHeight
                } else if (block === 'nearest') {
                  blockScroll = alignNearest(
                    viewportY,
                    viewportY + viewportHeight,
                    viewportHeight,
                    borderTop,
                    borderBottom,
                    viewportY + targetBlock,
                    viewportY + targetBlock + targetHeight,
                    targetHeight
                  )
                } else {
                  blockScroll = targetBlock - viewportHeight / 2
                }

                if (inline === 'start') {
                  inlineScroll = targetInline
                } else if (inline === 'center') {
                  inlineScroll = targetInline - viewportWidth / 2
                } else if (inline === 'end') {
                  inlineScroll = targetInline - viewportWidth
                } else {
                  inlineScroll = alignNearest(
                    viewportX,
                    viewportX + viewportWidth,
                    viewportWidth,
                    borderLeft,
                    borderRight,
                    viewportX + targetInline,
                    viewportX + targetInline + targetWidth,
                    targetWidth
                  )
                }

                blockScroll = Math.max(0, blockScroll + viewportY)
                inlineScroll = Math.max(0, inlineScroll + viewportX)
              } else {
                if (block === 'start') {
                  blockScroll = targetBlock - _top - borderTop
                } else if (block === 'end') {
                  blockScroll =
                    targetBlock - bottom + borderBottom + scrollbarHeight
                } else if (block === 'nearest') {
                  blockScroll = alignNearest(
                    _top,
                    bottom,
                    _height,
                    borderTop,
                    borderBottom + scrollbarHeight,
                    targetBlock,
                    targetBlock + targetHeight,
                    targetHeight
                  )
                } else {
                  blockScroll =
                    targetBlock - (_top + _height / 2) + scrollbarHeight / 2
                }

                if (inline === 'start') {
                  inlineScroll = targetInline - _left - borderLeft
                } else if (inline === 'center') {
                  inlineScroll =
                    targetInline - (_left + _width / 2) + scrollbarWidth / 2
                } else if (inline === 'end') {
                  inlineScroll =
                    targetInline - right + borderRight + scrollbarWidth
                } else {
                  inlineScroll = alignNearest(
                    _left,
                    right,
                    _width,
                    borderLeft,
                    borderRight + scrollbarWidth,
                    targetInline,
                    targetInline + targetWidth,
                    targetWidth
                  )
                }

                var scrollLeft = frame.scrollLeft,
                  scrollTop = frame.scrollTop
                blockScroll = Math.max(
                  0,
                  Math.min(
                    scrollTop + blockScroll,
                    frame.scrollHeight - _height + scrollbarHeight
                  )
                )
                inlineScroll = Math.max(
                  0,
                  Math.min(
                    scrollLeft + inlineScroll,
                    frame.scrollWidth - _width + scrollbarWidth
                  )
                )
                targetBlock += scrollTop - blockScroll
                targetInline += scrollLeft - inlineScroll
              }

              computations.push({
                el: frame,
                top: blockScroll,
                left: inlineScroll,
              })
            }

            return computations
          }

          exports.default = _default
          module.exports = exports['default']
        },
        {},
      ],
      56: [
        function (require, module, exports) {
          'use strict'

          const peacock = require('peacock')
          const { classes } = peacock

          function identity(s) {
            return s
          }

          class ThemeBrowser {
            constructor(markerResolver) {
              this._markerResolver = markerResolver
            }

            _processToken(className) {
              className = className == null ? '' : className
              function mark(s, info) {
                const element = `<span class=${className}>${s}</span>`
                const { tokens, tokenIndex } = info
                const token = tokens[tokenIndex]
                const loc = token.loc.end
                if (loc == null) {
                  return element
                }

                const {
                  insertBefore,
                  insertAfter,
                } = this._markerResolver.resolve(loc)
                return insertBefore + element + insertAfter
              }
              return mark.bind(this)
            }

            get theme() {
              const x = this._processToken.bind(this)
              return {
                Boolean: {
                  true: undefined,
                  false: undefined,
                  _default: x(classes['Keyword.Constant']),
                },

                Identifier: {
                  Date: x(classes['Literal.Date']),
                  Error: x(classes['Generic.Error']),
                  _default: x(classes.Name.Other),
                },

                Null: {
                  _default: x(classes['Keyword.Constant']),
                },

                Numeric: {
                  _default: x(classes.Number),
                },

                String: {
                  _default: x(classes.String),
                },

                Keyword: {
                  break: undefined,

                  case: undefined,
                  catch: undefined,
                  class: undefined,
                  const: undefined,
                  continue: undefined,

                  debugger: undefined,
                  default: undefined,
                  delete: undefined,
                  do: undefined,

                  else: undefined,
                  enum: undefined,
                  export: undefined,
                  extends: undefined,

                  finally: undefined,
                  for: undefined,
                  function: undefined,

                  if: undefined,
                  implements: undefined,
                  import: undefined,
                  in: undefined,
                  instanceof: undefined,

                  new: undefined,

                  package: undefined,
                  private: undefined,
                  protected: undefined,
                  public: undefined,

                  return: undefined,

                  static: undefined,
                  super: undefined,
                  switch: undefined,

                  this: undefined,
                  throw: undefined,
                  try: undefined,
                  typeof: undefined,

                  var: undefined,
                  void: undefined,

                  while: undefined,
                  with: undefined,
                  yield: undefined,
                  _default: x(classes.Keyword),
                },
                Punctuator: {
                  ';': x(classes.Punctuation),
                  '.': x(classes.Punctuation),
                  ',': x(classes.Punctuation),

                  '{': x(classes.Punctuation),
                  '}': x(classes.Punctuation),
                  '(': x(classes.Punctuation),
                  ')': x(classes.Punctuation),
                  '[': x(classes.Punctuation),
                  ']': x(classes.Punctuation),

                  '<': undefined,
                  '>': undefined,
                  '+': undefined,
                  '-': undefined,
                  '*': undefined,
                  '%': undefined,
                  '&': undefined,
                  '|': undefined,
                  '^': undefined,
                  '!': undefined,
                  '~': undefined,
                  '?': undefined,
                  ':': undefined,
                  '=': undefined,

                  '<=': undefined,
                  '>=': undefined,
                  '==': undefined,
                  '!=': undefined,
                  '++': undefined,
                  '--': undefined,
                  '<<': undefined,
                  '>>': undefined,
                  '&&': undefined,
                  '||': undefined,
                  '+=': undefined,
                  '-=': undefined,
                  '*=': undefined,
                  '%=': undefined,
                  '&=': undefined,
                  '|=': undefined,
                  '^=': undefined,
                  '/=': undefined,
                  '=>': undefined,
                  '**': undefined,

                  '===': undefined,
                  '!==': undefined,
                  '>>>': undefined,
                  '<<=': undefined,
                  '>>=': undefined,
                  '>>>=': undefined,
                  '...': undefined,
                  '**=': undefined,

                  _default: x(classes.Operator),
                },
                Line: {
                  _default: x(classes['Comment.Single']),
                },

                Block: {
                  _default: x(classes.Comment),
                },

                // JSX
                JSXAttribute: {
                  _default: undefined,
                },
                JSXClosingElement: {
                  _default: undefined,
                },
                JSXElement: {
                  _default: undefined,
                },
                JSXEmptyExpression: {
                  _default: undefined,
                },
                JSXExpressionContainer: {
                  _default: undefined,
                },
                JSXIdentifier: {
                  // many more identifies are possible, div, table, etc.
                  className: x(classes['Name.Class']),
                  _default: x(classes['Name.Tag']),
                },
                JSXMemberExpression: {
                  _default: undefined,
                },
                JSXNamespacedName: {
                  _default: undefined,
                },
                JSXOpeningElement: {
                  _default: undefined,
                },
                JSXSpreadAttribute: {
                  _default: undefined,
                },
                JSXText: {
                  _default: undefined,
                },

                _default: x(identity),
              }
            }
          }

          module.exports = ThemeBrowser
        },
        { peacock: 16 },
      ],
      57: [
        function (require, module, exports) {
          'use strict'

          /* eslint-disable camelcase */

          const LogReader = require('v8-tools-core/logreader')
          const { Profile } = require('v8-tools-core/profile')

          const IcEntry = require('./lib/log-processing/ic-entry')
          const DeoptEntry = require('./lib/log-processing/deopt-entry')
          const CodeEntry = require('./lib/log-processing/code-entry')
          const {
            parseOptimizationState,
          } = require('./lib/log-processing/optimization-state')

          const groupByFileAndLocation = require('./lib/grouping/group-by-file-and-location')

          function maybeNumber(s) {
            if (s == null) return -1
            return parseInt(s)
          }

          function formatName(entry) {
            if (!entry) return '<unknown>'
            const name = entry.func.getName()
            const re = /(.*):([0-9]+):([0-9]+)$/
            const array = re.exec(name)
            if (!array) return { fnFile: name, line: -1, column: -1 }
            return {
              fnFile: array[1],
              line: maybeNumber(array[2]),
              column: maybeNumber(array[3]),
            }
          }

          function locationKey(file, line, column) {
            return `${file}:${line}:${column}`
          }

          const propertyICParser = [
            parseInt,
            parseInt,
            parseInt,
            null,
            null,
            parseInt,
            null,
            null,
            null,
          ]

          class DeoptProcessor extends LogReader {
            constructor(root, { silentErrors = true } = {}) {
              super()
              this._root = root
              this._silentErrors = silentErrors

              // passing dispatch table that references `this` before invoking super
              // doesn't work, so we set it afterwards
              this.dispatchTable_ = {
                // Collect info about CRUD of code
                'code-creation': {
                  parsers: [
                    null,
                    parseInt,
                    parseInt,
                    parseInt,
                    parseInt,
                    null,
                    'var-args',
                  ],
                  processor: this._processCodeCreation.bind(this),
                },
                'code-move': {
                  parsers: [parseInt, parseInt],
                  processor: this._processCodeMove.bind(this),
                },
                'code-delete': {
                  parsers: [parseInt],
                  processor: this._processCodeDelete.bind(this),
                },
                'sfi-move': {
                  parsers: [parseInt, parseInt],
                  processor: this._processFunctionMove.bind(this),
                },

                // Collect deoptimization info
                'code-deopt': {
                  parsers: [
                    parseInt,
                    parseInt,
                    parseInt,
                    parseInt,
                    parseInt,
                    null,
                    null,
                    null,
                  ],
                  processor: this._processCodeDeopt.bind(this),
                },

                // Collect IC info
                LoadIC: {
                  parsers: propertyICParser,
                  processor: this._processPropertyIC.bind(this, 'LoadIC'),
                },
                StoreIC: {
                  parsers: propertyICParser,
                  processor: this._processPropertyIC.bind(this, 'StoreIC'),
                },
                KeyedLoadIC: {
                  parsers: propertyICParser,
                  processor: this._processPropertyIC.bind(this, 'KeyedLoadIC'),
                },
                KeyedStoreIC: {
                  parsers: propertyICParser,
                  processor: this._processPropertyIC.bind(this, 'KeyedStoreIC'),
                },
                StoreInArrayLiteralIC: {
                  parsers: propertyICParser,
                  processor: this._processPropertyIC.bind(
                    this,
                    'StoreInArrayLiteralIC'
                  ),
                },
              }

              this._deserializedEntriesNames = []
              this._profile = new Profile()

              this.entriesIC = new Map()
              this.entriesDeopt = new Map()
              this.entriesCode = new Map()
            }

            functionInfo(pc) {
              const entry = this._profile.findEntry(pc)
              if (entry == null) return { fnFile: '', state: -1 }
              const { fnFile, line, column } = formatName(entry)
              return { fnFile, line, column, state: entry.state }
            }

            _processPropertyIC(
              type,
              pc,
              line,
              column,
              old_state,
              new_state,
              map,
              propertyKey,
              modifier,
              slow_reason
            ) {
              const { fnFile, state } = this.functionInfo(pc)
              const key = locationKey(fnFile, line, column)
              if (!this.entriesIC.has(key)) {
                const entry = new IcEntry(fnFile, line, column)
                this.entriesIC.set(key, entry)
              }
              const icEntry = this.entriesIC.get(key)
              icEntry.addUpdate(
                type,
                old_state,
                new_state,
                propertyKey,
                map,
                state
              )
            }

            // timestamp is in micro seconds
            // https://cs.chromium.org/chromium/src/v8/src/log.cc?l=892&rcl=8fecf0eff7357c1bee222f76c4e2f6fdd8759797
            _processCodeDeopt(
              timestamp,
              size,
              code,
              inliningId,
              scriptOffset,
              bailoutType,
              sourcePositionText,
              deoptReasonText
            ) {
              const { fnFile, state } = this.functionInfo(code)
              const {
                file,
                line,
                column,
              } = DeoptEntry.disassembleSourcePosition(sourcePositionText)

              const key = locationKey(file, line, column)
              if (!this.entriesDeopt.has(key)) {
                const entry = new DeoptEntry(fnFile, file, line, column)
                this.entriesDeopt.set(key, entry)
              }
              const deoptEntry = this.entriesDeopt.get(key)
              deoptEntry.addUpdate(
                timestamp,
                bailoutType,
                deoptReasonText,
                state,
                inliningId
              )
            }

            _processCodeCreation(
              type,
              kind,
              timestamp,
              start,
              size,
              name,
              maybe_func
            ) {
              name = this._deserializedEntriesNames[start] || name

              if (maybe_func.length) {
                const funcAddr = parseInt(maybe_func[0])
                const state = parseOptimizationState(maybe_func[1])
                this._profile.addFuncCode(
                  type,
                  name,
                  timestamp,
                  start,
                  size,
                  funcAddr,
                  state
                )
                const isScript = type === 'Script'
                const isUserFunction = type === 'LazyCompile'
                if (isUserFunction || isScript) {
                  let { fnFile, line, column } = this.functionInfo(start)

                  // only interested in Node.js anonymous wrapper function
                  // (function (exports, require, module, __filename, __dirname) {
                  const isNodeWrapperFunction = line === 1 && column === 1
                  if (isScript && !isNodeWrapperFunction) return

                  const key = locationKey(fnFile, line, column)
                  if (!this.entriesCode.has(key)) {
                    this.entriesCode.set(
                      key,
                      new CodeEntry({ fnFile, line, column, isScript })
                    )
                  }
                  const code = this.entriesCode.get(key)
                  code.addUpdate(timestamp, state)
                }
              } else {
                this._profile.addCode(type, name, timestamp, start, size)
              }
            }

            _processCodeMove(from, to) {
              this._profile.moveCode(from, to)
            }

            _processCodeDelete(start) {
              this._profile.deleteCode(start)
            }

            _processFunctionMove(from, to) {
              this._profile.moveFunc(from, to)
            }

            // @override
            printError(msg) {
              if (this._silentErrors) return
              console.trace()
              console.error(msg)
            }

            processString(string) {
              var end = string.length
              var current = 0
              var next = 0
              var line
              while (current < end) {
                next = string.indexOf('\n', current)
                if (next === -1) break
                line = string.substring(current, next)
                current = next + 1
                this.processLogLine(line)
              }
            }

            filterIcStateChanges() {
              const emptyEntries = new Set()
              for (const [key, entry] of this.entriesIC) {
                entry.filterIcStateChanges()
                if (entry.updates.length === 0) emptyEntries.add(key)
              }
              for (const key of emptyEntries) this.entriesIC.delete(key)
            }

            toObject() {
              const ics = []
              for (const entry of this.entriesIC.values()) {
                ics.push(entry.hashmap)
              }
              const deopts = []
              for (const entry of this.entriesDeopt.values()) {
                deopts.push(entry.hashmap)
              }
              const codes = []
              for (const entry of this.entriesCode.values()) {
                codes.push(entry.hashmap)
              }
              return { ics, deopts, codes, root: this._root }
            }

            toJSON(indent = 2) {
              return JSON.stringify(this.toObject(), null, indent)
            }
          }

          function processLogContent(txt, root) {
            const deoptProcessor = new DeoptProcessor(root)
            deoptProcessor.processString(txt)
            deoptProcessor.filterIcStateChanges()

            return deoptProcessor
          }

          function deoptigate(groupedByFile) {
            const groupedByFileAndLocation = groupByFileAndLocation(
              groupedByFile
            )
            return groupedByFileAndLocation
          }

          module.exports = {
            processLogContent,
            deoptigate,
          }
        },
        {
          './lib/grouping/group-by-file-and-location': 58,
          './lib/log-processing/code-entry': 61,
          './lib/log-processing/deopt-entry': 62,
          './lib/log-processing/ic-entry': 63,
          './lib/log-processing/optimization-state': 65,
          'v8-tools-core/logreader': 71,
          'v8-tools-core/profile': 72,
        },
      ],
      58: [
        function (require, module, exports) {
          'use strict'

          const { keyLocation, byLocationKey } = require('./location')

          class FileLocationGrouper {
            constructor(fileGroup) {
              this._id = 0
              this._fileGroup = fileGroup
            }

            locationsForFileGroup() {
              this._icsByLocation = new Map()
              this._deoptsByLocation = new Map()
              this._codesByLocation = new Map()

              this._deoptLocations = new Set()
              this._icLocations = new Set()
              this._codeLocations = new Set()

              const { ics, deopts, codes } = this._fileGroup
              const {
                dataByLocation: icsByLocation,
                locations: icLocations,
              } = this._extractLocations(ics)
              const {
                dataByLocation: deoptsByLocation,
                locations: deoptLocations,
              } = this._extractLocations(deopts)
              const {
                dataByLocation: codesByLocation,
                locations: codeLocations,
              } = this._extractLocations(codes)

              const sortedIcLocations = Array.from(icLocations).sort(
                byLocationKey
              )
              const sortedDeoptLocations = Array.from(deoptLocations).sort(
                byLocationKey
              )
              const sortedCodeLocations = Array.from(codeLocations).sort(
                byLocationKey
              )
              return {
                icsByLocation,
                deoptsByLocation,
                codesByLocation,
                icLocations: sortedIcLocations,
                deoptLocations: sortedDeoptLocations,
                codeLocations: sortedCodeLocations,
              }
            }

            _extractLocations(dataPoints) {
              const dataByLocation = new Map()
              const locations = new Set()
              for (const dataPoint of dataPoints) {
                const { functionName, line, column } = dataPoint
                const locationKey = keyLocation({ functionName, line, column })
                locations.add(locationKey)
                dataPoint.id = this._id++
                dataByLocation.set(locationKey, dataPoint)
              }
              return { dataByLocation, locations }
            }
          }

          function groupByFileAndLocation(groupedByFile) {
            const groupedByFileAndLocation = new Map()
            for (const [file, fileGroup] of groupedByFile) {
              const fileLocationGrouper = new FileLocationGrouper(fileGroup)

              const {
                icsByLocation,
                deoptsByLocation,
                codesByLocation,
                deoptLocations,
                icLocations,
                codeLocations,
              } = fileLocationGrouper.locationsForFileGroup()

              groupedByFileAndLocation.set(
                file,
                Object.assign(fileGroup, {
                  ics: icsByLocation,
                  deopts: deoptsByLocation,
                  codes: codesByLocation,
                  deoptLocations,
                  icLocations,
                  codeLocations,
                })
              )
            }

            return groupedByFileAndLocation
          }

          module.exports = groupByFileAndLocation
        },
        { './location': 59 },
      ],
      59: [
        function (require, module, exports) {
          'use strict'

          function keyLocation({ functionName, line, column }) {
            // need to customize key since Objects get different key
            // per instance even if line + column are the same
            return `${functionName}:${line}:${column}`
          }

          function unkeyLocation(key) {
            if (key == null) return null
            const [functionName, line, column] = key.split(':')
            return {
              functionName,
              line: parseInt(line),
              column: parseInt(column),
            }
          }

          function byLocation(a, b) {
            if (a.line < b.line) return -1
            if (a.line > b.line) return 1
            if (a.column < b.column) return -1
            if (a.column > b.column) return 1
            return 0
          }

          function byLocationKey(ka, kb) {
            const a = unkeyLocation(ka)
            const b = unkeyLocation(kb)
            return byLocation(a, b)
          }

          module.exports = {
            keyLocation,
            unkeyLocation,
            byLocation,
            byLocationKey,
          }
        },
        {},
      ],
      60: [
        function (require, module, exports) {
          'use strict'

          const { highestSeverity, lowestSeverity } = require('../severities')
          const SEVERITY_2_FACTOR = 10
          const SEVERITY_3_FACTOR = 30

          function addLastCodeState(codeStates, updates) {
            const lastState = updates[updates.length - 1].state
            codeStates[lastState]++
          }

          function summarizeFile(ref) {
            var ics = ref.ics
            var deopts = ref.deopts
            var codes = ref.codes

            const icSeverities = [0, 0, 0, 0]
            const deoptSeverities = [0, 0, 0, 0]
            const codeSeverities = [0, 0, 0, 0]
            const codeStates = [0, 0, 0]
            for (const icVector of ics.values()) {
              const hs = highestSeverity(icVector.updates)
              icVector.severity = hs
              icSeverities[hs]++
            }
            for (const deoptVector of deopts.values()) {
              const hs = highestSeverity(deoptVector.updates)
              deoptVector.severity = hs
              deoptSeverities[hs]++
            }
            for (const codeVector of codes.values()) {
              const { updates } = codeVector
              let hs = lowestSeverity(updates)
              // if there are lots of updates that means the function was optimized a lot
              // which could point to an issue
              if (updates.length > 3) {
                hs = Math.max(hs, 3)
              }
              codeSeverities[hs]++
              codeVector.severity = hs
              addLastCodeState(codeStates, updates)
            }

            const severityScore =
              icSeverities[1] +
              icSeverities[2] * SEVERITY_2_FACTOR +
              icSeverities[3] * SEVERITY_3_FACTOR +
              deoptSeverities[1] +
              deoptSeverities[2] * SEVERITY_2_FACTOR +
              deoptSeverities[3] * SEVERITY_3_FACTOR +
              codeSeverities[1] +
              codeSeverities[2] * SEVERITY_2_FACTOR +
              codeSeverities[3] * SEVERITY_3_FACTOR
            const hasCriticalSeverities =
              icSeverities[2] > 0 ||
              icSeverities[3] > 0 ||
              deoptSeverities[2] > 0 ||
              deoptSeverities[3] > 0 ||
              codeSeverities[2] > 0 ||
              codeSeverities[3] > 0
            return {
              icSeverities,
              deoptSeverities,
              codeSeverities,
              codeStates,
              severityScore,
              hasCriticalSeverities,
            }
          }

          module.exports = summarizeFile
        },
        { '../severities': 68 },
      ],
      61: [
        function (require, module, exports) {
          'use strict'

          const {
            severityOfOptimizationState,
          } = require('./optimization-state')

          function normalizeFile(file) {
            // Node.js adds :line:column to the end
            return file.split(':')[0]
          }

          class CodeEntry {
            constructor({ fnFile, line, column, isScript }) {
              const parts = fnFile.split(' ')
              this._functionName = parts[0]
              this._file = normalizeFile(parts[1])
              this._line = line
              this._column = column
              this._isScript = isScript

              this.updates = []
            }

            addUpdate(timestamp, state) {
              const severity = severityOfOptimizationState(state)
              this.updates.push({ timestamp, state, severity })
            }

            get hashmap() {
              return {
                functionName: this._functionName,
                file: this._file,
                line: this._line,
                column: this._column,
                isScript: this._isScript,
                updates: this.updates,
              }
            }
          }

          module.exports = CodeEntry
        },
        { './optimization-state': 65 },
      ],
      62: [
        function (require, module, exports) {
          'use strict'

          /* eslint-disable camelcase */

          const { MIN_SEVERITY } = require('../severities')

          // <../examples/adders.js:93:27
          const sourcePositionRx = /[<]([^:]+):(\d+):(\d+)[>]/

          function safeToInt(x) {
            if (x == null) return 0
            return parseInt(x)
          }

          const SOFT = MIN_SEVERITY
          const LAZY = MIN_SEVERITY + 1
          const EAGER = MIN_SEVERITY + 2

          function getSeverity(bailoutType) {
            switch (bailoutType) {
              case 'soft':
                return SOFT
              case 'lazy':
                return LAZY
              case 'eager':
                return EAGER
            }
          }

          function unquote(s) {
            // for some reason Node.js double quotes the string, i.e. ""eager""
            return s.replace(/^"/, '').replace(/"$/, '')
          }

          class DeoptEntry {
            constructor(fnFile, file, line, column) {
              const parts = fnFile.split(' ')
              const functionName = parts[0]

              this.functionName = functionName
              this.file = file
              this.line = line
              this.column = column

              this.updates = []
            }

            addUpdate(
              timestamp,
              bailoutType,
              deoptReason,
              optimizationState,
              inliningId
            ) {
              bailoutType = unquote(bailoutType)
              deoptReason = unquote(deoptReason)

              const inlined = inliningId !== -1
              const severity = getSeverity(bailoutType)

              this.updates.push({
                timestamp,
                bailoutType,
                deoptReason,
                optimizationState,
                inlined,
                severity,
              })
            }

            get hashmap() {
              return {
                functionName: this.functionName,
                file: this.file,
                line: this.line,
                column: this.column,
                updates: this.updates,
              }
            }

            static disassembleSourcePosition(sourcePosition) {
              const m = sourcePositionRx.exec(sourcePosition)
              if (m == null) return { file: null, line: 0, column: 0 }
              return {
                file: m[1],
                line: safeToInt(m[2]),
                column: safeToInt(m[3]),
              }
            }
          }

          module.exports = DeoptEntry
        },
        { '../severities': 68 },
      ],
      63: [
        function (require, module, exports) {
          'use strict'

          const { parseIcState, severityIcState } = require('./ic-state')

          function normalizeFile(file) {
            // Node.js adds :line:column to the end
            return file.split(':')[0]
          }

          function unquote(s) {
            // for some reason Node.js double quotes the file names
            return s.replace(/^"/, '').replace(/"$/, '')
          }

          class IcEntry {
            constructor(fnFile, line, column) {
              fnFile = unquote(fnFile)
              const parts = fnFile.split(' ')
              const functionName = parts[0]
              const file = normalizeFile(parts[1])

              this.functionName = functionName
              this.file = file
              this.line = line
              this.column = column
              this.updates = []
            }

            addUpdate(type, oldState, newState, key, map, optimizationState) {
              map = map.toString(16)
              oldState = parseIcState(oldState)
              newState = parseIcState(newState)
              const severity = severityIcState(newState)

              this.updates.push({
                type,
                oldState,
                newState,
                key,
                map,
                optimizationState,
                severity,
              })
            }

            filterIcStateChanges() {
              this.updates = this.updates.filter(
                (x) => x.oldState !== x.newState
              )
            }

            get hashmap() {
              return {
                functionName: this.functionName,
                file: this.file,
                line: this.line,
                column: this.column,
                updates: this.updates,
              }
            }
          }

          module.exports = IcEntry
        },
        { './ic-state': 64 },
      ],
      64: [
        function (require, module, exports) {
          'use strict'

          const { MIN_SEVERITY } = require('../severities')

          const UNINITIALIZED = 0
          const PREMONOMORPHIC = 1
          const MONOMORPHIC = 2
          const RECOMPUTE_HANDLER = 3
          const POLYMORPHIC = 4
          const MEGAMORPHIC = 5
          const GENERIC = 6

          function parseIcState(s) {
            switch (s) {
              case '0':
                return UNINITIALIZED
              case '.':
                return PREMONOMORPHIC
              case '1':
                return MONOMORPHIC
              case '^':
                return RECOMPUTE_HANDLER
              case 'P':
                return POLYMORPHIC
              case 'N':
                return MEGAMORPHIC
              case 'G':
                return GENERIC
              default:
                throw new Error('parse: unknown ic code state: ' + s)
            }
          }

          function nameIcState(state) {
            switch (state) {
              case UNINITIALIZED:
                return 'unintialized'
              case PREMONOMORPHIC:
                return 'premonomorphic'
              case MONOMORPHIC:
                return 'monomorphic'
              case RECOMPUTE_HANDLER:
                return 'recompute handler'
              case POLYMORPHIC:
                return 'polymorphic'
              case MEGAMORPHIC:
                return 'megamorphic'
              case GENERIC:
                return 'generic'
              default:
                throw new Error('name: unknown ic code state : ' + state)
            }
          }

          function severityIcState(state) {
            switch (state) {
              case UNINITIALIZED:
                return MIN_SEVERITY
              case PREMONOMORPHIC:
                return MIN_SEVERITY
              case MONOMORPHIC:
                return MIN_SEVERITY
              case RECOMPUTE_HANDLER:
                return MIN_SEVERITY
              case POLYMORPHIC:
                return MIN_SEVERITY + 1
              case MEGAMORPHIC:
                return MIN_SEVERITY + 2
              case GENERIC:
                return MIN_SEVERITY + 2
              default:
                throw new Error('severity: unknown ic code state : ' + state)
            }
          }

          module.exports = {
            parseIcState,
            nameIcState,
            severityIcState,
          }
        },
        { '../severities': 68 },
      ],
      65: [
        function (require, module, exports) {
          'use strict'

          const { Profile } = require('v8-tools-core/profile')

          function parseOptimizationState(s) {
            switch (s) {
              case '':
                return Profile.CodeState.COMPILED
              case '~':
                return Profile.CodeState.OPTIMIZABLE
              case '*':
                return Profile.CodeState.OPTIMIZED
              default:
                throw new Error('unknown code state: ' + s)
            }
          }

          function nameOptimizationState(state) {
            switch (state) {
              case Profile.CodeState.COMPILED:
                return 'compiled'
              case Profile.CodeState.OPTIMIZABLE:
                return 'optimizable'
              case Profile.CodeState.OPTIMIZED:
                return 'optimized'
              case -1:
                return 'unknown'
              default:
                throw new Error('unknown code state: ' + state)
            }
          }

          function severityOfOptimizationState(state) {
            switch (state) {
              case Profile.CodeState.COMPILED:
                return 3
              case Profile.CodeState.OPTIMIZABLE:
                return 2
              case Profile.CodeState.OPTIMIZED:
                return 1
              case -1:
                return 3
              default:
                throw new Error('unknown code state: ' + state)
            }
          }

          module.exports = {
            parseOptimizationState,
            nameOptimizationState,
            severityOfOptimizationState,
          }
        },
        { 'v8-tools-core/profile': 72 },
      ],
      66: [
        function (require, module, exports) {
          'use strict'

          function getDigits(n) {
            if (n < 10) {
              return 1
            }
            if (n < 1e2) {
              return 2
            }
            if (n < 1e3) {
              return 3
            }
            if (n < 1e4) {
              return 4
            }
            if (n < 1e5) {
              return 5
            }
            if (n < 1e6) {
              return 6
            }
            if (n < 1e7) {
              return 2
            }
            if (n < 1e8) {
              return 8
            }
            if (n < 1e9) {
              return 9
            }
            return 10
          }

          function pad(n, totalDigits) {
            const padDigits = totalDigits - getDigits(n)
            switch (padDigits) {
              case 0:
                return '' + n
              case 1:
                return ' ' + n
              case 2:
                return '  ' + n
              case 3:
                return '   ' + n
              case 4:
                return '    ' + n
              case 5:
                return '     ' + n
              case 6:
                return '      ' + n
              case 7:
                return '       ' + n
              case 8:
                return '        ' + n
              case 9:
                return '         ' + n
              case 10:
                return '         ' + n
            }
          }

          function processLine(
            line,
            markerResolver,
            next,
            lineno,
            totalDigits
          ) {
            let s = ''
            let column = 0
            const cols = line.length - 1
            const writtenCols = new Set()
            function insert() {
              const { insertBefore, insertAfter } = markerResolver.resolve(next)
              // Write char in column only once even if multiple markers exist for it
              s += writtenCols.has(column)
                ? insertBefore + insertAfter
                : insertBefore + line[column] + insertAfter
              writtenCols.add(column)
              next = markerResolver.nextLocation()
            }
            do {
              if (next == null) {
                break
              }
              // Work our way to the column of the next marker
              while (column < next.column - 1 && column < cols) {
                s += line[column++]
                if (column >= cols) {
                  break
                }
              }
              insert()
            } while (next != null && next.line === lineno && column < cols)

            // Add remaining columns (after the last marker for this line)
            if (column < cols) {
              s += line.slice(column + 1)
            }

            return {
              renderedLine: `<span>${pad(
                lineno + 1,
                totalDigits
              )}: </span><span>${s}</span><br>`,
              nextLocation: next,
            }
          }

          function markOnly(code, markerResolver) {
            const lines = code.split('\n')
            const len = lines.length
            const totalDigits = getDigits(len)
            var result = ''
            let next = markerResolver.nextLocation()
            for (let lineno = 0; lineno < len; lineno++) {
              const line = lines[lineno]
              if (next == null || next.line > lineno + 1) {
                result += `<span>${pad(
                  lineno + 1,
                  totalDigits
                )}: </span><span>${line}</span><br>`
                continue
              }
              const { renderedLine, nextLocation } = processLine(
                line,
                markerResolver,
                next,
                lineno,
                totalDigits
              )
              result += renderedLine
              next = nextLocation
            }
            return `<div class="pre"'>${result}</div>`
          }

          module.exports = markOnly
        },
        {},
      ],
      67: [
        function (require, module, exports) {
          'use strict'

          const { severityColors, MIN_SEVERITY } = require('../severities')
          const { unkeyLocation } = require('../grouping/location')
          const assert = require('assert')

          const DEOPTSYMBOL = '▼'
          const ICSYMBOL = '☎'
          const CODESYMBOL = '▲'

          function applyMark(codeLocation, markerLocation) {
            if (codeLocation.line > markerLocation.line) {
              return true
            }
            if (codeLocation.line < markerLocation.line) {
              return false
            }
            if (codeLocation.column < markerLocation.column) {
              return false
            }
            return true
          }

          function highSeverity(map) {
            const res = new Map()
            for (const [key, info] of map) {
              if (info.severity === MIN_SEVERITY) {
                continue
              }
              res.set(key, info)
            }
            return res
          }

          function includedIn(map, arr) {
            return arr.filter((x) => map.has(x))
          }

          class MarkerResolver {
            constructor(ref) {
              var ics = ref.ics
              var deopts = ref.deopts
              var codes = ref.codes
              var icLocations = ref.icLocations
              var deoptLocations = ref.deoptLocations
              var codeLocations = ref.codeLocations
              var selectedLocation = ref.selectedLocation
              if (selectedLocation === void 0) selectedLocation = null
              var includeAllSeverities = ref.includeAllSeverities
              if (includeAllSeverities === void 0) includeAllSeverities = true

              assert(
                ics == null || icLocations != null,
                'need to provide locations for ics'
              )
              assert(
                deopts == null || deoptLocations != null,
                'need to provide locations for deopts'
              )
              assert(
                codes == null || codeLocations != null,
                'need to provide locations for codes'
              )

              this._ics = ics
              this._ics = includeAllSeverities ? ics : highSeverity(ics)
              this._icLocations = includeAllSeverities
                ? icLocations
                : includedIn(this._ics, icLocations)
              this._icLocationIdx = 0

              this._deopts = includeAllSeverities
                ? deopts
                : highSeverity(deopts)
              this._deoptLocations = includeAllSeverities
                ? deoptLocations
                : includedIn(this._deopts, deoptLocations)
              this._deoptLocationIdx = 0

              this._codes = includeAllSeverities ? codes : highSeverity(codes)
              this._codeLocations = includeAllSeverities
                ? codeLocations
                : includedIn(this._codes, codeLocations)
              this._codeLocationIdx = 0

              this._selectedLocation = selectedLocation
            }

            resolve(codeLocation) {
              let insertBefore = ''
              let insertAfter = ''
              {
                const { before, after } = this._resolveDeopt(codeLocation)
                insertBefore += before
                insertAfter += after
              }
              {
                const { before, after } = this._resolveIc(codeLocation)
                insertBefore += before
                insertAfter += after
              }
              {
                const { before, after } = this._resolveCode(codeLocation)
                insertBefore += before
                insertAfter += after
              }
              return { insertBefore, insertAfter }
            }

            nextLocation() {
              const nextIc = unkeyLocation(
                this._icLocations[this._icLocationIdx]
              )
              const nextDeopt = unkeyLocation(
                this._deoptLocations[this._deoptLocationIdx]
              )
              const nextOpt = unkeyLocation(
                this._codeLocations[this._codeLocationIdx]
              )
              return [nextDeopt, nextOpt].reduce((next, loc) => {
                if (next == null) {
                  return loc
                }
                if (loc == null) {
                  return next
                }
                if (next.line > loc.line) {
                  return loc
                }
                if (next.line < loc.line) {
                  return next
                }
                return next.column < loc.column ? next : loc
              }, nextIc)
            }

            _resolveDeopt(codeLocation) {
              if (this._deopts == null) {
                return ''
              }
              const { before, after, locationIdx } = this._resolve({
                codeLocation,
                map: this._deopts,
                locationIdx: this._deoptLocationIdx,
                locations: this._deoptLocations,
              })
              this._deoptLocationIdx = locationIdx
              return { before, after }
            }

            _resolveIc(codeLocation) {
              if (this._ics == null) {
                return ''
              }
              const { before, after, locationIdx } = this._resolve({
                codeLocation,
                map: this._ics,
                locationIdx: this._icLocationIdx,
                locations: this._icLocations,
              })
              this._icLocationIdx = locationIdx
              return { before, after }
            }

            _resolveCode(loc) {
              if (this._codes == null) {
                return ''
              }
              const { before, after, locationIdx } = this._resolve({
                codeLocation: loc,
                map: this._codes,
                locationIdx: this._codeLocationIdx,
                locations: this._codeLocations,
              })
              this._codeLocationIdx = locationIdx
              return { before, after }
            }

            _resolve(ref) {
              var map = ref.map
              var codeLocation = ref.codeLocation
              var locationIdx = ref.locationIdx
              var locations = ref.locations

              let before = ''
              let after = ''

              let locationKey = locations[locationIdx]
              let currentLocation = unkeyLocation(locationKey)

              while (
                currentLocation != null &&
                applyMark(codeLocation, currentLocation)
              ) {
                const { result, placeBefore } = this._determineMarkerSymbol(
                  map,
                  locationKey
                )
                if (placeBefore) {
                  before += result
                } else {
                  after += result
                }
                locationIdx++
                locationKey = locations[locationIdx]
                currentLocation = unkeyLocation(locationKey)
              }
              return { before, after, locationIdx }
            }

            _determineMarkerSymbol(map, key) {
              const kind =
                map === this._deopts
                  ? 'deopt'
                  : map === this._ics
                  ? 'ic'
                  : 'code'
              if (map != null && map.has(key)) {
                return this._handle(map.get(key), kind)
              }
              return { result: '', placeBefore: false }
            }

            _handle(info, kind) {
              const result = this._determineBrowserMarkerSymbol(info, kind)

              // anonymous Node.js function wrapper
              const placeBefore =
                info.isScript && info.line === 1 && info.column === 1
              return { result, placeBefore }
            }

            _determineBrowserMarkerSymbol(info, kind) {
              const symbol =
                kind === 'deopt'
                  ? DEOPTSYMBOL
                  : kind === 'ic'
                  ? ICSYMBOL
                  : CODESYMBOL
              const color = severityColors[info.severity - 1]
              const className =
                this._selectedLocation === info.id ? `${color} selected` : color
              return (
                `<a href='#'id="code-location-${info.id}" class="${className}"` +
                ` data-markerid="${info.id}" data-markertype="${kind}">${symbol}</a>`
              )
            }
          }

          module.exports = MarkerResolver
        },
        { '../grouping/location': 59, '../severities': 68, assert: 8 },
      ],
      68: [
        function (require, module, exports) {
          'use strict'

          const severityColors = ['green', 'blue', 'dark-red']

          const MIN_SEVERITY = 1
          function highestSeverity(infos) {
            return infos.reduce((highest, ref) => {
              var severity = ref.severity

              return severity > highest ? severity : highest
            }, MIN_SEVERITY)
          }

          function lowestSeverity(infos) {
            return infos.reduce((lowest, ref) => {
              var severity = ref.severity

              return severity < lowest ? severity : lowest
            }, 99)
          }

          module.exports = {
            severityColors,
            MIN_SEVERITY,
            highestSeverity,
            lowestSeverity,
          }
        },
        {},
      ],
      69: [
        function (require, module, exports) {
          // Copyright 2009 the V8 project authors. All rights reserved.
          // Redistribution and use in source and binary forms, with or without
          // modification, are permitted provided that the following conditions are
          // met:
          //
          //     * Redistributions of source code must retain the above copyright
          //       notice, this list of conditions and the following disclaimer.
          //     * Redistributions in binary form must reproduce the above
          //       copyright notice, this list of conditions and the following
          //       disclaimer in the documentation and/or other materials provided
          //       with the distribution.
          //     * Neither the name of Google Inc. nor the names of its
          //       contributors may be used to endorse or promote products derived
          //       from this software without specific prior written permission.
          //
          // THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
          // "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
          // LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
          // A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
          // OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
          // SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
          // LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
          // DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
          // THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
          // (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
          // OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

          /**
           * Constructs a mapper that maps addresses into code entries.
           *
           * @constructor
           */
          function CodeMap() {
            /**
             * Dynamic code entries. Used for JIT compiled code.
             */
            this.dynamics_ = new SplayTree()

            /**
             * Name generator for entries having duplicate names.
             */
            this.dynamicsNameGen_ = new CodeMap.NameGenerator()

            /**
             * Static code entries. Used for statically compiled code.
             */
            this.statics_ = new SplayTree()

            /**
             * Libraries entries. Used for the whole static code libraries.
             */
            this.libraries_ = new SplayTree()

            /**
             * Map of memory pages occupied with static code.
             */
            this.pages_ = []
          }

          /**
           * The number of alignment bits in a page address.
           */
          CodeMap.PAGE_ALIGNMENT = 12

          /**
           * Page size in bytes.
           */
          CodeMap.PAGE_SIZE = 1 << CodeMap.PAGE_ALIGNMENT

          /**
           * Adds a dynamic (i.e. moveable and discardable) code entry.
           *
           * @param {number} start The starting address.
           * @param {CodeMap.CodeEntry} codeEntry Code entry object.
           */
          CodeMap.prototype.addCode = function (start, codeEntry) {
            this.deleteAllCoveredNodes_(
              this.dynamics_,
              start,
              start + codeEntry.size
            )
            this.dynamics_.insert(start, codeEntry)
          }

          /**
           * Moves a dynamic code entry. Throws an exception if there is no dynamic
           * code entry with the specified starting address.
           *
           * @param {number} from The starting address of the entry being moved.
           * @param {number} to The destination address.
           */
          CodeMap.prototype.moveCode = function (from, to) {
            var removedNode = this.dynamics_.remove(from)
            this.deleteAllCoveredNodes_(
              this.dynamics_,
              to,
              to + removedNode.value.size
            )
            this.dynamics_.insert(to, removedNode.value)
          }

          /**
           * Discards a dynamic code entry. Throws an exception if there is no dynamic
           * code entry with the specified starting address.
           *
           * @param {number} start The starting address of the entry being deleted.
           */
          CodeMap.prototype.deleteCode = function (start) {
            var removedNode = this.dynamics_.remove(start)
          }

          /**
           * Adds a library entry.
           *
           * @param {number} start The starting address.
           * @param {CodeMap.CodeEntry} codeEntry Code entry object.
           */
          CodeMap.prototype.addLibrary = function (start, codeEntry) {
            this.markPages_(start, start + codeEntry.size)
            this.libraries_.insert(start, codeEntry)
          }

          /**
           * Adds a static code entry.
           *
           * @param {number} start The starting address.
           * @param {CodeMap.CodeEntry} codeEntry Code entry object.
           */
          CodeMap.prototype.addStaticCode = function (start, codeEntry) {
            this.statics_.insert(start, codeEntry)
          }

          /**
           * @private
           */
          CodeMap.prototype.markPages_ = function (start, end) {
            for (var addr = start; addr <= end; addr += CodeMap.PAGE_SIZE) {
              this.pages_[addr >>> CodeMap.PAGE_ALIGNMENT] = 1
            }
          }

          /**
           * @private
           */
          CodeMap.prototype.deleteAllCoveredNodes_ = function (
            tree,
            start,
            end
          ) {
            var to_delete = []
            var addr = end - 1
            while (addr >= start) {
              var node = tree.findGreatestLessThan(addr)
              if (!node) break
              var start2 = node.key,
                end2 = start2 + node.value.size
              if (start2 < end && start < end2) to_delete.push(start2)
              addr = start2 - 1
            }
            for (var i = 0, l = to_delete.length; i < l; ++i)
              tree.remove(to_delete[i])
          }

          /**
           * @private
           */
          CodeMap.prototype.isAddressBelongsTo_ = function (addr, node) {
            return addr >= node.key && addr < node.key + node.value.size
          }

          /**
           * @private
           */
          CodeMap.prototype.findInTree_ = function (tree, addr) {
            var node = tree.findGreatestLessThan(addr)
            return node && this.isAddressBelongsTo_(addr, node) ? node : null
          }

          /**
           * Finds a code entry that contains the specified address. Both static and
           * dynamic code entries are considered. Returns the code entry and the offset
           * within the entry.
           *
           * @param {number} addr Address.
           */
          CodeMap.prototype.findAddress = function (addr) {
            var pageAddr = addr >>> CodeMap.PAGE_ALIGNMENT
            if (pageAddr in this.pages_) {
              // Static code entries can contain "holes" of unnamed code.
              // In this case, the whole library is assigned to this address.
              var result = this.findInTree_(this.statics_, addr)
              if (!result) {
                result = this.findInTree_(this.libraries_, addr)
                if (!result) return null
              }
              return { entry: result.value, offset: addr - result.key }
            }
            var min = this.dynamics_.findMin()
            var max = this.dynamics_.findMax()
            if (
              max != null &&
              addr < max.key + max.value.size &&
              addr >= min.key
            ) {
              var dynaEntry = this.findInTree_(this.dynamics_, addr)
              if (dynaEntry == null) return null
              // Dedupe entry name.
              var entry = dynaEntry.value
              if (!entry.nameUpdated_) {
                entry.name = this.dynamicsNameGen_.getName(entry.name)
                entry.nameUpdated_ = true
              }
              return { entry: entry, offset: addr - dynaEntry.key }
            }
            return null
          }

          /**
           * Finds a code entry that contains the specified address. Both static and
           * dynamic code entries are considered.
           *
           * @param {number} addr Address.
           */
          CodeMap.prototype.findEntry = function (addr) {
            var result = this.findAddress(addr)
            return result ? result.entry : null
          }

          /**
           * Returns a dynamic code entry using its starting address.
           *
           * @param {number} addr Address.
           */
          CodeMap.prototype.findDynamicEntryByStartAddress = function (addr) {
            var node = this.dynamics_.find(addr)
            return node ? node.value : null
          }

          /**
           * Returns an array of all dynamic code entries.
           */
          CodeMap.prototype.getAllDynamicEntries = function () {
            return this.dynamics_.exportValues()
          }

          /**
           * Returns an array of pairs of all dynamic code entries and their addresses.
           */
          CodeMap.prototype.getAllDynamicEntriesWithAddresses = function () {
            return this.dynamics_.exportKeysAndValues()
          }

          /**
           * Returns an array of all static code entries.
           */
          CodeMap.prototype.getAllStaticEntries = function () {
            return this.statics_.exportValues()
          }

          /**
           * Returns an array of pairs of all static code entries and their addresses.
           */
          CodeMap.prototype.getAllStaticEntriesWithAddresses = function () {
            return this.statics_.exportKeysAndValues()
          }

          /**
           * Returns an array of all libraries entries.
           */
          CodeMap.prototype.getAllLibrariesEntries = function () {
            return this.libraries_.exportValues()
          }

          /**
           * Creates a code entry object.
           *
           * @param {number} size Code entry size in bytes.
           * @param {string} opt_name Code entry name.
           * @param {string} opt_type Code entry type, e.g. SHARED_LIB, CPP.
           * @constructor
           */
          CodeMap.CodeEntry = function (size, opt_name, opt_type) {
            this.size = size
            this.name = opt_name || ''
            this.type = opt_type || ''
            this.nameUpdated_ = false
          }

          CodeMap.CodeEntry.prototype.getName = function () {
            return this.name
          }

          CodeMap.CodeEntry.prototype.toString = function () {
            return this.name + ': ' + this.size.toString(16)
          }

          CodeMap.NameGenerator = function () {
            this.knownNames_ = {}
          }

          CodeMap.NameGenerator.prototype.getName = function (name) {
            if (!(name in this.knownNames_)) {
              this.knownNames_[name] = 0
              return name
            }
            var count = ++this.knownNames_[name]
            return name + ' {' + count + '}'
          }

          if (
            typeof module === 'object' &&
            typeof module.exports === 'object'
          ) {
            var SplayTree = require('./splaytree.js')
            module.exports = CodeMap
          }
        },
        { './splaytree.js': 73 },
      ],
      70: [
        function (require, module, exports) {
          // Copyright 2009 the V8 project authors. All rights reserved.
          // Redistribution and use in source and binary forms, with or without
          // modification, are permitted provided that the following conditions are
          // met:
          //
          //     * Redistributions of source code must retain the above copyright
          //       notice, this list of conditions and the following disclaimer.
          //     * Redistributions in binary form must reproduce the above
          //       copyright notice, this list of conditions and the following
          //       disclaimer in the documentation and/or other materials provided
          //       with the distribution.
          //     * Neither the name of Google Inc. nor the names of its
          //       contributors may be used to endorse or promote products derived
          //       from this software without specific prior written permission.
          //
          // THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
          // "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
          // LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
          // A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
          // OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
          // SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
          // LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
          // DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
          // THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
          // (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
          // OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

          /**
           * Creates a CSV lines parser.
           */
          class CsvParser {
            /**
             * Converts \x00 and \u0000 escape sequences in the given string.
             *
             * @param {string} input field.
             **/
            escapeField(string) {
              let nextPos = string.indexOf('\\')
              if (nextPos === -1) return string

              let result = string.substring(0, nextPos)
              // Escape sequences of the form \x00 and \u0000;
              let endPos = string.length
              let pos = 0
              while (nextPos !== -1) {
                let escapeIdentifier = string.charAt(nextPos + 1)
                pos = nextPos + 2
                if (escapeIdentifier == 'n') {
                  result += '\n'
                  nextPos = pos
                } else {
                  if (escapeIdentifier == 'x') {
                    // \x00 ascii range escapes consume 2 chars.
                    nextPos = pos + 2
                  } else {
                    // \u0000 unicode range escapes consume 4 chars.
                    nextPos = pos + 4
                  }
                  // Convert the selected escape sequence to a single character.
                  let escapeChars = string.substring(pos, nextPos)
                  result += String.fromCharCode(parseInt(escapeChars, 16))
                }

                // Continue looking for the next escape sequence.
                pos = nextPos
                nextPos = string.indexOf('\\', pos)
                // If there are no more escape sequences consume the rest of the string.
                if (nextPos === -1) {
                  result += string.substr(pos)
                } else if (pos != nextPos) {
                  result += string.substring(pos, nextPos)
                }
              }
              return result
            }

            /**
             * Parses a line of CSV-encoded values. Returns an array of fields.
             *
             * @param {string} line Input line.
             */
            parseLine(line) {
              var pos = 0
              var endPos = line.length
              var fields = []
              if (endPos == 0) return fields
              let nextPos = 0
              while (nextPos !== -1) {
                nextPos = line.indexOf(',', pos)
                let field
                if (nextPos === -1) {
                  field = line.substr(pos)
                } else {
                  field = line.substring(pos, nextPos)
                }
                fields.push(this.escapeField(field))
                pos = nextPos + 1
              }
              return fields
            }
          }

          if (
            typeof module === 'object' &&
            typeof module.exports === 'object'
          ) {
            module.exports = CsvParser
          }
        },
        {},
      ],
      71: [
        function (require, module, exports) {
          // Copyright 2011 the V8 project authors. All rights reserved.
          // Redistribution and use in source and binary forms, with or without
          // modification, are permitted provided that the following conditions are
          // met:
          //
          //     * Redistributions of source code must retain the above copyright
          //       notice, this list of conditions and the following disclaimer.
          //     * Redistributions in binary form must reproduce the above
          //       copyright notice, this list of conditions and the following
          //       disclaimer in the documentation and/or other materials provided
          //       with the distribution.
          //     * Neither the name of Google Inc. nor the names of its
          //       contributors may be used to endorse or promote products derived
          //       from this software without specific prior written permission.
          //
          // THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
          // "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
          // LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
          // A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
          // OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
          // SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
          // LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
          // DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
          // THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
          // (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
          // OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

          /**
           * @fileoverview Log Reader is used to process log file produced by V8.
           */

          /**
           * Base class for processing log files.
           *
           * @param {Array.<Object>} dispatchTable A table used for parsing and processing
           *     log records.
           * @param {boolean} timedRange Ignore ticks outside timed range.
           * @param {boolean} pairwiseTimedRange Ignore ticks outside pairs of timer
           *     markers.
           * @constructor
           */
          function LogReader(dispatchTable, timedRange, pairwiseTimedRange) {
            /**
             * @type {Array.<Object>}
             */
            this.dispatchTable_ = dispatchTable

            /**
             * @type {boolean}
             */
            this.timedRange_ = timedRange

            /**
             * @type {boolean}
             */
            this.pairwiseTimedRange_ = pairwiseTimedRange
            if (pairwiseTimedRange) {
              this.timedRange_ = true
            }

            /**
             * Current line.
             * @type {number}
             */
            this.lineNum_ = 0

            /**
             * CSV lines parser.
             * @type {CsvParser}
             */
            this.csvParser_ = new CsvParser()

            /**
             * Keeps track of whether we've seen a "current-time" tick yet.
             * @type {boolean}
             */
            this.hasSeenTimerMarker_ = false

            /**
             * List of log lines seen since last "current-time" tick.
             * @type {Array.<String>}
             */
            this.logLinesSinceLastTimerMarker_ = []
          }

          /**
           * Used for printing error messages.
           *
           * @param {string} str Error message.
           */
          LogReader.prototype.printError = function (str) {
            // Do nothing.
          }

          /**
           * Processes a portion of V8 profiler event log.
           *
           * @param {string} chunk A portion of log.
           */
          LogReader.prototype.processLogChunk = function (chunk) {
            this.processLog_(chunk.split('\n'))
          }

          /**
           * Processes a line of V8 profiler event log.
           *
           * @param {string} line A line of log.
           */
          LogReader.prototype.processLogLine = function (line) {
            if (!this.timedRange_) {
              this.processLog_([line])
              return
            }
            if (line.startsWith('current-time')) {
              if (this.hasSeenTimerMarker_) {
                this.processLog_(this.logLinesSinceLastTimerMarker_)
                this.logLinesSinceLastTimerMarker_ = []
                // In pairwise mode, a "current-time" line ends the timed range.
                if (this.pairwiseTimedRange_) {
                  this.hasSeenTimerMarker_ = false
                }
              } else {
                this.hasSeenTimerMarker_ = true
              }
            } else {
              if (this.hasSeenTimerMarker_) {
                this.logLinesSinceLastTimerMarker_.push(line)
              } else if (!line.startsWith('tick')) {
                this.processLog_([line])
              }
            }
          }

          /**
           * Processes stack record.
           *
           * @param {number} pc Program counter.
           * @param {number} func JS Function.
           * @param {Array.<string>} stack String representation of a stack.
           * @return {Array.<number>} Processed stack.
           */
          LogReader.prototype.processStack = function (pc, func, stack) {
            var fullStack = func ? [pc, func] : [pc]
            var prevFrame = pc
            for (var i = 0, n = stack.length; i < n; ++i) {
              var frame = stack[i]
              var firstChar = frame.charAt(0)
              if (firstChar == '+' || firstChar == '-') {
                // An offset from the previous frame.
                prevFrame += parseInt(frame, 16)
                fullStack.push(prevFrame)
                // Filter out possible 'overflow' string.
              } else if (firstChar != 'o') {
                fullStack.push(parseInt(frame, 16))
              } else {
                this.printError('dropping: ' + frame)
              }
            }
            return fullStack
          }

          /**
           * Returns whether a particular dispatch must be skipped.
           *
           * @param {!Object} dispatch Dispatch record.
           * @return {boolean} True if dispatch must be skipped.
           */
          LogReader.prototype.skipDispatch = function (dispatch) {
            return false
          }

          /**
           * Does a dispatch of a log record.
           *
           * @param {Array.<string>} fields Log record.
           * @private
           */
          LogReader.prototype.dispatchLogRow_ = function (fields) {
            // Obtain the dispatch.
            var command = fields[0]
            if (!(command in this.dispatchTable_)) return

            var dispatch = this.dispatchTable_[command]

            if (dispatch === null || this.skipDispatch(dispatch)) {
              return
            }

            // Parse fields.
            var parsedFields = []
            for (var i = 0; i < dispatch.parsers.length; ++i) {
              var parser = dispatch.parsers[i]
              if (parser === null) {
                parsedFields.push(fields[1 + i])
              } else if (typeof parser == 'function') {
                parsedFields.push(parser(fields[1 + i]))
              } else {
                // var-args
                parsedFields.push(fields.slice(1 + i))
                break
              }
            }

            // Run the processor.
            dispatch.processor.apply(this, parsedFields)
          }

          /**
           * Processes log lines.
           *
           * @param {Array.<string>} lines Log lines.
           * @private
           */
          LogReader.prototype.processLog_ = function (lines) {
            for (var i = 0, n = lines.length; i < n; ++i, ++this.lineNum_) {
              var line = lines[i]
              if (!line) {
                continue
              }
              try {
                var fields = this.csvParser_.parseLine(line)
                this.dispatchLogRow_(fields)
              } catch (e) {
                this.printError(
                  'line ' + (this.lineNum_ + 1) + ': ' + (e.message || e)
                )
              }
            }
          }

          if (
            typeof module === 'object' &&
            typeof module.exports === 'object'
          ) {
            var CsvParser = require('./csvparser.js')
            module.exports = LogReader
          }
        },
        { './csvparser.js': 70 },
      ],
      72: [
        function (require, module, exports) {
          // Copyright 2009 the V8 project authors. All rights reserved.
          // Redistribution and use in source and binary forms, with or without
          // modification, are permitted provided that the following conditions are
          // met:
          //
          //     * Redistributions of source code must retain the above copyright
          //       notice, this list of conditions and the following disclaimer.
          //     * Redistributions in binary form must reproduce the above
          //       copyright notice, this list of conditions and the following
          //       disclaimer in the documentation and/or other materials provided
          //       with the distribution.
          //     * Neither the name of Google Inc. nor the names of its
          //       contributors may be used to endorse or promote products derived
          //       from this software without specific prior written permission.
          //
          // THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
          // "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
          // LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
          // A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
          // OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
          // SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
          // LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
          // DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
          // THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
          // (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
          // OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

          if (
            typeof module === 'object' &&
            typeof module.exports === 'object'
          ) {
            var CodeMap = require('./codemap.js')
            module.exports = {
              Profile,
              CallTree,
              JsonProfile,
            }
          }

          /**
           * Creates a profile object for processing profiling-related events
           * and calculating function execution times.
           *
           * @constructor
           */
          function Profile() {
            this.codeMap_ = new CodeMap()
            this.topDownTree_ = new CallTree()
            this.bottomUpTree_ = new CallTree()
            this.c_entries_ = {}
            this.ticks_ = []
          }

          /**
           * Returns whether a function with the specified name must be skipped.
           * Should be overriden by subclasses.
           *
           * @param {string} name Function name.
           */
          Profile.prototype.skipThisFunction = function (name) {
            return false
          }

          /**
           * Enum for profiler operations that involve looking up existing
           * code entries.
           *
           * @enum {number}
           */
          Profile.Operation = {
            MOVE: 0,
            DELETE: 1,
            TICK: 2,
          }

          /**
           * Enum for code state regarding its dynamic optimization.
           *
           * @enum {number}
           */
          Profile.CodeState = {
            COMPILED: 0,
            OPTIMIZABLE: 1,
            OPTIMIZED: 2,
          }

          /**
           * Called whenever the specified operation has failed finding a function
           * containing the specified address. Should be overriden by subclasses.
           * See the Profile.Operation enum for the list of
           * possible operations.
           *
           * @param {number} operation Operation.
           * @param {number} addr Address of the unknown code.
           * @param {number} opt_stackPos If an unknown address is encountered
           *     during stack strace processing, specifies a position of the frame
           *     containing the address.
           */
          Profile.prototype.handleUnknownCode = function (
            operation,
            addr,
            opt_stackPos
          ) {}

          /**
           * Registers a library.
           *
           * @param {string} name Code entry name.
           * @param {number} startAddr Starting address.
           * @param {number} endAddr Ending address.
           */
          Profile.prototype.addLibrary = function (name, startAddr, endAddr) {
            var entry = new CodeMap.CodeEntry(
              endAddr - startAddr,
              name,
              'SHARED_LIB'
            )
            this.codeMap_.addLibrary(startAddr, entry)
            return entry
          }

          /**
           * Registers statically compiled code entry.
           *
           * @param {string} name Code entry name.
           * @param {number} startAddr Starting address.
           * @param {number} endAddr Ending address.
           */
          Profile.prototype.addStaticCode = function (
            name,
            startAddr,
            endAddr
          ) {
            var entry = new CodeMap.CodeEntry(endAddr - startAddr, name, 'CPP')
            this.codeMap_.addStaticCode(startAddr, entry)
            return entry
          }

          /**
           * Registers dynamic (JIT-compiled) code entry.
           *
           * @param {string} type Code entry type.
           * @param {string} name Code entry name.
           * @param {number} start Starting address.
           * @param {number} size Code entry size.
           */
          Profile.prototype.addCode = function (
            type,
            name,
            timestamp,
            start,
            size
          ) {
            var entry = new Profile.DynamicCodeEntry(size, type, name)
            this.codeMap_.addCode(start, entry)
            return entry
          }

          /**
           * Registers dynamic (JIT-compiled) code entry.
           *
           * @param {string} type Code entry type.
           * @param {string} name Code entry name.
           * @param {number} start Starting address.
           * @param {number} size Code entry size.
           * @param {number} funcAddr Shared function object address.
           * @param {Profile.CodeState} state Optimization state.
           */
          Profile.prototype.addFuncCode = function (
            type,
            name,
            timestamp,
            start,
            size,
            funcAddr,
            state
          ) {
            // As code and functions are in the same address space,
            // it is safe to put them in a single code map.
            var func = this.codeMap_.findDynamicEntryByStartAddress(funcAddr)
            if (!func) {
              func = new Profile.FunctionEntry(name)
              this.codeMap_.addCode(funcAddr, func)
            } else if (func.name !== name) {
              // Function object has been overwritten with a new one.
              func.name = name
            }
            var entry = this.codeMap_.findDynamicEntryByStartAddress(start)
            if (entry) {
              if (entry.size === size && entry.func === func) {
                // Entry state has changed.
                entry.state = state
              }
            } else {
              entry = new Profile.DynamicFuncCodeEntry(size, type, func, state)
              this.codeMap_.addCode(start, entry)
            }
            return entry
          }

          /**
           * Reports about moving of a dynamic code entry.
           *
           * @param {number} from Current code entry address.
           * @param {number} to New code entry address.
           */
          Profile.prototype.moveCode = function (from, to) {
            try {
              this.codeMap_.moveCode(from, to)
            } catch (e) {
              this.handleUnknownCode(Profile.Operation.MOVE, from)
            }
          }

          Profile.prototype.deoptCode = function (
            timestamp,
            code,
            inliningId,
            scriptOffset,
            bailoutType,
            sourcePositionText,
            deoptReasonText
          ) {}

          /**
           * Reports about deletion of a dynamic code entry.
           *
           * @param {number} start Starting address.
           */
          Profile.prototype.deleteCode = function (start) {
            try {
              this.codeMap_.deleteCode(start)
            } catch (e) {
              this.handleUnknownCode(Profile.Operation.DELETE, start)
            }
          }

          /**
           * Adds source positions for given code.
           */
          Profile.prototype.addSourcePositions = function (
            start,
            script,
            startPos,
            endPos,
            sourcePositions,
            inliningPositions,
            inlinedFunctions
          ) {
            // CLI does not need source code => ignore.
          }

          /**
           * Adds script source code.
           */
          Profile.prototype.addScriptSource = function (script, source) {
            // CLI does not need source code => ignore.
          }

          /**
           * Reports about moving of a dynamic code entry.
           *
           * @param {number} from Current code entry address.
           * @param {number} to New code entry address.
           */
          Profile.prototype.moveFunc = function (from, to) {
            if (this.codeMap_.findDynamicEntryByStartAddress(from)) {
              this.codeMap_.moveCode(from, to)
            }
          }

          /**
           * Retrieves a code entry by an address.
           *
           * @param {number} addr Entry address.
           */
          Profile.prototype.findEntry = function (addr) {
            return this.codeMap_.findEntry(addr)
          }

          /**
           * Records a tick event. Stack must contain a sequence of
           * addresses starting with the program counter value.
           *
           * @param {Array<number>} stack Stack sample.
           */
          Profile.prototype.recordTick = function (time_ns, vmState, stack) {
            var processedStack = this.resolveAndFilterFuncs_(stack)
            this.bottomUpTree_.addPath(processedStack)
            processedStack.reverse()
            this.topDownTree_.addPath(processedStack)
          }

          /**
           * Translates addresses into function names and filters unneeded
           * functions.
           *
           * @param {Array<number>} stack Stack sample.
           */
          Profile.prototype.resolveAndFilterFuncs_ = function (stack) {
            var result = []
            var last_seen_c_function = ''
            var look_for_first_c_function = false
            for (var i = 0; i < stack.length; ++i) {
              var entry = this.codeMap_.findEntry(stack[i])
              if (entry) {
                var name = entry.getName()
                if (
                  i === 0 &&
                  (entry.type === 'CPP' || entry.type === 'SHARED_LIB')
                ) {
                  look_for_first_c_function = true
                }
                if (look_for_first_c_function && entry.type === 'CPP') {
                  last_seen_c_function = name
                }
                if (!this.skipThisFunction(name)) {
                  result.push(name)
                }
              } else {
                this.handleUnknownCode(Profile.Operation.TICK, stack[i], i)
                if (i === 0) result.push('UNKNOWN')
              }
              if (
                look_for_first_c_function &&
                i > 0 &&
                (!entry || entry.type !== 'CPP') &&
                last_seen_c_function !== ''
              ) {
                if (this.c_entries_[last_seen_c_function] === undefined) {
                  this.c_entries_[last_seen_c_function] = 0
                }
                this.c_entries_[last_seen_c_function]++
                look_for_first_c_function = false // Found it, we're done.
              }
            }
            return result
          }

          /**
           * Performs a BF traversal of the top down call graph.
           *
           * @param {function(CallTree.Node)} f Visitor function.
           */
          Profile.prototype.traverseTopDownTree = function (f) {
            this.topDownTree_.traverse(f)
          }

          /**
           * Performs a BF traversal of the bottom up call graph.
           *
           * @param {function(CallTree.Node)} f Visitor function.
           */
          Profile.prototype.traverseBottomUpTree = function (f) {
            this.bottomUpTree_.traverse(f)
          }

          /**
           * Calculates a top down profile for a node with the specified label.
           * If no name specified, returns the whole top down calls tree.
           *
           * @param {string} opt_label Node label.
           */
          Profile.prototype.getTopDownProfile = function (opt_label) {
            return this.getTreeProfile_(this.topDownTree_, opt_label)
          }

          /**
           * Calculates a bottom up profile for a node with the specified label.
           * If no name specified, returns the whole bottom up calls tree.
           *
           * @param {string} opt_label Node label.
           */
          Profile.prototype.getBottomUpProfile = function (opt_label) {
            return this.getTreeProfile_(this.bottomUpTree_, opt_label)
          }

          /**
           * Helper function for calculating a tree profile.
           *
           * @param {Profile.CallTree} tree Call tree.
           * @param {string} opt_label Node label.
           */
          Profile.prototype.getTreeProfile_ = function (tree, opt_label) {
            if (!opt_label) {
              tree.computeTotalWeights()
              return tree
            } else {
              var subTree = tree.cloneSubtree(opt_label)
              subTree.computeTotalWeights()
              return subTree
            }
          }

          /**
           * Calculates a flat profile of callees starting from a node with
           * the specified label. If no name specified, starts from the root.
           *
           * @param {string} opt_label Starting node label.
           */
          Profile.prototype.getFlatProfile = function (opt_label) {
            var counters = new CallTree()
            var rootLabel = opt_label || CallTree.ROOT_NODE_LABEL
            var precs = {}
            precs[rootLabel] = 0
            var root = counters.findOrAddChild(rootLabel)

            this.topDownTree_.computeTotalWeights()
            this.topDownTree_.traverseInDepth(
              function onEnter(node) {
                if (!(node.label in precs)) {
                  precs[node.label] = 0
                }
                var nodeLabelIsRootLabel = node.label == rootLabel
                if (nodeLabelIsRootLabel || precs[rootLabel] > 0) {
                  if (precs[rootLabel] == 0) {
                    root.selfWeight += node.selfWeight
                    root.totalWeight += node.totalWeight
                  } else {
                    var rec = root.findOrAddChild(node.label)
                    rec.selfWeight += node.selfWeight
                    if (nodeLabelIsRootLabel || precs[node.label] == 0) {
                      rec.totalWeight += node.totalWeight
                    }
                  }
                  precs[node.label]++
                }
              },
              function onExit(node) {
                if (node.label == rootLabel || precs[rootLabel] > 0) {
                  precs[node.label]--
                }
              },
              null
            )

            if (!opt_label) {
              // If we have created a flat profile for the whole program, we don't
              // need an explicit root in it. Thus, replace the counters tree
              // root with the node corresponding to the whole program.
              counters.root_ = root
            } else {
              // Propagate weights so percents can be calculated correctly.
              counters.getRoot().selfWeight = root.selfWeight
              counters.getRoot().totalWeight = root.totalWeight
            }
            return counters
          }

          Profile.CEntryNode = function (name, ticks) {
            this.name = name
            this.ticks = ticks
          }

          Profile.prototype.getCEntryProfile = function () {
            var result = [new Profile.CEntryNode('TOTAL', 0)]
            var total_ticks = 0
            for (var f in this.c_entries_) {
              var ticks = this.c_entries_[f]
              total_ticks += ticks
              result.push(new Profile.CEntryNode(f, ticks))
            }
            result[0].ticks = total_ticks // Sorting will keep this at index 0.
            result.sort(function (n1, n2) {
              return n2.ticks - n1.ticks || (n2.name < n1.name ? -1 : 1)
            })
            return result
          }

          /**
           * Cleans up function entries that are not referenced by code entries.
           */
          Profile.prototype.cleanUpFuncEntries = function () {
            var referencedFuncEntries = []
            var entries = this.codeMap_.getAllDynamicEntriesWithAddresses()
            for (var i = 0, l = entries.length; i < l; ++i) {
              if (entries[i][1].constructor === Profile.FunctionEntry) {
                entries[i][1].used = false
              }
            }
            for (var i = 0, l = entries.length; i < l; ++i) {
              if ('func' in entries[i][1]) {
                entries[i][1].func.used = true
              }
            }
            for (var i = 0, l = entries.length; i < l; ++i) {
              if (
                entries[i][1].constructor === Profile.FunctionEntry &&
                !entries[i][1].used
              ) {
                this.codeMap_.deleteCode(entries[i][0])
              }
            }
          }

          /**
           * Creates a dynamic code entry.
           *
           * @param {number} size Code size.
           * @param {string} type Code type.
           * @param {string} name Function name.
           * @constructor
           */
          Profile.DynamicCodeEntry = function (size, type, name) {
            CodeMap.CodeEntry.call(this, size, name, type)
          }

          /**
           * Returns node name.
           */
          Profile.DynamicCodeEntry.prototype.getName = function () {
            return this.type + ': ' + this.name
          }

          /**
           * Returns raw node name (without type decoration).
           */
          Profile.DynamicCodeEntry.prototype.getRawName = function () {
            return this.name
          }

          Profile.DynamicCodeEntry.prototype.isJSFunction = function () {
            return false
          }

          Profile.DynamicCodeEntry.prototype.toString = function () {
            return this.getName() + ': ' + this.size.toString(16)
          }

          /**
           * Creates a dynamic code entry.
           *
           * @param {number} size Code size.
           * @param {string} type Code type.
           * @param {Profile.FunctionEntry} func Shared function entry.
           * @param {Profile.CodeState} state Code optimization state.
           * @constructor
           */
          Profile.DynamicFuncCodeEntry = function (size, type, func, state) {
            CodeMap.CodeEntry.call(this, size, '', type)
            this.func = func
            this.state = state
          }

          Profile.DynamicFuncCodeEntry.STATE_PREFIX = ['', '~', '*']

          /**
           * Returns state.
           */
          Profile.DynamicFuncCodeEntry.prototype.getState = function () {
            return Profile.DynamicFuncCodeEntry.STATE_PREFIX[this.state]
          }

          /**
           * Returns node name.
           */
          Profile.DynamicFuncCodeEntry.prototype.getName = function () {
            var name = this.func.getName()
            return this.type + ': ' + this.getState() + name
          }

          /**
           * Returns raw node name (without type decoration).
           */
          Profile.DynamicFuncCodeEntry.prototype.getRawName = function () {
            return this.func.getName()
          }

          Profile.DynamicFuncCodeEntry.prototype.isJSFunction = function () {
            return true
          }

          Profile.DynamicFuncCodeEntry.prototype.toString = function () {
            return this.getName() + ': ' + this.size.toString(16)
          }

          /**
           * Creates a shared function object entry.
           *
           * @param {string} name Function name.
           * @constructor
           */
          Profile.FunctionEntry = function (name) {
            CodeMap.CodeEntry.call(this, 0, name)
          }

          /**
           * Returns node name.
           */
          Profile.FunctionEntry.prototype.getName = function () {
            var name = this.name
            if (name.length == 0) {
              name = '<anonymous>'
            } else if (name.charAt(0) == ' ') {
              // An anonymous function with location: " aaa.js:10".
              name = '<anonymous>' + name
            }
            return name
          }

          Profile.FunctionEntry.prototype.toString =
            CodeMap.CodeEntry.prototype.toString

          /**
           * Constructs a call graph.
           *
           * @constructor
           */
          function CallTree() {
            this.root_ = new CallTree.Node(CallTree.ROOT_NODE_LABEL)
          }

          /**
           * The label of the root node.
           */
          CallTree.ROOT_NODE_LABEL = ''

          /**
           * @private
           */
          CallTree.prototype.totalsComputed_ = false

          /**
           * Returns the tree root.
           */
          CallTree.prototype.getRoot = function () {
            return this.root_
          }

          /**
           * Adds the specified call path, constructing nodes as necessary.
           *
           * @param {Array<string>} path Call path.
           */
          CallTree.prototype.addPath = function (path) {
            if (path.length == 0) {
              return
            }
            var curr = this.root_
            for (var i = 0; i < path.length; ++i) {
              curr = curr.findOrAddChild(path[i])
            }
            curr.selfWeight++
            this.totalsComputed_ = false
          }

          /**
           * Finds an immediate child of the specified parent with the specified
           * label, creates a child node if necessary. If a parent node isn't
           * specified, uses tree root.
           *
           * @param {string} label Child node label.
           */
          CallTree.prototype.findOrAddChild = function (label) {
            return this.root_.findOrAddChild(label)
          }

          /**
           * Creates a subtree by cloning and merging all subtrees rooted at nodes
           * with a given label. E.g. cloning the following call tree on label 'A'
           * will give the following result:
           *
           *           <A>--<B>                                     <B>
           *          /                                            /
           *     <root>             == clone on 'A' ==>  <root>--<A>
           *          \                                            \
           *           <C>--<A>--<D>                                <D>
           *
           * And <A>'s selfWeight will be the sum of selfWeights of <A>'s from the
           * source call tree.
           *
           * @param {string} label The label of the new root node.
           */
          CallTree.prototype.cloneSubtree = function (label) {
            var subTree = new CallTree()
            this.traverse(function (node, parent) {
              if (!parent && node.label != label) {
                return null
              }
              var child = (parent ? parent : subTree).findOrAddChild(node.label)
              child.selfWeight += node.selfWeight
              return child
            })
            return subTree
          }

          /**
           * Computes total weights in the call graph.
           */
          CallTree.prototype.computeTotalWeights = function () {
            if (this.totalsComputed_) {
              return
            }
            this.root_.computeTotalWeight()
            this.totalsComputed_ = true
          }

          /**
           * Traverses the call graph in preorder. This function can be used for
           * building optionally modified tree clones. This is the boilerplate code
           * for this scenario:
           *
           * callTree.traverse(function(node, parentClone) {
           *   var nodeClone = cloneNode(node);
           *   if (parentClone)
           *     parentClone.addChild(nodeClone);
           *   return nodeClone;
           * });
           *
           * @param {function(CallTree.Node, *)} f Visitor function.
           *    The second parameter is the result of calling 'f' on the parent node.
           */
          CallTree.prototype.traverse = function (f) {
            var pairsToProcess = new ConsArray()
            pairsToProcess.concat([{ node: this.root_, param: null }])
            while (!pairsToProcess.atEnd()) {
              var pair = pairsToProcess.next()
              var node = pair.node
              var newParam = f(node, pair.param)
              var morePairsToProcess = []
              node.forEachChild(function (child) {
                morePairsToProcess.push({ node: child, param: newParam })
              })
              pairsToProcess.concat(morePairsToProcess)
            }
          }

          /**
           * Performs an indepth call graph traversal.
           *
           * @param {function(CallTree.Node)} enter A function called
           *     prior to visiting node's children.
           * @param {function(CallTree.Node)} exit A function called
           *     after visiting node's children.
           */
          CallTree.prototype.traverseInDepth = function (enter, exit) {
            function traverse(node) {
              enter(node)
              node.forEachChild(traverse)
              exit(node)
            }
            traverse(this.root_)
          }

          /**
           * Constructs a call graph node.
           *
           * @param {string} label Node label.
           * @param {CallTree.Node} opt_parent Node parent.
           */
          CallTree.Node = function (label, opt_parent) {
            this.label = label
            this.parent = opt_parent
            this.children = {}
          }

          /**
           * Node self weight (how many times this node was the last node in
           * a call path).
           * @type {number}
           */
          CallTree.Node.prototype.selfWeight = 0

          /**
           * Node total weight (includes weights of all children).
           * @type {number}
           */
          CallTree.Node.prototype.totalWeight = 0

          /**
           * Adds a child node.
           *
           * @param {string} label Child node label.
           */
          CallTree.Node.prototype.addChild = function (label) {
            var child = new CallTree.Node(label, this)
            this.children[label] = child
            return child
          }

          /**
           * Computes node's total weight.
           */
          CallTree.Node.prototype.computeTotalWeight = function () {
            var totalWeight = this.selfWeight
            this.forEachChild(function (child) {
              totalWeight += child.computeTotalWeight()
            })
            return (this.totalWeight = totalWeight)
          }

          /**
           * Returns all node's children as an array.
           */
          CallTree.Node.prototype.exportChildren = function () {
            var result = []
            this.forEachChild(function (node) {
              result.push(node)
            })
            return result
          }

          /**
           * Finds an immediate child with the specified label.
           *
           * @param {string} label Child node label.
           */
          CallTree.Node.prototype.findChild = function (label) {
            return this.children[label] || null
          }

          /**
           * Finds an immediate child with the specified label, creates a child
           * node if necessary.
           *
           * @param {string} label Child node label.
           */
          CallTree.Node.prototype.findOrAddChild = function (label) {
            return this.findChild(label) || this.addChild(label)
          }

          /**
           * Calls the specified function for every child.
           *
           * @param {function(CallTree.Node)} f Visitor function.
           */
          CallTree.Node.prototype.forEachChild = function (f) {
            for (var c in this.children) {
              f(this.children[c])
            }
          }

          /**
           * Walks up from the current node up to the call tree root.
           *
           * @param {function(CallTree.Node)} f Visitor function.
           */
          CallTree.Node.prototype.walkUpToRoot = function (f) {
            for (var curr = this; curr != null; curr = curr.parent) {
              f(curr)
            }
          }

          /**
           * Tries to find a node with the specified path.
           *
           * @param {Array<string>} labels The path.
           * @param {function(CallTree.Node)} opt_f Visitor function.
           */
          CallTree.Node.prototype.descendToChild = function (labels, opt_f) {
            for (
              var pos = 0, curr = this;
              pos < labels.length && curr != null;
              pos++
            ) {
              var child = curr.findChild(labels[pos])
              if (opt_f) {
                opt_f(child, pos)
              }
              curr = child
            }
            return curr
          }

          function JsonProfile() {
            this.codeMap_ = new CodeMap()
            this.codeEntries_ = []
            this.functionEntries_ = []
            this.ticks_ = []
            this.scripts_ = []
          }

          JsonProfile.prototype.addLibrary = function (
            name,
            startAddr,
            endAddr
          ) {
            var entry = new CodeMap.CodeEntry(
              endAddr - startAddr,
              name,
              'SHARED_LIB'
            )
            this.codeMap_.addLibrary(startAddr, entry)

            entry.codeId = this.codeEntries_.length
            this.codeEntries_.push({ name: entry.name, type: entry.type })
            return entry
          }

          JsonProfile.prototype.addStaticCode = function (
            name,
            startAddr,
            endAddr
          ) {
            var entry = new CodeMap.CodeEntry(endAddr - startAddr, name, 'CPP')
            this.codeMap_.addStaticCode(startAddr, entry)

            entry.codeId = this.codeEntries_.length
            this.codeEntries_.push({ name: entry.name, type: entry.type })
            return entry
          }

          JsonProfile.prototype.addCode = function (
            kind,
            name,
            timestamp,
            start,
            size
          ) {
            var entry = new CodeMap.CodeEntry(size, name, 'CODE')
            this.codeMap_.addCode(start, entry)

            entry.codeId = this.codeEntries_.length
            this.codeEntries_.push({
              name: entry.name,
              timestamp: timestamp,
              type: entry.type,
              kind: kind,
            })

            return entry
          }

          JsonProfile.prototype.addFuncCode = function (
            kind,
            name,
            timestamp,
            start,
            size,
            funcAddr,
            state
          ) {
            // As code and functions are in the same address space,
            // it is safe to put them in a single code map.
            var func = this.codeMap_.findDynamicEntryByStartAddress(funcAddr)
            if (!func) {
              var func = new CodeMap.CodeEntry(0, name, 'SFI')
              this.codeMap_.addCode(funcAddr, func)

              func.funcId = this.functionEntries_.length
              this.functionEntries_.push({ name: name, codes: [] })
            } else if (func.name !== name) {
              // Function object has been overwritten with a new one.
              func.name = name

              func.funcId = this.functionEntries_.length
              this.functionEntries_.push({ name: name, codes: [] })
            }
            // TODO(jarin): Insert the code object into the SFI's code list.
            var entry = this.codeMap_.findDynamicEntryByStartAddress(start)
            if (entry) {
              // TODO(jarin) This does not look correct, we should really
              // update the code object (remove the old one and insert this one).
              if (entry.size === size && entry.func === func) {
                // Entry state has changed.
                entry.state = state
              }
            } else {
              var entry = new CodeMap.CodeEntry(size, name, 'JS')
              this.codeMap_.addCode(start, entry)

              entry.codeId = this.codeEntries_.length

              this.functionEntries_[func.funcId].codes.push(entry.codeId)

              if (state === 0) {
                kind = 'Builtin'
              } else if (state === 1) {
                kind = 'Unopt'
              } else if (state === 2) {
                kind = 'Opt'
              }

              this.codeEntries_.push({
                name: entry.name,
                type: entry.type,
                kind: kind,
                func: func.funcId,
                tm: timestamp,
              })
            }
            return entry
          }

          JsonProfile.prototype.moveCode = function (from, to) {
            try {
              this.codeMap_.moveCode(from, to)
            } catch (e) {
              printErr('Move: unknown source ' + from)
            }
          }

          JsonProfile.prototype.addSourcePositions = function (
            start,
            script,
            startPos,
            endPos,
            sourcePositions,
            inliningPositions,
            inlinedFunctions
          ) {
            var entry = this.codeMap_.findDynamicEntryByStartAddress(start)
            if (!entry) return
            var codeId = entry.codeId

            // Resolve the inlined fucntions list.
            if (inlinedFunctions.length > 0) {
              inlinedFunctions = inlinedFunctions.substring(1).split('S')
              for (var i = 0; i < inlinedFunctions.length; i++) {
                var funcAddr = parseInt(inlinedFunctions[i])
                var func = this.codeMap_.findDynamicEntryByStartAddress(
                  funcAddr
                )
                if (!func || func.funcId === undefined) {
                  printErr('Could not find function ' + inlinedFunctions[i])
                  inlinedFunctions[i] = null
                } else {
                  inlinedFunctions[i] = func.funcId
                }
              }
            } else {
              inlinedFunctions = []
            }

            this.codeEntries_[entry.codeId].source = {
              script: script,
              start: startPos,
              end: endPos,
              positions: sourcePositions,
              inlined: inliningPositions,
              fns: inlinedFunctions,
            }
          }

          function unescapeString(s) {
            s = s.split('\\')
            for (var i = 1; i < s.length; i++) {
              if (s[i] === '') {
                // Double backslash.
                s[i] = '\\'
              } else if (i > 0 && s[i].startsWith('x')) {
                // Escaped Ascii character.
                s[i] =
                  String.fromCharCode(parseInt(s[i].substring(1, 3), 16)) +
                  s[i].substring(3)
              } else if (i > 0 && s[i].startsWith('u')) {
                // Escaped unicode character.
                s[i] =
                  String.fromCharCode(parseInt(s[i].substring(1, 5), 16)) +
                  s[i].substring(5)
              } else {
                if (i > 0 && s[i - 1] !== '\\') {
                  printErr('Malformed source string')
                }
              }
            }
            return s.join('')
          }

          JsonProfile.prototype.addScriptSource = function (
            script,
            url,
            source
          ) {
            this.scripts_[script] = {
              name: unescapeString(url),
              source: unescapeString(source),
            }
          }

          JsonProfile.prototype.deoptCode = function (
            timestamp,
            code,
            inliningId,
            scriptOffset,
            bailoutType,
            sourcePositionText,
            deoptReasonText
          ) {
            let entry = this.codeMap_.findDynamicEntryByStartAddress(code)
            if (entry) {
              let codeId = entry.codeId
              if (!this.codeEntries_[codeId].deopt) {
                // Only add the deopt if there was no deopt before.
                // The subsequent deoptimizations should be lazy deopts for
                // other on-stack activations.
                this.codeEntries_[codeId].deopt = {
                  tm: timestamp,
                  inliningId: inliningId,
                  scriptOffset: scriptOffset,
                  posText: sourcePositionText,
                  reason: deoptReasonText,
                  bailoutType: bailoutType,
                }
              }
            }
          }

          JsonProfile.prototype.deleteCode = function (start) {
            try {
              this.codeMap_.deleteCode(start)
            } catch (e) {
              printErr('Delete: unknown address ' + start)
            }
          }

          JsonProfile.prototype.moveFunc = function (from, to) {
            if (this.codeMap_.findDynamicEntryByStartAddress(from)) {
              this.codeMap_.moveCode(from, to)
            }
          }

          JsonProfile.prototype.findEntry = function (addr) {
            return this.codeMap_.findEntry(addr)
          }

          JsonProfile.prototype.recordTick = function (
            time_ns,
            vmState,
            stack
          ) {
            // TODO(jarin) Resolve the frame-less case (when top of stack is
            // known code).
            var processedStack = []
            for (var i = 0; i < stack.length; i++) {
              var resolved = this.codeMap_.findAddress(stack[i])
              if (resolved) {
                processedStack.push(resolved.entry.codeId, resolved.offset)
              } else {
                processedStack.push(-1, stack[i])
              }
            }
            this.ticks_.push({ tm: time_ns, vm: vmState, s: processedStack })
          }

          function writeJson(s) {
            write(JSON.stringify(s, null, 2))
          }

          JsonProfile.prototype.writeJson = function () {
            // Write out the JSON in a partially manual way to avoid creating too-large
            // strings in one JSON.stringify call when there are a lot of ticks.
            write('{\n')

            write('  "code": ')
            writeJson(this.codeEntries_)
            write(',\n')

            write('  "functions": ')
            writeJson(this.functionEntries_)
            write(',\n')

            write('  "ticks": [\n')
            for (var i = 0; i < this.ticks_.length; i++) {
              write('    ')
              writeJson(this.ticks_[i])
              if (i < this.ticks_.length - 1) {
                write(',\n')
              } else {
                write('\n')
              }
            }
            write('  ],\n')

            write('  "scripts": ')
            writeJson(this.scripts_)

            write('}\n')
          }
        },
        { './codemap.js': 69 },
      ],
      73: [
        function (require, module, exports) {
          // Copyright 2009 the V8 project authors. All rights reserved.
          // Redistribution and use in source and binary forms, with or without
          // modification, are permitted provided that the following conditions are
          // met:
          //
          //     * Redistributions of source code must retain the above copyright
          //       notice, this list of conditions and the following disclaimer.
          //     * Redistributions in binary form must reproduce the above
          //       copyright notice, this list of conditions and the following
          //       disclaimer in the documentation and/or other materials provided
          //       with the distribution.
          //     * Neither the name of Google Inc. nor the names of its
          //       contributors may be used to endorse or promote products derived
          //       from this software without specific prior written permission.
          //
          // THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
          // "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
          // LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
          // A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
          // OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
          // SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
          // LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
          // DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
          // THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
          // (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
          // OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

          /**
           * Constructs a Splay tree.  A splay tree is a self-balancing binary
           * search tree with the additional property that recently accessed
           * elements are quick to access again. It performs basic operations
           * such as insertion, look-up and removal in O(log(n)) amortized time.
           *
           * @constructor
           */
          function SplayTree() {}

          /**
           * Pointer to the root node of the tree.
           *
           * @type {SplayTree.Node}
           * @private
           */
          SplayTree.prototype.root_ = null

          /**
           * @return {boolean} Whether the tree is empty.
           */
          SplayTree.prototype.isEmpty = function () {
            return !this.root_
          }

          /**
           * Inserts a node into the tree with the specified key and value if
           * the tree does not already contain a node with the specified key. If
           * the value is inserted, it becomes the root of the tree.
           *
           * @param {number} key Key to insert into the tree.
           * @param {*} value Value to insert into the tree.
           */
          SplayTree.prototype.insert = function (key, value) {
            if (this.isEmpty()) {
              this.root_ = new SplayTree.Node(key, value)
              return
            }
            // Splay on the key to move the last node on the search path for
            // the key to the root of the tree.
            this.splay_(key)
            if (this.root_.key == key) {
              return
            }
            var node = new SplayTree.Node(key, value)
            if (key > this.root_.key) {
              node.left = this.root_
              node.right = this.root_.right
              this.root_.right = null
            } else {
              node.right = this.root_
              node.left = this.root_.left
              this.root_.left = null
            }
            this.root_ = node
          }

          /**
           * Removes a node with the specified key from the tree if the tree
           * contains a node with this key. The removed node is returned. If the
           * key is not found, an exception is thrown.
           *
           * @param {number} key Key to find and remove from the tree.
           * @return {SplayTree.Node} The removed node.
           */
          SplayTree.prototype.remove = function (key) {
            if (this.isEmpty()) {
              throw Error('Key not found: ' + key)
            }
            this.splay_(key)
            if (this.root_.key != key) {
              throw Error('Key not found: ' + key)
            }
            var removed = this.root_
            if (!this.root_.left) {
              this.root_ = this.root_.right
            } else {
              var right = this.root_.right
              this.root_ = this.root_.left
              // Splay to make sure that the new root has an empty right child.
              this.splay_(key)
              // Insert the original right child as the right child of the new
              // root.
              this.root_.right = right
            }
            return removed
          }

          /**
           * Returns the node having the specified key or null if the tree doesn't contain
           * a node with the specified key.
           *
           * @param {number} key Key to find in the tree.
           * @return {SplayTree.Node} Node having the specified key.
           */
          SplayTree.prototype.find = function (key) {
            if (this.isEmpty()) {
              return null
            }
            this.splay_(key)
            return this.root_.key == key ? this.root_ : null
          }

          /**
           * @return {SplayTree.Node} Node having the minimum key value.
           */
          SplayTree.prototype.findMin = function () {
            if (this.isEmpty()) {
              return null
            }
            var current = this.root_
            while (current.left) {
              current = current.left
            }
            return current
          }

          /**
           * @return {SplayTree.Node} Node having the maximum key value.
           */
          SplayTree.prototype.findMax = function (opt_startNode) {
            if (this.isEmpty()) {
              return null
            }
            var current = opt_startNode || this.root_
            while (current.right) {
              current = current.right
            }
            return current
          }

          /**
           * @return {SplayTree.Node} Node having the maximum key value that
           *     is less or equal to the specified key value.
           */
          SplayTree.prototype.findGreatestLessThan = function (key) {
            if (this.isEmpty()) {
              return null
            }
            // Splay on the key to move the node with the given key or the last
            // node on the search path to the top of the tree.
            this.splay_(key)
            // Now the result is either the root node or the greatest node in
            // the left subtree.
            if (this.root_.key <= key) {
              return this.root_
            } else if (this.root_.left) {
              return this.findMax(this.root_.left)
            } else {
              return null
            }
          }

          /**
           * @return {Array<*>} An array containing all the values of tree's nodes paired
           *     with keys.
           */
          SplayTree.prototype.exportKeysAndValues = function () {
            var result = []
            this.traverse_(function (node) {
              result.push([node.key, node.value])
            })
            return result
          }

          /**
           * @return {Array<*>} An array containing all the values of tree's nodes.
           */
          SplayTree.prototype.exportValues = function () {
            var result = []
            this.traverse_(function (node) {
              result.push(node.value)
            })
            return result
          }

          /**
           * Perform the splay operation for the given key. Moves the node with
           * the given key to the top of the tree.  If no node has the given
           * key, the last node on the search path is moved to the top of the
           * tree. This is the simplified top-down splaying algorithm from:
           * "Self-adjusting Binary Search Trees" by Sleator and Tarjan
           *
           * @param {number} key Key to splay the tree on.
           * @private
           */
          SplayTree.prototype.splay_ = function (key) {
            if (this.isEmpty()) {
              return
            }
            // Create a dummy node.  The use of the dummy node is a bit
            // counter-intuitive: The right child of the dummy node will hold
            // the L tree of the algorithm.  The left child of the dummy node
            // will hold the R tree of the algorithm.  Using a dummy node, left
            // and right will always be nodes and we avoid special cases.
            var dummy, left, right
            dummy = left = right = new SplayTree.Node(null, null)
            var current = this.root_
            while (true) {
              if (key < current.key) {
                if (!current.left) {
                  break
                }
                if (key < current.left.key) {
                  // Rotate right.
                  var tmp = current.left
                  current.left = tmp.right
                  tmp.right = current
                  current = tmp
                  if (!current.left) {
                    break
                  }
                }
                // Link right.
                right.left = current
                right = current
                current = current.left
              } else if (key > current.key) {
                if (!current.right) {
                  break
                }
                if (key > current.right.key) {
                  // Rotate left.
                  var tmp = current.right
                  current.right = tmp.left
                  tmp.left = current
                  current = tmp
                  if (!current.right) {
                    break
                  }
                }
                // Link left.
                left.right = current
                left = current
                current = current.right
              } else {
                break
              }
            }
            // Assemble.
            left.right = current.left
            right.left = current.right
            current.left = dummy.right
            current.right = dummy.left
            this.root_ = current
          }

          /**
           * Performs a preorder traversal of the tree.
           *
           * @param {function(SplayTree.Node)} f Visitor function.
           * @private
           */
          SplayTree.prototype.traverse_ = function (f) {
            var nodesToVisit = [this.root_]
            while (nodesToVisit.length > 0) {
              var node = nodesToVisit.shift()
              if (node == null) {
                continue
              }
              f(node)
              nodesToVisit.push(node.left)
              nodesToVisit.push(node.right)
            }
          }

          /**
           * Constructs a Splay tree node.
           *
           * @param {number} key Key.
           * @param {*} value Value.
           */
          SplayTree.Node = function (key, value) {
            this.key = key
            this.value = value
          }

          /**
           * @type {SplayTree.Node}
           */
          SplayTree.Node.prototype.left = null

          /**
           * @type {SplayTree.Node}
           */
          SplayTree.Node.prototype.right = null

          if (
            typeof module === 'object' &&
            typeof module.exports === 'object'
          ) {
            module.exports = SplayTree
          }
        },
        {},
      ],
    },
    {},
    [7]
  )(7)
})
